
(* This generated code requires the following version of MenhirLib: *)

let () =
  MenhirLib.StaticVersion.require_20181006

module MenhirBasics = struct
  
  exception Error
  
  type token = 
    | WITH
    | WHILE_LWT
    | WHILE
    | WHEN
    | VIRTUAL
    | VAL
    | UNDERSCORE
    | UIDENT of (
# 610 "parser_raw.mly"
       (string)
# 23 "parser_raw.ml"
  )
    | TYPE
    | TRY_LWT
    | TRY
    | TRUE
    | TO
    | TILDE
    | THEN
    | STRUCT
    | STRING of (
# 602 "parser_raw.mly"
       (string * string option)
# 36 "parser_raw.ml"
  )
    | STAR
    | SIG
    | SEMISEMI
    | SEMI
    | RPAREN
    | REC
    | RBRACKET
    | RBRACE
    | QUOTE
    | QUESTIONQUESTION
    | QUESTION
    | PRIVATE
    | PREFIXOP of (
# 587 "parser_raw.mly"
       (string)
# 53 "parser_raw.ml"
  )
    | PLUSEQ
    | PLUSDOT
    | PLUS
    | PERCENT
    | OR
    | OPTLABEL of (
# 581 "parser_raw.mly"
       (string)
# 63 "parser_raw.ml"
  )
    | OPEN
    | OF
    | OBJECT
    | NONREC
    | NEW
    | MUTABLE
    | MODULE
    | MINUSGREATER
    | MINUSDOT
    | MINUS
    | METHOD
    | MATCH_LWT
    | MATCH
    | LPAREN
    | LIDENT of (
# 564 "parser_raw.mly"
       (string)
# 82 "parser_raw.ml"
  )
    | LET_LWT
    | LETOP of (
# 545 "parser_raw.mly"
       (string)
# 88 "parser_raw.ml"
  )
    | LET
    | LESSMINUS
    | LESS
    | LBRACKETPERCENTPERCENT
    | LBRACKETPERCENT
    | LBRACKETLESS
    | LBRACKETGREATER
    | LBRACKETBAR
    | LBRACKETATATAT
    | LBRACKETATAT
    | LBRACKETAT
    | LBRACKET
    | LBRACELESS
    | LBRACE
    | LAZY
    | LABEL of (
# 551 "parser_raw.mly"
       (string)
# 108 "parser_raw.ml"
  )
    | INT of (
# 549 "parser_raw.mly"
       (string * char option)
# 113 "parser_raw.ml"
  )
    | INITIALIZER
    | INHERIT
    | INFIXOP4 of (
# 543 "parser_raw.mly"
       (string)
# 120 "parser_raw.ml"
  )
    | INFIXOP3 of (
# 542 "parser_raw.mly"
       (string)
# 125 "parser_raw.ml"
  )
    | INFIXOP2 of (
# 541 "parser_raw.mly"
       (string)
# 130 "parser_raw.ml"
  )
    | INFIXOP1 of (
# 540 "parser_raw.mly"
       (string)
# 135 "parser_raw.ml"
  )
    | INFIXOP0 of (
# 539 "parser_raw.mly"
       (string)
# 140 "parser_raw.ml"
  )
    | INCLUDE
    | IN
    | IF
    | HASHOP of (
# 599 "parser_raw.mly"
       (string)
# 148 "parser_raw.ml"
  )
    | HASH
    | GREATERRBRACKET
    | GREATERRBRACE
    | GREATERDOT
    | GREATER
    | FUNCTOR
    | FUNCTION
    | FUN
    | FOR_LWT
    | FOR
    | FLOAT of (
# 527 "parser_raw.mly"
       (string * char option)
# 163 "parser_raw.ml"
  )
    | FINALLY_LWT
    | FALSE
    | EXTERNAL
    | EXCEPTION
    | EQUAL
    | EOL
    | EOF
    | END
    | ELSE
    | DOWNTO
    | DOTTILDE
    | DOTOP of (
# 544 "parser_raw.mly"
       (string)
# 179 "parser_raw.ml"
  )
    | DOTLESS
    | DOTDOT
    | DOT
    | DONE
    | DOCSTRING of (
# 618 "parser_raw.mly"
       (Docstrings.docstring)
# 188 "parser_raw.ml"
  )
    | DO
    | CONSTRAINT
    | COMMENT of (
# 617 "parser_raw.mly"
       (string * Location.t)
# 195 "parser_raw.ml"
  )
    | COMMA
    | COLONGREATER
    | COLONEQUAL
    | COLONCOLON
    | COLON
    | CLASS
    | CHAR of (
# 507 "parser_raw.mly"
       (char)
# 206 "parser_raw.ml"
  )
    | BEGIN
    | BARRBRACKET
    | BARBAR
    | BAR
    | BANG
    | BACKQUOTE
    | ASSERT
    | AS
    | ANDOP of (
# 546 "parser_raw.mly"
       (string)
# 219 "parser_raw.ml"
  )
    | AND
    | AMPERSAND
    | AMPERAMPER
  
end

include MenhirBasics

let _eRR =
  MenhirBasics.Error

# 1 "parser_raw.mly"
  
[@@@ocaml.warning "-9"]
open Asttypes
open Longident
open Parsetree
open Ast_helper
open Docstrings
open Docstrings.WithMenhir
let mkloc = Location.mkloc
let mknoloc = Location.mknoloc
let make_loc (startpos, endpos) = {
  Location.loc_start = startpos;
  Location.loc_end = endpos;
  Location.loc_ghost = false;
}
let ghost_loc (startpos, endpos) = {
  Location.loc_start = startpos;
  Location.loc_end = endpos;
  Location.loc_ghost = true;
}
let mktyp ~loc d = Typ.mk ~loc:(make_loc loc) d
let mkpat ~loc d = Pat.mk ~loc:(make_loc loc) d
let mkexp ~loc d = Exp.mk ~loc:(make_loc loc) d
let mkmty ~loc ?attrs d = Mty.mk ~loc:(make_loc loc) ?attrs d
let mksig ~loc d = Sig.mk ~loc:(make_loc loc) d
let mkmod ~loc ?attrs d = Mod.mk ~loc:(make_loc loc) ?attrs d
let mkstr ~loc d = Str.mk ~loc:(make_loc loc) d
let mkclass ~loc ?attrs d = Cl.mk ~loc:(make_loc loc) ?attrs d
let mkcty ~loc ?attrs d = Cty.mk ~loc:(make_loc loc) ?attrs d
let pstr_typext (te, ext) =
  (Pstr_typext te, ext)
let pstr_primitive (vd, ext) =
  (Pstr_primitive vd, ext)
let pstr_type ((nr, ext), tys) =
  (Pstr_type (nr, tys), ext)
let pstr_exception (te, ext) =
  (Pstr_exception te, ext)
let pstr_include (body, ext) =
  (Pstr_include body, ext)
let pstr_recmodule (ext, bindings) =
  (Pstr_recmodule bindings, ext)
let psig_typext (te, ext) =
  (Psig_typext te, ext)
let psig_value (vd, ext) =
  (Psig_value vd, ext)
let psig_type ((nr, ext), tys) =
  (Psig_type (nr, tys), ext)
let psig_typesubst ((nr, ext), tys) =
  assert (nr = Recursive); (* see [no_nonrec_flag] *)
  (Psig_typesubst tys, ext)
let psig_exception (te, ext) =
  (Psig_exception te, ext)
let psig_include (body, ext) =
  (Psig_include body, ext)
let mkctf ~loc ?attrs ?docs d =
  Ctf.mk ~loc:(make_loc loc) ?attrs ?docs d
let mkcf ~loc ?attrs ?docs d =
  Cf.mk ~loc:(make_loc loc) ?attrs ?docs d
let mkrhs rhs loc = mkloc rhs (make_loc loc)
let ghrhs rhs loc = mkloc rhs (ghost_loc loc)
let push_loc x acc =
  if x.Location.loc_ghost
  then acc
  else x :: acc
let reloc_pat ~loc x =
  { x with ppat_loc = make_loc loc;
           ppat_loc_stack = push_loc x.ppat_loc x.ppat_loc_stack };;
let reloc_exp ~loc x =
  { x with pexp_loc = make_loc loc;
           pexp_loc_stack = push_loc x.pexp_loc x.pexp_loc_stack };;
let reloc_typ ~loc x =
  { x with ptyp_loc = make_loc loc;
           ptyp_loc_stack = push_loc x.ptyp_loc x.ptyp_loc_stack };;
let mkexpvar ~loc (name : string) =
  mkexp ~loc (Pexp_ident(mkrhs (Lident name) loc))
let mkoperator =
  mkexpvar
let mkpatvar ~loc name =
  mkpat ~loc (Ppat_var (mkrhs name loc))
(*
  Ghost expressions and patterns:
  expressions and patterns that do not appear explicitly in the
  source file they have the loc_ghost flag set to true.
  Then the profiler will not try to instrument them and the
  -annot option will not try to display their type.
  Every grammar rule that generates an element with a location must
  make at most one non-ghost element, the topmost one.
  How to tell whether your location must be ghost:
  A location corresponds to a range of characters in the source file.
  If the location contains a piece of code that is syntactically
  valid (according to the documentation), and corresponds to the
  AST node, then the location must be real; in all other cases,
  it must be ghost.
*)
let ghexp ~loc d = Exp.mk ~loc:(ghost_loc loc) d
let ghpat ~loc d = Pat.mk ~loc:(ghost_loc loc) d
let ghtyp ~loc d = Typ.mk ~loc:(ghost_loc loc) d
let ghloc ~loc d = { txt = d; loc = ghost_loc loc }
let ghstr ~loc d = Str.mk ~loc:(ghost_loc loc) d
let ghsig ~loc d = Sig.mk ~loc:(ghost_loc loc) d
let mkinfix arg1 op arg2 =
  Pexp_apply(op, [Nolabel, arg1; Nolabel, arg2])
let neg_string f =
  if String.length f > 0 && f.[0] = '-'
  then String.sub f 1 (String.length f - 1)
  else "-" ^ f
let mkuminus ~oploc name arg =
  match name, arg.pexp_desc with
  | "-", Pexp_constant(Pconst_integer (n,m)) ->
      Pexp_constant(Pconst_integer(neg_string n,m))
  | ("-" | "-."), Pexp_constant(Pconst_float (f, m)) ->
      Pexp_constant(Pconst_float(neg_string f, m))
  | _ ->
      Pexp_apply(mkoperator ~loc:oploc ("~" ^ name), [Nolabel, arg])
let mkuplus ~oploc name arg =
  let desc = arg.pexp_desc in
  match name, desc with
  | "+", Pexp_constant(Pconst_integer _)
  | ("+" | "+."), Pexp_constant(Pconst_float _) -> desc
  | _ ->
      Pexp_apply(mkoperator ~loc:oploc ("~" ^ name), [Nolabel, arg])
(* TODO define an abstraction boundary between locations-as-pairs
   and locations-as-Location.t; it should be clear when we move from
   one world to the other *)
let mkexp_cons_desc consloc args =
  Pexp_construct(mkrhs (Lident "::") consloc, Some args)
let mkexp_cons ~loc consloc args =
  mkexp ~loc (mkexp_cons_desc consloc args)
let mkpat_cons_desc consloc args =
  Ppat_construct(mkrhs (Lident "::") consloc, Some args)
let mkpat_cons ~loc consloc args =
  mkpat ~loc (mkpat_cons_desc consloc args)
let ghexp_cons_desc consloc args =
  Pexp_construct(ghrhs (Lident "::") consloc, Some args)
let ghpat_cons_desc consloc args =
  Ppat_construct(ghrhs (Lident "::") consloc, Some args)
let rec mktailexp nilloc = let open Location in function
    [] ->
      let nil = ghloc ~loc:nilloc (Lident "[]") in
      Pexp_construct (nil, None), nilloc
  | e1 :: el ->
      let exp_el, el_loc = mktailexp nilloc el in
      let loc = (e1.pexp_loc.loc_start, snd el_loc) in
      let arg = ghexp ~loc (Pexp_tuple [e1; ghexp ~loc:el_loc exp_el]) in
      ghexp_cons_desc loc arg, loc
let rec mktailpat nilloc = let open Location in function
    [] ->
      let nil = ghloc ~loc:nilloc (Lident "[]") in
      Ppat_construct (nil, None), nilloc
  | p1 :: pl ->
      let pat_pl, el_loc = mktailpat nilloc pl in
      let loc = (p1.ppat_loc.loc_start, snd el_loc) in
      let arg = ghpat ~loc (Ppat_tuple [p1; ghpat ~loc:el_loc pat_pl]) in
      ghpat_cons_desc loc arg, loc
let mkstrexp e attrs =
  { pstr_desc = Pstr_eval (e, attrs); pstr_loc = e.pexp_loc }
let mkexp_constraint ~loc e (t1, t2) =
  match t1, t2 with
  | Some t, None -> ghexp ~loc (Pexp_constraint(e, t))
  | _, Some t -> ghexp ~loc (Pexp_coerce(e, t1, t))
  | None, None -> assert false
let mkexp_opt_constraint ~loc e = function
  | None -> e
  | Some constraint_ -> mkexp_constraint ~loc e constraint_
let mkpat_opt_constraint ~loc p = function
  | None -> p
  | Some typ -> mkpat ~loc (Ppat_constraint(p, typ))
let syntax_error () =
  raise Syntaxerr.Escape_error
let unclosed opening_name opening_loc closing_name closing_loc =
  raise(Syntaxerr.Error(Syntaxerr.Unclosed(make_loc opening_loc, opening_name,
                                           make_loc closing_loc, closing_name)))
let expecting loc nonterm =
    raise Syntaxerr.(Error(Expecting(make_loc loc, nonterm)))
let not_expecting loc nonterm =
    raise Syntaxerr.(Error(Not_expecting(make_loc loc, nonterm)))
let dotop_fun ~loc dotop =
  (* We could use ghexp here, but sticking to mkexp for parser.mly
     compatibility. TODO improve parser.mly *)
  mkexp ~loc (Pexp_ident (ghloc ~loc dotop))
let array_function ~loc str name =
  ghloc ~loc (Ldot(Lident str,
                   (if !Clflags.fast then "unsafe_" ^ name else name)))
let array_get_fun ~loc =
  ghexp ~loc (Pexp_ident(array_function ~loc "Array" "get"))
let string_get_fun ~loc =
  ghexp ~loc (Pexp_ident(array_function ~loc "String" "get"))
let array_set_fun ~loc =
  ghexp ~loc (Pexp_ident(array_function ~loc "Array" "set"))
let string_set_fun ~loc =
  ghexp ~loc (Pexp_ident(array_function ~loc "String" "set"))
let index_get ~loc get_fun array index =
  let args = [Nolabel, array; Nolabel, index] in
   mkexp ~loc (Pexp_apply(get_fun, args))
let index_set ~loc set_fun array index value =
  let args = [Nolabel, array; Nolabel, index; Nolabel, value] in
   mkexp ~loc (Pexp_apply(set_fun, args))
let array_get ~loc = index_get ~loc (array_get_fun ~loc)
let string_get ~loc = index_get ~loc (string_get_fun ~loc)
let dotop_get ~loc dotop = index_get ~loc (dotop_fun ~loc dotop)
let array_set ~loc = index_set ~loc (array_set_fun ~loc)
let string_set ~loc = index_set ~loc (string_set_fun ~loc)
let dotop_set ~loc dotop = index_set ~loc (dotop_fun ~loc dotop)
let bigarray_function ~loc str name =
  ghloc ~loc (Ldot(Ldot(Lident "Bigarray", str), name))
let bigarray_untuplify = function
    { pexp_desc = Pexp_tuple explist; pexp_loc = _ } -> explist
  | exp -> [exp]
let bigarray_get ~loc arr arg =
  let mkexp, ghexp = mkexp ~loc, ghexp ~loc in
  let bigarray_function = bigarray_function ~loc in
  let get = if !Clflags.fast then "unsafe_get" else "get" in
  match bigarray_untuplify arg with
    [c1] ->
      mkexp(Pexp_apply(ghexp(Pexp_ident(bigarray_function "Array1" get)),
                       [Nolabel, arr; Nolabel, c1]))
  | [c1;c2] ->
      mkexp(Pexp_apply(ghexp(Pexp_ident(bigarray_function "Array2" get)),
                       [Nolabel, arr; Nolabel, c1; Nolabel, c2]))
  | [c1;c2;c3] ->
      mkexp(Pexp_apply(ghexp(Pexp_ident(bigarray_function "Array3" get)),
                       [Nolabel, arr; Nolabel, c1; Nolabel, c2; Nolabel, c3]))
  | coords ->
      mkexp(Pexp_apply(ghexp(Pexp_ident(bigarray_function "Genarray" "get")),
                       [Nolabel, arr; Nolabel, ghexp(Pexp_array coords)]))
let bigarray_set ~loc arr arg newval =
  let mkexp, ghexp = mkexp ~loc, ghexp ~loc in
  let bigarray_function = bigarray_function ~loc in
  let set = if !Clflags.fast then "unsafe_set" else "set" in
  match bigarray_untuplify arg with
    [c1] ->
      mkexp(Pexp_apply(ghexp(Pexp_ident(bigarray_function "Array1" set)),
                       [Nolabel, arr; Nolabel, c1; Nolabel, newval]))
  | [c1;c2] ->
      mkexp(Pexp_apply(ghexp(Pexp_ident(bigarray_function "Array2" set)),
                       [Nolabel, arr; Nolabel, c1;
                        Nolabel, c2; Nolabel, newval]))
  | [c1;c2;c3] ->
      mkexp(Pexp_apply(ghexp(Pexp_ident(bigarray_function "Array3" set)),
                       [Nolabel, arr; Nolabel, c1;
                        Nolabel, c2; Nolabel, c3; Nolabel, newval]))
  | coords ->
      mkexp(Pexp_apply(ghexp(Pexp_ident(bigarray_function "Genarray" "set")),
                       [Nolabel, arr;
                        Nolabel, ghexp(Pexp_array coords);
                        Nolabel, newval]))
let lapply ~loc p1 p2 =
  if !Clflags.applicative_functors
  then Lapply(p1, p2)
  else raise (Syntaxerr.Error(
                  Syntaxerr.Applicative_path (make_loc loc)))
let exp_of_longident ~loc lid =
  mkexp ~loc (Pexp_ident {lid with txt = Lident(Longident.last lid.txt)})
(* [loc_map] could be [Location.map]. *)
let loc_map (f : 'a -> 'b) (x : 'a Location.loc) : 'b Location.loc =
  { x with txt = f x.txt }
let loc_last (id : Longident.t Location.loc) : string Location.loc =
  loc_map Longident.last id
let loc_lident (id : string Location.loc) : Longident.t Location.loc =
  loc_map (fun x -> Lident x) id
let exp_of_label ~loc lbl =
  mkexp ~loc (Pexp_ident (loc_lident lbl))
let pat_of_label ~loc lbl =
  mkpat ~loc (Ppat_var (loc_last lbl))
let mk_newtypes ~loc newtypes exp =
  let mkexp = mkexp ~loc in
  List.fold_right (fun newtype exp -> mkexp (Pexp_newtype (newtype, exp)))
    newtypes exp
let wrap_type_annotation ~loc newtypes core_type body =
  let mkexp, ghtyp = mkexp ~loc, ghtyp ~loc in
  let mk_newtypes = mk_newtypes ~loc in
  let exp = mkexp(Pexp_constraint(body,core_type)) in
  let exp = mk_newtypes newtypes exp in
  (exp, ghtyp(Ptyp_poly(newtypes, Typ.varify_constructors newtypes core_type)))
let wrap_exp_attrs ~loc body (ext, attrs) =
  let ghexp = ghexp ~loc in
  (* todo: keep exact location for the entire attribute *)
  let body = {body with pexp_attributes = attrs @ body.pexp_attributes} in
  match ext with
  | None -> body
  | Some id -> ghexp(Pexp_extension (id, PStr [mkstrexp body []]))
let mkexp_attrs ~loc d attrs =
  wrap_exp_attrs ~loc (mkexp ~loc d) attrs
let wrap_typ_attrs ~loc typ (ext, attrs) =
  (* todo: keep exact location for the entire attribute *)
  let typ = {typ with ptyp_attributes = attrs @ typ.ptyp_attributes} in
  match ext with
  | None -> typ
  | Some id -> ghtyp ~loc (Ptyp_extension (id, PTyp typ))
let wrap_pat_attrs ~loc pat (ext, attrs) =
  (* todo: keep exact location for the entire attribute *)
  let pat = {pat with ppat_attributes = attrs @ pat.ppat_attributes} in
  match ext with
  | None -> pat
  | Some id -> ghpat ~loc (Ppat_extension (id, PPat (pat, None)))
let mkpat_attrs ~loc d attrs =
  wrap_pat_attrs ~loc (mkpat ~loc d) attrs
let wrap_class_attrs ~loc:_ body attrs =
  {body with pcl_attributes = attrs @ body.pcl_attributes}
let wrap_mod_attrs ~loc:_ attrs body =
  {body with pmod_attributes = attrs @ body.pmod_attributes}
let wrap_mty_attrs ~loc:_ attrs body =
  {body with pmty_attributes = attrs @ body.pmty_attributes}
let wrap_str_ext ~loc body ext =
  match ext with
  | None -> body
  | Some id -> ghstr ~loc (Pstr_extension ((id, PStr [body]), []))
let wrap_mkstr_ext ~loc (item, ext) =
  wrap_str_ext ~loc (mkstr ~loc item) ext
let wrap_sig_ext ~loc body ext =
  match ext with
  | None -> body
  | Some id -> ghsig ~loc (Psig_extension ((id, PSig [body]), []))
let wrap_mksig_ext ~loc (item, ext) =
  wrap_sig_ext ~loc (mksig ~loc item) ext
let text_str pos = Str.text (rhs_text pos)
let text_sig pos = Sig.text (rhs_text pos)
let text_cstr pos = Cf.text (rhs_text pos)
let text_csig pos = Ctf.text (rhs_text pos)
let text_def pos = [Ptop_def (Str.text (rhs_text pos))]
let extra_text startpos endpos text items =
  match items with
  | [] ->
      let post = rhs_post_text endpos in
      let post_extras = rhs_post_extra_text endpos in
      text post @ text post_extras
  | _ :: _ ->
      let pre_extras = rhs_pre_extra_text startpos in
      let post_extras = rhs_post_extra_text endpos in
        text pre_extras @ items @ text post_extras
let extra_str p1 p2 items = extra_text p1 p2 Str.text items
let extra_sig p1 p2 items = extra_text p1 p2 Sig.text items
let extra_cstr p1 p2 items = extra_text p1 p2 Cf.text items
let extra_csig p1 p2 items = extra_text p1 p2 Ctf.text items
let extra_def p1 p2 items =
  extra_text p1 p2 (fun txt -> [Ptop_def (Str.text txt)]) items
let extra_rhs_core_type ct ~pos =
  let docs = rhs_info pos in
  { ct with ptyp_attributes = add_info_attrs docs ct.ptyp_attributes }
let mklb first ~loc (p, e) attrs =
  {
    lb_pattern = p;
    lb_expression = e;
    lb_attributes = attrs;
    lb_docs = symbol_docs_lazy loc;
    lb_text = (if first then empty_text_lazy
               else symbol_text_lazy (fst loc));
    lb_loc = make_loc loc;
  }
let mklbs ~loc ext rf lb =
  {
    lbs_bindings = [lb];
    lbs_rec = rf;
    lbs_extension = ext ;
    lbs_loc = make_loc loc;
  }
let addlb lbs lb =
  { lbs with lbs_bindings = lb :: lbs.lbs_bindings }
let val_of_let_bindings ~loc lbs =
  let bindings =
    List.map
      (fun lb ->
         Vb.mk ~loc:lb.lb_loc ~attrs:lb.lb_attributes
           ~docs:(Lazy.force lb.lb_docs)
           ~text:(Lazy.force lb.lb_text)
           lb.lb_pattern lb.lb_expression)
      lbs.lbs_bindings
  in
  let str = mkstr ~loc (Pstr_value(lbs.lbs_rec, List.rev bindings)) in
  match lbs.lbs_extension with
  | None -> str
  | Some id -> ghstr ~loc (Pstr_extension((id, PStr [str]), []))
let expr_of_let_bindings ~loc lbs body =
  let bindings =
    List.map
      (fun lb ->
         Vb.mk ~loc:lb.lb_loc ~attrs:lb.lb_attributes
           lb.lb_pattern lb.lb_expression)
      lbs.lbs_bindings
  in
    mkexp_attrs ~loc (Pexp_let(lbs.lbs_rec, List.rev bindings, body))
      (lbs.lbs_extension, [])
let class_of_let_bindings ~loc lbs body =
  let bindings =
    List.map
      (fun lb ->
         Vb.mk ~loc:lb.lb_loc ~attrs:lb.lb_attributes
           lb.lb_pattern lb.lb_expression)
      lbs.lbs_bindings
  in
    (* Our use of let_bindings(no_ext) guarantees the following: *)
    assert (lbs.lbs_extension = None);
    mkclass ~loc (Pcl_let (lbs.lbs_rec, List.rev bindings, body))
(* Alternatively, we could keep the generic module type in the Parsetree
   and extract the package type during type-checking. In that case,
   the assertions below should be turned into explicit checks. *)
let package_type_of_module_type pmty =
  let err loc s =
    raise (Syntaxerr.Error (Syntaxerr.Invalid_package_type (loc, s)))
  in
  let map_cstr = function
    | Pwith_type (lid, ptyp) ->
        let loc = ptyp.ptype_loc in
        if ptyp.ptype_params <> [] then
          err loc "parametrized types are not supported";
        if ptyp.ptype_cstrs <> [] then
          err loc "constrained types are not supported";
        if ptyp.ptype_private <> Public then
          err loc "private types are not supported";
        (* restrictions below are checked by the 'with_constraint' rule *)
        assert (ptyp.ptype_kind = Ptype_abstract);
        assert (ptyp.ptype_attributes = []);
        let ty =
          match ptyp.ptype_manifest with
          | Some ty -> ty
          | None -> assert false
        in
        (lid, ty)
    | _ ->
        err pmty.pmty_loc "only 'with type t =' constraints are supported"
  in
  match pmty with
  | {pmty_desc = Pmty_ident lid} -> (lid, [])
  | {pmty_desc = Pmty_with({pmty_desc = Pmty_ident lid}, cstrs)} ->
      (lid, List.map map_cstr cstrs)
  | _ ->
      err pmty.pmty_loc
        "only module type identifier and 'with type' constraints are supported"
let mk_directive_arg ~loc k =
  { pdira_desc = k;
    pdira_loc = make_loc loc;
  }
let mk_directive ~loc name arg =
  Ptop_dir {
      pdir_name = name;
      pdir_arg = arg;
      pdir_loc = make_loc loc;
    }
let merloc startpos ?endpos x =
  let endpos = match endpos with
    | None -> x.pexp_loc.Location.loc_end
    | Some endpos -> endpos
  in
  let loc = make_loc (startpos, endpos) in
  let str = mkloc "merlin.loc" loc in
  let attr = { attr_name = str; attr_loc = loc; attr_payload = PStr [] } in
  { x with pexp_attributes = attr :: x.pexp_attributes }
let val_of_lwt_bindings ~loc lbs =
  let bindings =
    List.map
      (fun lb ->
         Vb.mk ~loc:lb.lb_loc ~attrs:lb.lb_attributes
           ~docs:(Lazy.force lb.lb_docs)
           ~text:(Lazy.force lb.lb_text)
           lb.lb_pattern (Fake.app Fake.Lwt.un_lwt lb.lb_expression))
      lbs.lbs_bindings
  in
  let str = mkstr ~loc (Pstr_value(lbs.lbs_rec, List.rev bindings)) in
  match lbs.lbs_extension with
  | None -> str
  | Some id -> ghstr ~loc (Pstr_extension((id, PStr [str]), []))
let expr_of_lwt_bindings ~loc lbs body =
  let bindings =
    List.map
      (fun lb ->
         Vb.mk ~loc:lb.lb_loc ~attrs:lb.lb_attributes
           lb.lb_pattern (Fake.app Fake.Lwt.un_lwt lb.lb_expression))
      lbs.lbs_bindings
  in
  Fake.app Fake.Lwt.in_lwt
    (mkexp_attrs ~loc (Pexp_let(lbs.lbs_rec, List.rev bindings, body))
       (lbs.lbs_extension, []))

# 706 "parser_raw.ml"

module Tables = struct
  
  include MenhirBasics
  
  let token2terminal : token -> int =
    fun _tok ->
      match _tok with
      | AMPERAMPER ->
          131
      | AMPERSAND ->
          130
      | AND ->
          129
      | ANDOP _ ->
          128
      | AS ->
          127
      | ASSERT ->
          126
      | BACKQUOTE ->
          125
      | BANG ->
          124
      | BAR ->
          123
      | BARBAR ->
          122
      | BARRBRACKET ->
          121
      | BEGIN ->
          120
      | CHAR _ ->
          119
      | CLASS ->
          118
      | COLON ->
          117
      | COLONCOLON ->
          116
      | COLONEQUAL ->
          115
      | COLONGREATER ->
          114
      | COMMA ->
          113
      | COMMENT _ ->
          112
      | CONSTRAINT ->
          111
      | DO ->
          110
      | DOCSTRING _ ->
          109
      | DONE ->
          108
      | DOT ->
          107
      | DOTDOT ->
          106
      | DOTLESS ->
          105
      | DOTOP _ ->
          104
      | DOTTILDE ->
          103
      | DOWNTO ->
          102
      | ELSE ->
          101
      | END ->
          100
      | EOF ->
          99
      | EOL ->
          98
      | EQUAL ->
          97
      | EXCEPTION ->
          96
      | EXTERNAL ->
          95
      | FALSE ->
          94
      | FINALLY_LWT ->
          93
      | FLOAT _ ->
          92
      | FOR ->
          91
      | FOR_LWT ->
          90
      | FUN ->
          89
      | FUNCTION ->
          88
      | FUNCTOR ->
          87
      | GREATER ->
          86
      | GREATERDOT ->
          85
      | GREATERRBRACE ->
          84
      | GREATERRBRACKET ->
          83
      | HASH ->
          82
      | HASHOP _ ->
          81
      | IF ->
          80
      | IN ->
          79
      | INCLUDE ->
          78
      | INFIXOP0 _ ->
          77
      | INFIXOP1 _ ->
          76
      | INFIXOP2 _ ->
          75
      | INFIXOP3 _ ->
          74
      | INFIXOP4 _ ->
          73
      | INHERIT ->
          72
      | INITIALIZER ->
          71
      | INT _ ->
          70
      | LABEL _ ->
          69
      | LAZY ->
          68
      | LBRACE ->
          67
      | LBRACELESS ->
          66
      | LBRACKET ->
          65
      | LBRACKETAT ->
          64
      | LBRACKETATAT ->
          63
      | LBRACKETATATAT ->
          62
      | LBRACKETBAR ->
          61
      | LBRACKETGREATER ->
          60
      | LBRACKETLESS ->
          59
      | LBRACKETPERCENT ->
          58
      | LBRACKETPERCENTPERCENT ->
          57
      | LESS ->
          56
      | LESSMINUS ->
          55
      | LET ->
          54
      | LETOP _ ->
          53
      | LET_LWT ->
          52
      | LIDENT _ ->
          51
      | LPAREN ->
          50
      | MATCH ->
          49
      | MATCH_LWT ->
          48
      | METHOD ->
          47
      | MINUS ->
          46
      | MINUSDOT ->
          45
      | MINUSGREATER ->
          44
      | MODULE ->
          43
      | MUTABLE ->
          42
      | NEW ->
          41
      | NONREC ->
          40
      | OBJECT ->
          39
      | OF ->
          38
      | OPEN ->
          37
      | OPTLABEL _ ->
          36
      | OR ->
          35
      | PERCENT ->
          34
      | PLUS ->
          33
      | PLUSDOT ->
          32
      | PLUSEQ ->
          31
      | PREFIXOP _ ->
          30
      | PRIVATE ->
          29
      | QUESTION ->
          28
      | QUESTIONQUESTION ->
          27
      | QUOTE ->
          26
      | RBRACE ->
          25
      | RBRACKET ->
          24
      | REC ->
          23
      | RPAREN ->
          22
      | SEMI ->
          21
      | SEMISEMI ->
          20
      | SIG ->
          19
      | STAR ->
          18
      | STRING _ ->
          17
      | STRUCT ->
          16
      | THEN ->
          15
      | TILDE ->
          14
      | TO ->
          13
      | TRUE ->
          12
      | TRY ->
          11
      | TRY_LWT ->
          10
      | TYPE ->
          9
      | UIDENT _ ->
          8
      | UNDERSCORE ->
          7
      | VAL ->
          6
      | VIRTUAL ->
          5
      | WHEN ->
          4
      | WHILE ->
          3
      | WHILE_LWT ->
          2
      | WITH ->
          1
  
  and error_terminal =
    0
  
  and token2value : token -> Obj.t =
    fun _tok ->
      match _tok with
      | AMPERAMPER ->
          Obj.repr ()
      | AMPERSAND ->
          Obj.repr ()
      | AND ->
          Obj.repr ()
      | ANDOP _v ->
          Obj.repr _v
      | AS ->
          Obj.repr ()
      | ASSERT ->
          Obj.repr ()
      | BACKQUOTE ->
          Obj.repr ()
      | BANG ->
          Obj.repr ()
      | BAR ->
          Obj.repr ()
      | BARBAR ->
          Obj.repr ()
      | BARRBRACKET ->
          Obj.repr ()
      | BEGIN ->
          Obj.repr ()
      | CHAR _v ->
          Obj.repr _v
      | CLASS ->
          Obj.repr ()
      | COLON ->
          Obj.repr ()
      | COLONCOLON ->
          Obj.repr ()
      | COLONEQUAL ->
          Obj.repr ()
      | COLONGREATER ->
          Obj.repr ()
      | COMMA ->
          Obj.repr ()
      | COMMENT _v ->
          Obj.repr _v
      | CONSTRAINT ->
          Obj.repr ()
      | DO ->
          Obj.repr ()
      | DOCSTRING _v ->
          Obj.repr _v
      | DONE ->
          Obj.repr ()
      | DOT ->
          Obj.repr ()
      | DOTDOT ->
          Obj.repr ()
      | DOTLESS ->
          Obj.repr ()
      | DOTOP _v ->
          Obj.repr _v
      | DOTTILDE ->
          Obj.repr ()
      | DOWNTO ->
          Obj.repr ()
      | ELSE ->
          Obj.repr ()
      | END ->
          Obj.repr ()
      | EOF ->
          Obj.repr ()
      | EOL ->
          Obj.repr ()
      | EQUAL ->
          Obj.repr ()
      | EXCEPTION ->
          Obj.repr ()
      | EXTERNAL ->
          Obj.repr ()
      | FALSE ->
          Obj.repr ()
      | FINALLY_LWT ->
          Obj.repr ()
      | FLOAT _v ->
          Obj.repr _v
      | FOR ->
          Obj.repr ()
      | FOR_LWT ->
          Obj.repr ()
      | FUN ->
          Obj.repr ()
      | FUNCTION ->
          Obj.repr ()
      | FUNCTOR ->
          Obj.repr ()
      | GREATER ->
          Obj.repr ()
      | GREATERDOT ->
          Obj.repr ()
      | GREATERRBRACE ->
          Obj.repr ()
      | GREATERRBRACKET ->
          Obj.repr ()
      | HASH ->
          Obj.repr ()
      | HASHOP _v ->
          Obj.repr _v
      | IF ->
          Obj.repr ()
      | IN ->
          Obj.repr ()
      | INCLUDE ->
          Obj.repr ()
      | INFIXOP0 _v ->
          Obj.repr _v
      | INFIXOP1 _v ->
          Obj.repr _v
      | INFIXOP2 _v ->
          Obj.repr _v
      | INFIXOP3 _v ->
          Obj.repr _v
      | INFIXOP4 _v ->
          Obj.repr _v
      | INHERIT ->
          Obj.repr ()
      | INITIALIZER ->
          Obj.repr ()
      | INT _v ->
          Obj.repr _v
      | LABEL _v ->
          Obj.repr _v
      | LAZY ->
          Obj.repr ()
      | LBRACE ->
          Obj.repr ()
      | LBRACELESS ->
          Obj.repr ()
      | LBRACKET ->
          Obj.repr ()
      | LBRACKETAT ->
          Obj.repr ()
      | LBRACKETATAT ->
          Obj.repr ()
      | LBRACKETATATAT ->
          Obj.repr ()
      | LBRACKETBAR ->
          Obj.repr ()
      | LBRACKETGREATER ->
          Obj.repr ()
      | LBRACKETLESS ->
          Obj.repr ()
      | LBRACKETPERCENT ->
          Obj.repr ()
      | LBRACKETPERCENTPERCENT ->
          Obj.repr ()
      | LESS ->
          Obj.repr ()
      | LESSMINUS ->
          Obj.repr ()
      | LET ->
          Obj.repr ()
      | LETOP _v ->
          Obj.repr _v
      | LET_LWT ->
          Obj.repr ()
      | LIDENT _v ->
          Obj.repr _v
      | LPAREN ->
          Obj.repr ()
      | MATCH ->
          Obj.repr ()
      | MATCH_LWT ->
          Obj.repr ()
      | METHOD ->
          Obj.repr ()
      | MINUS ->
          Obj.repr ()
      | MINUSDOT ->
          Obj.repr ()
      | MINUSGREATER ->
          Obj.repr ()
      | MODULE ->
          Obj.repr ()
      | MUTABLE ->
          Obj.repr ()
      | NEW ->
          Obj.repr ()
      | NONREC ->
          Obj.repr ()
      | OBJECT ->
          Obj.repr ()
      | OF ->
          Obj.repr ()
      | OPEN ->
          Obj.repr ()
      | OPTLABEL _v ->
          Obj.repr _v
      | OR ->
          Obj.repr ()
      | PERCENT ->
          Obj.repr ()
      | PLUS ->
          Obj.repr ()
      | PLUSDOT ->
          Obj.repr ()
      | PLUSEQ ->
          Obj.repr ()
      | PREFIXOP _v ->
          Obj.repr _v
      | PRIVATE ->
          Obj.repr ()
      | QUESTION ->
          Obj.repr ()
      | QUESTIONQUESTION ->
          Obj.repr ()
      | QUOTE ->
          Obj.repr ()
      | RBRACE ->
          Obj.repr ()
      | RBRACKET ->
          Obj.repr ()
      | REC ->
          Obj.repr ()
      | RPAREN ->
          Obj.repr ()
      | SEMI ->
          Obj.repr ()
      | SEMISEMI ->
          Obj.repr ()
      | SIG ->
          Obj.repr ()
      | STAR ->
          Obj.repr ()
      | STRING _v ->
          Obj.repr _v
      | STRUCT ->
          Obj.repr ()
      | THEN ->
          Obj.repr ()
      | TILDE ->
          Obj.repr ()
      | TO ->
          Obj.repr ()
      | TRUE ->
          Obj.repr ()
      | TRY ->
          Obj.repr ()
      | TRY_LWT ->
          Obj.repr ()
      | TYPE ->
          Obj.repr ()
      | UIDENT _v ->
          Obj.repr _v
      | UNDERSCORE ->
          Obj.repr ()
      | VAL ->
          Obj.repr ()
      | VIRTUAL ->
          Obj.repr ()
      | WHEN ->
          Obj.repr ()
      | WHILE ->
          Obj.repr ()
      | WHILE_LWT ->
          Obj.repr ()
      | WITH ->
          Obj.repr ()
  
  and default_reduction =
m\000_\000\000\000\000\000\000\000\000\0009\000\000\000\000\001N\000:\002z\000\000\001\023\000\000\003,\000\000\000\000\000\000\000\t\000\bm\000_\000j\000\000\002W\002X\000\000\000\000\000\000\000\000\002\165\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003%\000\000\003&\000\000\000\000\003#\000\000\003\"\003\030\002$\000\000\003!\000\000\002%\000\000\000\000\000\000\000\000\000f\000\000\000\000\000c\000\000\000\000\003\028\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000f\000\000\000\000\000c\000\000\001\173\000\000\000\000\000\029\000\000\000\000\000\000\000\022\000\000\000\000\001t\000\017\000\000\000\000\000\000\000\000\000\000\000\000\001L\000\000\001K\000\000\001J\000\000\003\029\000 \000\000\000\000\000\023\000\018\000\000\000\000\000\000\000\205\000\000\000\000\000\000\000\207\002.\002 \000\000\000\026\000\000\002!\000\000\000\000\001\170\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\011\003\006\000\000\003\007\000\000\000u\000\000\000\000\000\025\000\000\000\000\000\000\000\027\000\000\000\028\000\000\000\030\000\000\000\000\000\031\002\022\002\021\000\000\000d\000\000\000\000\000\000\000\024\000\019\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000b\000\000\001n\000\000\000\000\000\000\000\000\000\000\002\024\000\000\000\000\000\000\000\000\000\000\000\229\000\000\000\000\001\132\000\000\000\232\000\230\000e\001\128\000\000\000a\000\000\000\000\000\000\000\000\000\000\000\000\000q\000\000\000\000\000\000\000\214\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\217\000\000\000\000\002\005\002\003\002\004\000\000\001|\000\000\000\000\000\218\000\000\000\000\001\131\001\127\003\027\000\000\000\000\000\000\000\000\000\000\001\134\001\130\001~\000\000\000\000\001\133\001\129\001}\001{\002\015\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\189\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002U\002V\000\000\003,\000j\000\000\003-\000\000\000\000\000\000\002\165\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\015\000\000\000\000\000\000\000\000\000\000\000i\003)\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\211\000\210\000\208\000\000\000\000\000\000\000\000\000\000\002\018\000\000\000\000\001f\000\000\000\000\000\000\000\000\000\235\000\000\000\000\000\236\000\000\000\000\003C\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\030\000\000\000\000\002\031\000\000\000\000\001e\000\000\000\000\000\000\001l\001k\001i\002\017\000\000\000\209\000\000\000\000\001fn\000\000\000\000\000\000\000\011\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000u\000\000\000\000\000\000\000\000\001I\000\000\000\000\001L\000\000\001K\000\000\001J\000\000\000\000\002\030\000\000\000\000\002\031\000\000\000\000\001e\000\000\000\000\000\000\001l\001k\001i\000\000\001d\001c\000\000\001d\001c\000\000\000\000\000\000\001\029\001j\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001W\000\000\000\000\001[\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002z\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\235\000\000\000\000\000\236\000\000\002Z\002Y\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000i\000\000\000\000\002Z\002Y\000\000\000\000\000\000\000]\000\000\002\172\000`\000l\000^\000\000\001t\002\161\002\162\001\225\002\164\000\000\000\000\002\169\002T\002\171\000\000\000\000\001N\000\000\002\178\002\175\000\000\000\000\000\000\001\222\001\208\000\000\000\000\000\000\000\000\001\212\000\000\001\207\000\000\001\224\002\184\000\000\001\223\001\215\000\000\000h\000\000\002\177\002\176\000\000\001\218\000\000\000\000\001\214\000\000\000\000\001\210\000\000\000\000\000\000\003+\003*\001\209\000\000\002\174\000\000\002\\\002[\000\000\000\000\0028\002\173\002\170\002^\000\000\002_\002]\000\000\000\000\000\000\000\000\001\175\0012\0013\000\000\000\000\000\000\000]\000\000\002\172\000`\000l\000^\002\161\002\162\001\225\002\164\000\000\000\000\002\169\002T\002\171\000\000\000\000\000\000\002\178\002\175\000\000\000hv\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002~xk\000\000\002\179\002\163\000\000\002\182\000\000\002\181\002\180\000\000\000\000\000\000\000\000\000\000\000\000\000\253\000\000\000\000\000\000\000\000\000\252\000\000\000\000\000\251\000\250\000\000\000\000\000\000\000\000\000\255\000\000\000\000\000\254\000\000\001\221\000\000\000\000\001\232\000\000\000\000\001\234\000\000\000\000\001\230\001\229\001\227\001\228\000\000\000\000\000\000\000\000\000\012\001\001\0016\000\000\000\000\000\000\000v\000w\000\000\000\000\000\000\000\000\000\127\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\143\000\000\000\000\000\000\002x\000\000\002~\003.\002\131\002\129\000\000\000\000\000\000\002\142\000\000\000\000\000\000\000\000\000\000\002\160\000\000\002\159\000\000\002\141\002\128\002\127\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\239\000\000\000\240\000\000\000\000\000\000\002\139\000\000\000\000\000\000\002f\002e\000\000\000\000\000\000\000\000\000\000\000\000\000x\000\000\000\000\000\174\000\000\000\000\000\000\000\000\000\000\000\188\000\000\000\000\000\000\000\173\000\000\000\000\000\000\002?\002>\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002h\002g\000\000\000\000\002v\002u\000\000\000\000\000\000\000\000\002r\002q\000\000\000\000\002p\002o\000\000\000\000\002t\002s\002\135\000\000\000\000\000\000\000\000\000\000\002l\000\000\000\000\000\000\000\000\000\000\002j\000\000\000\000\000\000\000\000\000\000\002n\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\020\002\019\000\172\000\000\002k\000\000\000\000\002i\000\000\000\000\002my\002w\000\200\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\201\000\000\000\202\000\203\000\136\000\000\000\135\0018\000\000\0019\0017\002\026\000\000\000\000\002\027\000\134\002\025\000\000\002f\002e\000\000\000\000\002h\002g\000\000\000\000\002v\002u\000\000\000\000\000\000\000\000\002r\002q\000\000\000\000\002p\002o\000\000\000\000\002t\002s\002\135\000\000\000\000\000\000\000\000\000\000\002l\000\000\000\000\000\000\000\000\000\000\002j\000\000\000\000\000\000\000\000\000\000\002n\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\020\002\019\000\172\000\000\000\000\000\000\000\000\000\000\000\000\002k\000\000\000\000\002i\000\000\000\000\002m\001\b\000\000\000\000\001\t\000\000\000\000\000\175\000\000\001\011\001\n\000\000\002\143\002\136\000\000\000\000\000\000\000\000\000\000\000\143\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\127\000\200\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\201\000\000\000\202\000\203\000\136\000\000\000\135\000\000\000\000\0018\000\000\0019\0017\002\026\000\000\000\000\002\027\000\134\002\025\000\000\000\000\000\000\000\000\000\000\000\000\002`\000\000\000\000\002x\000\000\002y\002w\000\000\000\000\002`yx\000\000\001\247\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\237\000\000\000\000\002@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\015\000\000\000\220\000\000\000\000\000\000\000\000\002I\002\014\002\012\002\rs\000\000\001rr{\000\000\002}\000\000\002|\000\000\000k\000\000\002c\002b\000\000\002da\000\000\000\000\000d\000\000\000b\000e\000\000\000\000\000\000\000\000\000\000\000q\000\000\000\000\000\000\000\214\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\193\000\000\000\000\000\000\000\000\000\000\000\000\000\217\000\000\002\251\002\n\002\011\002\006\002\b\002\007\002\t\000\000\000\000\000\000\000\194\000\000\000\218\000\000\000\000\002\015\000\000\000\221\000\000\000\000\000\000\000\000\002\250\000\000\000\000\000\000\000\000\000\000\000\000\001\136\000\000\000\000\000\000\001\135\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001jx\000\000\001\247\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\237\000\000\000\000\002@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\017\000Z\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\r}\000\000\000|\000\000\001\202\001\196\000\000\001\201\000\000\001\199\000\000\001\200\000\000\001\197\000\000\000\000\001\198\000\000\001\136\000\000\000\000\000\000\001\135\000\000\000\000\001#\001\"\000\000\001\246\000\222\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\193\000\000\002\251\002\n\002\011\002\006\002\b\002\007\002\t\000\000\000\000\000\000\000\194\000\000\000\000\000\000\000\000\000\000\000\000\002\250\000\000\000\192\000\000\000\000\000\000\000\000\001;\000\021\000\000\000\020\000\000\000\000\000\206\000\000\000\000\000\000\000\024\000\019\000\000\000\r\000\000\000\000\000\000\001\132\001\128\000\000\000\000\000\000\000\000\002\005\002\003\002\004\000\000\001|\000\000\000\000\000\000\001\131\001\127\003\027\000\000\000\000\000\000\000\000\000\000\001\134\001\130\001~\000\000\000\000\001\133\001\129\001}\001{\000\000\002\015\000\000\000\220\000\000\000\000\000\000\000\000\002I\002\014\002\012\002\r`\001_\002A\000\000\002\183\002\166\000\000\0014\000\000\000\000\000\000\000\137\000\000\000\000\000y\000\000\000\000\000\000\000\142\000\000\001U\001T\000\000\000\000\000\014\000\000\0035\000\000\001`\001_\000\000\000\014\000\000\0035\000\000\000#\000\000\000\000\000\000\000\147\000\146\000\000\000\000\000\000\000~\000\000\000\000\000\000\000\000\002{\000\000\002}\000\000\002|\000\000\002c\002b\000\000\002d\002\130\000\000\000\000\000\139\000\138\000\000\000\000\000\000\000\000\000}\000\000\000|\000\000\000\000\000\000\000\142\000\000\000#\000\000\000\000\000\000\000\000\000~\000\000\000\225\000\001\000\000\000\000\000\226\000\002\000\000\000\003\000\000\001\203\000\000\000\000\001\204\000\004\000\000\000\000\001\205\000\005\000\000\000\000\000\000\003\014\003\t\003\n\003\r\003\011\000\000\000\000\003\018\000\006\000\000\003\017\000\000\001*\000\000\000\000\003\015\000\000\003\016\000\000\000\000\000\000\000\000\001.\001/\000\000\000\000\001-\001,\000\007\000\000\000\000\000\000\003(\000\000\003'")
  
  and error =
    (132, "3\248H\002\197V\254fz\002\128\251\145@\003\142\003\027\132\000.\020o\226O\160\b\015\160\020\000\024\224^\221\145\004\023\241R\000\tf\254\002\161\251\137P\007\158\005\237\217\016A\127\021 \000\1528\0298\224\176(4\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0001\184@\002\193F\254$\250\000\128\250\001@\001\142\005\237\217\016A\127\021 \000\1528\0298\224\176(43\248H\138\197V\254fz\002\128\251\129@\007\142\003\027\132\000.\020o\226O\160\b\015\160\020\000\024\2241\184@\002\193F\254$\250\000\128\250\001@\001\142\003\027\132\000,\020o\226G\160\b\015\160\020\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0001\184@\002\225F\254$\250\000\128\250\001@\001\142\003\027\132\000,\020o\226O\160\b\015\160\020\000\024\2241\184@\002\193F\254$z\000\128\250\001@\001\142\003\027\132\000.\020o\226O\160\b\015\160\020\000\024\2241\184@\002\193F\254$\250\000\128\250\001@\001\142\003\027\132\000,\020o\226G\160\b\015\160\020\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\136@\002\000@0$r\000\000\n\001@\001\140\000\b\000\000\002\000\001\000\b\000\000\000\000\000\000\000\000\000\128\000\000\000\000\016\000\128\000\000\000\000\000\000\000\000\ba\003\158@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\177\184b\003\241V\254\164z|\194\250A\192\025\174\176\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0001\184@\002\225F\254$\250\000\128\250\001@\001\142\003\027\132\000,\020o\226O\160\b\015\160\020\000\024\2241\184@\002\193F\254$z\000\128\250\001@\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b \000\000\002\000\018\004(\024\000\000\000\128\016\000\000^\221\145\004\023\241R\000\tb\017\000\000\005\237\217\016A\127\021 \000\1528\0298\224\176(4\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\130\000\000\000\000\001 B\129\128\000\000\b\001\000\000\005\237\217\016A\127\021 \000\1528\0298\224\176(43\248H\138\197V\254fz\002\128\251\129@\007\142\000\000\000\000\002\000\003\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\0000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\000\000\000\128\000 \003\240\022\004\128\000|B\000@\128\016(\176\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000P\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\002\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\bb\0160\184@\000 \000\000\000\000\000\000\b\001\000\002\001\003\002\b\000\000\016\000\000\000\000\000\000\128\016\000\000\0160 \128\000\001\000\000\000\000\000\000\b\001\000\000\001\003\002\000\000\000\016\000\000\000\000\000B@\n\128\004\024*C\128\002 \001\208\016\"\000H$\000\128\000A\000\004(\000 \000\024\128\000 \000\130@\b\000\004\016\000B\000\002\000\001\136\000\002\000\000\000\000\000\002\000\003\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\0000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\024\000\002\128\128\003\011\132\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\000\002\128\129\003\011\132\000\002\000\000\000\000\000\000\000\128\016\000 \0160 \128\000\001\000\000\000\000\000\000\b\001\000\000\001\003\002\b\000\000\016\000\000\000\000\000\000\128\016\000\000\0160 \000\000\001\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\b\b\000\000\000\002\002\b\000\000\016\000\000\000\000\000\000\128\128\000\000\000  \000\000\001\000\000\000\000\000\011?\132\128,Uo\230o\160(\015\184\148\0008\224\179\248H\002\197V\254fz\002\128\251\137@\003\142\003\027\132\000.\020o\226O\160\b\015\160\020\000\024\2241\184@\002\193F\254$\250\000\128\250\001@\001\142\003\027\132\000,\020o\226G\160\b\015\160\020\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0001\184@\002\225F\254$\250\000\128\250\001@\001\142\003\027\132\000,\020o\226O\160\b\015\160\020\000\024\2241\184@\002\193F\254$z\000\128\250\001@\001\142\003\027\132\000.\020o\226O\160\b\015\160\020\000\024\2241\184@\002\193F\254$\250\000\128\250\001@\001\142\003\027\132\000,\020o\226G\160\b\015\160\020\000\024\224B\207n\139\252^;\231\246\127f\015\215\218[\188\243\027\132\000,\020o\226G\160\b\015\160\020\000\024\224\001\136A\000`\0020$\218\000 \n\000\000\001\004\000\024\132\016\004\000#\002M\160\002\000\160\000\000\016@\001\136A\000@\0020$Z\000 \n\000\000\001\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\136@\000@\0020$Z\000 \n\000\000\001\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\129\136b\003\240\0224\164Z|b\n\192\128\025,\176\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\002\000\000\000\000\000\002\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\b\000\000\002\000\000\000\b\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\016\000\000\0160 \000\000\001\000\000\000\000\000\012$\000\160\000A\130\1648\000 \000\024\129\000 \004\130@\b\000\004\016\000B\128\002\000\001\136\000\002\000\b$\000\128\000A\000\004 \000 \000\024\128\000 \000\001\128\000 `\1300\000\128\000\000\000\000\000\000\000\000\024\000\002\004\b#\000\b\000\000\000\000\000\000\000\000\001\128\000 @\1300\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\128\000 @\0020\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000 @\002\000\000\000\000\000\000\000\000\000\000\000\016\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\bb\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\130@\b\001\004\016\000C\000\002\000\001\200\001\018\000@\024\128\002\192\128\003\011\133\000\002\000 \002\000\001\000\130@\b\000\006\016*C\128\002\000\001\136\017\006\016@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\136\000(\b\0000\184P\000 \002\000 \000\016\000\024\000\"\128\129\003\011\132\000\002\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004,\002\236\000A\129\1648\000\" \029\000\022a\022\001\128\000 \000\0000\184@\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\128\000 \000\0000\184@\000\"\000\000 \000\000\000\b\000@\000\000\001\000\000\000\002 \000\000\000@\000\001\128\000(\b\0000\184@\000 \000\000\000\000\000\000\b\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\128$`\000\b\016\000\128\000\"\000@\016 \001\005\237\217\016A\127\021 \000\1528\0298\224\176(43\248H\138\197V\254fz\002\128\251\129@\007\142\000\024\000\002\006\b#\000\b\000\000\000\000\000\000\000\000\001\128\000 @\1300\000\128\000\000\000\000\000\000\000\000\024\000\002\004\b#\000\000\000\000\000\000\000\000\000\000\001\128\000 @\0020\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\002@\b\129\004\016\nC\000\002 \001\208\001\002\000@\024\128\002\192\128\003\011\133\000\002\000 \002\000\001\000\002@\b\128\006\016*C\128\002 \001\144\017\006\016@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\136\000(\b\0000\184P\000 \002\000 \000\016\000\024\000\"\128\129\003\011\132\000\002\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\000\002\128\128\003\011\132\000\002\000\000\000\000\001@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\000\002\128\128\003\011\132\000\002\000\000\000\000\000@\001\128\000\168\b\0000\184@\000 \000\000\000\000\020\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\128\000(\b\0000\184@\000 \000\000\000\000\004\000\024\000\002\128\128\003\011\132\000\002\000\000\000\000\001@\000\128\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\128\000(\b\0000\184@\000 \000\000\000\000\004\000\b\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000B@\014\192\004\024\nC\128\002\"\001\208\001b\017`\024\000\002\128\128\003\011\132\000\002\000\000\000\000\000\000B@.\192\004\024\nC\128\002\"\001\208\001b\017`\024\000\002\000\000\003\011\132\000\002\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\016\000\000\b\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\002\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000B\192.\192\004\024\026C\128\002\"\001\208\001b\017`\b\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\128\000 \000\0000\184@\000 \000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\001\128\000(\b\0000\184@\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000B\192.\192\004\024\026C\128\002\"\001\208\001b\017`\024\000\002\000\000\003\011\132\000\002\000\000\000\000\000\000B\192.\192\004\024\026C\128\002\"\001\208\001b\017`\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\128\000(\bb\000\000\000\000\b\000\000 \000\000\000\001\018\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\128\000\002\000\000\000\000\017 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\128\000\002\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000B@\n\128\004\024\nC\128\002\"\001\208\001b\017@\000\000\b\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\001\128\000(\b\0000\184@\000 \000\000\000\000\004\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\bb\000\000\000\000\001\000\000\000\002\000\000\000\000\000\000\000\128\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\000\002\128\128\003\011\132\000\002\000\000\000\000\000\000\000\000\002\000\000\000\000\000\128\000\000\000\000\000@\000\000\000\000 \000\000\000\000\b\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\000\002\128\128\003\011\132\000\002\000\000\000\000\000\000\000\000\002\000\000\000\000\000\128\000\000\000\000\000@\000\000\024\000\nb\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\000\002\128\128\003\011\132\000\002\000\000\000\000\000\000\000\000\004@\000\000\000\000\128\000\002\000\000\000\000\001\000\000\000D\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\004@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\002\001\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000D\000\000\000\000\ba\000\1648\000\"\000\025\000\016ab\000\000\000\000\000\000\000\000\000\000\000\024\000\002\000\000\003\011\132\000\002\000\000\000\000\000\000\002\192\b\128\004\016\026C\128\003 \001\144\001\002\016@,\002\136\000A\129\1648\0002\000\025\000\016!\004\002@\b\128\004\016\nC\128\002 \001\144\001\002\016@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002@\b\128\004\016\nC\000\002 \001\144\001\002\016@\b\128\000\000\000\002\000\004\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000$\000\136\000A\000\1648\000\"\000\025\000\016 \004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000$\000\136\000a\000\1648\000\"\000\025\000\016a\004\002@\b\128\004\016\nbb\128\004\016\nC\000\002 \001\144\001\002\000E\237\217\016A\127\021 \000\1528\0298\224\176(43\248H\138\197V\254fz\002\128\251\129@\007\142\003?\132\136,Uo\230g\160(\015\185\020\0008\224\000\128\128\000 \000  \128\000\001\000\000\000\000\b\000\b\b\000\002\000\002\002\b\000\000\016\000\000\000\000\000\000\128\128\000\000\000  \128\000\001\000\000\000\000\000\000\b\b\000\000\000\002\002\000\000\000\016\000\000\000\000\000\002\128\128\000\000\000  \000\000\001\000\000\000\000\000\003\027\132\000,\020o\226O\160\b\015\160\020\000\024\2241\184@\002\193F\254$z\000\128\250\001@\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0001\184@\002\225F\254$\250\000\128\250\001@\001\142\003\027\132\000,\020o\226O\160\b\015\160\020\000\024\2241\184@\002\193F\254$z\000\128\250\001@\001\142\003\027\132\000.\020o\226O\160\b\015\160\020\000\024\2241\184@\002\193F\254$\250\000\128\250\001@\001\142\003\027\132\000,\020o\226G\160\b\015\160\020\000\024\224\001\136@\000@\0020$Z\000 \n\000\000\001\004\000\024\132\000\004\000#\002E\160\002\000\168\000\000\020@\000\000\000\000\000\000\000\000\002\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\129\136b\003\240\0224\164Z|b\n\192\128\025,\176\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\b\000\000\002\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\001\000\000\001\003\002\000\000\000\016\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\128\128\000\000\000  \128\000\001\000\000\000\000\000\000\b\b\000\000\000\002\002\000\000\000\016\000\000\000\000\000\179\248H\002\197V\254f\250\002\128\251\137@\003\142\011?\132\128,Uo\230g\160(\015\184\148\0008\224\001\128\000 `\1300\000\128\000\000\000\000\000\000\000\000\024\000\002\004\b#\000\b\000\000\000\000\000\000\000\000\001\128\000 @\1300\000\000\000\000\000\000\000\000\000\000\024\000\002\004\000#\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\016\000\000\000\000\000\000\000\000\000\b$\000\128\016A\000\1640\000 \000\028\128\016 \004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b$\000\128\000A\000\1640\000 \000\024\128\016 \004^\221\145\004\023\241R\000\t\131\129\211\142\011\002\131C?\132\136\172Uo\230g\160(\015\184\020\000x\224\001\136@\000@\0020$Z\000 \n\128\000\001\004\000\024\132\b\004\000#\002E\160\002\000\168\000\000\016@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000^\221\145\004\023\241R\000\t\131\129\211\142\011\002\131C?\132\136\172Uo\230g\160(\015\184\020\000x\224\000\192\001\000 \000\000\000\128\000\000\000\000\000\000\000\000\b\000\000\002\000\001\000\b\000\000\000\000\000\000\000\000\000\128\000\000\000\000\016\000\128\000\000\000\000\000\000\000\000\b\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\002@\b\128\004\016\nC\000\002 \001\208\000\002\000\000\b\001\000\000\001\003\002\000\000\000\016\000\000\000\000\000\000\128\016\000\000\0160 \000\000\001\000\000\000\000\000\000\bb\001\000\000\001\003\002\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000 \000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\bb\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\001\000\000\001\128\000,\b\0000\184@\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\128\000(\b\0000\184@\000 \000\000\000\000\000\004$\000\168\000A\128\1648\000\"\000\029\000\002 \020\001\128\000(\b\0000\184@\000 \000\000\000\000\000\004$\000\168\000A\128\1648\000\"\000\029\000\018 \020B@\n\128\004\024\nC\128\002 \001\208\001\"\000@\024\000\002\128\128\003\011\132\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000@\000\000\000\000\024\000\002\128\128\003\011\132\000\002\000\000\000\000\000\000B@\n\128\004\024\nC\128\002 \001\208\001\"\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\001\001\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004$\000\168\000A\130\1648\000\"\000\029\001\002 \004\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000B@\n\128\004\024*C\128\002 \001\208\016\"\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000B@\n\128\004\024\nC\128\002 \001\208\000\"\000@\004\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\001\000\000\001\003\002\000\000\000\016\000\000\000\000\000B@\n\128\004\024\nC\128\002 \001\208\000\"\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\016\000\000\000\b\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000B@\n\128\004\024*C\128\002 \001\208\016\"\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000 \000\000\128\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\128\016\000\000\0160 \000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\194@\n\000\004\024\nC\128\002\000\001\136\000\002\000@\004\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\128\000 @\0020\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\016\000\000\024\000\002\128\128\003\011\132\000\002\000\000\000\000\000\000\194\192.@\004\025\026C\129\130 \001\200\001&\001@\024\000\002\000\000\003\011\132\000\002\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\024\000\002\128\128\003\011\132\000\002\000\000\000\000\000\000\001\128\000 \000\0000\184@\000\"\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000@\000\000\001\000\000\000\002 \000\000\000\000\000\001\128\000 \000\0000\184@\000\"\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\128\000(\b\0000\184@\000 \000\000\000\000\020\000\024\000\002\128\128\003\011\132\000\002\000\000\000\000\000@\000\000\000\128\000\000\000\000\000\000\002\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\000\n\128\128\003\011\132\000\002\000\000\000\000\001@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\000\002\128\128\003\011\132\000\002\000\000\000\000\000@\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\128\000(\bb\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012$\000\228\000A\144\1648\024 \000\028\128\018 \020\001\128\000(\b\0000\184@\000 \000\000\000\000\000\012$\002\228\000A\144\1648\024 \000\028\128\018 \020\001\128\000 \000\0000\184@\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\016\000\000\000\b\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\194\192.@\004\025\026C\129\130 \001\200\001\"\001@\b\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\128\000 \000\0000\184@\000 \000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\001\128\000(\b\0000\184@\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\194\192.@\004\025\026C\129\130 \001\200\001\"\001@\024\000\002\000\000\003\011\132\000\002\000\000\000\000\000\000\194\192.@\004\025\026C\129\130 \001\200\001\"\001@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\194@\n\000\004\024\nC\128\002\000\001\136\000\002\001@\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\128\000(\b\0000\184@\000 \000\000\000\000\000\012$\000\160\000A\128\1648\000 \000\024\128\016 \020\194@\n\000\004\024\nC\128\002\000\001\136\001\002\000@\024\000\002\128\128\003\011\132\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000@\000\000\000\000\024\000\002\128\128\003\011\132\000\002\000\000\000\000\000\000\194@\n\000\004\024\nC\128\002\000\001\136\001\002\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\194@\014@\004\025\nC\129\130\000\001\200\001\"\001@\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\016\016\000\000\bb\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\192\000\002\000\000\b\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004$\000\136\000A\128\1648\000\"\000\025\000\000 \000\002@\b\128\004\016\nC\000\002 \001\144\000\002\000\000$\000\136\000A\000\1640\0002\000\025\000\000 \004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\001\000\000\000\000\000\128\000\000\000\000\000\000\000\000\b\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000@\000\004\000\000\b\b\000\000\000\002\002\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000 \000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\b\b\000\000\000\002\002\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004$\000\168\000A\130\1648\0002\000\029\000\002`\004\002\128\130\000\000\000  \000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\128\128\000\000\000  \000\000\001\000\000\000\000\000\003\027\132\000,\020o\226O\160\b\015\160\020\000\024\2241\184@\002\193F\254$z\000\128\250\001@\001\142\000\b\132\000 \004\003\002G \000\000\160\020\000\024\192\000\128\000\000 \000\016\000\128\000\000\000\000\000\000\000\000\b\000\000\000\000\001\000\b\000\000\000\000\000\000\000\000\000\128\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\177\184b\003\241V\254\164z|\194\250A\192\025\174\184\b\132  \004\003\002G \000\000\160\020\000\024\1921\184@\002\193F\254$z\000\128\250\001@\001\206\b \000\000\002\000\018\004(\024\000\000\000\128\016\000\000\130\000\000\000\000\001 B\129\128\000\000\b\001\000\000\b \000\000\000\000\018\004 \024\000\000\000\128\016\000\000\001\136@\000@\0020$Z\000 \n\128\000\001\004\000\bb\000\000D\000\000\000\000\000\000\000\000\004\000\000@\000\001\128\000(\b\0000\184@\000 \000\000\000\000\000\b\000\000D\000\000\000\000\b\000\000\000\004\000\000\000\000\128\000\004@\000\000\000\000\000\000\000\000@\000\000\000\000\024\132\000\004\000#\002E\160\002\000\168\000\000\016@\001\136@\000@\0020$Z\000 \n\128\000\001D\000\024\132\b\004\000#\002E\160\002\000\168\000\000\016@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\128\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\132\000\006\000#\002M \002\000\160\000\000\016@\001\136@\000@\0020$\210\000 \n\000\000\001\004\000\024\132\000\004\000#\002E \002\000\160\000\000\016@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\bb\024\132l\004\000#\002M\160\002\000\168\001\004\213P\000\128\000\000\000\000 \004P\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\129\136B\000@\0020$Z\000 \n\128\000\t\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\132\000\006\000#\002M\160\002\000\168\000\000\016@\001\136@\000@\0020$\218\000 \n\128\000\001\004\000\024\132\000\004\000#\002E\160\002\000\168\000\000\016@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\006\192\000\000\000\000\128\000\000\000\000\000LQ\000\024\132\000\004\000#\002E\160\002\000\168\000\000\016@\128\000\006\192\000\000\000\000\128\000\000\000\000\000LQ\b\024\132\000\004\000#\002E\160\002\000\168\000\000\016@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000l\000\000\000\000\b\000\000\000\000\000\004\197\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\024\132l\004\000#\002M\160\002\000\168\000\004\213P\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\129\136F\192@\0020$\218\000 \n\128\000MU\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000 \000\000\000\000\b\000\000\000\000\000\004\129\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\129\136@\000@\0020$Z\000 \n\128\000\001\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\006\192\000\000\000\000\128\000\000\000\000\000LQ\b\024\132\000\004\000#\002E\160\002\000\168\000\000\016@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000l\000\000\000\000\b\000\000\000\000\000\004\197\016\128\000\000\000\000\0000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000 \003\240\022\004\128\000|B\000@\128\016(\184\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\136@\128@\0020$Z\000 \n\128\000\001\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000H\000\000\000\000\b\000\000\000\000\000\004\133\016\129\136@\128@\0020$Z\000 \n\128\000\001D\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\004@\000\000\000\000\128\000\000\000\000\000H\017\b\000\000D\000\000\000\000\000\000\000\000\000\000\000\000\000\129\128\000@\000\000\016\000\000\000\000\000\000\000\000\000\b\000\000D\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\132\000\006\000#\002M \002\000\160\000\000\016@\001\136@\000@\0020$\210\000 \n\000\000\001\004\000\024\132\000\004\000#\002E \002\000\160\000\000\016@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\bt\138B\136H\n0$\214\001 \nP m\021\000\000\004\000\004\000 \000\000 \000\000\128\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\152\164(\132\128\163\002M\224\018\000\173\001\006\209P\000\128\000\000\000\000 \004P\000\000\000\000\000\000\000\bb\004\000#\002E\160\002\000\168\000\000\016@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\132\000\006\000#\002M\160\002\000\168\000\000\016@\001\136@\000@\0020$\218\000 \n\128\000\001\004\000\024\132\000\004\000#\002E\160\002\000\168\000\000\016@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\002\128\000\b\000\000\128\001\000\000P\000L\017\000\024\132\000\004\000#\002E\160\002\000\168\000\000\016@\b\000\002\128\000\b\000\000\128\001\000\000P\000L\017\b\024\132\000\004\000#\002E\160\002\000\168\000\000\016@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000(\000\000\128\000\bn\128\000\001\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\002\128\000\b\000\000\128\001\000\000P\000L\017\000\024\000\002\128\128\003\011\132\000\002\000\000\000\000\000\000\000\000\002\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\129\136@\000@\0020$Z\000 \n\128\000\001\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\002\128\000\b\000\000\128\001\000\000P\000L\017\b\000\000\000\000\000\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\130\000\000\000\000\001\000B\001\128\000\000\b\001\000\000\000@\000\000\000\002\001\000\b\000\000\000\000\000\000\000\128\000\000\000\000\000 \016\000\128\000\000\000\000\000\000\000\000\000\000\000\000\002\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\002@\0001\184@\002\193F\254$z\000\128\250\001@\001\142\003\027\132\000.\020o\226O\160\b\015\160\020\000\024\2241\184@\002\193F\254$\250\000\128\250\001@\001\142\003\027\132\000,\020o\226G\160\b\015\160\020\000\024\224\001\136A\000d\0180$\218\000 \n\128\000\001\004\000\b\b\000\002\000\002\002\b\000\000\016\000\000\000\000\128\000\128\128\000 \000  \128\000\001\000\000\000\000\000\000\b\b\000\000\000\002\002\b\000\000\016\000\000\000\000\000\000\128\128\000\000\000  \000\000\001\000\000\000\000\000\000\000\000\000\000\000\002\000\b\000\016\000\000\000\000\000\0001\184@\002\193F\254$z\000\128\250\001@\001\142\003\027\132\000,\020o\226G\160\b\015\160\020\000\028\2241\184@\002\225F\254$\250\000\128\250\001@\001\142\003\027\132\000,\020o\226O\160\b\015\160\020\000\024\2241\184@\002\193F\254$z\000\128\250\001@\001\142\003\027\132\b,\020o\226G\160\b\015\160\020\000\024\224\194\202n\203\252W;\231\247\255j\015\205\209\127\252s\027\132\000,\020o\226G\160\b\015\160\020\000\024\224\001\136@\000@\0020$Z\000 \n\000\000\001\004\000\024\164\000\132\128#\002M`o\226G\160\b\015\160\020\000\024\224\000\000\000\000\000\000\016\000\000\000\b\000\000\000\000\000\b\000\000@\000\000\000\000\000\000\000\128\004\000\000\000\0001\184@\002\193F\254$z\000\128\250\001@\001\142\000\024\132\016\006A#\002M\160\002\000\168\000\000\016@\000\128\128\000 \000  \128\000\001\000\000\000\000\b\000\b\b\000\002\000\002\002\b\000\000\016\000\000\000\000\000\000\128\128\000\000\000  \128\000\001\000\000\000\000\000\000\b\b\000\000\000\002\002\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000 \000\128\001\000\000\000\000\000\000\003\027\132\000,\020o\226G\160\b\015\160\020\000\024\2241\184@\130\193F\254$z\000\128\250\001@\001\142\000\000\000\000\000\000\001\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\136@\002\000@0$r\000\000\n\001@\001\140\012\000\000D\000\000\000\000\000\000\006\000\004\t\002@\000\000\136@\002\000@0$r\000\000\n\001@\001\140\000\b\132\000 \004\003\002G \000\000\160\020\000\024\1921\184@\002\193F\254$z\000\128\250\001@\001\142\000\b\132\000\"\004\003\002O \000\000\160\020\000\024\192\000\136@\002\000@0$\242\000\000\n\001@\001\140\000\b\132\000 \004\003\002G \000\000\160\020\000\024\1921\184@\002\225F\254$\250\000\128\250\t@\001\142\003\027\132\000,\020o\226O\160\b\015\160\148\000\024\2241\184@\002\193F\254$z\000\128\250\t@\001\142\000\b\132\000\"\004\003\002O \000\000\160\020\000\024\192\000\136@\002\000@0$\242\000\000\n\001@\001\140\000\b\132\000 \004\003\002G \000\000\160\020\000\024\192\000\136@\002\000@0$r\000\000\n\001@\001\140\003\027\132\000,\020o\226G\160\b\015\160\020\000\024\2241\184@\002\225F\254$\250\000\128\250\001@\001\142\003\027\132\000,\020o\226O\160\b\015\160\020\000\024\2241\184@\002\193F\254$z\000\128\250\001@\001\142\000\024\132\000\006\000#\002M\160\002\000\168\000\000\017@\001\136@\000@\0020$\218\000 \n\128\000\001\020\000\024\132\000\004\000#\002E\160\002\000\168\000\000\017@\001\136@\000@\0020$Z\000 \n\128\000\001\004\000\128\000\000\000\000\128\000\b\000\000\000\000\000\004\129\0161\184@\002\193F\254$z\000\128\250\001@\001\142\000\024\164\000\134\128#\002M`\002\000\160\000\000\016@\001\138@\bH\0020$\214\000 \n\000\000\001\004\000\024\164\000\132\128#\002E`\002\000\160\000\000\016@\001\000\000\000\000\0000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\136@\000@\0020$Z\000 \n\128\000\001\004\000\000\000 \000\000\000\000\b\000\000\000\004\000\004\193\016\001\128\000(\b\0000\184@\000 \000\000\000\000\000\000\000\000 \000\000\000\000\b\000\000\000\004\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\028\134 ?\001cJE\167\198 \172\b\001\146\203\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\001\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\001\138@\bH\n0$V\000 \n\000\000\005\004\003\027\132\000,\020o\226G\160\b\015\160\020\000\024\224\001\136@\000`\0020$\218\000 \n\128\000\001\004\000\024\132\000\004\000#\002M\160\002\000\168\000\000\016@\001\136@\000@\0020$Z\000 \n\128\000\001\004\000\000\000\000\000\000\000\000\b\000\016\000\004\000\004\129\0161\184@\002\193F\254$z\000\128\250\001@\001\142\000\024\132\000\006\000#\002M\160\002\000\168\000\000\016@\001\136@\000@\0020$\218\000 \n\128\000\001\004\000\024\132\000\004\000#\002E\160\002\000\168\000\000\016@\000\000\000\000\000\000\000\000\128\000\000\000@\000H\017\003\027\132\000,\020o\226G\160\b\015\160\020\000\024\224\000\136@\002\000@0$r\000\000\n\001@\001\140\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004,\246\232\191\197\227\174\127g\246`\253}\165\187\207\000\128\000\000\000\0000\004p\000\000\000\000\000\000\000\011\027\134 ?\021o\234G\167\204/\164\028\001\154\235\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\011\027\132 ,\020o\226G\160\b\015\160\020\000\024\224\177\184B\002\193F\254$z\000\128\250\001@\001\142\b\b\b\000\002\000\002\002\b\000\000\016\000\000\000\000\000\000\128\128\000\000\000  \128\000\001\000\000\000\000\000\000\b\b\000\000\000\002\002\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000 \000\128\000\000\000\000\000\004\000\b\b\001\000\000\001\003\002\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000 \000\000\128\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004$\000\168\000A\130\1648\0002\000\029\001\002`\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\011\027\132 ,\020o\226G\160\b\015\160\020\000\024\224\177\184B\002\193F\254$z\000\128\250\001@\001\142\b\024\132 \004\000#\002E\160\002\000\160\000\000\016@\000\000\000\000\000\000\000\000\128\000\000\000@\000L\017\000\024\000\002\128\128\003\011\132\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000@\000\000\000\003\027\132\000,\020o\226G\160\b\015\160\020\000\024\224\000\136@\002 @0$\242\000\000\n\001@\001\140\000\b\132\000 \004\003\002O \000\000\160\020\000\024\192\000\136@\002\000@0$r\000\000\n\001@\001\140\004$R\232\031A\224\1728\007\246`]i\165\163\015\000\136@\002\000@0$r\000\000\n\001@\001\140\004,\246\232\191\197\227\174\127g\246`\253}\165\187\207\000\000\000\000\000\000 \000P\000\000\000\000\000\000\000\003\027\132\000,\020o\226G\160\b\015\160\020\000\024\2241\184@\002\225F\254$\250\000\128\250\001@\001\142\003\027\132\000,\020o\226O\160\b\015\160\020\000\024\2241\184@\002\193F\254$z\000\128\250\001@\001\142\003\027\132\000,\020o\226G\160\b\015\160\020\000\024\224B\207n\139\252^:\231\246\127f\015\215\218[\188\240\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\132\000 \004\003\002G \000\000\160\020\000\024\192B\207n\139\252^:\231\246\127f\015\215\218[\188\240\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\003\000\005\000\000\000\000\000\000\000\0001\184@\002\193F\254$z\000\128\250\001@\001\142\000\024\132\000\006\000#\002M\160\002\000\168\000\000\017@\001\136@\000@\0020$\218\000 \n\128\000\001\020\000\024\132\000\004\000#\002E\160\002\000\168\000\000\017@\001\136@\000@\0020$Z\000 \n\128\000\001\004\000\128\000\000\000\000\128\000\b\000\000\000\000\000\004\129\0161\184@\002\193F\254$z\000\128\250\001@\001\142\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\0001\184@\002\193F\254$z\000\128\250\001@\001\142\000\024\164\000\134\128#\002M`\002\000\160\000\000\016@\001\138@\bH\0020$\214\000 \n\000\000\001\004\000\024\164\000\132\128#\002E`\002\000\160\000\000\016@\129\200b\003\240\0224\164Z|b\n\192\128\025,\176\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\164\000\132\128\163\002E`\002\000\160\000\000P@1\184@\002\193F\254$z\000\128\250\001@\001\142\000\024\132\000\006\000#\002M\160\002\000\168\000\000\016@\001\136@\000@\0020$\218\000 \n\128\000\001\004\000\024\132\000\004\000#\002E\160\002\000\168\000\000\016@\000\000\000\000\000\000\000\000\128\001\000\000@\000H\017\003\027\132\000,\020o\226G\160\b\015\160\020\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\003\027\132\000,\020o\226G\160\b\015\160\020\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000BE.\129\244\030\n\195\128\127&\005\214\nZ0\243\027\132\000,\020o\226G\160\b\015\160\020\000\024\224B\207n\139\252^:\231\246\127f\015\215\218[\188\244$R\232\031A\224\1728\007\246`]i\165\163\015\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\0041\184@\002\193F\254$z\000\128\250\001@\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\0041\184@\002\193F\254$z\000\128\250\001@\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000BE.\129\244\030\n\195\128\127&\005\214\nZ0\243\027\132\000,\020o\226G\160\b\015\160\020\000\024\224BE.\129\244\030\n\195\128\127&\005\214\nZ0\243\027\132\000,\020o\226G\160\b\015\160\020\000\024\224BE.\129\244\030\n\195\128\127&\005\214\nZ0\240\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000B\207n\139\252^:\231\246\127f\015\215\218[\188\244$R\232\031A\224\1728\007\246`]i\165\163\0151\184@\002\193F\254$z\000\128\250\001@\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000s\253n\131\245^\254\231\250\127\166\255\215J[\190\245\237\217\016A\127\021 \000\1528\0298\224\176(41\184@\002\193F\254$z\000\128\250\001@\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\027\132\000,\020o\226G\160\b\015\160\020\000\024\224BE.\129\244\030\n\195\128\127&\005\214\nZ0\243\027\132\000,\020o\226G\160\b\015\160\020\000\024\224BE.\129\244\030\n\195\128\127&\005\214\nZ0\243\027\132\000,\020o\226G\160\b\015\160\020\000\024\224BE.\129\244\030\n\195\128\127&\005\214\nZ0\243\027\132\000,\020o\226G\160\b\015\160\020\000\024\224BE.\129\244\030\n\195\128\127&\005\214\nZ0\243\027\132\000,\020o\226G\160\b\015\160\020\000\024\224BE.\129\244\030\n\195\128\127&\005\214\nZ0\243\027\132\000,\020o\226G\160\b\015\160\020\000\024\224BE.\129\244\030\n\195\128\127&\005\214\nZ0\243\027\132\000,\020o\226G\160\b\015\160\020\000\024\224BE.\129\244\030\n\195\128\127&\005\214\nZ0\243\027\132\000,\020o\226G\160\b\015\160\020\000\024\224BE.\129\244\030\n\195\128\127&\005\214\nZ0\243\027\132\000,\020o\226G\160\b\015\160\020\000\024\224BE.\129\244\030\n\195\128\127&\005\214\nZ0\243\027\132\000,\020o\226G\160\b\015\160\020\000\024\224BE.\129\244\030\n\195\128\127&\005\214\nZ0\243\027\132\000,\020o\226G\160\b\015\160\020\000\024\224BE.\129\244\030\n\195\128\127&\005\214\nZ0\243\027\132\000,\020o\226G\160\b\015\160\020\000\024\224BE.\129\244\030\n\195\128\127&\005\214\nZ0\243\027\132\000,\020o\226G\160\b\015\160\020\000\024\224BE.\129\244\030\n\195\128\127&\005\214\nZ0\243\027\132\000,\020o\226G\160\b\015\160\020\000\024\224BE.\129\244\030\n\195\128\127&\005\214\nZ0\243\027\132\000,\020o\226G\160\b\015\160\020\000\024\224BE.\129\244\030\n\195\128\127&\005\214\nZ0\243\027\132\000,\020o\226G\160\b\015\160\020\000\024\224BE.\129\244\030\n\195\128\127&\005\214\nZ0\243\027\132\000,\020o\226G\160\b\015\160\020\000\024\224BE.\129\244\030\n\195\128\127&\005\214\nZ0\243\027\132\000,\020o\226G\160\b\015\160\020\000\024\224BE.\129\244\030\n\195\128\127&\005\214\nZ0\243\027\132\000,\020o\226G\160\b\015\160\020\000\024\224BE.\129\244\030\n\195\128\127&\005\214\nZ0\243\027\132\000,\020o\226G\160\b\015\160\020\000\024\224BE.\129\244\030\n\195\128\127&\005\214\nZ0\240\024\132\000\004\000#\002M\160\002\000\160\000\000\016@\001\136@\000@\0020$Z\000 \n\000\000\001\004\000\024\164\000\132\128#\002M`\002\000\164\000\006\209P\129\200b\003\240\0224\164Z|b\n\192\128\025,\176\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\164\000\132\128#\002E`\002\000\164\000\002P@\001\136@\000@\0020$R\000 \n\000\000\001\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0001\184@\002\193F\254$z\000\128\250\001@\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\129\128\000(\b\0000\184@\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\128\000\000\000@\000\000\000\b\024\000\002\128\128\003\011\132\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\b\000\000\000\004\000\002\000\000\001\128\000(\b\0000\184@\000 \000\000\000\000\000\000\000\000 \000\000\000\000\b\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\003\027\132\000,\020o\226G\160\b\015\160\020\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\164\000\132\128#\002E`\002\000\164\000\002P@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\002\000\000\000\000\000\002\000\000\b\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000 \000\000\000\000\b\000\000\000\000\000\004\193\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\129\128\000(\b\0000\184@\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\002\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\028\000\002\128\128\003\011\132\000\002\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\128\000(\b\0000\184@\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\004\000\000\000\0001\184@\002\193F\254$z\000\128\250\001@\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\016\000\000\000\024\000\002\128\128\003\011\132\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000@\000\000\000\003\027\132\000,\020o\226G\160\b\015\160\020\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\0001\184@\002\193F\254$z\000\128\250\001@\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\004\000\004\193\016\001\128\000(\b\0000\184@\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\004\000\000\000\0001\184@\002\193F\254$z\000\128\250\001@\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000@\000H\017\003\027\132\000,\020o\226G\160\b\015\160\020\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\024\132\000\004\000#\002E\160\002\000\168\000\000\016@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\004\000\004\129\016\129\136@\000@\0020$Z\000 \n\128\000\001\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000@\000H\017\b\024\132\000\004\000#\002E\160\002\000\168\000\000\016@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\004\000\004\129\016\128\000\000\000\000\0000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\004\000\004\129\016\001\136@\000@\0020$Z\000 \n\128\000\001\004\000\000\000\000\000\000\000\000\b\000\000\000\004\000\004\129\016\002@\b\128\004\016\nC\000\003 \001\144\000\002\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000BE.\129\244\030\n\195\128\127&\005\214\nZ0\243\027\132\000,\020o\226G\160\b\015\160\020\000\024\224\000\004\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\027\132\000,\020o\226G\160\b\015\160\020\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\003\027\132\000,\020o\226G\160\b\015\160\020\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\136@\000`\0020$\218\000 \n\128\000\001\004\000\024\132\000\004\000#\002M\160\002\000\168\000\000\016@\001\136@\000@\0020$Z\000 \n\128\000\001\004\000\000\000\000\000\000\000\000\b\000\000\000\004\000\004\129\0161\184@\002\193F\254$z\000\128\250\001@\001\142\000\000@\000\000\000\000\000\000\000\000\000\000 \000\000\0001\184@\002\193F\254$z\000\128\250\001@\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\0001\184@\002\193F\254$z\000\128\250\001@\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\027\132\000.\020o\226O\160\b\015\160\148\000\024\2241\184@\002\193F\254$\250\000\128\250\t@\001\142\003\027\132\000,\020o\226G\160\b\015\160\148\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\132\000 \004\003\002G \000\000\160\020\000\024\192\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\194\202n\203\252W:\231\247\255j\015\205\209\127\253p\b\000\000\000\000\003\000G\000\000\000\000\000\000\000\000\177\184b\003\241V\254\164z|\194\250A\192\025\174\176\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\128\128\000 \000  \128\000\001\000\000\000\000\000\000\b\b\000\000\000\002\002\b\000\000\016\000\000\000\000\000\000\128\128\000\000\000  \000\000\001\000\000\000\000\000\000\000\000\000\000\000\002\000\b\000\000\000\000\000\000@\000\128\128\016\000\000\0160 \000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\002\000\000\b\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\136B\002\000@0$r\000\000\n\001@\001\140\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\136@\002 @0$\242\000\000\n\001@\001\140\000\b\132\000 \004\003\002O \000\000\160\020\000\024\192\000\136@\002\000@0$r\000\000\n\001@\001\140\012$\002\236\031Ap\1728\031\246\160\\\201\023\231\007\000\136@\002\000@0$r\000\000\n\001@\001\140\012,\166\236\191\197s\174\127\127\246\160\252\221\023\255\215\000\000\000\000\000\000 \000P\000\000\000\000\000\000\000\003\027\132\000,\020o\226G\160\b\015\160\020\000\024\2241\184@\002\193F\254$z\000\128\250\001@\001\142\012,\166\236\191\197s\174\127\127\246\160\252\221\023\255\199\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\136@\002\000@0$r\000\000\n\001@\001\140\012,\166\236\191\197s\174\127\127\246\160\252\221\023\255\215\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\0000\000P\000\000\000\000\000\000\000\003\027\132\000,\020o\226G\160\b\015\160\020\000\024\224\128\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012$\002\236\031Ap\1728\031\240\160\\\192\023\231\0071\184@\002\193F\254$z\000\128\250\001@\001\142\012,\166\236\191\197s\174\127\127\246\160\252\221\023\255\199\194@.\193\244\023\n\195\129\255j\005\204\145~pp\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\0041\184@\002\193F\254$z\000\128\250\001@\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000C\027\132\000,\020o\226G\160\b\015\160\020\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012$\002\236\031Ap\1728\031\240\160\\\192\023\231\0071\184@\002\193F\254$z\000\128\250\001@\001\142\012$\002\236\031Ap\1728\031\240\160\\\192\023\231\0071\184@\002\193F\254$z\000\128\250\001@\001\142\012$\002\236\031Ap\1728\031\240\160\\\192\023\231\007\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012,\166\236\191\197s\174\127\127\246\160\252\221\023\255\199\194@.\193\244\023\n\195\129\255j\005\204\145~ps\027\132\000,\020o\226G\160\b\015\160\020\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015?\134\236?U\127\238\127\191\248\175\252\212\023\255\231^\221\145\004\023\241R\000\t\131\129\211\142\011\002\131C\027\132\000,\020o\226G\160\b\015\160\020\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0001\184@\002\193F\254$z\000\128\250\001@\001\142\012$\002\236\031Ap\1728\031\240\160\\\192\023\231\0071\184@\002\193F\254$z\000\128\250\001@\001\142\012$\002\236\031Ap\1728\031\240\160\\\192\023\231\0071\184@\002\193F\254$z\000\128\250\001@\001\142\012$\002\236\031Ap\1728\031\240\160\\\192\023\231\0071\184@\002\193F\254$z\000\128\250\001@\001\142\012$\002\236\031Ap\1728\031\240\160\\\192\023\231\0071\184@\002\193F\254$z\000\128\250\001@\001\142\012$\002\236\031Ap\1728\031\240\160\\\192\023\231\0071\184@\002\193F\254$z\000\128\250\001@\001\142\012$\002\236\031Ap\1728\031\240\160\\\192\023\231\0071\184@\002\193F\254$z\000\128\250\001@\001\142\012$\002\236\031Ap\1728\031\240\160\\\192\023\231\0071\184@\002\193F\254$z\000\128\250\001@\001\142\012$\002\236\031Ap\1728\031\240\160\\\192\023\231\0071\184@\002\193F\254$z\000\128\250\001@\001\142\012$\002\236\031Ap\1728\031\240\160\\\192\023\231\0071\184@\002\193F\254$z\000\128\250\001@\001\142\012$\002\236\031Ap\1728\031\240\160\\\192\023\231\0071\184@\002\193F\254$z\000\128\250\001@\001\142\012$\002\236\031Ap\1728\031\240\160\\\192\023\231\0071\184@\002\193F\254$z\000\128\250\001@\001\142\012$\002\236\031Ap\1728\031\240\160\\\192\023\231\0071\184@\002\193F\254$z\000\128\250\001@\001\142\012$\002\236\031Ap\1728\031\240\160\\\192\023\231\0071\184@\002\193F\254$z\000\128\250\001@\001\142\012$\002\236\031Ap\1728\031\240\160\\\192\023\231\0071\184@\002\193F\254$z\000\128\250\001@\001\142\012$\002\236\031Ap\1728\031\240\160\\\192\023\231\0071\184@\002\193F\254$z\000\128\250\001@\001\142\012$\002\236\031Ap\1728\031\240\160\\\192\023\231\0071\184@\002\193F\254$z\000\128\250\001@\001\142\012$\002\236\031Ap\1728\031\240\160\\\192\023\231\0071\184@\002\193F\254$z\000\128\250\001@\001\142\012$\002\236\031Ap\1728\031\240\160\\\192\023\231\0071\184@\002\193F\254$z\000\128\250\001@\001\142\012$\002\236\031Ap\1728\031\240\160\\\192\023\231\0071\184@\002\193F\254$z\000\128\250\001@\001\142\012$\002\236\031Ap\1728\031\240\160\\\192\023\231\007\194@.\193\244\023\n\195\129\255\n\005\204\001~ps\027\132\000,\020o\226G\160\b\015\160\020\000\024\224\128\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\027\132\000,\020o\226G\160\b\015\160\020\000\024\224\128\000 A\240\006\000\128\128|\002\000@\000X 0\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\000\000 \000P\000\000\000\000\000\000\000\003\027\132\000,\020o\226G\160\b\015\160\020\000\024\224\128\000\"\001\240\006\000\128\128|\002\000@\000X 0\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\027\132\000,\020o\226G\160\b\015\160\020\000\024\224\128\000 \129\240\006\000\128\128|\002\000@\000X 0\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\027\132\000,\020o\226G\160\b\015\160\020\000\024\224\128\000 A\240\006\000\128\128|\002\000@\000X 0\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\136@\002\000@0$r\000\000\n\001@\001\140\012,\166\236\191\197s\174\127\127\246\160\252\221\023\255\215\000\000\000\000\000\000 \000P\000\000\000\000\000\000\000\003\027\132\000,\020o\226G\160\b\015\160\020\000\024\224\128\000\"\001\240\006\000\128\128|\002\000@\000X 0\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\194\202n\203\252W;\231\247\255j\015\205\209\127\252s\027\132\000,\020o\226G\160\b\015\160\020\000\024\224\194@.\193\244\023\n\195\129\255\n\005\204\001~ps\027\132\000,\020o\226G\160\b\015\160\020\000\024\224\128\000 \129\240\006\000\128\128|\002\000@\000X 0\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\194\202n\203\252W;\231\247\255j\015\205\209\127\252s\027\132\000,\020o\226G\160\b\015\160\020\000\024\224\194@.\193\244\023\n\195\129\255\n\005\204\001~ps\027\132\000,\020o\226G\160\b\015\160\020\000\024\224\128\000 A\240\006\000\128\128|\002\000@\000X 0\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\194\202n\203\252W;\231\247\255j\015\205\209\127\252s\027\132\000,\020o\226G\160\b\015\160\020\000\024\224\194@.\193\244\023\n\195\129\255\n\005\204\001~pp\b\000\000\000\000\003\000\005\000\000\000\000\000\000\000\0001\184@\002\193F\254$z\000\128\250\001@\001\142\b\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\194\202n\203\252W;\231\247\255j\015\205\209\127\252s\027\132\000,\020o\226G\160\b\015\160\020\000\024\224\194@.\193\244\023\n\195\129\255\n\005\204\001~ps\027\132\000,\020o\226G\160\b\015\160\020\000\024\224\128\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\012,\166\236\191\197s\190\127\127\246\160\252\221\023\255\1991\184@\002\193F\254$z\000\128\250\001@\001\142\012$\002\236\031Ap\1728\031\240\160\\\192\023\231\0071\184@\002\193F\254$z\000\128\250\001@\001\142\b\000\002\004\031\000`\b\b\007\192 \004\000\005\130\003\194\202n\203\252W;\231\247\255j\015\205\209\127\252s\027\132\000,\020o\226G\160\b\015\160\020\000\024\224\194@.\193\244\023\n\195\129\255\n\005\204\001~pp\000\000\000\000\000\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\000\000 \000P\000\000\000\000\000\000\000\003\027\132\000,\020o\226G\160\b\015\160\020\000\024\224\128\000\"\001\240\006\000\128\128|\002\000@\000X <,\166\236\191\197s\190\127\127\246\160\252\221\023\255\1991\184@\002\193F\254$z\000\128\250\001@\001\142\012$\002\236\031Ap\1728\031\240\160\\\192\023\231\0071\184@\002\193F\254$z\000\128\250\001@\001\142\b\000\002\b\031\000`\b\b\007\192 \004\000\005\130\003\194\202n\203\252W;\231\247\255j\015\205\209\127\252s\027\132\000,\020o\226G\160\b\015\160\020\000\024\224\194@.\193\244\023\n\195\129\255\n\005\204\001~ps\027\132\000,\020o\226G\160\b\015\160\020\000\024\224\128\000 A\240\006\000\128\128|\002\000@\000X <,\166\236\191\197s\190\127\127\246\160\252\221\023\255\1991\184@\002\193F\254$z\000\128\250\001@\001\142\012$\002\236\031Ap\1728\031\240\160\\\192\023\231\007\194\202n\203\252W;\231\247\255j\015\205\209\127\252s\027\132\000,\020o\226G\160\b\015\160\020\000\024\224\194@.\193\244\023\n\195\129\255\n\005\204\001~p|,\166\236\191\197s\174\127\127\246\160\252\221\023\255\215\194\202n\203\252W:\231\247\255\n\015\205A\127\252p\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\"\001\240\006\000\128\128|\002\000@\000X 0\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0001\184@\002\193F\254$z\000\128\250\001@\001\142\b\000\002\b\031\000`\b\b\007\192 \004\000\005\130\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\027\132\000,\020o\226G\160\b\015\160\020\000\024\224\128\000 A\240\006\000\128\128|\002\000@\000X 0\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\027\132\000,\020o\226G\160\b\015\160\020\000\028\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000$\129\240\006\000\128\128|\002\000@\000X`;\027\132\b,\020o\226G\160\b\015\160\020\000\028\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\027\132\b,\020o\226G\160\b\015\160\020\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\136@\002\000@0$r\000\000\n\001@\001\140\004\000\000\000\000\000\000\000\000\000\006\000\000\t\000\000\000\000\128\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\004@\000\000\000\000\000\000\000\000@\000$\000\b\024\000\002\128\128\003\011\132\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000D\000\000\000\000\b\000\000\000\004\000\000\000\000\129\128\000(\b\0000\184@\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\004@\000\000\000\000\128\000\000\000@\000 \000\000\024\000\002\128\128\003\011\132\000\002\000\000\000\000\000\000\128\000\004@\000\000\000\000\128\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\004@\000\000\000\000\000\000\000\000@\000\000\000\b\000\000D\000\000\000\000\000\000\000\000\000\000\000\000\000\128\128\000@\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000`\000\000\144\000\000\000\b\000\000\000\000\003\000G\000\000\000\000\000\000\000\000\192\000\004@\000\000\000\000\000\000`\000@\144$\000\003\027\132\000,\020o\226G\160\b\015\160\020\000\028\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0001\184@\130\193F\254$z\000\128\250\001@\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\132\000 \004\003\002G \000\000\160\020\000\024\192\128\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\028\134 ?\001cJE\167\198 \172\b\001\146\203\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\001\138@\bH\n0$V\000 \n\000\000\005\004\000\024\000\002\000\000\003\011\132\000\002\000\000\000\000\000\000\000\128\000\000\000\b\016\000\000\000 \000\000\000\000\000\003\027\132\000,\020o\226G\160\b\015\160\020\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\164\000\132\128\163\002E`\002\000\160\000\000P@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\164\000\132\128\163\002E`\002\000\160\000\000P@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0001\184@\002\193F\254$z\000\128\250\001P\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\194@.\193\244\023\n\195\129\255\n\005\204\001~pp\024\132\000\004\000#\002E\160\002\000\168\000\000\016@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0001\184@\002\193F\254$z\000\128\250\001@\001\142\b\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0001\184@\002\193F\254$z\000\128\250\001@\001\142\b\000\002\004\031\000`\b\b\007\192 \004\000\005\130\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\144\000\000\000\000\000\000\000\000\002\000\005\000\000\000\000\000\000\000\0001\184@\002\193F\254$z\000\128\250\001@\001\142\b\000\002 \031\000`\b\b\007\192 \004\000\005\130\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0001\184@\002\193F\254$z\000\128\250\001@\001\142\b\000\002\b\031\000`\b\b\007\192 \004\000\005\130\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0001\184@\002\193F\254$z\000\128\250\001@\001\142\b\000\002\004\031\000`\b\b\007\192 \004\000\005\130\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\132\000 \004\003\002G \000\000\160\020\000\024\192B\207n\139\252^:\231\246\127f\015\215\218[\188\240\000\000\000\000\000\002\000\005\000\000\000\000\000\000\000\0001\184@\002\193F\254$z\000\128\250\001@\001\142\b\000\002 \031\000`\b\b\007\192 \004\000\005\130\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004,\246\232\191\197\227\190\127g\246`\253}\165\187\2071\184@\002\193F\254$z\000\128\250\001@\001\142\004$R\232\031A\224\1728\007\242`]`\165\163\0151\184@\002\193F\254$z\000\128\250\001@\001\142\b\000\002\b\031\000`\b\b\007\192 \004\000\005\130\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004,\246\232\191\197\227\190\127g\246`\253}\165\187\2071\184@\002\193F\254$z\000\128\250\001@\001\142\004$R\232\031A\224\1728\007\242`]`\165\163\0151\184@\002\193F\254$z\000\128\250\001@\001\142\b\000\002\004\031\000`\b\b\007\192 \004\000\005\130\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004,\246\232\191\197\227\190\127g\246`\253}\165\187\2071\184@\002\193F\254$z\000\128\250\001@\001\142\004$R\232\031A\224\1728\007\242`]`\165\163\015\000\128\000\000\000\0000\000P\000\000\000\000\000\000\000\003\027\132\000,\020o\226G\160\b\015\160\020\000\024\224\128\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\004,\246\232\191\197\227\190\127g\246`\253}\165\187\2071\184@\002\193F\254$z\000\128\250\001@\001\142\004$R\232\031A\224\1728\007\242`]`\165\163\0151\184@\002\193F\254$z\000\128\250\001@\001\142\b\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000B\207n\139\252^;\231\246\127f\015\215\218[\188\243\027\132\000,\020o\226G\160\b\015\160\020\000\024\224BE.\129\244\030\n\195\128\127&\005\214\nZ0\243\027\132\000,\020o\226G\160\b\015\160\020\000\024\224\128\000 A\240\006\000\128\128|\002\000@\000X 4,\246\232\191\197\227\190\127g\246`\253}\165\187\2071\184@\002\193F\254$z\000\128\250\001@\001\142\004$R\232\031A\224\1728\007\242`]`\165\163\015\000\000\000\000\000\000\000\000\000\000\000\000\000\144\000\000\000\000\000\000\000\000\002\000\005\000\000\000\000\000\000\000\0001\184@\002\193F\254$z\000\128\250\001@\001\142\b\000\002 \031\000`\b\b\007\192 \004\000\005\130\003B\207n\139\252^;\231\246\127f\015\215\218[\188\243\027\132\000,\020o\226G\160\b\015\160\020\000\024\224BE.\129\244\030\n\195\128\127&\005\214\nZ0\243\027\132\000,\020o\226G\160\b\015\160\020\000\024\224\128\000 \129\240\006\000\128\128|\002\000@\000X 4,\246\232\191\197\227\190\127g\246`\253}\165\187\2071\184@\002\193F\254$z\000\128\250\001@\001\142\004$R\232\031A\224\1728\007\242`]`\165\163\0151\184@\002\193F\254$z\000\128\250\001@\001\142\b\000\002\004\031\000`\b\b\007\192 \004\000\005\130\003B\207n\139\252^;\231\246\127f\015\215\218[\188\243\027\132\000,\020o\226G\160\b\015\160\020\000\024\224BE.\129\244\030\n\195\128\127&\005\214\nZ0\244,\246\232\191\197\227\190\127g\246`\253}\165\187\2071\184@\002\193F\254$z\000\128\250\001@\001\142\004$R\232\031A\224\1728\007\242`]`\165\163\015B\207n\139\252^:\231\246\127f\015\215\218[\188\244,\246\232\191\197\227\174\127g\242`\253t\165\187\207\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\0001\184@\002\193F\254$z\000\128\250\001@\001\142\012$\002\236\031Ap\1728\031\240\160\\\192\023\231\0071\184@\002\193F\254$z\000\128\250\001@\001\142\012$\002\236\031Ap\1728\031\240\160\\\192\023\231\007\128\000\"\001\240\006\000\128\128|\002\000@\000X 0\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0001\184@\002\193F\254$z\000\128\250\001@\001\142\b\000\002\b\031\000`\b\b\007\192 \004\000\005\130\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\027\132\000,\020o\226G\160\b\015\160\020\000\024\224\128\000 A\240\006\000\128\128|\002\000@\000X 0\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\004\000\004\129\0161\184@\002\193F\254$z\000\128\250\001@\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\131\027\132\000,\020o\226G\160\bz\000\128\250\001@\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\0001\184@\002\193F\254$z\000\128\250\001@\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\0001\184@\002\193F\254$z\000\128\250\001@\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\027\132\000,\020o\226G\160\b\015\160\020\000\024\224\000\004\000\000\000\000\000\000\000\000\000\000\002\000\000\000\003\027\132\000,\020o\226G\160\b\015\160\020\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\003\027\132\000,\020o\226G\160\b\015\160\020\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\028\134 ?\001cJE\167\198 \172\b\001\146\203\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\001\138@\bH\n0$V\000 \n\000\000\005\004\000\024\000\002\000\000\003\011\132\000\002\000\000\000\000\000\000\000\128\000\000\000\b\016\000\000\000 \000\000\000\000\000\003\027\132\000,\020o\226G\160\b\015\160\020\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\164\000\132\128\163\002E`\002\000\160\000\000P@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\164\000\132\128\163\002E`\002\000\160\000\000P@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\0001\184@\002\193F\254$z\000\128\250\001@\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0001\184@\002\193F\254$z\000\128\250\001P\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000BE.\129\244\030\n\195\128\127&\005\214\nZ0\240\024\132\000\004\000#\002E\160\002\000\168\000\000\016@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\0001\184@\002\193F\254$z\000\128\250\001@\001\142\004$R\232\031A\224\1728\007\242`]`\165\163\0151\184@\002\193F\254$z\000\128\250\001@\001\142\004$R\232\031A\224\1728\007\242`]`\165\163\015\000\000 \001\240\006\000\128\128|\006\000@\000X 0\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\194\202n\203\252W:\231\247\255j\015\205\209\127\253|$\002\236\031Ap\1728\031\246\160\\\201\023\231\007\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000BE.\129\244\030\n\195\128\127f\005\214\154Z0\240\000\002\000\031\000`\b\b\007\192`\004\000\005\130\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004,\246\232\191\197\227\174\127g\246`\253}\165\187\207\128\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\bb\b\000\000\000\002\002\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000 \000\128\001\000\000\000\000\000\000\003\027\132\000,\020o\226G\160\b\015\160\020\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\002\000\000\000\b\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000@\000\004\000\000\b\001\000\000\001\003\002\000\000\000\016\000\000\000\000\000@\000\000\000\000\b\000\000\128\000\000\000@\000\000\000\000\b\b\000\000\000\002\002\000\000\000\016\000\000\000\000\000\002@\b\128\004\016*C\128\003 \001\144\000\002\000@\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\0001\184@\002\193F\254$z\000\128\250\001@\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000@\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\136\000\000 \000 \000\192\000\000\002\000\000\000\000\000\b\128\000\000\000\002\000\012\000\000\000 \000\000\000\000\000\136\000\000\000\000 \000@\000\000\002\000\000\000\000\000\000\000\000\000 \000\000\b\000\016\000\000\000\000@\000\000\000\000\000\000\000\000\000\128\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\0001\184@\002\193F\254$z\000\128\250\001@\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\136A\000@\0020$\218\000 \n\000\000\001\004\000\024\132\016\004\000#\002E\160\002\000\160\000\000\016@\001\136@\000@\0020$Z\000 \n\000\000\001\004\000$\000\136\000A\000\1640\0002\000\025\000\000 \004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\002D\031\000`\b\b\007\192\160\004\000\005\130\003\128\000\004\000\000\000\000\000\000\000\b\000\000\000\000\000\b\000\000\000\000\000\001\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\bn\195\129\255\n\005\204\001~px\000\000\bb\b\000\000\000\002\002\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000 \000\128\001\000\000\000\000\000\000\003\027\132\000,\020o\226G\160\b\015\160\020\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\002\000\000\000\b\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000@\000\004\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\0001\184@\002\193F\254$z\000\128\250\001@\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\136\000\000 \000 \000\192\000\000\002\000\000\000\000\000\b\128\000\000\000\002\000\012\000\000\000 \000\000\000\000\000\136\000\000\000\000 \000@\000\000\002\000\000\000\000\000\000\000\000\000 \000\000\b\000\016\000\000\000\000@\000\000\000\000\000\000\000\000\000\128\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\0001\184@\002\193F\254$z\000\128\250\001@\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\132\000\004\000#\002E\160\002\000\168\000\000\017@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\003\027\132\000,\020o\226G\160\b\015\160\020\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b \000\000\000\000\016\0040\024\000\000\000\128\016\000\000\130@\b\000\004\017\nb\0000\184@\000 \000\000\000\000\000\b \000\000\000\000\016\0048\024\000\000\000\128\016\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\002@\0001\184@\002\193F\254$z\000\128\250\001@\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\003\027\132\000,\020o\226G\160\b\015\160\020\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000@\000\001\000\b\000\000\000\000\000\000\000\128\000\000\000\004\000\000\016\000\128\000\000\000\000\000\000\000\000\000\000\000@\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\001\138@\bH\0020$V\000 \n@\000\005\004\b\028\134 ?\001cJE\167\198 \172\b\001\146\203\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\001\138@\bH\0020$V\000 \n@\000%\004\003\027\132\000,\020o\226G\160\b\015\160\020\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\0001\184@\002\193F\254$z\000\128\250\001@\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\164\000\132\128#\002E`\002\000\164\000\002P@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\192\000(\b\0000\184@\000 \000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\024\000\002\128\128\003\011\132\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000@\000\000\000\003\027\132\000,\020o\226G\160\b\015\160\020\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\001\000\000\000\001\128\000(\b\0000\184@\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\003\027\132\000,\020o\226G\160\b\015\160\020\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\bb\0000\184@\000 \000\000\000\000\000\000\b\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\130\128  \000\t\016C\129\128 \000\b\017\000\001\000\000\000\002\000\000\000\000\000\000\000\000\000\001\000\000\000\001\128\000(\b\0000\184@\000 \000\000\000\000\000\b \000\000\000\000\016\0048\024\000\000\000\128\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b \000\000\000\000\016\0048\024\000\000\000\128\016\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\024\164\000\132\128#\002E`\002\000\164\000\000P@\001\192\000(\b\0000\184@\000 \000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\024\000\002\128\128\003\011\132\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000@\000\000\000\003\027\132\000,\020o\226G\160\b\015\160\020\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\0001\184@\002\193F\254$z\000\128\250\001@\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005\237\217\016A\127\021 \000\1528\0298\224\176(43\248H\138\197V\254fz\002\128\251\129@\007\142\005\237\217\016A\127\021 \000\1528\0298\224\176(43\248H\138\197V\254fz\002\128\251\129@\007\142\005\237\217\016A\127\021 \000\1528\0298\224\176(43\248H\138\197V\254fz\002\128\251\129@\007\142\000\b\b\000\002\000\002\002\b\000\000\016\000\000\000\000\000\000\128\128\000\000\000  \128\000\001\000\000\000\000\000\000\b\b\000\000\000\002\002\000\000\000\016\000\000\000\000\000\002@\b\128\004\016*C\128\002 \001\144\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \0000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\0000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\001\128\000(\b\0000\184@\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\004\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000$\004\136\000A\000\1640\000\"\000\025\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000$\000\136\000A\000\1640\000\"\000\025\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\128\000\002\000\002\000\012\000\000\000 \000\000\000\000\000\136\000\000\000\000 \000\192\000\000\002\000\000\000\000\000\b\128\000\000\000\002\000\004\000\000\000 \000\000\000\000\002@\b\128\006\016\nC\128\002 \001\208\000\006\000\000\b\128\000\000\000\002\000\004\000\000\000 \000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\002@\b\128\004\016\nC\128\002 \001\144\016\002\016\000\b\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000$\000\136\000A\000\1648\000\"\000\025\000\000 \000\002@\b\128\004\016\nC\000\002 \001\144\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002@\b\128\004\016\nC\128\002 \001\144\000\002\000\000$\000\136\000A\000\1640\000\"\000\025\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000<\000\138\128\193\003\015\164\000\"\000\024\000\000 \000\001\128\000 `\1300\000\128\000\000\000\000\000\000\000\000\024\000\002\004\b#\000\b\000\000\000\000\000\000\000\000\001\128\000 @\1300\000\000\000\000\000\000\000\000\000\000\024\000\002\004\000#\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000$\000\136\016A\000\0040\000 \000\029\000\017 \004\001\136\000,\b\0000\184P\000 \002\000 \000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002@\b\128\004\016\000C\000\002\000\001\144\001\002\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\bb\0000\184P\000 \002\000 \000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002@\b\128\004\016\000C\000\002\000\001\144\001\002\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000$\000\136\000A\000\1640\000\"\000\025\000\016 \004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\136\000\004\000\000 \000@\000\000\002\000\000\000\016\000\b\128\000\000\000\002\000\004\000\000\000 \000\000\001\000\002@\b\128\004\016\000C\000\002\000\001\144\000\002\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002@\b\128\004\016\000B\000\002\000\001\144\000\002\000\000\b\000\000\002\000\000\000\b\000\000\000\000\000\000\000\128\000\128\000\000 \000\000\000\128\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000$\000\136\000A\002\0040\000 \000\025\001\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000$\000\136\000A\002\0040\000 \000\025\001\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012\000\016\002\000\000\000\b\000\000\000\000\000\000\000\000\000\128\001\000\000\000\000\000\128\000\000\000\000\000\000\000\000\b\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000@\000\020\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002@\b\128\004\016\000C\000\002\000\001\144\016\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002@\b\128\004\016 C\000\002\000\001\144\016\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\016\000\000\0160 \000\000\001\000\000\000\000\000\004$\000\136\000A\128\0048\000 \000\025\000\000 \000\002@\b\128\004\016\000C\000\002\000\001\144\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\128\016\000\000\0160 \000\000\001\000\000\000\000\000\004$\000\136\000A\128\0048\000 \000\025\000\000 \004\002@\b\128\004\016\000B\000\002\000\001\144\000\002\000@\b\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\128\016\000\000\0160 \000\000\001\000\000\000\000\000\004$\000\136\000A\128\0048\000 \000\025\000\000 \004\002@\b\128\004\016\000B\000\002\000\001\144\000\002\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\001\000\002\001\003\002\b\000\000\016\000\000\000\000\000\000\128\016\000\000\0160 \128\000\001\000\000\000\000\000\000\b\001\000\000\001\003\002\000\000\000\016\000\000\000\000\000B@\b\128\004\024\000C\128\002\000\001\144\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\136\000\000 \000 \000\192\000\000\002\000\000\000\000\000\b\128\000\000\000\002\000\012\000\000\000 \000\000\000\000\000\136\000\000\000\000 \000@\000\000\002\000\000\000\000\000$\000\136\000a\000\0048\000 \000\025\000\000`\000\004@\000\000 \000\016\000\192\000\000\000\000\000\000\000\000@\000\000\002\000\001\000\012\000\000\000\000\000\000\000\000\004\000\000\000\000\000\016\000\192\000\000\000\000\000\000\000\000@\000\000\000\000\001\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\004\000\000\000\000\000\000\000\000\001\000\000 @\002\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\b\000\000\000\016\001\"\004\000\000\000\000\000\000\000\000\130\000\000\000\000\001 B\128\128\000\000\b\001\000\000\b \000\000\000\000\018\004 \b\000\000\000\128\016\000\000\001\128\000(\b\0000\184@\000 \000\000\000\000\000\000\000\000 \000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b \000\000\000\000\016\004 \b\000\000\000\128\016\000\000\004\000\000\000\000 \016\000\128\000\000\000\000\000\000\000\000@\000\000\000\002\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\001\128\000(\b\0000\184@\000 \000\000\000\000\000\b \000\000\000\000\016\0048\b\000\000\000\128\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000@\000\001\000\b\000\000\000\000\000\000\000\000\004\000\000\004\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\024\000\002\128\128\003\011\132\000\002\000\000\000\000\000\000\130\000\000\000\000\001\000C\000\128\000\000\b\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000^\221\145\004\023\241R\000\t\131\129\211\142\011\002\131C?\132\136\172Uo\230g\160(\015\184\020\000x\224\004@\000\000 \000\016\000\192\000\000\000\000\000\000\000\000@\000\000\000\000\001\000\012\000\000\000\000\000\000\000\000\004\000\000\000\000\000\016\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\024\164\000\132\128#\002E`\002\000\164\000\000P@\000\128\000\000\001\0002 @\000\000@\000\000\000\000\b \000\000\000\000\018\004(\024\000\000\000\128\016\000\000\130\000\000\000\000\001 B\001\128\000\000\b\001\000\000\b \000\000\000\000\016\004 \024\000\000\000\128\016\000\0001\184@\002\193F\254$\250\000\128\250\001@\001\142\003\027\132\000,\020o\226G\160\b\015\160\020\000\024\224\130\000\000\000\000\001\000C\001\128\000\000\b\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\001\0002 \192\000\000@\000\000\000\b\000\b\000\000\000\016\003\"\012\000\000\004\000\000\000\000\000\000\128\000\000\001\0002 @\000\000@\000\000\000\000\b \000\000\000\000\018\004(\024\000\000\000\128\016\000\000\130\000\000\000\000\001 B\001\128\000\000\b\001\000\000\b \000\000\000\000\016\004 \024\000\000\000\128\016\000\000\001\128\000(\b\0000\184\192\000 \000\000\000\000\000\000\024\000\002\128\128\003\011\132\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000@\000\000\000\000\024\000\002\128\128\003\011\132\000\002\000\000\000\000\000\000\130\000\000\000\000\001\000C\129\128\000\000\b\001\000\000\b \000\000\000\000\016\0040\024\000\000\000\128\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\130\000\000\000\000\001\000C\001\128\000\000\b\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b \000\000\000\000\016\004 \024\000\000\000\128\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\011?\132\128,U\127\230\127\184(\015\184\148\0169\228\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\016\003\"\004\000\000\004\000\000\000\000\000\001\136A\000d\0020$\218\000 \n\000\000\001\004\005\237\217\016A\127\021 \000\1528\0298\224\176(4\001\136A\000@\0020$\218\000 \n\000\000\001\004\000\024\132\016\004\000#\002E\160\002\000\160\000\000\016@\001\136@\000@\0020$Z\000 \n\000\000\001\004\000\000\000\000\000\000\000\000\016\000\016\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\b\000\000\000\000\000\000\000\128\000\128\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\016\000\000\000\b\000\000\000\016\003\"\004\000\000\004\000\000\000\000\000\001\128\000(\b\0000\184@\000 \000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\004\000\000\000\128\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\128\000(\b\0000\184@\000 \000\000\000\000\000\000\000\000\b\000\000\000\000\b\000\000\000\000\000\004\000\000\000\000\000\128\000\000\000\000\128\000\000\000\000\000@\000\000\024\164\000\132\128#\002M`\002\000\160\000\000\016@\001\138@\bH\0020$V\000 \n\000\000\001\004\000\024\164\000\132\128\163\002E`\002\000\160\000\000\016@\000\128\000\000\001\0002 @\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\004\000\128\000\000\001\0002 @\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\130\202J\n\012Q:g\247\130\000\011\137A\007\141H,\164\160\160\197\019\166\127x \000\184\148\016x\212\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b$\000\160\000A\016\1648\024 \000\024\128\016`\020\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\130@\n\000\004\017\nC\129\130\000\001\136\001\006\001@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b$\000\160\000A\016\1648\024 \000\024\128\016`\020\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\001\000\000\000\000\128\000\000\001\0002 @\000\000@\000\000\000\000\b$\000\160\000A\016\1648\024 \000\024\128\016`\020\001\136A\000@\0020$Z\000 \nb\001\000\000\b \000\000\000\000\018\004 \b\000\000\000\128\016\000\000\130\000\000\000\000\001\000B\000\128\000\000\b\001\000\000\000\b\000\000\000\016\001\"\012\000\000\000\000\000\000\000\000\000\128\000\000\001\000\018 @\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\b\000\000\000\000\000\000\000\128\000\128\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\016\000\000\000\b\000\000\000\016\001\"\004\000\000\000\000\000\000\000\000\001\128\000(\b\0000\184@\000 \000\000\000\000\000\000\000\000\bb$\000\160\000A\016\1648\b \000\024\128\016 \004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\016\000\000\000\b\000\000\000\016\001\"\004\000\000\000\000\000\000\000\000\130@\n\000\004\017\nC\128\130\000\001\136\001\002\000H \000\000\000\000\016\0048\b\000\000\000\128\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\000\002\128\128\003\011\140\000\002\000\000\000\000\000\000\001\128\000(\b\0000\184@\000 \000\000\000\000\000\b \000\000\000\000\016\0040\b\000\000\000\128\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\130\000\000\000\000\001\000C\000\128\000\000\b\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b \000\000\000\000\016\004 \b\000\000\000\128\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b,\002\160\000A\129\0048\000\"\000\024\128\000`\004\001\128\000 \000\0000\184@\000 \000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\001\128\000(\t\0002\184@\000 \000\000\000\000\000\000\024\000\002\128\128\003\011\132\000\002\000\000\000\000\001@\000\000\000\128\000\000\000\000\128\000\000\000\000\000@\016\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\001\128\000(\t\0002\184@\000 \000\000\000\000\000\000\024\000\002\000\000\003\011\132\000\002\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\024\000\002\128\144\003+\132\000\002\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\016\000\000\000\b\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\130\192*\000\004\024\016C\128\002 \001\136\000\002\000H,\002\160\000A\129\0048\000\"\000\024\128\000 \004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b$\000\160\000A\000\0048\000 \000\024\128\000 \004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b \000\000\000\000\016\0048\024\000\000\000\128\016\000\016\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\130\000\000\000\000\001\000C\001\128\000\000\b\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\001\0002 @\000\000@\000\000\000\000\b \000\000\000\000\016\0048\024\000\000\000\128\016\000\016\130\000\000\000\000\001\000C\001\128\000\000\b\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\bb\000\b\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\001\000\000\000\000\128\000\000\001\0002 @\000\000@\000\000\000\000\000\024\000\002\128\128\003\011\132\000\002\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000@\000\000\b\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\164\000\132\128#\002M`\002\000\160\000\000\016@\001\138@\bH\0020$V\000 \n\000\000\001\004\000\024\164\000\132\128\163\002E`\002\000\160\000\000\016@\000\128\000\000\001\0002 @\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\004\000\128\000\000\001\0002 @\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\202H\138\012P:g\246\002 \011\145@\003\140@,\164\136\160\197\003\166\127`\"\000\185\020\0008\196\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000$\000\136\000A\000\1648\000\"\000\025\000\000 \004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000$\000\136\000A\000\1648\000\"\000\025\000\000 \004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002@\b\128\004\016\nC\128\002 \001\144\000\002\000@\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\016\000\000\000\b\000\000\000\016\003\"\004\000\000\004\000\000\000\000\000\002@\b\128\004\016\nC\128\002 \001\144\000\002\000@$\000\136\000A\000\1648\000\"\000\025\000\000 \004\001\128\000(\t\0002\184@\000 \000\000\000\000\000\000,\002\136\000A\129\0048\000\"\000\029\000\000`\004\001\128\000 \000\0000\184@\000 \000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\001\128\000(\t\0002\184@\000 \000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\128\000\000\000\000\000\000\b\000\b\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\001\000\000\000\000\128\000\000\001\000\018 @\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\128\000(\b\0000\184@\000 \000\000\000\000\000\000\000\000\bb\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\016\000\000\000\b\000\000\000\016\001\"\004\000\000\000\000\000\000\000\000\002@\b\128\004\016\nC\128\002 \001\208\000\002\000@\024\000\002\128\128\003\011\132\000\002\000\000\000\000\001@\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\024\000\002\128\144\003+\132\000\002\000\000\000\000\000\000\001\128\000 \000\0000\184@\000 \000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\001\128\000(\t\0002\184@\000 \000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\001\000\000\000\000\128\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000,\002\136\000A\129\0048\000\"\000\029\000\000 \004\002\192(\128\004\024\016C\128\002 \001\208\000\002\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002@\b\128\004\016\000C\128\002\000\001\208\000\002\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\128\000\000\001\0002 @\000\000@\000\000\000\000\000$\000\136\000A\000\1648\000\"\000\025\000\000 \004\001\138@\bH\0020$V\000 \n@\000\005\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002@\b\128\004\016\nC\000\002 \001\144\000\002\000@$\000\136\000A\000\164 \000\"\000\025\000\000 \004\004\000\000\000\000\000\016\000\192\000\000\000\000\000\000\000\000@\000\000\000\000\001\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\001\138@\bH\0020$V\000 \n@\000\005\004\000$\000\136\000A\000\1640\000\"\000\025\000\000 \004\002@\b\128\004\016\nB\000\002 \001\144\000\002\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002@\b\128\004\016\nb\128\004\016\nC\000\002 \001\144\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002@\b\128\004\016\nB\000\002 \001\144\000\002\000@\016\000\002\004\000#\000\b\000\000\000\000\000\000\000\000\001\000\000 @\0020\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\002@\b\128\004\016\nC\000\002 \001\208\001\002\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002@\b\128\004\016\nC\000\002 \001\144\001\002\000@$\000\136\000A\000\164 \000\"\000\025\000\000 \004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000$\000\136\000A\000\1640\000 \000\025\000\000 \000\002@\b\128\004\016\nB\000\002\000\001\144\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002@\b\128\004\016\nB\000\003 \001\144\000\002\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002@\b\128\004\016\nB\000\003 \001\144\000\002\000H\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002@\b\128\004\016\nC\128\002 \001\144\000\002\000@$\000\136\000A\000\164 \000\"\000\025\000\000 \004\004\000\000\000\000\000\016\000\192\000\000\000\000\000\000\000\000@\000\000\000\000\001\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\b\000\000\000\016\001\"\004\000\000\000\000\000\000\000\000\002@\b\128\004\016\nb\128\004\016\000C\000\002\000\001\144\000\002\000@$\000\136\000A\000\004 \000 \000\025\000\000 \004\004\000\000\000\000\000\016\000\192\000\000\000\000\000\000\000\000@\000\000\000\000\001\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\024\000\002\128\144\003+\132\000\002\000\000\000\000\000\000\002@\bb\128\004\016\000C\000\002\000\001\144\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002@\b\128\004\016\000B\000\002\000\001\144\000\002\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002@\b\128\004\016\000B\000\002\000\001\144\000\002\000@\016\000\002\004\000#\000\b\000\000\000\000\000\000\000\000\001\000\000 @\0020\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\024\128\002\192\128\003\011\133\000\002\000 \002\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000$\000\136\000A\000\0040\000 \000\025\000\016 \004\002@\bb\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\b\b\000\002\000\002\002\b\000\000\016\000\000\000\000\000\000\128\128\000\000\000  \128\000\001\000\000\000\000\000\000\b\b\000\000\000\002\002\000\000\000\016\000\000\000\000\000\000\000\002\000\000\000 \000\128\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\128\016\000\000\0160 \000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\002\000\000\bb\000\002 \031\000`\b\b\007\192 \004\000\007\194\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\128\016\000\000\0160 \000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\002\000\000\b\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\128\016\000\000\0160 \000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\002\000\000\b\000\000\128\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\016\000\000\0160 \000\000\001\000\000\000\000\000\004\000\000 \000\000\128\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\128\128\000\000\000  \000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\194@\n\000\004\024*C\128\002\000\001\136\000\006\000@(\b \000\000\002\002\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000 \000\000\002\000\b\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\016\000\000\0160 \000\000\001\000\000\000\000\000\012\000\000 \000\000\128\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\194@\n\000\004\024*C\128\002\000\001\136\016\006\000@\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000 \000\000\002\000\b\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\016\000\000\0160 \000\000\001\000\000\000\000\000\012\000\000 \000\000\128\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002@\b\128\004\016*C\128\003 \001\144\000\002\000@$\000\136\000A\000\1640\000\"\000\025\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000@\000\004\000\000$\000\136\000A\000\1640\000\"\000\025\000\000 \004\002@\b\128\004\016\nB\000\002 \001\144\000\002\000@\b\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\004\000\000@\000\002@\b\128\004\016\nC\000\002 \001\144\000\002\000@$\000\136\000A\000\164 \000\"\000\025\000\000 \004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\128\000\000\000\000\128\000\000\000\000\000H\017\003\027\132\000,\020o\226G\160\b\015\160\020\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\b\128\000@\000\002\000\004\000\000\000 \000\000\001\000\000\136\000\000\000\000 \000@\000\000\002\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\136\000\000\000\000 \000@\000\000\002\000\000\000\000\b$\000\128\000a\000\1648\000 \000\028\128\000ab\128\000\000\000\002\000\004\000\000\000 \000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\130@\b\000\004\016\nC\128\002\000\001\136\016\002\016\000\b\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\b$\000\128\000A\000\1648\000 \000\024\128\000!\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\000\002\000\000\003\011\133\000\002\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\024\000\002\000\000\003\011\132\000\002\000\000\000\000\000\000\130\192\b\000\004\016\026C\128\002 \001\136\001\002\016H,\002\128\000A\129\1648\000\"\000\024\128\016!\004\130@\b\000\004\016\nC\128\002\000\001\136\001\002\016@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\130@\b\000\004\016\nb\000\006\016\nC\128\002\000\001\200\000\006\016\000\b\128\000\000\000\002\000\004\000\000\000 \000\000\000\000\130@\b\000\004\016\nC\128\002\000\001\136\000\002\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\130@\b\000\004\016\nC\128\002\000\001\136\001\002\016@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\016\000\000\000\000\000\000\000\000\000\b$\000\128\016A\000\1640\000 \000\028\128\016 \004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b$\000\128\000A\000\1640\000 \000\024\128\016 \004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\136\000\004\000\000 \000@\000\000\002\000\000\000\016\000\b\128\000\000\000\002\000\004\000\000\000 \000\000\001\000\130@\b\000\004\016\nC\000\002\000\001\136\000\002\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\179\248H\002\197V\254fz\002\128\251\137@\003\142\000\b\b\000\002\000\002\002\b\000\000\016\000\000\000\000\128\000\128\128\000 \000  \128\000\001\000\000\000\000\000\000\b\b\000\000\000\002\002\b\000\000\016\000\000\000\000\000\000\128\128\000\000\000  \000\000\001\000\000\000\000\000\b$\000\128\000A\002\1648\000 \000\024\128\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\b\000\000\000\002\002\b\000\000\016\000\000\000\000\000\000\128\128\000\000\000  \000\000\001\000\000\000\000\000\b$\000\128\000A\002\1648\000 \000\024\128\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012\000\016\002\000\000\000\b\000\000\000\000\000\000\000\000\000\128\000\000 \000\016\000\128\000\000\000\000\000\000\000\000\b\000\000\000\000\001\000\b\000\000\000\000\000\000\000\000\000\128\000\000\000\000\016\000\000\000\000\000\000\000\000\000\b$\000\128\000A\000\1640\000 \000\028\128\000 \000\000\128\016\000\000\0160 \000\000\001\000\000\000\000\000\012$\000\128\000A\128\1648\000 \000\024\128\000 \000\130@\b\000\004\016\nC\000\002\000\001\136\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\001\000\000\000\000\000\128\000\000\000\000\000\000\000\000\b\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000@\000\004\000\000\b\b\000\000\000\002\002\000\000\000\016\000\000\000\000\000\130@\b\000\004\016*C\128\002\000\001\136\000\002\000@\b\001\000\000\001\003\002\000\000\000\016\000\000\000\000\000@\000\000\000\000\b\000\000\128\000\000\000@\000\000\000\000\b\b\000\000\000\002\002\000\000\000\016\000\000\000\000\000\130@\b\000\004\016*C\128\002\000\001\136\000\002\000H$\000\128\000A\000\1640\000 \000\024\128\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\004\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000@\000\004\000\b$\000\128\000A\000\1640\000 \000\024\128\000 \004\130@\b\000\004\016\nB\000\002\000\001\136\000\002\000@\b\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\004\000\000@\000\130@\b\000\004\016\nC\000\002\000\001\136\000\002\000H$\000\128\000A\000\164 \000 \000\024\128\000 \004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\136A\000`\0020$\218\000 \n\000\000\001\004\000\024\132\016\004\000#\002M\160\002\000\160\000\000\016@\001\136A\000@\0020$Z\000 \n\000\000\001\004\000\024\132\000\004\000#\002E\160\002\000\160\000\000\016@\001\138@\bH\0020$\214\000 \n@\000m\021\b\028\000\002\128\128\003\011\132\000\002\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\128\000(\b\0000\184@\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\004\000\000\000\0001\184@\002\193F\254$z\000\128\250\001@\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\016\000\000\000\024\000\002\128\128\003\011\132\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000@\000\000\000\003\027\132\000,\020o\226G\160\b\015\160\020\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\0001\184@\002\193F\254$z\000\128\250\001@\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\004\000\004\193\016\001\128\000(\b\0000\184@\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\004\000\000\000\0001\184@\002\193F\254$z\000\128\250\001@\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000@\000H\017\003\027\132\000,\020o\226G\160\b\015\160\020\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b$\000\128\000A\000\1640\0000\000\024\128\000 \004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\132\016\006A#\002M\160\002\000\168\000\000\016@\001\136A\000@\0020$\218\000 \n\000\000\001\004\000\024\132\016\004\000#\002E\160\002\000\160\000\000\016@\001\136@\000@\0020$Z\000 \n\000\000\001\004\b$\000\128\000A\000\1640\0000\000\024\128\000 \004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\b\000\002\000\002\002\b\000\000\016\000\000\000\000\000\000\128\128\000\000\000  \128\000\001\000\000\000\000\000\000\b\b\000\000\000\002\002\000\000\000\016\000\000\000\000\000\130@\b\000\004\016*C\128\002\000\001\136\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \0000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\0000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\001\128\000(\b\0000\184@\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\004\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\b$\004\128\000A\000\1640\000 \000\024\128\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b$\000\128\000A\000\1640\000 \000\024\128\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\128\000\002\000\002\000\012\000\000\000 \000\000\000\000\000\136\000\000\000\000 \000\192\000\000\002\000\000\000\000\000\b\128\000\000\000\002\000\004\000\000\000 \000\000\000\000\130@\b\000\006\016\nC\128\002\000\001\200\000\006\000\000\b\128\000\000\000\002\000\004\000\000\000 \000\000\000\000\130@\b\000\004\016\nC\128\002\000\001\136\000\002\000\b$\000\128\000A\000\1640\000 \000\024\128\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b$\000\128\000A\000\1648\000 \000\024\128\000 \000\130@\b\000\004\016\nb\000\000\000\016\001\"\004\000\000\000\000\000\000\000\000\130@\b\000\004\016\nC\128\002\000\001\136\000\002\000H$\000\128\000A\000\164 \000 \000\024\128\000 \004\004\000\000\000\000\000\016\000\192\000\000\000\000\000\000\000\000@\000\000\000\000\001\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\b\000\000\000\016\001\"\004\000\000\000\000\000\000\000\000\130@\b\000\004\016\nC\128\002\000\001\136\000\002\000H$\000\128\000A\000\164 \000 \000\024\128\000 \004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\016\000\192\000\000\000\000\000\000\000\000@\000\000\000\000\001\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\001\138@\bH\0020$V\000 \n@\000\005\004\000\b\000\000\000\016\003\"\004\000\000\004\000\000\000\000\000\130@\b\000\004\016\nC\128\002\000\001\136\000\002\000@\024\000\002\128\144\003+\132\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\b\000\000\000\016\003\"\004\000\000\004\000\000\000\000\000\130@\b\000\004\016\nC\128\002\000\001\136\000\002\000@\024\164\000\132\128#\002E`\002\000\164\000\000P@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b$\000\128\000A\000\1640\000 \000\024\128\000 \004\130@\b\000\004\016\nB\000\002\000\001\136\000\002\000@@\000\000\000\000\001\000\012\000\000\000\000\000\000\000\000\004\000\000\000\000\000\016\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\024\164\000\132\128#\002E`\002\000\164\000\000P@\130@\b\000\004\016\nC\000\002\000\001\136\000\002\000H$\000\128\000A\000\164 \000 \000\024\128\000 \004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b$\000\128\000A\000\164 \000 \000\024\128\000 \000\001\136A\000`\0020$\218\000 \n\000\000\001\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\130@\b\000\004\016\nB\000\002\000\001\136\000\002\000@\024\132\000\004\000#\002M\160\002\000\160\000\000\016@\001\136@\000@\0020$Z\000 \n\000\000\001\004\b$\000\128\000A\000\1640\0000\000\024\128\000 \004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\130@\b\000\004\016\nB\000\002\000\001\136\000\002\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\130@\b\000\004\016\nC\000\002\000\001\136\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\130@\b\000\004\016\nB\000\002\000\001\136\000\002\000@\016\000\002\004\000#\000\b\000\000\000\000\000\000\000\000\001\000\000 @\0020\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\130@\b\000\004\016\nC\000\002\000\001\200\001\002\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\130@\b\000\004\016\nC\000\002\000\001\136\001\002\000H$\000\128\000A\000\164 \000 \000\024\128\000 \004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\130@\b\000\004\016\nC\000\002\000\001\136\000\002\000\b$\000\128\000A\000\164 \000 \000\024\128\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b$\000\128\000A\000\164 \0000\000\024\128\000 \004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b$\000\128\000A\000\164 \0000\000\024\128\000 \004\128\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b$\000\128\000A\000\1640\000 \000\024\128\000 \000\130@\b\000\004\016\nB\000\002\000\001\136\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012$\000\160\000A\130\1648\000 \000\024\128\000 \004\192\000\002\000\000\b\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000 \000\000\000\000\b\000\000\000\000\000\004\193\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\129\128\000(\bb1\184@\002\193F\254$z\000\128\250\001@\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\024\132\000\004\000#\002E\160\002\000\168\000\000\017@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\194@.\193\244\023\n\195\129\255\n\005\204\001~pp\024\132\000\004\000#\002E\160\002\000\168\000\000\017@\194@.\193\244\023\n\195\129\255\n\005\204\001~ps\027\132\000,\020o\226G\160\b\015\160\020\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\027\132\000,\020o\226G\160\b\015\160\020\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\002 \031\000`\b\b\007\192 \004\000\007\194\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\128\016\000\000\0160 \000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\002\000\000\b\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\128\016\000\000\0160 \000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\002\000\000\b\000\000\128\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\016\000\000\0160 \000\000\001\000\000\000\000\000\004\000\000 \000\000\128\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000$\000\136\000A\002\1648\000\"\000\025\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\b\000\000\000\002\002\b\000\000\016\000\000\000\000\000\000\128\128\000\000\000  \000\000\001\000\000\000\000\000\000$\000\136\000A\002\1648\000\"\000\025\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000$\000\136\000A\000\1640\000 \000\025\000\000 \000\002@\b\128\004\016\nB\000\002\000\001\144\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\b\128\000@\000\002\000\004\000\000\000 \000\000\001\000\000\136\000\000\000\000 \000@\000\000\002\000\000\000\016\000\b\128\000\000\000\002\000\004\000\000\000 \000\000\000\000\002@\b\128\006\016\nC\128\002 \001\208\000\006\016\000\b\128\000\000\000\002\000\004\000\000\000 \000\000\000\000\002@\b\128\004\016\nC\128\002 \001\144\000\002\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002@\b\128\004\016\nb\128\006\016\nC\128\002 \001\208\000\006\016\000\b\128\000\000\000\002\000\004\000\000\000 \000\000\000\000\002@\b\128\004\016\nC\128\002 \001\144\000\002\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000$\000\136\016A\000\1640\000\"\000\029\000\016 \004\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\b\128\000@\000\002\000\004\000\000\000 \000\000\001\000\000\136\000\000\000\000 \000@\000\000\002\000\000\000\016\000$\000\136\000A\000\1640\000\"\000\025\000\000!\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\bb\0000\184@\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000@\000\000\b\000\000\000\000\001\000\000\000\002\000\000\000\000\000\000\000\128\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\b\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\000\n\128\128\003\011\132\000\002\000\000\000\000\001@\000\000\000\000\000 \016\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\130\200\b\000\004\016*C@\002\000\003\136\001\002\000H$\000\128\000a\000\1648\000 \000\024\128\016a\004\130@\b\000\004\016\nC\000\002\000\001\136\001\002\016@\b\128\000\000\000\002\000\004\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b$\000\128\000A\000\1648\000 \000\024\128\016 \004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b$\000\128\000a\000\1648\000 \000\024\128\016a\004\000\000\000\000\000 \016\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b$\000\128\000A\000\1648\000 \000\028\128\016 \004\000\136\000\004\000\000 \000P\000\000\002\000 \000\016\000\bb$\000\128\000A\000\0040\000 \000\024\128\016 \004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\136\000\004\000\000 \000@\000\000\002\000\000\000\016\000\b\128\000\000\000\002\000\004\000\000\000 \000\000\001\000\130@\b\000\004\016\000C\000\002\000\001\136\000\002\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\130@\b\001\004\016\000C\000\002\000\001\200\001\018\000@\024\128\002\192\128\003\011\133\000\002\000 \002\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b$\000\128\000A\000\0040\000 \000\024\128\016 \004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\136\000\004\000\000 \000@\000\000\002\000\000\000\016\000\b\128\000\000\000\002\000\004\000\000\000 \000\000\001\000\130@\b\000\004\016\000C\000\002\000\001\136\000\002\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\130@\b\000\004\016\000B\000\002\000\001\136\000\002\000\000\b\000\000\002\000\000\000\b\000\000\000\000\000\000\000\128\000\128\000\000 \000\000\000\128\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b$\000\128\000A\002\0040\000 \000\024\129\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b$\000\128\000A\002\0040\000 \000\024\129\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012\000\016\002\000\000\000\b\000\000\000\000\000\000\000\000\000\128\001\000\000\000\000\000\128\000\000\000\000\000\000\000\000\b\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000@\000\020\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\130@\b\000\004\016\000C\000\002\000\001\136\016\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\130@\b\000\004\016 C\000\002\000\001\136\016\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\016\000\000\0160 \000\000\001\000\000\000\000\000\012$\000\128\000A\128\0048\000 \000\024\128\000 \000\130@\b\000\004\016\000C\000\002\000\001\136\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\128\016\000\000\0160 \000\000\001\000\000\000\000\000\012$\000\128\000A\128\0048\000 \000\024\128\000 \004\130@\b\000\004\016\000B\000\002\000\001\136\000\002\000@\b\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\128\016\000\000\0160 \000\000\001\000\000\000\000\000\012$\000\128\000A\128\0048\000 \000\024\128\000 \004\130@\b\000\004\016\000B\000\002\000\001\136\000\002\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\001\000\002\001\003\002\b\000\000\016\000\000\000\000\000\000\128\016\000\000\0160 \128\000\001\000\000\000\000\000\000\b\001\000\000\001\003\002\000\000\000\016\000\000\000\000\000\194@\b\000\004\024\000C\128\002\000\001\136\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\136\000\000 \000 \000\192\000\000\002\000\000\000\000\000\b\128\000\000\000\002\000\012\000\000\000 \000\000\000\000\000\136\000\000\000\000 \000@\000\000\002\000\000\000\000\b$\000\128\000a\000\0048\000 \000\024\128\000`\000\004@\000\000 \000\016\000\192\000\000\000\000\000\000\000\000@\000\000\000\000\001\000\012\000\000\000\000\000\000\000\000\004\000\000\000\000\000\016\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\001\128\000(\t\0002\184@\000 \000\000\000\000\000\b$\000\128\000A\000\0040\000 \000\024\128\000 \004\130@\b\000\004\016\000B\000\002\000\001\136\000\002\000@@\000\000\000\000\001\000\012\000\000\000\000\000\000\000\000\004\000\000\000\000\000\016\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\001\128\000(\t\0002\184@\000 \000\000\000\000\000\b$\000\128\000A\000\0040\000 \000\024\128\000 \004\130@\b\000\004\016\000B\000\002\000\001\136\000\002\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\130@\b\000\004\016\000B\000\002\000\001\136\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b$\000\128\000A\000\0040\000 \000\024\128\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b$\000\128\000A\000\004 \000 \000\024\128\000 \004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b$\000\128\000A\000\004 \000 \000\024\128\000 \004\001\000\000 @\0020\000\128\000\000\000\000\000\000\000\000\016\000\002\004\000#\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\001\136\000,\b\0000\184P\000 \002\000 \000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\130@\b\000\004\016\000C\000\002\000\001\136\001\002\000H$\000\128\000A\000\004 \000 \000\024\128\000 \004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012\000\000 \000\000\128\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002@\b\128\004\016\nC\000\003 \001\144\000\002\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000BE.\129\244\030\n\195\128\127&\005\214\nZ0\244\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\136@\000@\0020$Z\000 \n\128\000\001\020\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\132\000\004\000#\002E\160\002\000\168\000\000\017@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\0001\184@\002\193F\254$z\000\128\250\001@\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000B@\n\128\004\024*C\128\002 \001\208\000\"\000D\000\000 \000\000\128\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b$\000\128\000A\000\1648\000 \000\024\128\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\002\000\000\b\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002@\b\128\004\016\nC\128\002 \001\144\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\130\000\000\000\000\001 B\001\128\000\000\b\001\000\000\b \000\000\000\000\016\004 \024\000\000\000\128\016\000\000\128\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\0001\184@\002\193F\254$z\000\128\250\001@\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\b\b\000\002\000\002\002\b\000\000\016\000\000\000\000\000\000\128\128\000\000\000  \128\000\001\000\000\000\000\000\000\b\b\000\000\000\002\002\000\000\000\016\000\000\000\000\000\000\000\002\000\000\000 \000\128\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\128\016\000\000\0160 \000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\002\000\000\bb\024\132\000\004\000#\002E\160\002\000\168\000\000\017@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000BE.\129\244\030\n\195\128\127&\005\214\nZ0\240\024\132\000\004\000#\002E\160\002\000\168\000\000\017@BE.\129\244\030\n\195\128\127&\005\214\nZ0\243\027\132\000,\020o\226G\160\b\015\160\020\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\027\132\000,\020o\226G\160\b\015\160\020\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\0001\184@\002\193F\254$z\000\128\250\001@\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\027\132\000,\020o\226G\160\b\015\160\020\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\003\027\132\000,\020o\226G\160\b\015\160\020\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\bb\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\027\132\000,\020o\226G\160\b\015\160\020\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\132\000\004\000#\002E\160\002\000\168\000\000\016@\000\000\000\000\000\000\000\000\128\000\000\000\016\000H\017\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003?\132\128,Uo\230gb\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0003\248H\002\197V\254fz\002\160\251\145@\003\142\003?\132\128,Uo\230g\160*\015\185\020\0008\224\002@\b\000\004\016\nB\000\002 \001\144\000\002\000\000$\000\128\000A\000\164 \000\"\000\025\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002@\b\000\004\016\nC\000\002 \001\144\000\002\000\000$\000\128\000A\000\164 \000\"\000\025\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000$\000\128\000A\000\1640\000\"\000\025\000\000 \000\002@\b\000\004\016\nB\000\002 \001\144\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")
  
  and start =
    7
  
  and action =
    ((16, "9p\150\144\139\230\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000+\176\139\230\000\000\000\000 \224\139\2309p\150\144 \224\001\004\000\000\000\000\150\144 \224\001\004\150\144 \224\001\004\000\000\000\000\"\216\001\020\000\204\002L\000\000\000\183\003np\140\228\000\000\000\000 \164\139\2309p\000`\000K\000\168\176\"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001r\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0007\002X\000\b\000\000\002\138\003\184\000\000\002\140\005\198\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\174\000\000\000\000\000\000\002X\164\024\000\000\000\000\004\n\000\000\000\000\000\000\003L\003\204\000\000\000\000\164\2269\154 \224 ,\180d \240\241\234\000`\000K\000\168\004|\252\006\000\000\005\224\000\000\000\000\000\000\164\0249\154 \224 ,\005t\005B \166\005\1280\206`\154\150\144 \224\001\004\000\000\000\000\150\144 \224\001\004\150\144 \224\001\004\022\004\001\004\150\144 \224\233\228\000\000\166b\000\000\001X\000\000\000\000\007p\000\000\000\000\143\164\000\000\000\000\000\000\000\000\000\000,.\000\000\000\000\007N\000\n\006^\001(\000\0005r\180d \240\241\234\141\n \22426\000\00026\000\000\006\236\000:\000\000\004\n\000\000\000\000\000\000\002\250\000\000\006\236\000\000\006h\234\244\143 \184\190\000\000\242\n\164\024\000\000\161\0027\234\000\000\254L,2\165\172\004\n\139\170\139\2309p\141\n \2243$26\006\240\227\186\236~\184\150\000\000\242\134\164\226\000\000\177T\000\000\214B\177T\000\000\214B\214B\002L\000\000\214B\004\n\000\000\000\000\170(\164\024\166\2547\234\b`\005.\000\000\001\214\000\000\007 \000\000\007l\000\000\000\000\161\166\002L\000\000\000\0007\234\006\228\164\024\000\000\162J7\234\162\238\000\000\000\000\000\000\b\b\000\000\214B\000\000 \184\223`\000\000\164\024\024\170\164\024\000\000\022\178\b@\004\n\000\000\000\000\023\174\000\000\b\212\000\000\174\240\b\162\000\000\t*\214B\n\154\000\000\0128\000\000\003\014\000\000\001\004\005<\000\000\000\000\000\000\011b\000\000\t\026\001(\002L\000\000\000\000\164\024\nP\011L\000\000\164\024\012H\248\014\000\000\003\004\000\000\011\204\012F\165\172\007\162\004\n\000\000\164\024\021\182\000\170\001\248\018\176\000\000\025V\r\144\000\000\003\004\000\000\000\000\000\000\000\000\206&\000\000\003|\014\138\213\016a\n\003\004\014\140\000\000\014\1927\234\181\"\000\000\185:a\n\014\2227\234\206\164\181\160 \224\000\000\234N\005j\000\000\000\000\000\000\234\218\000\000\213\016 \224\000\000\003\004\015@\000\000\000\000\000\000\2288,\0160\226\003\004\015\132\000\000\000\000\000\000\003\004\015\136\000\000\000\000\000\000\000\000\000\000\236\222\139\2309p9p9\1385\226 \166\005\128\007\206 \224\000\000\000\000\150\144 \224\000\000\150\144 \224\001\004\166b\215^\tH\012(\000\000\000\000\149\140\000\000\000\000\nB\000\000\000\n\016\026\001\250\000\0005r\016\160\016| \166\006\1360\206`\154\141\n \2244\01826\t`\234\244\000\000\242\192\139\2309p\168\138\2162\000\000\000\000\139\2309p\001\154\001\020\000\204\004\n\243$ ,5r5r\000[\001\132\t^\000\000\000\000\000\000\016* ,\000[\001\132\001\200\000\000\017R ,\000\000\207H\007 26\011`\000\000\011\244\rX\000\000\007\006\241\212\000\000\164\024\185\222\164\024\182D\186\024\164\024\004j\164\024\186\188\000\000\001\004\004`\001(\182\224\003n\001(\183|\000\000\207\130\007 \000\000 ,\207\228\000\000\t\016\r\204\184\024\000\000\000\000\000\000\000\000\004\184\000\000\017Z5r\000\000\228\156\n\03026\011`\012\162\252\006\163\2147\234\017\198\252\006\254\152\000\000\000\000\017v\000\000\022\130\254\228\000\000\177T\214B\005\030\000\000\001\004\r@\000\000\248\228\000\000\214B\012\244\000\000\250\128\214B\r0\000\000\014,\000\000\017@\214B\014\236\000\000\014\192\000\000\017\130\014\200\000\000\000\000\000\000\172>\252\006\167R8\230\000\000\t\\\015n\000\000\000\000\164\160\014\192\000\000\000\0007\234\018\210\252\006\000\000\165j8\230\1664\000\000\000\000\000\000\220$\019\002\005\224\000\000\252\006\182h\220\156\164\024\004\166\252\006\221\000\000\000\173\b\001\004\004\246\011.\000\000\213\156\006p\000\000\002\186\000\000\019\178\000\000\011.\214\020\000\000\207\170\n\030\000\0005r\229\000\000\000\n\226\015\188\214\162\000\000\000\000\000\000\002\020\000\000\000\000\019\024\000\000\000\000\203\b\236\222\236\222\000\000\000\000\000\n\016.\001\132\005\128\000[\001\132\019|\005\128\000\000\177\2280d\000\000\bl\000\000\176\154\nB\014\188\000\000\000\000\000\000\230|\000\000\015\184\000\000\000\000\137\160\215\154\000\000\000\000\000\000\000\000\012\190\000\000\000\0001\230\000x\006\198\000\166\000\000\000\000\000\000\150F \224\166b\000\000\001(\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\160T\017\132\000\000\000\000\000\000\003\012\tr\2162\000\000\000\000\020\188\000\000\bX\000\000\000\000\230\184\000\000\016\174\000\000\000\000\000\000\000\000\000\000\150F \224\168\138\000\000\000\000\157\254\168\138\180\154\168\138\000\000\216F\000\000\168\138\000\000\169N\000\000\000\000<d\000\000\212\140\000\000\218\148\164\024\nR\000\000\231F\000\000\254\248\007\158\000\000\000\000:\b\017\194\000K\003\004\020\250\t\226\000\000\150\144 \224\001\004\150\144a\2465\226 \166\005\128\000G\001\004\156\b\150\144 \224\001\004\155B\002\012\000\000\166b\175\180\tj\021T\011\162\164\024\b\212\022:\000\000\000\000\011\196\021T\006\200\001\004\007\162\t\168\000\000\187Fb\2425\226 \166\005\128\006\226\000\000\156\b\016r\000\000\014\192\000\000\000\0006t\158z6t\"\216\001\004\150F \224\"\216\150\144 \224\151V\150F \224\019\016\019\016\001\004\150\144 \224\001\004\150F \224\226\228\168\138\001\218\001\004\150F \224\221t\t\214\000\000\168\1387\190\164\024\011\200\006\200\022B\000\000\000\000\000\000\143\164\006\014\006\014\000\000\022P\208|\001\004\150F \224\168\138:\188\001\004\150F \224\168\138*\024\001\004\"\216\000\000\000\000\000\000\000\000!\2207>.\190\000\000\152*\152\2405\226 \166\005\128\r\246 ,\000\000\012\242\000\000\000\000\000\000\177@\000\000\153\182\154|\166b`F\164\024\016\\\001\004\150F \224\"\2165x\"\216\004\006\bH\000\000\150\144 \224\001\004\001\004\"\216\022r\000\000\022\144\000\000\"\216#\212\022\212\000\000\018\248\000\000\150F \224\225\178\168\138:\188\001\004\023\030\000\000\150F \224\221\196\144\160\006\014\023\130\208\204\000\000\150F \224\168\138;\170\001\004\022\214\001\004\022\220\000\000a\140\001\004$\2086t\000\000\000\000\000\000\r\130\001\004\000\000\000\000\014\186\001\004\000\000b\136\001\004c\132\001\004d\128\000\000%\2047p\001\004\000\000\001\004\139\230\001\004\000\000\000\000\001\004e|\001\004fx\001\004gt\001\004hp\001\004il\001\004jh\001\004kd\001\004l`\001\004m\\\001\004nX\001\004oT\001\004pP\001\004qL\001\004rH\001\004sD\001\004t@\001\004u<\001\004v8\001\004w4\001\004x0 \224\166b\173\154\145\156\006\014\023\156\187\212\166b\000\000\001\004\000\000\164\024\000\000\012\196\164\226\000\000\001\018\164\024\r\192\023(\001\004\000\000\000\000\000\000\187\212\000\000\000\000-,\023\230\000\0002\212\000\000\000\000\252\006\000\000\003\232\000\000\000\000\165\172\006\014\023L\164\024\016d\001\004\000\000\011\228\164\024\016\238\001\004\000\000\023h\001\004\000\000\000\000`\222\164\024\017Z\001\004\000\000>t\001\004\000\000\231\130\000\000?b\232\016\000\000@P\232L\000\000A>\n\146\000\000\000\000\000\000\000\000B,\168\138C\026\236\222\000\000\000\000\000\000y,\001\004\r\028\000\000\000\000\001\004\023V\001\004\023p\000\000\150F \224\168\138=\134\001\004\r\028\001\004\023\128\001\004\023\154\000\000\150\144 \224\155B\000\000\019\016\000\000\000\000\000\000\000\000\003\b8l/\198\000\000a\246 \166\005\128\014R*\012\000\000\r\238\000\000\216\144\000\000\000\000\000\000\150F \224\019\0161\192\019\016\004\016\t\230\000\000\000\000\019\016\024\014\000\000\024&\000\000\019\016\005\024\0246\000\000\025\194\000\000\016\180\000\000\000\000:b\000\000\020\0122\174\015\180\000\000\000\000\015\200\000\000\000\000;P\000\000<>\000\000=,\000\000\021\b3\156\000\000\000\000\000\000\139\230\000\000\000\000\000\000\000\000>\026\000\000?\b\000\000?\246\000\000@\228\000\000A\210\000\000B\192\000\000C\174\000\000D\156\000\000E\138\000\000Fx\000\000Gf\000\000HT\000\000IB\000\000J0\000\000K\030\000\000L\012\000\000L\250\000\000M\232\000\000N\214\000\000O\196P\178\000\000\017 \000\000\000\000\000\000\188D\000\000\000\000\002\230\011<\000\000\188\168\000\000\000\000\000\000\189\"\000\000\000\000\000\000\189\218\000\000\000\000\000\000\019\016\006 \r4\000\000\190\014\000\000\007(\000\000Q\160\000\000\190\200\000\000\b$\000\000R\142\000\000\190\252\000\000\t \000\000S|\026\190\000\000\018\018\n\028\000\000Tj\000\000\017\220\011\024\000\000UX\000\000\191\180\012\020\000\000VF\011d\r\222\000\000\191\232\r\016\000\000W4\000\000\192\162\014\012\000\000X\"\000\000\192\214\015\b\000\000Y\016\016\004\000\000Y\254\017\000)\188\000\000\000\000\000\000\193\142\000\000\000\000\193\194\000\000\000\000\194z\000\000\018T\000\000\000\000\156\206\000\000\r\192\000\000\000\000\178Z\151V\000\000\156\206\000\000\018&\000\000\000\000\007\162\015\228\000\000\000\0006t\004|\006\198\000\0006@\252\134\000\0003\166\252\158\000\0007T\252\0064\148\000\000\r\020\002\182\011\028\000\000\000\000\017.\000\000\000\000\002\128=,\162\142\157\148\000\000\017v\000\000\000\000\157\148\000\000\018`\000\000\000\000\007\162\016\164\000\000\000\0006t\017\252\000\000\000\000\000\000\000\000\015j\000\000\000\000\000\000\146\152\006\014\024~\208\2047\234\021\172\000\000\000\000\208\204\000\000\000\000\000\000\208\204\000\000\000\000\000\000\000\000\000\000\000\000Z\236\168\138\000\000\000\000\000\000\018\168\000\000\000\000\000\000\018~\000\000\000\000\000\000\194\174\000\000\000\000\011\244\014\218\000\000\195f\000\000\000\000\000\000\195\154\000\000\000\000\000\000\196R\000\000\000\000\000\000\"\216&\200\015,\000\000\196\134\000\000\023\000\001\004z(\000\000\197@\000\000\023\252\001\004{$\000\000\197t\000\000\024\248\001\004| \027\186\000\000\018\184\025\244\001\004}\028\000\000\019\134\026\240\001\004~\024\000\000\198,\027\236\001\004\127\020\016~\015Z\000\000\198`\028\232\001\004\128\016\000\000\199\026\029\228\001\004\129\012\000\000\199N\030\224\001\004\130\b\031\220\001\004\131\004'\196*\172\000\000\000\000\000\000\024\144\000\000[\218\000\000\\\200\200\006\000\000\000\000\200:\000\000\000\000\200\242\000\000\000\000D\b\001\004\000\000\007\232\000\000\000\000\166b\000\000\000\000\018\188\000\000\000\000\r\028\001\004\023\212\001\004\023\232\000\000\023\232\001\004\023\248\000\000\001\004\r\028\001\004\024\n\001\004\0244\000\000\000\000\147\148\006\014\024\226\208|7\234\022\168\001\004\000\000\208|\000\000\000\000\000\000\208|\000\000\024\198\001\004\000\000\001\004\000\000\000\000\000\000\132\000\168\138\000\000\000\000\000\000\025\014\001\004\132\252\001\004\133\248\209<\000\000\018\b4\138\000\000\017\174\000\000\000\0008l\209\182\000\000(\192\019\020\000\000\000\000\019.\000\000\000\000\019\186\000\000\000\000\000\000 \166\005\128\r\246\000\000\000\000\001\020\000\n\0256\001\132 ,\005\192\005\128\232\148\024\170\000\000\000\000\001\132\000\000,\014 \224\005j\011\254\000K\024\186\000\000\000\000 \224\233\228\166b\236\222\000\000\179\020\006\150\r\196\000\000\000\000\018\224\000\000\000\000\000\000\0256\000\000\000\000\000\000]\182\020\016\000\000\000\000\025l\225\178\000\000\000\000\017\196\000\000\000\000\000\000 \166\005\128\015\186\001\004\000\000\001\020\000\n\025`\001\132\024\232\001\004\000\000,\014 \224\005j\011\254\000K\024\250\001\004\000\000\025\156\225\178\000\000\000\000\024\228\000\000\000\000\144\232\222H\000\000\000\000\r\188\nz\000\000\007\018\000\000\025B\024\192\252\006,\246\025F\011\b\000\000\000\000\024\250\000\000\000\000\t\240\000\252\018\228\000\000\025Z\210L\148\144\006\014\025\160\201\136\000\000\000\000\025\022\000\000\000\000\000\000\201\136\000\000\000\000\253\012\006\014\025\006\164\024\018\166\000\000\000\000\015\228\164\024\018\176\025 \000\000\000\000\019d\000\000\144\232\000\000\015\254\019v\000\000\017\246\000\000\025\132\025\n\255\140\005\224\237\026\018\240\252\006-\254\000\000/\006\025\162\210\166\253\"\006\014\0254\164\024\019h\000\000\000\000\025R\000\000\000\000\000\000\139\2309p\139\2309p\139\2309p5\226 \166\005\128\236\222\000\000\000`\000K\000\168\0250\164\024\019\162\026\000\243<\000\000\236\222\000\000,\014 \224\005j\233\012\017R\0198\025\250\003\n\018Z\025F \224\236\222\000\000 \224\236\222\000\000\202&\141\n \2245\00026\016D\237\160\236~\000\000\236\222\000\000\026\0028\1907\142\249:\000\000\000\000\000\000\000\000\019\198\237\180\236~\000\000\236\222\000\000\000\000\236\222\000\000\026\0048\1907\142\249:\000\000\202&\006J\001\020\000\n\001(\249:\000\000\000\n\001(\249:\000\000\001\154\000\n\020*)\172\001\004\178d\000\000\t$\000\000\249:\000\000 ,\187\212\178d\000\000\018\218\000\000\026B\025l ,\178d\1718\000\n\026N\025\128 ,\178d\1718\000\000\000\0009\154 \224 ,\178d\000\000,\014 \224\005j\174\180\000\186\000\186\n\230\011b\000\000\018L\006\236\020\002\000\000\026\006\025\1861. \1644\154\164\024\018\176\000\000_\162\002l\014\184\016\176\000\000\020P\000\000\026\028\025\154\252\006`b\000\000\t\240\017N\019\134\000\000\020V\000\000\026.\025\176\255\140`b\000\000\139\2309p\000\186\n\230\011b\018L\0266\211>\139\020 \1641\022:\b \224\000\000\144\232\000\000 \172 \166\142\160 \1641\022:\b \224\164\024\019\194\252\006\143\236\144\232\000\000\020v\000\000\000\000\144\232\000\000\000\000:\b\000\0000\206\000\000\142\160\217(\139\230 \224\233\228\166b\011\196\000\000\n\228\000\n\001\004\017\002\142\160\164\024\020<\014\192\000\000\164\024\000\208\002\220 \224\168\138\211>\142\160\019\190\142\160\000\000\141\204\142\192\000\000\202\164\000\000\000\000\203B\000\000\000\000\203\224\001\004\019\220\142\160\204~\233\228\166b\011\196\000\000\014,\000\000\000\000\170j \1644\154_\162 \166d\194\000\000\026X\011\224\000\n\001\004\019\228d\194\164\024\020\220\020\192\020\130\020\194\000\000\000\000\000\000\000\000\222\192\000\000\001\004\020\216d\194\223L`b\000\000 \224\164\024`b\000\000\020\148\000\000\000\000`b\000\000\000\000_\162\000\000\217\1487\234\026L\170j\214B\005H\026R\170j7\234\026`\170j\020\210\020\200\223\218\224\022\000\000\244\228\000\000\000\000\021<\000\000\000\0000\014\026V\000\000\144\232\000\000\142\1600\014\144\232\000\000\021r\000\000\000\000\142\160\015(\000\000\000\000\170j\021\182\000\000\000\000\217\186\012\220\000\n\001\004\021|\139\020\164\024\020\236\002L\000\000 \224\168\138\212\140\139\020\020 \139\020\000\000\158\134\159z\000\000\238@\000\000\238\162\000\000\000\000\203\242\001\004\021\220\139\020\238\220\239>\251\026\218<7\234\026p\251\026\026\138\014\214\000\n\001\004\022\0241.\000\000\164\024\021&\021n\021N\021\204\000\000\000\000\000\000\000\000\222.\000\000\001\004\022@1.\235X\214B\026\128\251\0267\234\026\134\251\026\021T\022T\224z\224\248\000\000\245.\000\000\000\000\026$\139\020\239x\211>\000\000\236\222\245\138\n\230\011b\018L\026\138\211>\236\222\245\138\000\000\000\000\000\000\251p\150\144\000\000\000\000\000\000\000\000\000\000\243\170\000\000\243\228\236\222\000\000\245\236 \18426\026\158\227\186\000\000\236\222\245\236\000\000\000\000\000\000\000\000\000\000\236\222\251p\000\000\026\214\000\000\243\170\000\000\243\228\021\144\000\000\000\000\236\222\246&\n\230\011b\018L\026\170\026T1.\236\222\246&\000\000\000\000\n\230\011b\018L\026\184\026@\251\026\178d\212f\n\230\011b\018L\026\214\026T\251\026\178d\212f\000\000\000\000\000\000\202&\000\000\000\000\000\000\000\000\000\000\000\000\178d\000\000\219\200\000\000\253F \18426\026\232\026j\236~\000\000\236\222\253F\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\128\027\"\000\000\027*\000\000\0276\000\000\021\204\000\000\000\000\000\000\018\204\000\000\000\000\000\000a\246 \166\005\128\b\014\000\000-z\000\000\019\238\000\000\027<\000\000\016P\000\000\000\000\027L\000\000\179H\000\000\000\000.\130\000\000\020\234\000\000/\138\000\000\n\250\000\000 ,\023\222\000\000\000[\001\132\027&\006\136\000\000\218\200a\206\000\000\007t\000\000\000\0005r\026\166\000\000\000\000\000\000\000\000\169<\001\222\000\000\bp\000\000\000\0005r\027\162\000\000\000\000\233p\236\222\000\000\027p\001\132\236\222\246\136\000\n\027\128\001\132\236\222\246\136\000\000\000\000\027f\000\000=\134\001\004\000\000\027h\000\000\000\000\027`8\190:\026\000\000\022x\027t\000\000\027v\000\000\000\000,|\226Z\190\020\003\004\027\130\000\000\027\1488\230\211\158\000\000\212\0020.\022\184\027\148!\182\023$\026\232 \240\000\000\191\238\027|8\230\219P\205\028 \240\000\000\247\n\000\000\000\000\000\000\000\000\000\000\000\000\000\000\233\2100. \240\000\000 \240\000\000\023\004\234\244\000\000\242\192\000\000\027\1568\190:\026\247\n\000\000`\154c\2385\226 \166\006\136\242\192\000\000 \166\006\136\242\192\000\000)V\001\020\000\204\005\224\247D5r\240\000\222H\000\000\000\n\020\178\t\210\006\136\240: ,\016\182\006\136\240\198\222H\000\000\t\210\000\000\027\210\t\210\222H\2464\000\n\027\220\t\210\222H\2464\000\000\000\000\150\144 \224\233\228\166b\174T\172\128\006\014\027*\164\024\022\160\000\000\000\000\023\028\164\024\022\182\000\000\000\000\027@\000\000\000\000\000\000e\202\164\024\022\206\000\000\000\000D\246\000\000\000\000\222H\000\000\187F \224\233\228\166b\222H\000\0005\226 \166\006\136\242\192\000\000\000`\000K\000\168\027\"\164\024\023Z\027\240\247\140\000\000\222H\000\000,\014 \224,|\235\2300. \240\222H\000\000 \240\222H\000\00012\000\186\n\230\011b\018L\027\180\027dd\194\222H\249z\n\230\011b\018L\027\210\027xd\194\222H\249z\000\000\000\000\n\230\011b\018L\027\228\212\140\142\160\244l\251\026\027\138\142\160\244\202\212\140\000\000\222H\249\194\n\230\011b\018L\027\232\212\140\222H\249\194\000\000\000\000\000\000\251\136\150\144\000\000\000\000\000\000\000\000\000\000\248\014 \224\166b\222H\000\000\000\000\000\000\000\000\248&\000\000\222H\000\000\250  \18426\027\240\234\244\000\000\242\192\250 \000\000\000\000\000\000\000\000\222H\251\136\000\000\248\014\000\000\248&\022\140\000\000\000\000\222H\251\136\000\000\000\000\225\132\028\158\000\000\000\0003\194\000\000\000\000\253\172\000\000\004\240\000\000\000\000\000\000\023\228\000\000\000\000\007\252\001\004\000\000\028`\225\178\000\000\000\000^\164\225\178_\146\000\000\000\000\000\000\000\000\180\018\000\000\000\0004\218\000\000\024\218\000\000:\178\000\000\011\246\000\000 ,\030\150\000\000\236\222\000\000 \166\005\128\236\222\000\000\236\222\251p\000\000\000\000\0284\000\000\000\000\02868\190; \005j\213\016\017R \224\000\000\236\222\000\000\000\000\000\000\000\000\000\000\000\000\000\000\226L\017R \224\000\000\023\150\227\186\028<8\190; \236\222\000\000\028L\000\000\012B\023d \224\255\162\000\000\000\000\027\224\000\000\028:\164\024\000\000\023\168\014\220\014\192\000\000\000\000\015\238\000\000\250\128\003\004\028b\000\000\000\000\219\152\226Z\241\014,|\000\000\000\000\000\000\241(\000\000\226Z\003\004\028h\000\000\000\000\000\000\236\000a\218e`\003\004\028j\000\000\000\000\000\000\003\004\028p\000\000\000\000\000\000\000\000\143 \000\000\242\192\000\000\028r8\190<\252\173\004\000\000\000\000\000\000\000\000\024<\241\180\143 \000\000\242\192\000\000\028v8\190<\252\173\004\000\000\241\234\021\212\001\020\000\n\011.\173\004\000\000\000\n\011.\173\004\000\000)V\000\n\022\154,\198\000\000\179\198\000\000\011.\000\000\173\004\000\0005r\248\180\173\004\000\000\023`\000\000\028\176\027\2205r\242\192\253\162\000\n\028\188\027\2305r\242\192\253\162\000\000\000\0009\154 \2245r\242\192\000\000,\014 \224,|\213>12\n\230\011b\018L\028p\027\244\170j\222H\254\026\n\230\011b\018L\028\130\028\018\170j\222H\254\026\000\000\000\000\000\000\241\234\000\000\000\000\000\000\000\000\000\000\000\000\173\004\000\000\250 \000\000\253\182 \18426\028\152\028\"\143 \000\000\242\192\253\182\000\000\000\000\000\000\000\000\000\000\0240\000\000\000\000\000\000\029\154\000\000\000\000\236\222\000\000\134\244\029\012\226\228\000\000\029\020\226\228\000\000\028>\001\004\028D\000\000\024P\000\000\000\000\205\168\031\146\000\000\222H\000\000\024f\000\000\000\000!\190\000\000\236\222\000\000\028\242\000\0001\022:\b\024\132\000\000\000\000\028X\001\004\028^\000\0005\226 \166\005\128\012\250\000\000;\160\000\000\"\142\000\000\021T\000\000\000\000\029\012\000\000\000\000\029:\226\228\000\000\000\000\135\240\226\228\136\236\001\004\000\000\001\004\000\000\028j\001\004\028p\000\000\029\026\000\000\001\004\028v\001\004\028\134\000\000\028\154\000\000\000\000\173\246\028\170\000\000\000\000\164\024\000\000\024`\000\000\001\004\028\176\000\000\000\000\168\138*\024\000\000\000\000\137\240\004\n\227\128\000\000\000\000\000\000\000\000\000\000\250\152\n\210\000\000\000\000\029P\000\000\200\242\000\000\024\198\029`\000\000\029f\000\000\138\234\138\234\251\246\251\246\000\000\000\000\236\222\251\246\000\000\000\000\000\000\236\222\251\246\028\202\000\000\028\208\000\000"), (16, "\b\241\b\241\001b\003\182\0065\004U\b\241\007\222\004\"\b\241\007\226\007\238\004&\004U\004U\011\178\001B\004*\b\241\000\238\b\241\b\241\b\241\002\206\b\241\b\241\0065\000\238\004U\000\238\011\198\b\241\001n\001r\021Z\b\241\004\130\b\241\002\218\011\230\002\230\011\202\004U\b\241\014\226\003\194\003\198\b\241\014\190\014\234\011\218\014\250\003\234\015\002\015F\004\134\b\241\b\241\b\138\002\214\004\189\011\226\b\241\b\241\b\241\015b\015f\015z\015\166\000\238\012R\b\241\b\241\b\241\b\241\b\241\b\241\b\241\b\241\b\241\016\242\r\130\000\n\006\181\b\241\004\189\b\241\003\014\017.\017N\017n\020\026\012^\b\241\012b\b\241\b\241\b\241\002\245\002\245\b\241\b\241 ^\015\178\r\138\015\182\004U\024\214\006\181\003\018\004U\b\241\002\245\b\241\b\241\b\241\b\241\b\241\b\241\012f\020F\b\241\b\241\b\241\020V\012j\020\170\000\n\b\137\b\241\b\241\b\241\000\006\000\246\002r\003\022\b\241\001\002\001\006\b\241\001\n\001\022\001\"\b\241\002\245\b\241\002\245\001&\b\241\000\238\b\241\b\241\b\241\004U\b\241\004U\003&\002\245\002\245\012Q\001*\b\241\001n\001r\017\246\b\241\000\238\b\241\000\238\001v\004N\001.\000\n\b\241\b\241\003\194\003\198\004U\003\202\003\214\001Z\003\226\003\234\007\250\014\202\002\150\b\241\b\241\004\230\002\245\000\238\014\230\b\241\b\241\b\241\014\246\015:\015\130\015\142\004\206\r\162\000\238\002\245\b\241\b\241\b\241\b\241\b\241\b\241\b\241\015\186\012\014\b\241\002\245\b\150\b\241\b\241\b\137\015\198\015\222\0162\016F\r\174\b\241\r\178\b\241\b\241\b\241\002\245\b\241\006b\b\241\b\241\015\134\012Q\015\138\012\018\027N\b\241\000\n\b\241\015\218\004\006\b\241\b\186\b\241\b\241\012\158\b\241\r\182\015\154\018\234\b\241\b\241\016Z\005F\016\210\005r\b\241\b\241\b\241\b\241\012\161\012\161\004\n\004R\011b\t\174\012\161\002\245\012\161\012\161\003M\006\190\012\161\b2\012\161\003\141\b\186\012\161\012\161\027J\012\161\012\161\012\161\005f\012\161\012\161\011f\012\162\012\161\011\150\012\161\012\161\012\161\012\161\012\161\012\161\012\161\012\161\012*\000\238\001\006\012\161\rB\012\161\0126\012\161\012\161\012\161\011:\027\254\012\161\012\161\012\161\004U\012\161\014\254\012\161\012\161\012\161\001\153\002\210\012\161\012\161\012\161\012\161\012\161\012\161\012\161\002^\012\161\012\161\012\161\012\161\012\161\012\161\012\161\012\161\012\161\012\161\012\161\005v\012\161\012\161\001:\012\161\b\225\012\161\002\222\014r\002\234\004U\014F\012\161\012\161\012\161\012\161\012\161\012\161\014\138\004U\012\161\012\161\014\150\012\161\012\161\012\161\024\018\012\161\b6\011\022\b\225\012\161\000\238\012\161\012\161\012\161\012\161\012\161\012\161\012\161\012\161\012\161\012\161\012\161\012\161\012\161\001\153\001\153\b\133\012\161\012\161\012\161\001\153\001\153\001\153\001\153\001\153\005f\001\153\001\153\001\153\004\154\001\153\001\153\001\153\001\153\001\153\001\153\001\153\003\153\001\153\001\153\001\153\006:\001\153\003\030\001\153\001\153\001\153\001\153\001\153\001\153\001\153\001\153\001\153\024.\006\146\001\153\000\238\001\153\001\153\001\153\001\153\001\153\001\153\005\177\001\153\001\153\001\153\001\153\001\153\001\153\001\153\001\153\001\153\001F\001\153\001\153\001\153\001\153\001\153\001\153\001\153\001\153\005v\001\153\001\153\001\153\001\153\001\153\001\153\001\153\001\153\001\153\001\153\001\153\005\026\001\153\001\153\001\153\001\153\003>\001\153\0222\006=\006>\012\002\b\133\001\153\001\153\001\153\001\153\001\153\001\153\001\153\001\153\001\153\001\153\001J\001\153\001\153\001\153\004\158\020n\030\238\r\226\006=\001\153\0196\001\153\001\153\001\153\001\153\001\153\001\153\001\153\001\153\001\153\001\153\001\153\001\153\001\153\005\202\001\153\n-\001\153\001\153\001\153\n-\n-\019:\n-\n-\003.\n-\n-\n-\n-\n-\002\226\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\006R\n-\002^\n-\n-\n-\0032\n-\n-\n-\n-\n-\n-\023\218\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\003B\n-\b\242\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\016\234\n-\n-\017&\n-\020\194\n-\t\154\020\242\n-\000\238\n-\n-,&\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\tn\n-\n-\n-\003\193\003\193,*\016\226\017\030\tJ\003\193\000\238\003\193\003\193\t6\005j\003\193\012>\003\193\tR\000\238\003\193\003\193\003&\003\193\003\193\003\193\tV\003\193\003\193\016\234\t\254\003\193\017&\003\193\003\193\003\193\003\193\003\193\003\193\003\193\003\193\012B\003v\n\230\003\193\006F\003\193\002^\003\193\003\193\003\193\b\133\006\234\003\193\003\193\003\193\005\014\003\193\003\162\003\193\003\193\003\193\003\166\001\006\003\193\003\193\003\193\003\193\003\193\003\193\003\193\003\174\003\193\003\193\003\193\003\193\003\193\003\193\003\193\003\193\003\193\003\193\003\193\n\254\020\186\020\234\004*\003\193\b\242\003\193\006E\000\238\n\002\tR\006\238\003\193\003\193\003\193\003\193\003\193\003\193\011\"\b\002\003\193\003\193\007\210\003\193\020\194\003\193\006\242\020\242\003\130\006E\004\230\003\193\b\006\003\193\003\193\003\193\003\193\003\193\003\193\003\193\003\193\003\193\003\193\003\193\003\193\003\193\005\202\003\193\tn\003\193\003\193\003\193\003\181\003\181\006\221\006\222\012R\b\133\003\181\011\154\003\181\003\181\002\238\005F\003\181\005\209\003\181\b\185\000\238\003\181\003\181\003\134\003\181\003\181\003\181\006\221\003\181\003\181\012^\006\221\003\181\002\245\003\181\003\181\003\181\003\181\003\181\003\181\003\181\003\181\r&\004J\011\014\003\181\016\030\003\181\003&\003\181\003\181\003\181\003&\028\006\003\181\003\181\003\181\012f\003\181\000\n\003\181\003\181\003\181\b\201\004\"\003\181\003\181\003\181\003\181\003\181\003\181\003\181\bJ\003\181\003\181\003\181\003\181\003\181\003\181\003\181\003\181\003\181\003\181\003\181\028^\020\186\020\234\004\193\003\181\002\245\003\181\004\170\r*\b\134\r\134\001\006\003\181\003\181\003\181\003\181\003\181\003\181\005\209\012&\003\181\003\181\011\186\003\181\020\194\003\181\006\229\020\242\004\193\012\141\b\138\003\181\003&\003\181\003\181\003\181\003\181\003\181\003\181\003\181\003\181\003\181\003\181\003\181\003\181\003\181\029F\003\181\012\141\003\181\003\181\003\181\t\169\t\169\011\250\004n\005z\b\246\t\169'6\t\169\t\169\005\162\b\201\t\169\031\154\t\169\011\178\004v\t\169\t\169\002\150\t\169\t\169\t\169\005\002\t\169\t\169\r\002\002\245\t\169\000\238\t\169\t\169\t\169\t\169\t\169\t\169\t\169\t\169'Z\tB\005\181\t\169\005z\t\169\015^\t\169\t\169\t\169\r\006\0156\t\169\t\169\t\169\000\n\t\169\022\134\t\169\t\169\t\169\014\154'^\t\169\t\169\t\169\t\169\t\169\t\169\t\169\007\185\t\169\t\169\t\169\t\169\t\169\t\169\t\169\t\169\t\169\t\169\t\169\t\018\t\169\t\169\002\245\t\169\005\130\t\169\006\166'N\007\214\002^\004\"\t\169\t\169\t\169\t\169\t\169\t\169\t\026\bJ\t\169\t\169\002^\t\169\t\169\t\169\004\018\t\169\000\238\002r\003\022\t\169\015>\t\169\t\169\t\169\t\169\t\169\t\169\t\169\t\169\t\169\t\169\t\169\t\169\t\169\t\161\t\161\004\022\t\169\t\169\t\169\t\161\011\186\t\161\t\161\005\198&\206\t\161\r\n\t\161\b\138\012\206\t\161\t\161\028f\t\161\t\161\t\161\r\022\t\161\t\161\r\254\r\"\t\161'b\t\161\t\161\t\161\t\161\t\161\t\161\t\161\t\161'\138\011\178\005\246\t\161\006\174\t\161'6\t\161\t\161\t\161\014\002\026\158\t\161\t\161\t\161\000\238\t\161\022\158\t\161\t\161\t\161,B'\142\t\161\t\161\t\161\t\161\t\161\t\161\t\161\016\238\t\161\t\161\t\161\t\161\t\161\t\161\t\161\t\161\t\161\t\161\t\161\005f\t\161\t\161\026r\t\161\026~\t\161\006\026'N\011\190\002^\004\"\t\161\t\161\t\161\t\161\t\161\t\161\026\166\bJ\t\161\t\161\002^\t\161\t\161\t\161&\210\t\161\026\166\005\202\003\165\t\161\b\185\t\161\t\161\t\161\t\161\t\161\t\161\t\161\t\161\t\161\t\161\t\161\t\161\t\161\t\177\t\177\031\222\t\161\t\161\t\161\t\177\011\186\t\177\t\177\003&\005~\t\177\r\n\t\177\b\138\012\206\t\177\t\177\006^\t\177\t\177\t\177\r\022\t\177\t\177\000\238\r\"\t\177'\146\t\177\t\177\t\177\t\177\t\177\t\177\t\177\t\177\b\190\b\194\003&\t\177\005f\t\177'6\t\177\t\177\t\177\b\185\001F\t\177\t\177\t\177\b\198\t\177\022\182\t\177\t\177\t\177\003\165\b\181\t\177\t\177\t\177\t\177\t\177\t\177\t\177\006\205\t\177\t\177\t\177\t\177\t\177\t\177\t\177\t\177\t\177\t\177\t\177\005f\t\177\t\177\bf\t\177\b\185\t\177\015\014\015&\006\205\0046\r\230\t\177\t\177\t\177\t\177\t\177\t\177\015\238\t~\t\177\t\177\007\254\t\177\t\177\t\177\014\006\t\177\011\246\004U\006n\t\177\004:\t\177\t\177\t\177\t\177\t\177\t\177\t\177\t\177\t\177\t\177\t\177\t\177\t\177\t\145\t\145\006\"\t\177\t\177\t\177\t\145\004U\t\145\t\145\t\178\n~\t\145\b\186\t\145\015\242\016\014\t\145\t\145\b\"\t\145\t\145\t\145\020\198\t\145\t\145\006\205\002\245\t\145\004U\t\145\t\145\t\145\t\145\t\145\t\145\t\145\t\145\023j\015B\023v\t\145\000\238\t\145\n\246\t\145\t\145\t\145\b\157\014\134\t\145\t\145\t\145\000\n\t\145\022\206\t\145\t\145\t\145\019\198)F\t\145\t\145\t\145\t\145\t\145\t\145\t\145\014\186\t\145\t\145\t\145\t\145\t\145\t\145\t\145\t\145\t\145\t\145\t\145)N\t\145\t\145\002\245\t\145\018\210\t\145\006*\018\222\029>\000\238\000\238\t\145\t\145\t\145\t\145\t\145\t\145\012\221\001F\t\145\t\145\029z\t\145\t\145\t\145\004U\t\145\004U\002r\003\022\t\145\b\242\t\145\t\145\t\145\t\145\t\145\t\145\t\145\t\145\t\145\t\145\t\145\t\145\t\145\t\153\t\153\b\229\t\145\t\145\t\145\t\153'&\t\153\t\153\001\006.\206\t\153\b\157\t\153\002r\003\022\t\153\t\153\011\002\t\153\t\153\t\153\005f\t\153\t\153\004U\b\229\t\153\tn\t\153\t\153\t\153\t\153\t\153\t\153\t\153\t\153\000\238\000\238\004U\t\153 j\t\153\001\006\t\153\t\153\t\153\006z\000\238\t\153\t\153\t\153\011\250\t\153\022\226\t\153\t\153\t\153\006V\005\202\t\153\t\153\t\153\t\153\t\153\t\153\t\153\0226\t\153\t\153\t\153\t\153\t\153\t\153\t\153\t\153\t\153\t\153\t\153\011J\t\153\t\153\022F\t\153\022V\t\153\b\254\012\213\029b\000\238\003\161\t\153\t\153\t\153\t\153\t\153\t\153!\186'*\t\153\t\153\012\213\t\153\t\153\t\153\018\210\t\153\004U\018\222\004\021\t\153\b\242\t\153\t\153\t\153\t\153\t\153\t\153\t\153\t\153\t\153\t\153\t\153\t\153\t\153\t\209\t\209\006\166\t\153\t\153\t\153\t\209,\158\t\209\t\209\015.\028\130\t\209\006~\t\209\006\154\023\002\t\209\t\209\012\002\t\209\t\209\t\209\007\182\t\209\t\209\000\238\006\250\t\209\tn\t\209\t\209\t\209\t\209\t\209\t\209\t\209\t\209\000\238\004m\003\161\t\209\0062\t\209\004U\t\209\t\209\t\209\b\161\000\238\t\209\t\209\t\209\003Q\t\209\022\246\t\209\t\209\t\209\004\021\015\022\t\209\t\209\t\209\t\209\t\209\t\209\t\209\003Q\t\209\t\209\t\209\t\209\t\209\t\209\t\209\t\209\t\209\t\209\t\209\b\n\t\209\t\209\019^\t\209\rr\t\209\000\238\025&\004m\000\238\t\006\t\209\t\209\t\209\t\209\t\209\t\209\"z,\162\t\209\t\209\b\014\t\209\t\209\t\209\007\030\t\209\004U\004U\012Y\t\209\b\242\t\209\t\209\t\209\t\209\t\209\t\209\t\209\t\209\t\209\t\209\t\209\t\209\t\209\t\193\t\193\006\205\t\209\t\209\t\209\t\193\016\162\t\193\t\193\n\0300\198\t\193\b\161\t\193\005\202\006\158\t\193\t\193\019\254\t\193\t\193\t\193\006\205\t\193\t\193\000\238\006\205\t\193\tn\t\193\t\193\t\193\t\193\t\193\t\193\t\193\t\193\000\238\011\178\n.\t\193\t\018\t\193\001F\t\193\t\193\t\193\n\n\000\238\t\193\t\193\t\193\000\238\t\193\023\018\t\193\t\193\t\193\012Y\t\190\t\193\t\193\t\193\t\193\t\193\t\193\t\193\022v\t\193\t\193\t\193\t\193\t\193\t\193\t\193\t\193\t\193\t\193\t\193\rv\t\193\t\193\022\142\t\193\022\166\t\193\t\n\023\154\006\206\b\205\029:\t\193\t\193\t\193\t\193\t\193\t\193#\174\015B\t\193\t\193\t\130\t\193\t\193\t\1930\202\t\193\020\002\005\202\012U\t\193\b\242\t\193\t\193\t\193\t\193\t\193\t\193\t\193\t\193\t\193\t\193\t\193\t\193\t\193\t\185\t\185\029B\t\193\t\193\t\193\t\185\020\150\t\185\t\185\017\178\005\177\t\185\005\202\t\185\015>\"N\t\185\t\185\0032\t\185\t\185\t\185\005F\t\185\t\185\000\238\023\006\t\185\tn\t\185\t\185\t\185\t\185\t\185\t\185\t\185\t\185\"R\011\178\n6\t\185\023\026\t\185\023.\t\185\t\185\t\185\b\205\000\238\t\185\t\185\t\185\000\238\t\185\023&\t\185\t\185\t\185\012U\018\166\t\185\t\185\t\185\t\185\t\185\t\185\t\185\027\230\t\185\t\185\t\185\t\185\t\185\t\185\t\185\t\185\t\185\t\185\t\185\002^\t\185\t\185\023\158\t\185\011\178\t\185\006\138\r6\007\006\015r \170\t\185\t\185\t\185\t\185\t\185\t\185\001\006\000\238\t\185\t\185\001F\t\185\t\185\t\185\016\150\t\185\007\014\004U\r:\t\185\003&\t\185\t\185\t\185\t\185\t\185\t\185\t\185\t\185\t\185\t\185\t\185\t\185\t\185\t\201\t\201 \178\t\185\t\185\t\185\t\201\"V\t\201\t\201\nF\005\185\t\201\b\181\t\201\nN#\142\t\201\t\201\nZ\t\201\t\201\t\201\007&\t\201\t\201\020\138\025*\t\201\nv\t\201\t\201\t\201\t\201\t\201\t\201\t\201\t\201#\146\000\238\017\194\t\201\025:\t\201\025J\t\201\t\201\t\201\015v\024\138\t\201\t\201\t\201\007j\t\201\023:\t\201\t\201\t\201\005z-\138\t\201\t\201\t\201\t\201\t\201\t\201\t\201\025j\t\201\t\201\t\201\t\201\t\201\t\201\t\201\t\201\t\201\t\201\t\201\002^\t\201\t\201\025\130\t\201\025\154\t\201\007\138\rN\007\158\018\166\025\250\t\201\t\201\t\201\t\201\t\201\t\201\011N$>\t\201\t\201\n\130\t\201\t\201\t\201\026\014\t\201\026\"\005\202\023\202\t\201\rR\t\201\t\201\t\201\t\201\t\201\t\201\t\201\t\201\t\201\t\201\t\201\t\201\t\201\n\025\n\025\030\n\t\201\t\201\t\201\n\025#\150\n\025\n\025\006\166-\154\n\025\011\178\n\025\003\134\001F\n\025\n\025\b.\n\025\n\025\n\025\024\142\n\025\n\025\030\018\000\238\n\025\011\146\n\025\n\025\n\025\n\025\n\025\n\025\n\025\n\025&\238\021\026\003&\n\025\028\198\n\025'\174\n\025\n\025\n\025\007\221\021&\n\025\n\025\n\025\000\238\n\025\023F\n\025\n\025\n\025\012\006&\242\n\025\n\025\n\025\n\025\n\025\n\025\n\025\023\206\n\025\n\025\n\025\n\025\n\025\n\025\n\025\n\025\n\025\n\025\n\025\024f\n\025\n\025\031&\n\025\014\018\n\025\b>\020\254\018\166\b\242\029\226\n\025\n\025\n\025\n\025\n\025\n\025\bB\018\166\n\025\n\025\006~\n\025\n\025\n\025\015>\n\025\000\238\014\022\021\002\n\025\000\238\n\025\n\025\n\025\n\025\n\025\n\025\n\025\n\025\n\025\n\025\n\025\n\025\n\025\003\177\003\177 \174\n\025\n\025\n\025\003\177\tn\003\177\003\177\b\206\005\193\003\177\015j\003\177\016\206\022\022\003\177\003\177\019R\003\177\003\177\003\177\024\"\003\177\003\177\018\210\000\238\003\177\018\222\003\177\003\177\003\177\003\177\003\177\003\177\003\177\003\177\024j\025\246\022\026\003\177\t\006\003\177 \214\003\177\003\177\003\177\024&\001\006\003\177\003\177\003\177\001\"\003\177\000\238\003\177\003\177\003\177\024B)V\003\177\003\177\003\177\003\177\003\177\003\177\003\177 \222\003\177\003\177\003\177\003\177\003\177\003\177\003\177\003\177\003\177\003\177\003\177!\198\020\186\020\234\001&\003\177\b\230\003\177\027\154\019f\t\162\007\229\030\226\003\177\003\177\003\177\003\177\003\177\003\177\028\174\004\002\003\177\003\177\004U\003\177\020\194\003\177\030\230\020\242\tR\000\238\022\022\003\177\004\014\003\177\003\177\003\177\003\177\003\177\003\177\003\177\003\177\003\177\003\177\003\177\003\177\003\177\024v\003\177\030\022\003\177\003\177\003\177\t\129\t\129\022\222\r\178\r\162\020\254\t\129\004U\t\129\t\129\019\138\t\206\t\129\t\226\t\129\023\186\004U\t\129\t\129\024z\t\129\t\129\t\129\n>\t\129\t\129\r\174\022\202\t\129\000\238\t\129\t\129\t\129\t\129\t\129\t\129\t\129\t\129\023\134\023\190\nV\t\129\007\225\t\129\024V\t\129\t\129\t\129\024F\001F\t\129\t\129\t\129\r\182\t\129\027\158\t\129\t\129\t\129\025\n\023\138\t\129\t\129\t\129\t\129\t\129\t\129\t\129\024Z\t\129\t\129\t\129\t\129\t\129\t\129\t\129\t\129\t\129\t\129\t\129\024\250\020\186\020\234\025\014\t\129\003\r\t\129\028\178\024\250\014\170\026\182\030\242\t\129\t\129\t\129\t\129\t\129\t\129&\178 r\t\129\t\129\024\254\t\129\020\194\t\129 \154\020\242\028n\004U\025\190\t\129\026\186\t\129\t\129\t\129\t\129\t\129\t\129\t\129\t\129\t\129\t\129\t\129\t\129\t\129\004U\t\129\001\006\t\129\t\129\t\129\002\001\002\001\027\182\004U\011n\t\174\002\001\029\130\004\"\002\001\006\166\000\238\004&\n\162\020\210\027\194\000\238\004*\002\001\n\202\002\001\002\001\002\001\b\186\002\001\002\001\011r\027\186\020\218\007\221\011\198\002\001\002\001\002\001\002\001\002\001\020\226\002\001\017*\b\254\027\198\011\202\004.\002\001\029\214\002\001\002\001\002\001\011:\007\201\011\218\b\134\002\001\025\002\002\001\025\018\002\001\002\001\b\138\025\n\028r\011\226\002\001\002\001\002\001\015b\015f\015z\002^\022j\012R\002\001\002\001\002\001\002\001\002\001\002\001\002\001\002\001\002\001\030\014\020\186\020\234\025\210\002\001\027\206\002\001&\182 \218\011\030\031\234\0302\012^\002\001\012b\002\001\002\001\002\001\011\166\003&\002\001\002\001\012\233\015\178\022r\015\182\000\238\022\190\000\238\027\210\007\237\002\001\b\242\002\001\002\001\002\001\002\001\002\001\002\001\012f\020F\002\001\002\001\002\001\020V\012j\n\001\n\001\028\146\002\001\002\001\002\001\n\001&\222\004\"\n\001\019\022\000\238\004&\007\197\n\001\030^\031^\004*\n\001 z\n\001\n\001\n\001\031\202\n\001\n\001\028\150\000\238\n\001\tn\011\198\n\001\n\001\n\001\n\001\n\001\n\001\n\001 \002 \182!\250\011\202 \226\n\001\030\186\n\001\n\001\n\001!\210\000\238\011\218\b\134\n\001!r\n\001\"2\n\001\n\001\b\138\"\134!^\011\226\n\001\n\001\n\001\015b\015f\015z\"\226\n\001\012R\n\001\n\001\n\001\n\001\n\001\n\001\n\001\n\001\n\001\012\250\n\001\n\001\tR\n\001\005\189\n\001\tR\007\233#\226\018\166)B\012^\n\001\012b\n\001\n\001\n\001\003&\005z\n\001\n\001\005z\015\178\n\001\015\182)n\n\001\004\158\005f\r\246\n\001\b\242\n\001\n\001\n\001\n\001\n\001\n\001\012f\020F\n\001\n\001\n\001\020V\012j\t\253\t\253\"\146\n\001\n\001\n\001\t\253'\022\004\"\t\253#\198!\218\004&\018\166\t\253\"n\"\158\004*\t\253#2\t\253\t\253\t\253\005f\t\253\t\253#N!v\t\253\tn\011\198\t\253\t\253\t\253\t\253\t\253\t\253\t\2530\222$Z\"\154\011\202\"\230\t\253\014\182\t\253\t\253\t\253#R\000\238\011\218\b\134\t\253#~\t\253\"\190\t\253\t\253\b\138\003&0\226\011\226\t\253\t\253\t\253\015b\015f\015z%\146\t\253\012R\t\253\t\253\t\253\t\253\t\253\t\253\t\253\t\253\t\253#.\t\253\t\253\tR\t\253\005f\t\253#\158\005f\015\018\003&!\218\012^\t\253\012b\t\253\t\253\t\253&\162!\218\t\253\t\253$N\015\178\t\253\015\182\005z\t\253\007\209#\162\002\245\t\253\007\209\t\253\t\253\t\253\t\253\t\253\t\253\012f\020F\t\253\t\253\t\253\020V\012j\024\174\012\161!\218\t\253\t\253\t\253\012\161\004\206\012\161\012\161\000\n#\186\012\161\012\161\012\161\012\161$b\012\161\012\161$\170\012\161\012\161\012\161$f\012\161\007\209\018\210#\130\012\161\018\222\012\161\012\161\012\161\012\161\012\161\012\161\012\161\012\161\005\142\tR\002\245\012\161%\150\012\161\012\161\012\161\012\161\007\209\005z\015\"\012\161\012\161\012\161\016\n\012\161\003\230\012\161\012\161\012\161$\022\016*\012\161\012\161\012\161\012\161\012\161\012\161\012\161+\230\012\161\012\161\003&&\166\012\161\012\161\012\161\012\161\012\161\012\161\012\161\004\194\012\161\012\161.\186\t\234\012\161\012\161\tR\005\242$J\003&$\174\012\161\012\161\012\161\012\161\012\161\012\161.\242\012\161.\138\012\161\012\161\012\161\012\161\012\161\017\n\012\161\012\161$\134\012\161\bq\b\026\012\161\004\206\012\161\012\161\tR\012\161\012\161\012\161\017\018\012\161\012\161\012\161\012\161\027\030\t\169\012\161\012\161\012\161\012\161\t\169\004\206\t\169\t\169\003&\tR\t\169\t\169\t\169\t\169\000\238\t\169\t\169\005\142\t\169\t\169\t\169\004\253\t\169\bq\012\158\000\238\t\169\017\"\t\169\t\169\t\169\t\169\t\169\t\169\t\169\t\169\005\142\000\238\006\166\t\169+\234\t\169\t\169\t\169\t\169\bq(\014)\194\t\169\t\169\t\169(\198\t\169\025z\t\169\t\169\t\169\017J)\214\t\169\t\169\t\169\t\169\t\169\t\169\t\169(b\t\169\t\169-^)\250\t\169\t\169\t\169\t\169\t\169\t\169\t\169&\226\t\169\t\169\003&\bq\t\169\t\169\017f\005\242\017\134\017\142\bq\t\169\t\169\t\169\t\169\t\169\t\169\b\186\t\169\018\190\t\169\t\169\t\169\t\169\t\169-\134\t\169\t\169\000\238\t\169\bm\b\242\t\169,6\t\169\t\169\018\246\t\169\t\169\t\169)\206\t\169\t\169\t\169\t\169-6\t\161\t\169\t\169\t\169\t\169\t\161'2\t\161\t\161\004\249\019\026\t\161\t\161\t\161\t\161*Z\t\161\t\161\019J\t\161\t\161\t\161\019r\t\161\bm0\002\020\014\t\161\tn\t\161\t\161\t\161\t\161\t\161\t\161\t\161\t\161\020\022.\218\003&\t\1610R\t\161\t\161\t\161\t\161\bm\020:\000\238\t\161\t\161\t\1610r\t\161\025\146\t\161\t\161\t\161\020B\020\214\t\161\t\161\t\161\t\161\t\161\t\161\t\1610\158\t\161\t\161\006n\020\222\t\161\t\161\t\161\t\161\t\161\t\161\t\161\020\238\t\161\t\161.Z\bm\t\161\t\161\024\162\005\242\026Z\026\202\bm\t\161\t\161\t\161\t\161\t\161\t\161\026\210\t\161\026\218\t\161\t\161\t\161\t\161\t\161\026\226\t\161\t\161,:\t\161\004U\b\242\t\161\000\238\t\161\t\161\026\246\t\161\t\161\t\161\004m\t\161\t\161\t\161\t\1610\006\t\177\t\161\t\161\t\161\t\161\t\177,\142\t\177\t\177\026\254\027\018\t\177\t\177\t\177\t\1770V\t\177\t\177\027B\t\177\t\177\t\1771s\t\177\000\238\027r0v\t\177\tn\t\177\t\177\t\177\t\177\t\177\t\177\t\177\t\177\007\182\027\250\028\018\t\1770\162\t\177\t\177\t\177\t\177\004U\028:\000\238\t\177\t\177\t\177\028~\t\177\025\170\t\177\t\177\t\177\028\158\028\218\t\177\t\177\t\177\t\177\t\177\t\177\t\177\007\205\t\177\t\177\028\226\007\205\t\177\t\177\t\177\t\177\t\177\t\177\t\177\029\002\t\177\t\177\029\014\004U\t\177\t\177\029\030\029N\029R\029^\005\230\t\177\t\177\t\177\t\177\t\177\t\177\029n\t\177\029\138\t\177\t\177\t\177\t\177\t\177\029\154\t\177\t\177\001\006\t\177\007\205\029\170\t\177\029\206\t\177\t\177\029\238\t\177\t\177\t\177\030\030\t\177\t\177\t\177\t\177\030\"\t\145\t\177\t\177\t\177\t\177\t\145\007\205\t\145\t\145\030F\030V\t\145\t\145\t\145\t\145\030j\t\145\t\145\030\178\t\145\t\145\t\145\030\190\t\145\020\246\011\250\b\130\t\145\r\242\t\145\t\145\t\145\t\145\t\145\t\145\t\145\t\145\031>\031\130\022\014\t\145\022\030\t\145\t\145\t\145\t\145 \006\005\242 \n\t\145\t\145\t\145 \030\t\145\025\194\t\145\t\145\t\145 \" \130\t\145\t\145\t\145\t\145\t\145\t\145\t\145 \134\t\145\t\145 \190 \194\t\145\t\145\t\145\t\145\t\145\t\145\t\145 \234\t\145\t\145 \238!\022\t\145\t\145\"v#\n'j\t\174#\026\t\145\t\145\t\145\t\145\t\145\t\145#&\t\145#^\t\145\t\145\t\145\t\145\t\145$2\t\145\t\145\001\006\t\145'n$:\t\145$\150\t\145\t\145$\162\t\145\t\145\t\145$\202\t\145\t\145\t\145\t\145$\242\t\153\t\145\t\145\t\145\t\145\t\153\011:\t\153\t\153%J%~\t\153\t\153\t\153\t\153%\178\t\153\t\153%\182\t\153\t\153\t\153%\218\t\153\022\194\011\250\002^\t\153%\222\t\153\t\153\t\153\t\153\t\153\t\153\t\153\t\153%\250%\254\022\214\t\153\022\234\t\153\t\153\t\153\t\153&R&V&\138\t\153\t\153\t\153&\146\t\153\025\214\t\153\t\153\t\153&\154&\230\t\153\t\153\t\153\t\153\t\153\t\153\t\153&\250\t\153\t\153'B'\178\t\153\t\153\t\153\t\153\t\153\t\153\t\153'\198\t\153\t\153'\222'\242\t\153\t\153'\254(\018'\154\t\174(\026\t\153\t\153\t\153\t\153\t\153\t\153(6\t\153(>\t\153\t\153\t\153\t\153\t\153\0122\t\153\t\153\001\006\t\153'\158\012\246\t\153(v\t\153\t\153(\218\t\153\t\153\t\153)r\t\153\t\153\t\153\t\153)\134\t\209\t\153\t\153\t\153\t\153\t\209\011:\t\209\t\209)\186)\226\t\209\t\209\t\209\t\209*R\t\209\t\209*^\t\209\t\209\t\209*\178\t\209\025\182\b\254\002^\t\209*\182\t\209\t\209\t\209\t\209\t\209\t\209\t\209\t\209*\210*\214\025\202\t\209\025\222\t\209\t\209\t\209\t\209*\250+\014+6\t\209\t\209\t\209+\170\t\209\025\234\t\209\t\209\t\209,N,\218\t\209\t\209\t\209\t\209\t\209\t\209\t\209,\230\t\209\t\209->-R\t\209\t\209\t\209\t\209\t\209\t\209\t\209-r\t\209\t\209-z-\170\t\209\t\209-\226.\002,\006\t\174.\022\t\209\t\209\t\209\t\209\t\209\t\209.:\t\209.r\t\209\t\209\t\209\t\209\t\209.\246\t\209\t\209.\250\t\209,\n/\014\t\209/\018\t\209\t\209/^\t\209\t\209\t\209/b\t\209\t\209\t\209\t\209/~\t\193\t\209\t\209\t\209\t\209\t\193\011:\t\193\t\193/\130/\214\t\193\t\193\t\193\t\193/\218\t\193\t\1930*\t\193\t\193\t\19306\t\1930B0J\002^\t\1930\142\t\193\t\193\t\193\t\193\t\193\t\193\t\193\t\1930\1700\1780\234\t\1930\246\t\193\t\193\t\193\t\1931\"1*12\t\193\t\193\t\1931>\t\193\026\006\t\193\t\193\t\1931F1O\t\193\t\193\t\193\t\193\t\193\t\193\t\1931_\t\193\t\1931\1271\203\t\193\t\193\t\193\t\193\t\193\t\193\t\1931\223\t\193\t\1931\2312#\t\193\t\1932+\000\0000\018\t\174\000\000\t\193\t\193\t\193\t\193\t\193\t\193\000\000\t\193\000\000\t\193\t\193\t\193\t\193\t\193\000\000\t\193\t\193\000\000\t\1930\022\000\000\t\193\000\000\t\193\t\193\000\000\t\193\t\193\t\193\000\000\t\193\t\193\t\193\t\193\000\000\t\185\t\193\t\193\t\193\t\193\t\185\011:\t\185\t\185\000\000\000\000\t\185\t\185\t\185\t\185\000\000\t\185\t\185\000\000\t\185\t\185\t\185\000\000\t\185\000\000\000\000\002^\t\185\000\000\t\185\t\185\t\185\t\185\t\185\t\185\t\185\t\185\000\000\000\000\000\000\t\185\000\000\t\185\t\185\t\185\t\185\000\000\000\000\000\000\t\185\t\185\t\185\000\000\t\185\026\026\t\185\t\185\t\185\000\000\000\000\t\185\t\185\t\185\t\185\t\185\t\185\t\185\000\000\t\185\t\185\000\000\000\000\t\185\t\185\t\185\t\185\t\185\t\185\t\185\000\000\t\185\t\185\000\000\000\000\t\185\t\185\000\000\000\000\000\000\b\242\000\000\t\185\t\185\t\185\t\185\t\185\t\185\000\000\t\185\000\000\t\185\t\185\t\185\t\185\t\185\000\000\t\185\t\185\000\000\t\185,\170\000\000\t\185\000\000\t\185\t\185\000\000\t\185\t\185\t\185\000\000\t\185\t\185\t\185\t\185\000\000\t\201\t\185\t\185\t\185\t\185\t\201\tn\t\201\t\201\000\000\000\000\t\201\t\201\t\201\t\201\000\000\t\201\t\201\000\000\t\201\t\201\t\201\000\000\t\201\000\000\000\000\000\238\t\201\000\000\t\201\t\201\t\201\t\201\t\201\t\201\t\201\t\201\000\000\000\000\000\000\t\201\000\000\t\201\t\201\t\201\t\201\000\000\000\000\000\000\t\201\t\201\t\201\000\000\t\201\026.\t\201\t\201\t\201\000\000\000\000\t\201\t\201\t\201\t\201\t\201\t\201\t\201\000\000\t\201\t\201\000\000\000\000\t\201\t\201\t\201\t\201\t\201\t\201\t\201\000\000\t\201\t\201\000\000\000\000\t\201\t\201\000\000\000\000\000\000\b\242\000\000\t\201\t\201\t\201\t\201\t\201\t\201\000\000\t\201\000\000\t\201\t\201\t\201\t\201\t\201\000\000\t\201\t\201\000\000\t\2010b\000\000\t\201\000\000\t\201\t\201\000\000\t\201\t\201\t\201\000\000\t\201\t\201\t\201\t\201\000\000\n\025\t\201\t\201\t\201\t\201\n\025\tn\n\025\n\025\000\000\000\000\n\025\n\025\n\025\n\025\000\000\n\025\n\025\000\000\n\025\n\025\n\025\000\000\n\025\000\000\000\000\000\238\n\025\000\000\n\025\n\025\n\025\n\025\n\025\n\025\n\025\n\025\000\000\000\000\016\154\n\025\000\000\n\025\n\025\n\025\n\025\000\000\003Z\000\000\n\025\n\025\n\025\000\000\n\025\026:\n\025\n\025\n\025\003^\000\000\n\025\n\025\n\025\n\025\n\025\n\025\n\025\000\000\n\025\n\025\000\000\000\000\n\025\n\025\n\025\n\025\n\025\n\025\n\025\000\000\n\025\n\025\003\158\000\000\n\025\n\025\000\000\000\000\000\000\b\170\0032\n\025\n\025\n\025\n\025\n\025\n\025\004\230\n\025\004U\n\025\n\025\n\025\n\025\n\025\004U\n\025\n\025\004U\n\025\000\000\004U\n\025\000\000\n\025\n\025\004U\n\025\n\025\n\025\000\000\n\025\n\025\n\025\n\025\000\000\b\210\n\025\n\025\n\025\nb\242\001\153\000\000\000\000\001\153\000\000\004U\004U\004U\000\000\000\000\004U\004U\004U\004U\001\153\000\000\004U\000\000\004U\001\1530~\001\153\001\153\000\000\004U\001\153\001\153\001\153\001\153\000\000\001\153\001\153\000\000\001\153\001\153\001\153\000\000\001\153\000\000\000\000\000\000\001\153\tn\001\153\001\153\001\153\001\153\001\153\001\153\001\153\001\153\001\153\000\000\000\000\001\153\000\000\001\153\001\153\001\153\001\153\000\000\000\000\000\238\001\153\001\153\001\153\000\000\001\153\000\000\001\153\001\153\001\153\001\153\000\000\001\153\001\153\001\153\001\153\001\153\001\153\001\153\000\000\001\153\001\153\000\000\000\000\001\153\001\153\001\153\001\153\001\153\001\153\001\153\000\000\001\153\001\153\000\000\000\000\001\153\001\153\000\000(^\000\000\b\242\000\000\001\153\001\153\001\153\001\153\001\153\001\153\000\000\001\153\000\000\001\153\001\153\001\153\001\153\001\153\000\000\016r\001\153\000\000\001\1530\214\000\000\001\153\000\000\001\153\001\153\000\000\001\153\001\153\001\153\000\000\001\153\001\153\001\153\001\153\000\000\002\001\001\153\001\153\001\153\001\153\002\001\tn\001\006\002\001\000\000\000\000\001\"\002\001\017\006\002\001\000\000\001&\002\001\000\000\002\001\002\001\002\001\000\000\002\001\000\000\000\000\000\238\017\014\000\000\001*\002\001\002\001\002\001\002\001\002\001\017\022\002\001\000\000\000\000\000\000\001.\000\000\002\001\002\001\002\001\002\001\000\000\000\000\000\000\001Z\003\022\002\001\000\000\002\001\000\000\002\001\002\001\004\230\000\000\000\000\014\230\002\001\002\001\002\001\014\246\015:\015\130\000\000\025^\r\162\000\000\000\000\002\001\002\001\002\001\002\001\002\001\002\001\002\001\000\000\016\226\017\030\000\000\000\000\002\001\002\001\000\000\000\000\000\000\000\000\000\000\r\174\002\001\r\178\002\001\002\001\002\001\000\000\002\001\000\000\002\001\002\001\015\134\025f\015\138\000\000\025\178\002\001\000\000\002\001\000\000\000\000\002\001\000\000\002\001\002\001\000\000\002\001\rn\001\003\193\003\193\003\193\003\193\n\001\000\000\001\006\n\001\000\000\000\000\001\"\n\001\n\001\n\001\000\000\001&\n\001\000\000\n\001\n\001\n\001\000\000\n\001\000\000\000\000\000\000\n\001\000\000\001*\n\001\n\001\n\001\n\001\n\001\n\001\n\001\000\000\000\000\000\000\001.\000\000\n\001\n\001\n\001\n\001\000\000\000\000\000\000\001Z\003\022\n\001\000\000\n\001\000\000\n\001\n\001\004\230\000\000\000\000\014\230\n\001\n\001\n\001\014\246\015:\015\130\000\000\n\001\r\162\000\000\000\000\n\001\n\001\n\001\n\001\n\001\n\001\n\001\000\000\n\001\n\001\000\000\000\000\n\001\n\001\000\000\000\000\000\000\000\000\000\000\r\174\n\001\r\178\n\001\n\001\n\001\000\000\n\001\000\000\n\001\n\001\015\134\n\001\015\138\000\000\n\001\n\001\000\000\n\001\000\000\000\000\n\001\000\000\n\001\n\001\000\000\n\001\r\182\015\154\000\000\n\001\n\001\016Z\005F\000\000\t\253\n\001\n\001\n\001\n\001\t\253\000\000\001\006\t\253\000\000\000\000\001\"\t\253\t\253\t\253\000\000\001&\t\253\000\000\t\253\t\253\t\253\000\000\t\253\000\000\000\000\000\000\t\253\000\000\001*\t\253\t\253\t\253\t\253\t\253\t\253\t\253\000\000\000\000\000\000\001.\000\000\t\253\t\253\t\253\t\253\000\000\000\000\000\000\001Z\003\022\t\253\000\000\t\253\000\000\t\253\t\253\004\230\000\000\000\000\014\230\t\253\t\253\t\253\014\246\015:\015\130\000\000\t\253\r\162\000\000\000\000\t\253\t\253\t\253\t\253\t\253\t\253\t\253\000\000\t\253\t\253\000\000\000\000\t\253\t\253\000\000\000\000\000\000\000\000\000\000\r\174\t\253\r\178\t\253\t\253\t\253\000\000\t\253\000\000\t\253\t\253\015\134\t\253\015\138\000\000\t\253\t\253\000\000\t\253\000\000\000\000\t\253\000\000\t\253\t\253\000\000\t\253\r\182\015\154\000\000\t\253\t\253\016Z\005F\000\000\003\181\t\253\t\253\t\253\tt\129\003\177\003\177\003\177\003\177\t\129\000\000\t\129\t\129\000\000\000\000\t\129\t\129\t\129\t\129\000\000\t\129\t\129\000\000\t\129\t\129\t\129\000\000\t\129\000\000\000\000\000\000\t\129\000\000\t\129\t\129\t\129\t\129\t\129\t\129\t\129\t\129\000\000\000\000\000\000\t\129\000\000\t\129\t\129\t\129\t\129\000\000\000\000\000\000\t\129\t\129\t\129\000\000\t\129\000\000\t\129\t\129\t\129\000\000\000\000\t\129\t\129\t\129\t\129\t\129\t\129\t\129\000\000\t\129\t\129\000\000\000\000\t\129\t\129\t\129\t\129\t\129\t\129\t\129\000\000\016\226\017\030\002\245)\026\t\129\t\129\000\000\000\000\000\000\000\000\000\000\t\129\t\129\t\129\t\129\t\129\t\129\002\245\t\129\000\000\t\129\t\129\t\129\016\234\t\129\000\000\017&\t\129\000\n\t\129\000\000\000\000\t\129\000\000\t\129\t\129\000\000\t\129\t\129\t\129\000\000\t\129\t\129\t\129\t\129\002M\002M\t\129\t\129\t\129\t\129\002M\000\000\004\"\002M\000\000\000\000\004&\002\245\020\210\000\000\000\000\004*\002M\000\000\002M\002M\002M\000\000\002M\002M\000\000\000\000\020\218\000\000\011\198\002M\002M\002M\002M\002M\020\226\002M\000\000\000\000\020\142\011\202\b\186\002M\000\000\002M\002M\002M\003Z\000\000\011\218\b\134\002M\000\000\002M\000\000\002M\002M\b\138\003^\000\000\011\226\002M\002M\002M\015b\015f\015z\000\000\022j\012R\002M\002M\002M\002M\002M\002M\002M\002M\002M\000\000\000\000\000\000\003\158\002M\000\000\002M\000\000\000\000\031\206\b\170\0032\012^\002M\012b\002M\002M\002M\004\230\000\000\002M\002M\000\000\015\178\000\000\015\182\000\000\031\218\000\000\031\234\000\238\002M\000\000\002M\002M\002M\002M\002M\002M\012f\020F\002M\002M\002M\020V\012j\002M\b\210\001\006\002M\002M\002M\001\"\002M\017\006\002M\000\000\001&\002M\000\000\002M\002M\002M\016V\002M1\143\000\000\000\000\017\014\000\000\001*\002M\002M\002M\002M\002M\017\022\002M\000\000\014r\000\000\001.\014F\002M\002M\002M\002M\000\000\000\000\014\138\001Z\003\022\002M\014\150\002M\000\000\002M\002M\004\230\000\000\000\000\014\230\002M\002M\002M\014\246\015:\015\130\000\000\025^\r\162\000\000\000\000\002M\002M\002M\002M\002M\002M\002M\000\000\000\000\002M\000\000\000\000\002M\002M\000\000\000\000\000\000\000\000\000\000\r\174\002M\r\178\002M\002M\002M\000\129\002M\000\000\002M\002M\015\134\000\129\015\138\000\000\000\000\002M\000\000\002M\000\000\000\000\002M\000\000\002M\002M\000\000\002M\ri\000\129\000\129\000\129\000\129\000\129\000\129\000\129\000\000\000\000\012m\000\000\002N\000\000\007~\000\129\000\129\000\129\000\n\000\129\000\000\000\000\006i\012m\000\129\000\129\000\129\000\129\000\129\000\129\000\000\000\129\000\129\000\129\002\245\006\238\000\000\000\129\000\000\000\000\000\129\000\000\000\129\000\000\000\222\000\000\000\000(\006\002\245\002\245\006\242\004\182\007\150\012m\000\129\000\129\000\129\000\129\000\000\000\000\000\129\000\129\000\129\000\129\001^\000\000\001b\003\182\000\000\000\000\0046\007\222\004\"\000\000\007\226\007\238\004&\000\000\002\245\006\222\000\000\004*\002v\000\000\012m\000\000\004.\000\000\012m(\n\000\000\007\162\004:\000\000\011\222\002~\016~\016\130\002\138\002\142\012\189\000\000\000\000\011\230(\022\011\202\012\1890\182\006\230\016\182\016\186\000\000\014\190\014\234\011\218\014\250\003\234\016\190\015F\004\218\002\166\000\000\b\138\000\000\000\000\011\226\b\186\006u\000\000\015b\015f\015z\015\166(\030\012R\000\000\000\000\002\170\002\174\002\178\002\182\002\186\000\000\000\000\016\242\002\190\000\000\012\189\000\000\006u\002\194\000\000\017.\017N\017n\020\026\012^\012\189\012b\000\000\000\000\002\198\012\189\012\189\002^\000\000&\214\015\178\002\202\015\182\000\000\012\189\012\189.\190\003Z\000\000\000\000\000\000\000\000\002\242\019\022\000\000\000\000\012f\020F\003^\002\246\000\000\020\154\012j\020\170.\202\002\254.\218\003\002\003\006\b\022\b\n\001b\003\182\012\189\000\000\000\000\007\222\004\"\000\000\007\226\007\238\004&\003\158\000\000\012\189\000\000\004*\002v\000\000\b\170\0032\b\026\b\014\000\000\000\000\000\000\000\000\004\230\000\000\011\222\002~\016~\016\130\002\138\002\142\007\201\000\000\000\000\011\230\000\000\011\202\007\201&\190\000\000\016\182\016\186\000\000\014\190\014\234\011\218\014\250\003\234\016\190\015F\000\000\002\166\b\210\b\138\000\000\000\000\011\226\000\000\000\000\000\000\015b\015f\015z\015\166\000\000\012R\000\000\000\000\002\170\002\174\002\178\002\182\002\186\000\000\000\000\016\242\002\190\000\000\007\201\000\000\000\000\002\194\000\000\017.\017N\017n\020\026\012^\007\201\012b\000\000\000\000\002\198\007\201\007\201\002^\000\000'\014\015\178\002\202\015\182\000\000\007\201\007\201\000\000\003Z\000\000\000\000\000\000\000\000\002\242&\226\000\000\000\000\012f\020F\003^\002\246\000\000\020\154\012j\020\170\000\000\002\254\000\000\003\002\003\006\001^\000\000\001b\003\182\007\201\000\000\000\000\007\222\004\"\000\000\007\226\007\238\004&\003\158\000\000\007\201\000\000\004*\002v\000\000\b\170\0032\016z\000\000\000\000\000\000\000\000\000\000\004\230\000\000\011\222\002~\016~\016\130\002\138\002\142\007\197\000\000\000\000\011\230\000\000\011\202\007\197\016\134\000\000\016\182\016\186\000\000\014\190\014\234\011\218\014\250\003\234\016\190\015F\000\000\002\166\b\210\b\138\000\000\000\000\011\226\000\000\000\000\000\000\015b\015f\015z\015\166\000\000\012R\000\000\000\000\002\170\002\174\002\178\002\182\002\186\000\000\000\000\016\242\002\190\000\000\007\197\000\000\000\000\002\194\000\000\017.\017N\017n\020\026\012^\007\197\012b\000\000\000\000\002\198\007\197\007\197\002^\000\000'\030\015\178\002\202\015\182\000\000\007\197\007\197\000\000\003Z\000\000\000\000\000\000\000\000\002\242\r\242\000\000\000\000\012f\020F\003^\002\246\000\000\020\154\012j\020\170\000\000\002\254\000\000\003\002\003\006\b\022\000\000\001b\003\182\007\197\000\000\000\000\007\222\004\"\000\000\007\226\007\238\004&\003\158\000\000\007\197\000\000\004*\002v\000\000\b\170\0032\020v\000\000\000\000\000\000\000\000\000\000\004\230\000\000\011\222\002~\016~\016\130\002\138\002\142\006\189\000\000\000\000\011\230\000\000\011\202\006\189\020z\000\000\016\182\016\186\000\000\014\190\014\234\011\218\014\250\003\234\016\190\015F\000\000\002\166\b\210\b\138\000\000\004\"\011\226\000\000\000\000\004&\015b\015f\015z\015\166\000\000\012R\000\000\000\000\002\170\002\174\002\178\002\182\002\186\000\000\000\000\016\242\002\190\000\000\006\189\000\000\007\214\002\194\004\"\017.\017N\017n\020\026\012^\006\189\012b\bJ\000\000\002\198\006\189\006\189\002^\011\182(R\015\178\002\202\015\182\000\000\006\189\006\189\000\000\000\000\000\000\000\000\000\000\000\000\002\242\012\246(V\000\000\012f\020F\000\000\002\246\000\000\020\154\012j\020\170\000\000\002\254\011\186\003\002\003\006\004U\000\000\004U\004U\006\189\b\138\004U\004U\004U\004U\004U\004U\004U\000\000\012b\006\189\000\000\004U\006\234\000\000\004U\000\000\005\014\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004U#Z\004U\004U'6\000\000\000\241\004U\000\000\004U\000\000\004U\000\241\004U\000\000\004U\004U\004U\004U\004U\004U\004U\004U\004U\004U\002\245\003&\004U\004U*\158\006\238\004U\004U\004U\002^\004U\004U\004U\004U\000\000\004U\004U\004U\000\000\000\000\006\242\000\000\007\130\004U\000\000\004U\000\000\000\000\000\241\000\n\000\000\011\242 \138\004U\004U\004U\004U\004U\000\241\004U\004U\004U\000\000\000\241$N\004U\002\245$6\004U\006\222\004U\004\230\000\241\000\241\000\000\000\000\004U\000\000$R\002\245\002\245\007\142\000\000\004U\004U\004U\002=\002=\004U\004U\004U\004U\002=\000\000\004U\002=\000\000\000\000\006\230\000\000\000\000\000\241\000\000\000\000\002=\006\225\002=\002=\002=\000\000\002=\002=\000\241\000\000\000\000\000\000\006\197\002=\002=\002=\002=\002=\000\000\002=\000\000\000\000\006\225\000\000\000\000\002=\006\225\002=\002=\002=\000\000\000\000\000\000\006\197\002=\000\000\002=\006\197\002=\002=\000\000\000\000\000\000\000\000\002=\002=\002=\000\000\012\141\012y\000\000\000\000\000\000\002=\002=\002=\002=\002=\002=\002=\002=\002=\000\000\020\186\020\234\002^\002=\012\141\002=\000\000\000\000\000\000\000\000\000\000\004n\002=\000\000\002=\002=\002=\000\000\004r\002=\002=\000\000\000\000\020\194\004v\000\000\020\242\000\000\004z\012y\002=\000\000\002=\002=\002=\002=\002=\002=\002Y\002Y\002=\002=\002=\006\201\002Y\000\000\006\197\002Y\002=\002=\002=\r\n\000\000\000\000\012\206\000\000\002Y\019\"\002Y\002Y\002Y\r\022\002Y\002Y\006\201\r\"\012\026\000\000\006\201\002Y\002Y\002Y\002Y\002Y\000\000\002Y\000\000\000\000\000\000\019&\000\000\002Y\000\000\002Y\002Y\002Y\000\000\000\000\000\000\000\000\002Y\000\000\002Y\000\000\002Y\002Y\000\000\000\000\000\000\000\000\002Y\002Y\002Y\000\000\012\141\012y\000\000\002^\000\000\002Y\002Y\002Y\002Y\002Y\002Y\002Y\002Y\002Y\000\000\020\186\020\234\002^\002Y\012\141\002Y\000\000\000\000\000\000\000\000\000\000\004n\002Y\000\000\002Y\002Y\002Y\000\000\004\250\002Y\002Y\006\201\000\000\020\194\004v\000\000\020\242\000\000\004z\012y\002Y\000\000\002Y\002Y\002Y\002Y\002Y\002Y\002U\002U\002Y\002Y\002Y\012Y\002U\000\000\000\000\002U\002Y\002Y\002Y\r\n\000\000\000\000\012\206\019*\002U,\018\002U\002U\002U\r\022\002U\002U\012Y\r\"\000\000\000\000\012Y\002U\002U\002U\002U\002U\000\000\002U\000\000\000\000\000\000,\022\000\000\002U\000\000\002U\002U\002U\000\000\000\000\000\000\000\000\002U\000\000\002U\000\000\002U\002U\000\000\000\000\000\000\000\000\002U\002U\002U\000\000\012\141\012y\000\000\002^\000\000\002U\002U\002U\002U\002U\002U\002U\002U\002U\000\000\020\186\020\234\002^\002U\012\141\002U\000\000\000\000\000\000\000\000\000\000\004n\002U\000\000\002U\002U\002U\000\000\b^\002U\002U\012Y\000\000\020\194\004v\000\000\020\242\000\000\004z\012y\002U\000\000\002U\002U\002U\002U\002U\002U\002A\002A\002U\002U\002U\012U\002A\000\000\000\249\002A\002U\002U\002U\r\n\000\249\000\000\012\206,\026\002A\000\000\002A\002A\002A\r\022\002A\002A\012U\r\"\000\000\000\000\012U\002A\002A\002A\002A\002A\000\000\002A\000\000\000\000,\134\000\000\000\000\002A\000\000\002A\002A\002A\003Z\000\000\000\000\000\000\002A\000\000\002A\000\249\002A\002A \146\003^\000\000\000\000\002A\002A\002A\000\249\012\141\012y\000\000\002^\000\249\002A\002A\002A\002A\002A\002A\002A\002A\002A\000\249\020\186\020\234\003\158\002A\012\141\002A\000\000\000\000\000\000\b\170\0032\004n\002A\000\000\002A\002A\002A\004\230\031\030\002A\002A\012U\000\000\020\194\004v\000\000\020\242\000\249\004z\012y\002A\000\000\002A\002A\002A\002A\002A\002A\000\249\002=\002A\002A\002A\004V\002=\000\000\b\210\002=\002A\002A\002A\002=\000\000\002=\004Z\000\000\002=\000\000\002=\002=\002=\000\000\002=\000\000\000\000\000\000\000\000\000\000\000\000\002=\002=\002=\002=\002=\000\000\002=\000\000\000\000\b:\000\000\000\000\002=\002=\002=\002=\b\174\003\134\000\000\000\000\000\000\002=\002\150\002=\b\138\002=\002=\000\000\000\000\000\000\002\245\002=\002=\002=\000\000\000\000\000\000\000\000\002\245\000\000\000\000\000\000\002=\002=\002=\002=\002=\002=\002=\000\000\016\226\017\030\000\000\b\178\002=\002=\000\n~\002Y\000\000\002Y\000\000\002Y\002Y\004\230\000\000\000\000\014\230\002Y\002Y\002Y\014\246\015:\015\130\000\000\000\000\r\162\006\237\000\000\002Y\002Y\002Y\002Y\002Y\002Y\002Y\000\000\016\226\017\030\000\000\000\000\002Y\002Y\000\000\023\230\000\000\000\000\023\242\r\174\002Y\r\178\002Y\002Y\002Y\000\000\002Y\000\000\002Y\002Y\015\134\016\234\015\138\000\000\017&\002Y\001F\002Y\000\000\012Q\002Y\000\000\002Y\002Y\000\000\002Y\r\182\015\154\000\000\002Y\002Y\016Z\005F\000\000\002U\002Y\002Y\002Y\002Y\002U\012Q\000\000\002U\000\000\012Q\000\000\002U\000\000\002U\000\000\000\000\002U\000\000\002U\002U\002U\006\234\002U\016v\003\022\005\014\000\000\000\000\000\000\002U\002U\002U\002U\002U\0246\002U\000\000\000\000\024J\024^\024n\002U\002U\002U\002U\000\000\000\000\000\000\002^\000\000\002U\000\000\002U\000\000\002U\002U\000\000\000\000\000\000\004\017\002U\002U\002U\006\238\000\000\000\000\003\"\003&\000\000\000\000\000\000\002U\002U\002U\002U\002U\002U\002U\006\242\016\226\017\030\012Q\000\000\002U\002U\003*\000\000\000\000\000\000\000\000\000\000\002U\000\000\002U\002U\002U\000\000\002U\023\254\002U\002U\000\238\016\234\000\000\000\000\017&\002U\006\222\002U\003J\004\206\002U\000\000\002U\002U\004\210\002U\004\230\005\030\005*\002U\002U\000\000\000\000\0056\002A\002U\002U\002U\002U\002A\000\000\012\158\002A\004\017\000\000\007>\002A\000\000\002A\000\000\005:\002A\000\000\002A\002A\002A\000\000\002A\000\000\014r\000\000\000\000\014F\015\250\002A\002A\002A\002A\002A\014\138\002A\000\000\000\000\014\150\000\000\000\000\002A\002A\002A\002A\000\000\000\000\007\221\020r\b\134\002A\007\221\002A\000\000\002A\002A\000\000\000\000\000\000\023\142\002A\002A\002A\023\174\023\194\023\210\003z\003&\029\130\000\000\000\000\002A\002A\002A\002A\002A\002A\002A\000\000\016\226\017\030\000\000\000\000\002A\002A\003~\000\000\000\000\000\000\007\221\000\000\002A\000\000\002A\002A\002A\000\000\002A\000\000\002A\002A\000\000\016\234\000\000\007\221\017&\002A\000\000\002A\003\142\nv\002A\000\000\002A\002A\t\210\002A\b\138\t\242\n\014\002A\002A\000\000\000\000\n\"\000\000\002A\002A\002A\002A\000\006\000\246\000\000\007\221\002f\001\002\001\006\004\238\001\n\001\022\001\"\nJ\000\000\000\000\000\000\001&\000\000\000\000\007\190\002\245\000\000\000\000\004\129\000\000\000\000\000\000\bz\002\245\001*\000\000\001n\001r\007\221\000\000\000\000\007\194\000\000\001v\002\245\001.\000\000\b\146\000\000\003\194\003\198\000\n\003\202\003\214\001Z\003\226\003\234\007\250\014\202\000\n\000\000\030~\004\230\000\000\000\000\014\230\030\134\002\245\002\245\014\246\015:\015\130\015\142\000\000\r\162\002\245\002\245\000\000\000\000\000\000\004\153\002\245\030\142\002\245\015\186\000\000\014\166\000\000\000\000\002\245\000\000\000\000\015\198\015\222\0162\016F\r\174(\006\r\178\030\162\030\206\004\182\000\000\004\129\002\245\000\000\000\000\015\134\000\000\015\138\000\000\000\000\002\245\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\031\014!\002\r\182\015\154\002Q\002Q\029v\016Z\005F\016\210\002Q\000\000\000\000\002Q\000\000\000\000\030v\000\000(\n\000\000\007\198 \250\002Q\000\000\002Q\002Q\002Q\000\000\002Q\002Q!*!:\000\000(\022\000\000\002Q\002Q\002Q\002Q\002Q\000\000\002Q\000\000\000\000,\150\000\000\000\000\002Q\000\000\002Q\002Q\002Q\003Z\017B\000\000\000\000\002Q\000\000\002Q\004\153\002Q\002Q(\030\003^\000\000\000\000\002Q\002Q\002Q\000\000!R\000\000\000\000\000\000\000\000\002Q\002Q\002Q\002Q\002Q\002Q\002Q\002Q\002Q\000\000\000\000\000\000\003\158\002Q\000\000\002Q(\"\000\000\024\210\b\170\0032\000\000\002Q\000\000\002Q\002Q\002Q\004\230\000\000\002Q\002Q\000\000\006\234\000\000\000\000\000\000\005\014\000\000\000\238\000\000\002Q\000\000\021\n\002Q\002Q\002Q\002Q\002Q\b\237\b\237\002Q\002Q\002Q\016B\b\237\000\000\b\210\b\237\002Q\002Q\002Q\000\000\000\000\000\000\000\000\000\000\0212\000\000\b\237\021V\b\237\026\230\b\237\b\237\006\238\000\000\000\000\000\000\000\000\021j\021\130\021\138\021r\021\146\000\000\b\237\000\000\014r0\206\006\242\014F\b\237\000\000\021\154\021\162\b\237\003Z\014\138\000\000\000\000\b\237\014\150\b\237\000\000\021\170\b\237\000\000\003^\000\000\000\000\b\237\b\237\002^\000\000\000\000\000\000\000\000\000\000\006\222\b\237\b\237\021:\021z\021\178\021\186\021\202\b\237\b\237\000\000\000\000\000\000\003\158\b\237\000\000\021\210\000\000\000\000\000\000\b\170\0032\000\000\b\237\000\000\b\237\b\237\021\218\004\230,\238\b\237\b\237\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\238\000\000\b\237\000\000\021\250\b\237\022\002\021\194\b\237\b\237\002\133\002\133\b\237\021\226\b\237\017~\002\133\000\000\b\210\002\133\b\237\021\234\021\242\000\000\000\000\000\000\000\000\000\000\002\133\000\000\002\133\002\133\002\133\019\246\002\133\002\133\000\000\000\000\000\000\000\000\000\000\002\133\002\133\002\133\002\133\002\133\000\000\002\133\000\000\014r\000\000\014nm\002m\002\133\002\133\002\133\000\000\002m\000\000\001F\002m\002\133\002\133\002\133\014r\000\000\000\000\014F\014~\002m\000\000\002m\002m\002m\014\138\002m\002m(\n\014\150\000\000\000\000\000\000\002m\002m\002m\002m\002m\000\000\002m\000\000\000\000\000\000(\022\000\000\002m\000\000\002m\002m\002m\000\000'\230\016v\0242\002m\000\000\002m\000\000\002m\002m\000\000\000\000\000\000\0246\002m\002m\002m\024J\024^\024n\000\000\007\189(\030\002m\002m\021:\002m\002m\002m\002m\002m\002m\000\000\000\000\000\000\000\000\002m\000\000\002m\000\000\000\000\000\000\000\000\000\000\000\000\002m\000\000\002m\002m\002m\000\000-\190\002m\002m\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\238\000\000\002m\000\000\002m\002m\002m\002m\002m\002m\002y\002y\002m\002m\002m\000\000\002y\000\000\000\000\002y\002m\002m\002m\000\000\000\000\000\000\000\000\000\000\0212\000\000\002y\002y\002y\020*\002y\002y\000\000\000\000\000\000\000\000\000\000\002y\002y\002y\021r\002y\000\000\002y\000\000\014r\000\000\000\000\014F\002y\000\000\002y\002y\002y\000\000\014\138\000\000\000\000\002y\014\150\002y\000\000\002y\002y\000\000\000\000\000\000\000\000\002y\002y\002y\000\000\000\000\000\000\000\000\000\000\000\000\002y\002y\021:\021z\002y\002y\002y\002y\002y\000\000\000\000\000\000\000\000\002y\000\000\002y\000\000\000\000\000\000\000\000\000\000\000\000\002y\000\000\002y\002y\002y\000\000\000\000\002y\002y\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\238\000\000\002y\000\000\002y\002y\002y\002y\002y\002y\002\137\002\137\002y\002y\002y\000\000\002\137\000\000\000\000\002\137\002y\002y\002yi\002i\002\137\002\137\002\137\000\000\002i\000\000\000\000\002i\002\137\002\137\002\137\000\000\000\000\000\000\000\000\000\000\002i\000\000\002i\002i\002i\007m\002i\002i\000\000\000\000\000\000\000\000\000\000\002i\002i\002i\002i\002i\000\000\002i\000\000\007m\000\000\000\000\014F\002i\000\000\002i\002i\002i\000\000\007m\000\000\000\000\002i\007m\002i\000\000\002i\002i\000\000\000\000\000\000\000\000\002i\002i\002i\000\000\000\000\000\000\000\000\000\000\000\000\002i\002i\021:\002i\002i\002i\002i\002i\002i\000\000\000\000\000\000\000\000\002i\000\000\002i\000\000\000\000\000\000\000\000\000\000\000\000\002i\000\000\002i\002i\002i\000\000\000\000\002i\002i\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\133\000\000\002i\000\000\002i\002i\002i\002i\002i\002i\002u\002u\002i\002i\002i\000\000\002u\000\000\000\000\002u\002i\002i\002i\000\000\000\000\000\000\000\000\000\000\0212\000\000\002u\002u\002u\007\133\002u\002u\000\000\000\000\000\000\000\000\000\000\002u\002u\002u\021r\002u\000\000\002u\000\000\007\133\000\000\000\000\014F\002u\000\000\002u\002u\002u\000\000\007\133\000\000\000\000\002u\007\133\002u\000\000\002u\002u\000\000\000\000\000\000\000\000\002u\002u\002u\000\000\000\000\000\000\000\000\000\000\000\000\002u\002u\021:\021z\002u\002u\002u\002u\002u\000\000\000\000\000\000\000\000\002u\000\000\002u\000\000\000\000\000\000\000\000\000\000\000\000\002u\000\000\002u\002u\002u\000\000\000\000\002u\002u\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\238\000\000\002u\000\000\002u\002u\002u\002u\002u\002u\002q\002q\002u\002u\002u\000\000\002q\000\000\000\000\002q\002u\002u\002u\000\000\000\000\000\000\000\000\000\000\0212\000\000\002q\002q\002q\007\161\002q\002q\000\000\000\000\000\000\000\000\000\000\002q\002q\002q\021r\002q\000\000\002q\000\000\014r\000\000\000\000\014F\002q\000\000\002q\002q\002q\000\000\007\161\000\000\000\000\002q\007\161\002q\000\000\002q\002q\000\000\000\000\000\000\000\000\002q\002q\002q\000\000\000\000\000\000\000\000\000\000\000\000\002q\002q\021:\021z\002q\002q\002q\002q\002q\000\000\000\000\000\000\000\000\002q\000\000\002q\000\000\000\000\000\000\000\000\000\000\000\000\002q\000\000\002q\002q\002q\000\000\000\000\002q\002q\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\153\000\000\002q\000\000\002q\002q\002q\002q\002q\002q\002\153\002\153\002q\002q\002q\000\000\002\153\000\000\000\000\002\153\002q\002q\002q\000\000\000\000\000\000\000\000\000\000\0212\000\000\002\153\002\153\002\153\007\153\002\153\002\153\000\000\000\000\000\000\000\000\000\000\021j\021\130\021\138\021r\021\146\000\000\002\153\000\000\019\218\000\000\000\000\007\153\002\153\000\000\021\154\021\162\002\153\000\000\007\153\000\000\000\000\002\153\007\153\002\153\000\000\021\170\002\153\000\000\000\000\000\000\000\000\002\153\002\153\002^\000\000\000\000\000\000\000\000\000\000\000\000\002\153\002\153\021:\021zi\002\129\002\129\000\000\000\000\000\000\000\000\000\000\002\129\002\129\002\129\021r\002\129\000\000\002\129\000\000\007i\000\000\000\000\014F\002\129\000\000\002\129\002\129\002\129\000\000\007i\000\000\000\000\002\129\007i\002\129\000\000\002\129\002\129\000\000\000\000\000\000\000\000\002\129\002\129\002\129\000\000\000\000\000\000\000\000\000\000\000\000\002\129\002\129\021:\021z\002\129\002\129\002\129\002\129\002\129\000\000\000\000\000\000\000\000\002\129\000\000\002\129\000\000\000\000\000\000\000\000\000\000\000\000\002\129\000\000\002\129\002\129\002\129\000\000\000\000\002\129\002\129\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\238\000\000\002\129\000\000\002\129\002\129\002\129\002\129\002\129\002\129\002}\002}\002\129\002\129\002\129\000\000\002}\000\000\000\000\002}\002\129\002\129\002\129\000\000\000\000\000\000\000\000\000\000\0212\000\000\002}\002}\002}\026\146\002}\002}\000\000\000\000\000\000\000\000\000\000\002}\002}\002}\021r\002}\000\000\002}\000\000\019\158\000\000\000\000\019\170\002}\000\000\002}\002}\002}\000\000\019\182\000\000\000\000\002}\019\194\002}\000\000\002}\002}\000\000\000\000\000\000\000\000\002}\002}\002}\000\000\000\000\000\000\000\000\000\000\000\000\002}\002}\021:\021z\002}\002}\002}\002}\002}\000\000\000\000\000\000\000\000\002}\000\000\002}\000\000\000\000\000\000\000\000\000\000\000\000\002}\000\000\002}\002}\002}\000\000\000\000\002}\002}\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\238\000\000\002}\000\000\002}\002}\002}\002}\002}\002}\002\145\002\145\002}\002}\002}\000\000\002\145\000\000\000\000\002\145\002}\002}\002}\000\000\000\000\000\000\000\000\000\000\0212\000\000\002\145\002\145\002\145*\006\002\145\002\145\000\000\000\000\000\000\000\000\000\000\021j\021\130\021\138\021r\002\145\000\000\002\145\000\000\019\158\000\000\000\000\019\170\002\145\000\000\021\154\021\162\002\145\000\000\019\182\000\000\000\000\002\145\019\194\002\145\000\000\002\145\002\145\000\000\000\000\000\000\000\000\002\145\002\145\002^\000\000\000\000\000\000\000\000\000\000\000\000\002\145\002\145\021:\021z\021\178\021\186\002\145\002\145\002\145\000\000\000\000\000\000\000\000\002\145\000\000\002\145\000\000\000\000\000\000\000\000\000\000\000\000\002\145\000\000\002\145\002\145\002\145\000\000\000\000\002\145\002\145\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\145\000\000\002\145\002\145\002\145\021\194\002\145\002\145\002e\002e\002\145\002\145\002\145\000\000\002e\000\000\000\000\002e\002\145\002\145\002\145\000\000\000\000\000\000\000\000\000\000\0212\000\000\002e\002e\002e\000\000\002e\002e\000\000\000\000\000\000\000\000\000\000\002e\002e\002e\021r\002e\000\000\002e\000\000\000\000\000\000\000\000\000\000\002e\000\000\002e\002e\002e\000\000\000\000\000\000\000\000\002e\000\000\002e\000\000\002e\002e\000\000\000\000\000\000\000\000\002e\002e\002e\000\000\000\000\000\000\000\000\000\000\000\000\002e\002e\021:\021z\002e\002e\002e\002e\002e\000\000\000\000\000\000\000\000\002e\000\000\002e\000\000\000\000\000\000\000\000\000\000\000\000\002e\000\000\002e\002e\002e\000\000\000\000\002e\002e\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002e\000\000\002e\002e\002e\002e\002e\002e\002a\002a\002e\002e\002e\000\000\002a\000\000\000\000\002a\002e\002e\002e\000\000\000\000\000\000\000\000\000\000\0212\000\000\002a\002a\002a\000\000\002a\002a\000\000\000\000\000\000\000\000\000\000\021j\021\130\021\138\021r\002a\000\000\002a\000\000\000\000\000\000\000\000\000\000\002a\000\000\021\154\021\162\002a\000\000\000\000\000\000\000\000\002a\000\000\002a\000\000\002a\002a\000\000\000\000\000\000\000\000\002a\002a\002^\000\000\000\000\000\000\000\000\000\000\000\000\002a\002a\021:\021z\021\178\021\186\002a\002a\002a\000\000\000\000\000\000\000\000\002a\000\000\002a\000\000\000\000\000\000\000\000\000\000\000\000\002a\000\000\002a\002a\002a\000\000\000\000\002a\002a\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002a\000\000\002a\002a\002a\021\194\002a\002a\002\189\002\189\002a\002a\002a\000\000\002\189\000\000\000\000\002\189\002a\002a\002a\000\000\000\000\000\000\000\000\000\000\0212\000\000\002\189\002\189\002\189\000\000\002\189\002\189\000\000\000\000\000\000\000\000\000\000\021j\021\130\021\138\021r\002\189\000\000\002\189\000\000\000\000\000\000\000\000\000\000\002\189\000\000\021\154\021\162\002\189\000\000\000\000\000\000\000\000\002\189\000\000\002\189\000\000\002\189\002\189\000\000\000\000\000\000\000\000\002\189\002\189\002\189\000\000\000\000\000\000\000\000\000\000\000\000\002\189\002\189\021:\021zj\021\130\021\138\021r\002]\000\000\002]\000\000\000\000\000\000\000\000\000\000\002]\000\000\021\154\021\162\002]\000\000\000\000\000\000\000\000\002]\000\000\002]\000\000\002]\002]\000\000\000\000\000\000\000\000\002]\002]\002^\000\000\000\000\000\000\000\000\000\000\000\000\002]\002]\021:\021zj\021\130\021\138\021r\002\149\000\000\002\149\000\000\000\000\000\000\000\000\000\000\002\149\000\000\021\154\021\162\002\149\000\000\000\000\000\000\000\000\002\149\000\000\002\149\000\000\002\149\002\149\000\000\000\000\000\000\000\000\002\149\002\149\002^\000\000\000\000\000\000\000\000\000\000\000\000\002\149\002\149\021:\021zj\021\130\021\138\021r\002\141\000\000\002\141\000\000\000\000\000\000\000\000\000\000\002\141\000\000\021\154\021\162\002\141\000\000\000\000\000\000\000\000\002\141\000\000\002\141\000\000\002\141\002\141\000\000\000\000\000\000\000\000\002\141\002\141\002^\000\000\000\000\000\000\000\000\000\000\000\000\002\141\002\141\021:\021zj\021\130\021\138\021r\021\146\000\000\002\157\000\000\000\000\000\000\000\000\000\000\002\157\000\000\021\154\021\162\002\157\000\000\000\000\000\000\000\000\002\157\000\000\002\157\000\000\021\170\002\157\000\000\000\000\000\000\000\000\002\157\002\157\002^\000\000\000\000\000\000\000\000\000\000\000\000\002\157\002\157\021:\021zj\021\130\021\138\021r\002\161\000\000\002\161\000\000\000\000\000\000\000\000\000\000\002\161\000\000\021\154\021\162\002\161\000\000\000\000\000\000\000\000\002\161\000\000\002\161\000\000\021\170\002\161\000\000\000\000\000\000\000\000\002\161\002\161\002^\000\000\000\000\000\000\000\000\000\000\000\000\002\161\002\161\021:\021zj\021\130\021\138\021r\002\165\000\000\002\165\000\000\000\000\000\000\000\000\000\000\002\165\000\000\021\154\021\162\002\165\000\000\000\000\000\000\000\000\002\165\000\000\002\165\000\000\021\170\002\165\000\000\000\000\000\000\000\000\002\165\002\165\002^\000\000\000\000\000\000\000\000\000\000\000\000\002\165\002\165\021:\021z\021\178\021\186\021\202\002\165\002\165\000\000\000\000\000\000\000\000\002\165\000\000\021\210\000\000\000\000\000\000\000\000\000\000\000\000\002\165\000\000\002\165\002\165\021\218\000\000\000\000\002\165\002\165\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\165\000\000\002\165\002\165\002\165\021\194\002\165\002\165\b\169\b\169\002\165\002\165\002\165\000\000\b\169\000\000\000\000\b\169\002\165\021\234\021\242\000\000\000\000\000\000\000\000\000\000\0212\000\000\b\169\b\169\b\169\000\000\b\169\b\169\000\000\000\000\000\000\000\000\000\000\021j\021\130\021\138\021r\021\146\000\000\b\169\000\000\000\000\000\000\000\000\000\000\b\169\000\000\021\154\021\162\b\169\000\000\000\000\000\000\000\000\b\169\000\000\b\169\000\000\021\170\b\169\000\000\000\000\000\000\000\000\b\169\b\169\002^\000\000\000\000\000\000\000\000\000\000\000\000\b\169\b\169\021:\021z\021\178\021\186\021\202\b\169\b\169\000\000\000\000\000\000\000\000\b\169\000\000\021\210\000\000\000\000\000\000\000\000\000\000\000\000\b\169\000\000\b\169\b\169\021\218\000\000\000\000\b\169\b\169\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\169\000\000\b\169\b\169\b\169\021\194\b\169\b\169\002\169\002\169\b\169\021\226\b\169\000\000\002\169\000\000\000\000\002\169\b\169\021\234\021\242\000\000\000\000\000\000\000\000\000\000\0212\000\000\002\169\002\169\002\169\000\000\002\169\002\169\000\000\000\000\000\000\000\000\000\000\021j\021\130\021\138\021r\021\146\000\000\002\169\000\000\000\000\000\000\000\000\000\000\002\169\000\000\021\154\021\162\002\169\000\000\000\000\000\000\000\000\002\169\000\000\002\169\000\000\021\170\002\169\000\000\000\000\000\000\000\000\002\169\002\169\002^\000\000\000\000\000\000\000\000\000\000\000\000\002\169\002\169\021:\021z\021\178\021\186\021\202\002\169\002\169\000\000\000\000\000\000\000\000\002\169\000\000\021\210\000\000\000\000\000\000\000\000\000\000\000\000\002\169\000\000\002\169\002\169\021\218\000\000\000\000\002\169\002\169\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\169\000\000\021\250\002\169\022\002\021\194\002\169\002\169\b\165\b\165\002\169\021\226\002\169\000\000\b\165\000\000\000\000\b\165\002\169\021\234\021\242\000\000\000\000\000\000\000\000\000\000\0212\000\000\b\165\b\165\b\165\000\000\b\165\b\165\000\000\000\000\000\000\000\000\000\000\021j\021\130\021\138\021r\021\146\000\000\b\165\000\000\000\000\000\000\000\000\000\000\b\165\000\000\021\154\021\162\b\165\000\000\000\000\000\000\000\000\b\165\000\000\b\165\000\000\021\170\b\165\000\000\000\000\000\000\000\000\b\165\b\165\002^\000\000\000\000\000\000\000\000\000\000\000\000\b\165\b\165\021:\021z\021\178\021\186\021\202\b\165\b\165\000\000\000\000\000\000\000\000\b\165\000\000\021\210\000\000\000\000\000\000\000\000\000\000\000\000\b\165\000\000\b\165\b\165\021\218\000\000\000\000\b\165\b\165\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\165\000\000\b\165\b\165\b\165\021\194\b\165\b\165\002\217\002\217\b\165\021\226\b\165\000\000\002\217\000\000\000\000\002\217\b\165\021\234\021\242\000\000\000\000\000\000\000\000\000\000\0212\000\000\002\217\002\217\002\217\000\000\002\217\002\217\000\000\000\000\000\000\000\000\000\000\021j\021\130\021\138\021r\021\146\000\000\002\217\000\000\000\000\000\000\000\000\000\000\002\217\000\000\021\154\021\162\002\217\000\000\000\000\000\000\000\000\002\217\000\000\002\217\000\000\021\170\002\217\000\000\000\000\000\000\000\000\002\217\002\217\002^\000\000\000\000\000\000\000\000\000\000\000\000\002\217\002\217\021:\021z\021\178\021\186\021\202\002\217\002\217\000\000\000\000\000\000\000\000\002\217\000\000\021\210\000\000\000\000\000\000\000\000\000\000\000\000\002\217\000\000\002\217\002\217\021\218\000\000\000\000\002\217\002\217\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\217\000\000\021\250\002\217\022\002\021\194\002\217\002\217\002\213\002\213\002\217\021\226\002\217\000\000\002\213\000\000\000\000\002\213\002\217\021\234\021\242\000\000\000\000\000\000\000\000\000\000\0212\000\000\002\213\002\213\002\213\000\000\002\213\002\213\000\000\000\000\000\000\000\000\000\000\021j\021\130\021\138\021r\021\146\000\000\002\213\000\000\000\000\000\000\000\000\000\000\002\213\000\000\021\154\021\162\002\213\000\000\000\000\000\000\000\000\002\213\000\000\002\213\000\000\021\170\002\213\000\000\000\000\000\000\000\000\002\213\002\213\002^\000\000\000\000\000\000\000\000\000\000\000\000\002\213\002\213\021:\021zj\021\130\021\138\021r\021\146\000\000\002\221\000\000\000\000\000\000\000\000\000\000\002\221\000\000\021\154\021\162\002\221\000\000\000\000\000\000\000\000\002\221\000\000\002\221\000\000\021\170\002\221\000\000\000\000\000\000\000\000\002\221\002\221\002^\000\000\000\000\000\000\000\000\000\000\000\000\002\221\002\221\021:\021zj\021\130\021\138\021r\021\146\000\000\002\201\000\000\000\000\000\000\000\000\000\000\002\201\000\000\021\154\021\162\002\201\000\000\000\000\000\000\000\000\002\201\000\000\002\201\000\000\021\170\002\201\000\000\000\000\000\000\000\000\002\201\002\201\002^\000\000\000\000\000\000\000\000\000\000\000\000\002\201\002\201\021:\021zj\021\130\021\138\021r\021\146\000\000\002\205\000\000\000\000\000\000\000\000\000\000\002\205\000\000\021\154\021\162\002\205\000\000\000\000\000\000\000\000\002\205\000\000\002\205\000\000\021\170\002\205\000\000\000\000\000\000\000\000\002\205\002\205\002^\000\000\000\000\000\000\000\000\000\000\000\000\002\205\002\205\021:\021zj\021\130\021\138\021r\021\146\000\000\002\209\000\000\000\000\000\000\000\000\000\000\002\209\000\000\021\154\021\162\002\209\000\000\000\000\000\000\000\000\002\209\000\000\002\209\000\000\021\170\002\209\000\000\000\000\000\000\000\000\002\209\002\209\002^\000\000\000\000\000\000\000\000\000\000\000\000\002\209\002\209\021:\021zj\021\130\021\138\021r\021\146\000\000\002\229\000\000\000\000\000\000\000\000\000\000\002\229\000\000\021\154\021\162\002\229\000\000\000\000\000\000\000\000\002\229\000\000\002\229\000\000\021\170\002\229\000\000\000\000\000\000\000\000\002\229\002\229\002^\000\000\000\000\000\000\000\000\000\000\000\000\002\229\002\229\021:\021zj\021\130\021\138\021r\021\146\000\000\002\225\000\000\000\000\000\000\000\000\000\000\002\225\000\000\021\154\021\162\002\225\000\000\000\000\000\000\000\000\002\225\000\000\002\225\000\000\021\170\002\225\000\000\000\000\000\000\000\000\002\225\002\225\002^\000\000\000\000\000\000\000\000\000\000\000\000\002\225\002\225\021:\021zj\021\130\021\138\021r\021\146\000\000\002\233\000\000\000\000\000\000\000\000\000\000\002\233\000\000\021\154\021\162\002\233\000\000\000\000\000\000\000\000\002\233\000\000\002\233\000\000\021\170\002\233\000\000\000\000\000\000\000\000\002\233\002\233\002^\000\000\000\000\000\000\000\000\000\000\000\000\002\233\002\233\021:\021zj\021\130\021\138\021r\021\146\000\000\002\197\000\000\000\000\000\000\000\000\000\000\002\197\000\000\021\154\021\162\002\197\000\000\000\000\000\000\000\000\002\197\000\000\002\197\000\000\021\170\002\197\000\000\000\000\000\000\000\000\002\197\002\197\002^\000\000\000\000\000\000\000\000\000\000\000\000\002\197\002\197\021:\021zj\021\130\021\138\021r\021\146\000\000\0021\000\000\000\000\000\000\000\000\000\000\0021\000\000\021\154\021\162\0021\000\000\000\000\000\000\000\000\0021\000\000\0021\000\000\021\170\0021\000\000\000\000\000\000\000\000\0021\0021\002^\000\000\000\000\000\000\000\000\000\000\000\000\0021\0021\021:\021z\021\178\021\186\021\202\0021\0021\000\000\000\000\000\000\000\000\0021\000\000\021\210\000\000\000\000\000\000\000\000\000\000\000\000\0021\000\000\0021\0021\021\218\000\000\000\000\0021\026b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0021\000\000\021\250\0021\022\002\021\194\0021\0021\002-\002-\0021\021\226\0021\000\000\002-\000\000\000\000\002-\0021\021\234\021\242\000\000\000\000\000\000\000\000\000\000\0212\000\000\002-\002-\002-\000\000\002-\002-\000\000\000\000\000\000\000\000\000\000\021j\021\130\021\138\021r\021\146\000\000\002-\000\000\000\000\000\000\000\000\000\000\002-\000\000\021\154\021\162\002-\000\000\000\000\000\000\000\000\002-\000\000\002-\000\000\021\170\002-\000\000\000\000\000\000\000\000\002-\002-\002^\000\000\000\000\000\000\000\000\000\000\000\000\002-\002-\021:\021zj\021\130\021\138\021r\021\146\000\000\002\193\000\000\000\000\000\000\000\000\000\000\002\193\000\000\021\154\021\162\002\193\000\000\000\000\000\000\000\000\002\193\000\000\002\193\000\000\021\170\002\193\000\000\000\000\000\000\000\000\002\193\002\193\002^\000\000\000\000\000\000\000\000\000\000\000\000\002\193\002\193\021:\021znv\000\000\000\000\000\000\000\000 \250\001\233\001\233\001\233\001\233\001\233\001\233\001\233\001\233\001\233\"f\000\000\000\000\000\000\001\233\000\000\001\233\000\000\000\000\000\000\000\000\000\000\000\000,f\000\000\001\233\001\233\001\233\000\000\000\000\001\233\001\233\000\000\000\000\004m\000\000\000\000\000\000\004\145\000\000\004m\001\233\000\000\001\233\001\233\001\233\001\233\001\233\001\233\"\206\000\000\001\233\001\233\001\233\000\000\000\000\000\000\000\000\000\000\001\233\001\233\001\233\004\129\000\000\001b\003\182\000\000\000\000\003f\007\222\004\"\bR\007\226\007\238\004&\000\000\000\000\000\000\000\000\004*\000\000\004m(\234\000\000\007u\000\000\000\000\000\000\000\000\000\000\000\000\004m\011\198\000\000\001n\001r\004m\br\002^(\238\000\000\011\230\000\000\011\202\000\000)\022\004m\003\194\003\198\000\000\014\190\014\234\011\218\014\250)\154\015\002*\022\007u\000\000\030v\b\138\000\000\000\000\011\226 \250\003\"\003&\015b\015f\015z\015\166\000\000\012R\007u\004m\000\000\007u\016\198\000\000\000\000*.\000\000\016\242\007u\003*\004m\000\000\007u\000\000\000\000\017.\017N\017n\020\026\012^\000\000\012b*B*n\000\000\n\133\000\000\004\129\000\000\000\000\015\178\000\000\015\182\003J\004\206\000\000\000\000\000\000\000\000\004\210\000\000\004\230\005\030\005*\000\000*\154\012f\020F\0056\002Q\006\254\020V\012j\020\170\002Q\000\000\000\000\002Q\n\133\000\000\000\000\002Q\000\000\002Q\000\000\005:\002Q\000\000\002Q\002Q\002Q\000\000\002Q\000\000\n\133\000\000\000\000\n\133\019\130\002Q\002Q\002Q\002Q\002Q\n\133\002Q\000\000\011\190\n\133\004\"\000\000\002Q\002Q\002Q\002Q(\006\000\000\bJ\000\000\004\182\002Q\b\"\002Q'R\002Q\002Q\000\000\000\000\000\000\002\245\002Q\002Q\002Q\000\000\000\000\000\000-\246\002\245\000\000\000\000\000\000\002Q\002Q\002Q\002Q\002Q\002Q\002Q\000\000\000\000\002Q\011\186\000\000\002Q\002Q\000\n\000\000(\n\000\000\b\138\000\000\002Q\000\000\002Q\002Q\002Q\000\000\002Q\000\000\002Q\002Q\002\245(\022\000\000.\014\000\000\002Q\000\000\002Q\002\245\000\000\017\150\000\000\002Q\002Q\002\245\002Q\000\000'6\000\000\002Q\002Q\000\000\000\000\000\000\b\237\002Q\002Q\002Q\002Q\b\237(\030\000\000\b\237\000\000\000\000\000\000\b\237\002\245\b\237\000\000\000\000\017\206.\026\b\237\017\242\b\237\000\000\b\237\000\000\000\000\000\000\000\000\000\000\000\000\018\006\018\030\018&\018\014\018.-\178\b\237\000\000\000\000\000\000\000\000\000\000\b\237\b\237\0186\018>\000\000\000\000\000\000\000\000\014\210\b\237\000\000\b\237\000\000\018F\b\237\000\000\000\000\000\000\002\245\b\237\b\237\000\238\000\000\000\000\000\000\000\000\002\245\000\000\000\000\000\000\017\214\018\022\018N\018V\018f\b\237\b\237\000\000\000\000\b\237\000\000\000\000\b\237\018n\000\n\000\000\000\000\000\000\000\000\000\000\b\237\000\000\b\237\b\237\018v\000\000\b\237\000\000\b\237\b\237\002\245\000\000\000\000\000\000\000\000\b\237\000\000\b\237\002\245\000\000\018\150\000\000\018\158\018^\002\245\b\237\000\000\000\000\000\000\018~\b\237\000\000\000\000\000\000\002\133\b\237\bn\000\000\000\000\000\000\000\000\000\000\002\133\000\000\002\133\002\133\002\133\000\000\002\133\000\000\002\133\002\133\002\245\000\000\000\000\000\000\000\000\002\133\000\000\002\133\002\245\000\000\002\133\000\000\002\133\002\133\002\245\002\133\000\000\000\000\000\000\002\133\002\133\000\000\000\000\000\000\002m\002\133\002\133\002\133\002\133\002m\000\000\000\000\002m\000\000\000\000\000\000\002m\002\245\002m\000\000\000\000\002m\000\000\002m\002m\002m\000\000\002m\000\000\000\000\000\000\000\000\000\000\000\000\002m\002m\002m\002m\002m\000\000\002m\000\000\000\000\000\000\003&\000\000\002m\002m\002m\002m\000\000\000\000\000\000\000\000(\242\002m\000\000\002m\000\000\002m\002m\000\000\000\000\000\000\000\000\002m\002m\002m\000\000\000\000\000\000\000\000\000\000\000\000\000\000\"Z\017\214\002m\002m\002m\002m\002m\002m\000\000\000\000\002m\000\000\"n\002m\002m\"r\000\000\000\000\000\000\b\138\000\000\002m\000\000\002m\002m\002m\"\138\002m\000\000\002m\002m\000\000\000\000\000\000\000\000\000\000\002m\000\000\002m\000\000\000\000\002m\000\000\002m\002m\000\000\002m\000\000(\006\000\000\002m\002m\004\182\000\000\000\000\002y\002m\002m\002m\002m\002y\000\000\000\000\002y\000\000\000\000\000\000\002y\000\000\002y\000\000\000\000\017\206\000\000\002y\002y\002y\000\000\002y\000\000\000\000\000\000\000\000\000\000\000\000\002y\002y\002y\018\014\002y(\n\002y\000\000\000\000\000\000\000\000\000\000\002y\002y\002y\002y\000\000\000\000\000\000\000\000(\022\002y-\250\002y\000\000\002y\002y\000\000\000\000\000\000\000\000\002y\002y\002y\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\017\214\018\022\002y\002y\002y\002y\002y(\030\000\000\002y\000\000\000\000\002y\002y\000\000\000\000\000\000\000\000\000\000.\006\002y\000\000\002y\002y\002y\000\000\002y\000\000\002y\002y\n\133\000\000\000\000\000\000\000\000\002y-\178\002y\000\000\000\000\002y\000\000\002y\002y\000\000\002y\000\000\000\000\000\000\002y\002y\000\000\000\000\000\000\002\137\002y\002y\002y\002y\002\137\000\000\000\000\002\137\n\133\000\000\000\000\002\137\000\000\002\137\000\000\000\000\002\137\000\000\002\137\002\137\002\137\000\000\002\137\000\000\n\133\000\000\000\000\n\133)\242\002\137\002\137\002\137\002\137\002\137\n\133\002\137\000\000\000\000\ni\002\137\002\137\002\137\002\137\002i\000\000\000\000\002i\000\000\000\000\000\000\002i\000\000\002i\000\000\000\000\002i\000\000\002i\002i\002i\000\000\002i\000\000\000\000\000\000\000\000\000\000\000\000\002i\002i\002i\002i\002i\000\000\002i\000\000\000\000\000\000\000\000\000\000\002i\002i\002i\002i\000\000\000\000\000\000\000\000\000\000\002i\000\000\002i\000\000\002i\002i\000\000\000\000\000\000\000\000\002i\002i\002i\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\017\214\002i\002i\002i\002i\002i\002i\000\000\000\000\002i\000\000\000\000\002i\002i\000\000\000\000\000\000\000\000\000\000\000\000\002i\000\000\002i\002i\002i\000\000\002i\000\000\002i\002i\000\000\000\000\000\000\000\000\000\000\002i\000\000\002i\000\000\000\000\002i\000\000\002i\002i\000\000\002i\000\000\000\000\000\000\002i\002i\000\000\000\000\000\000\002u\002i\002i\002i\002i\002u\000\000\000\000\002u\000\000\000\000\000\000\002u\000\000\002u\000\000\000\000\017\206\000\000\002u\002u\002u\000\000\002u\000\000\000\000\000\000\000\000\000\000\000\000\002u\002u\002u\018\014\002u\000\000\002u\000\000\000\000\000\000\000\000\000\000\002u\002u\002u\002u\000\000\000\000\000\000\000\000\000\000\002u\000\000\002u\000\000\002u\002u\000\000\000\000\000\000\000\000\002u\002u\002u\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\017\214\018\022\002u\002u\002u\002u\002u\000\000\000\000\002u\000\000\000\000\002u\002u\000\000\000\000\000\000\000\000\000\000\000\000\002u\000\000\002u\002u\002u\000\000\002u\000\000\002u\002u\000\000\000\000\000\000\000\000\000\000\002u\000\000\002u\000\000\000\000\002u\000\000\002u\002u\000\000\002u\000\000\000\000\000\000\002u\002u\000\000\000\000\000\000\002q\002u\002u\002u\002u\002q\000\000\000\000\002q\000\000\000\000\000\000\002q\000\000\002q\000\000\000\000\017\206\000\000\002q\002q\002q\000\000\002q\000\000\000\000\000\000\000\000\000\000\000\000\002q\002q\002q\018\014\002q\000\000\002q\000\000\000\000\000\000\000\000\000\000\002q\002q\002q\002q\000\000\000\000\000\000\000\000\000\000\002q\000\000\002q\000\000\002q\002q\000\000\000\000\000\000\000\000\002q\002q\002q\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\017\214\018\022\002q\002q\002q\002q\002q\000\000\000\000\002q\000\000\000\000\002q\002q\000\000\000\000\000\000\000\000\000\000\000\000\002q\000\000\002q\002q\002q\000\000\002q\000\000\002q\002q\000\000\000\000\000\000\000\000\000\000\002q\000\000\002q\000\000\000\000\002q\000\000\002q\002q\000\000\002q\000\000\000\000\000\000\002q\002q\000\000\000\000\000\000\002\153\002q\002q\002q\002qf\002\153\002\153\000\000\000\000\002\153\000\000\000\000\002\153\018n\000\000\000\000\000\000\000\000\000\000\000\000\002\153\000\000\002\153\002\153\018v\000\000\002\153\000\000\002\153\002\153\000\000\000\000\000\000\000\000\000\000\002\153\000\000\002\153\000\000\000\000\002\153\000\000\002\153\018^\000\000\002\153\000\000\000\000\000\000\018~}\002\129\002\129\002\129\002\129\002}\000\000\000\000\002}\000\000\000\000\000\000\002}\000\000\002}\000\000\000\000\017\206\000\000\002}\002}\002}\000\000\002}\000\000\000\000\000\000\000\000\000\000\000\000\002}\002}\002}\018\014\002}\000\000\002}\000\000\000\000\000\000\000\000\000\000\002}\002}\002}\002}\000\000\000\000\000\000\000\000\000\000\002}\000\000\002}\000\000\002}\002}\000\000\000\000\000\000\000\000\002}\002}\002}\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\017\214\018\022\002}\002}\002}\002}\002}\000\000\000\000\002}\000\000\000\000\002}\002}\000\000\000\000\000\000\000\000\000\000\000\000\002}\000\000\002}\002}\002}\000\000\002}\000\000\002}\002}\000\000\000\000\000\000\000\000\000\000\002}\000\000\002}\000\000\000\000\002}\000\000\002}\002}\000\000\002}\000\000\000\000\000\000\002}\002}\000\000\000\000\000\000\002\145\002}\002}\002}\002}e\002\145\002\145\002\145\002\145\002e\000\000\000\000\002e\000\000\000\000\000\000\002e\000\000\002e\000\000\000\000\017\206\000\000\002e\002e\002e\000\000\002e\000\000\000\000\000\000\000\000\000\000\000\000\002e\002e\002e\018\014\002e\000\000\002e\000\000\000\000\000\000\000\000\000\000\002e\002e\002e\002e\000\000\000\000\000\000\000\000\000\000\002e\000\000\002e\000\000\002e\002e\000\000\000\000\000\000\000\000\002e\002e\002e\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\017\214\018\022\002e\002e\002e\002e\002e\000\000\000\000\002e\000\000\000\000\002e\002e\000\000\000\000\000\000\000\000\000\000\000\000\002e\000\000\002e\002e\002e\000\000\002e\000\000\002e\002e\000\000\000\000\000\000\000\000\000\000\002e\000\000\002e\000\000\000\000\002e\000\000\002e\002e\000\000\002e\000\000\000\000\000\000\002e\002e\000\000\000\000\000\000\002a\002e\002e\002e\002e\002a\000\000\000\000\002a\000\000\000\000\000\000\002a\000\000\002a\000\000\000\000\017\206\000\000\002a\002a\002a\000\000\002a\000\000\000\000\000\000\000\000\000\000\000\000\018\006\018\030\018&\018\014\002a\000\000\002a\000\000\000\000\000\000\000\000\000\000\002a\002a\0186\018>\000\000\000\000\000\000\000\000\000\000\002a\000\000\002a\000\000\002a\002a\000\000\000\000\000\000\000\000\002a\002a\000\238\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\017\214\018\022\018N\018V\002a\002a\002a\000\000\000\000\002a\000\000\000\000\002a\002a\000\000\000\000\000\000\000\000\000\000\000\000\002a\000\000\002a\002a\002a\000\000\002a\000\000\002a\002a\000\000\000\000\000\000\000\000\000\000\002a\000\000\002a\000\000\000\000\002a\000\000\002a\018^\000\000\002a\000\000\000\000\000\000\002a\002a\000\000\000\000\000\000\002\189\002a\002a\002a\002af\002\157\002\157\000\000\000\000\002\157\000\000\000\000\002\157\018n\000\000\000\000\000\000\000\000\000\000\000\000\002\157\000\000\002\157\002\157\018v\000\000\002\157\000\000\002\157\002\157\000\000\000\000\000\000\000\000\000\000\002\157\000\000\002\157\000\000\000\000\002\157\000\000\002\157\018^\000\000\002\157\000\000\000\000\000\000\018~f\002\161\002\161\000\000\000\000\002\161\000\000\000\000\002\161\018n\000\000\000\000\000\000\000\000\000\000\000\000\002\161\000\000\002\161\002\161\018vf\002\165\002\165\000\000\000\000\002\165\000\000\000\000\002\165\018n\000\000\000\000\000\000\000\000\000\000\000\000\002\165\000\000\002\165\002\165\018v\000\000\002\165\000\000\002\165\002\165\000\000\000\000\000\000\000\000\000\000\002\165\000\000\002\165\000\000\000\000\002\165\000\000\002\165\018^\000\000\002\165\000\000\000\000\000\000\002\165\002\165\000\000\000\000\000\000\b\169\002\165\002\165\018\134\018\142\b\169\000\000\000\000\b\169\000\000\000\000\000\000\b\169\000\000\b\169\000\000\000\000\017\206\000\000\b\169\b\169\b\169\000\000\b\169\000\000\000\000\000\000\000\000\000\000\000\000\018\006\018\030\018&\018\014\018.\000\000\b\169\000\000\000\000\000\000\000\000\000\000\b\169\b\169\0186\018>\000\000\000\000\000\000\000\000\000\000\b\169\000\000\b\169\000\000\018F\b\169\000\000\000\000\000\000\000\000\b\169\b\169\000\238\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\017\214\018\022\018N\018V\018f\b\169\b\169\000\000\000\000\b\169\000\000\000\000\b\169\018n\000\000\000\000\000\000\000\000\000\000\000\000\b\169\000\000\b\169\b\169\018v\000\000\b\169\000\000\b\169\b\169\000\000\000\000\000\000\000\000\000\000\b\169\000\000\b\169\000\000\000\000\b\169\000\000\b\169\018^\000\000\b\169\000\000\000\000\000\000\018~\b\169\000\000\000\000\000\000\002\169\b\169\bf\002\169\002\169\000\000\000\000\002\169\000\000\000\000\002\169\018n\000\000\000\000\000\000\000\000\000\000\000\000\002\169\000\000\002\169\002\169\018v\000\000\002\169\000\000\002\169\002\169\000\000\000\000\000\000\000\000\000\000\002\169\000\000\002\169\000\000\000\000\018\150\000\000\018\158\018^\000\000\002\169\000\000\000\000\000\000\018~\002\169\000\000\000\000\000\000\b\165\002\169\002\169\018\134\018\142\b\165\000\000\000\000\b\165\000\000\000\000\000\000\b\165\000\000\b\165\000\000\000\000\017\206\000\000\b\165\b\165\b\165\000\000\b\165\000\000\000\000\000\000\000\000\000\000\000\000\018\006\018\030\018&\018\014\018.\000\000\b\165\000\000\000\000\000\000\000\000\000\000\b\165\b\165\0186\018>\000\000\000\000\000\000\000\000\000\000\b\165\000\000\b\165\000\000\018F\b\165\000\000\000\000\000\000\000\000\b\165\b\165\000\238\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\017\214\018\022\018N\018V\018f\b\165\b\165\000\000\000\000\b\165\000\000\000\000\b\165\018n\000\000\000\000\000\000\000\000\000\000\000\000\b\165\000\000\b\165\b\165\018v\000\000\b\165\000\000\b\165\b\165\000\000\000\000\000\000\000\000\000\000\b\165\000\000\b\165\000\000\000\000\b\165\000\000\b\165\018^\000\000\b\165\000\000\000\000\000\000\018~\b\165\000\000\000\000\000\000\002\217\b\165\bf\002\217\002\217\000\000\000\000\002\217\000\000\000\000\002\217\018n\000\000\000\000\000\000\000\000\000\000\000\000\002\217\000\000\002\217\002\217\018v\000\000\002\217\000\000\002\217\002\217\000\000\000\000\000\000\000\000\000\000\002\217\000\000\002\217\000\000\000\000\018\150\000\000\018\158\018^\000\000\002\217\000\000\000\000\000\000\018~f\002\213\002\213\000\000\000\000\002\213\000\000\000\000\002\213\018n\000\000\000\000\000\000\000\000\000\000\000\000\002\213\000\000\002\213\002\213\018v\000\000\002\213\000\000\002\213\002\213\000\000\000\000\000\000\000\000\000\000\002\213\000\000\002\213\000\000\000\000\018\150\000\000\018\158\018^\000\000\002\213\000\000\000\000\000\000\018~f\002\221\002\221\000\000\000\000\002\221\000\000\000\000\002\221\018n\000\000\000\000\000\000\000\000\000\000\000\000\002\221\000\000\002\221\002\221\018v\000\000\002\221\000\000\002\221\002\221\000\000\000\000\000\000\000\000\000\000\002\221\000\000\002\221\000\000\000\000\018\150\000\000\018\158\018^\000\000\002\221\000\000\000\000\000\000\018~f\002\201\002\201\000\000\000\000\002\201\000\000\000\000\002\201\018n\000\000\000\000\000\000\000\000\000\000\000\000\002\201\000\000\002\201\002\201\018v\000\000\002\201\000\000\002\201\002\201\000\000\000\000\000\000\000\000\000\000\002\201\000\000\002\201\000\000\000\000\018\150\000\000\018\158\018^\000\000\002\201\000\000\000\000\000\000\018~f\002\205\002\205\000\000\000\000\002\205\000\000\000\000\002\205\018n\000\000\000\000\000\000\000\000\000\000\000\000\002\205\000\000\002\205\002\205\018v\000\000\002\205\000\000\002\205\002\205\000\000\000\000\000\000\000\000\000\000\002\205\000\000\002\205\000\000\000\000\018\150\000\000\018\158\018^\000\000\002\205\000\000\000\000\000\000\018~f\002\209\002\209\000\000\000\000\002\209\000\000\000\000\002\209\018n\000\000\000\000\000\000\000\000\000\000\000\000\002\209\000\000\002\209\002\209\018v\000\000\002\209\000\000\002\209\002\209\000\000\000\000\000\000\000\000\000\000\002\209\000\000\002\209\000\000\000\000\018\150\000\000\018\158\018^\000\000\002\209\000\000\000\000\000\000\018~f\002\229\002\229\000\000\000\000\002\229\000\000\000\000\002\229\018n\000\000\000\000\000\000\000\000\000\000\000\000\002\229\000\000\002\229\002\229\018v\000\000\002\229\000\000\002\229\002\229\000\000\000\000\000\000\000\000\000\000\002\229\000\000\002\229\000\000\000\000\018\150\000\000\018\158\018^\000\000\002\229\000\000\000\000\000\000\018~f\002\225\002\225\000\000\000\000\002\225\000\000\000\000\002\225\018n\000\000\000\000\000\000\000\000\000\000\000\000\002\225\000\000\002\225\002\225\018v\000\000\002\225\000\000\002\225\002\225\000\000\000\000\000\000\000\000\000\000\002\225\000\000\002\225\000\000\000\000\018\150\000\000\018\158\018^\000\000\002\225\000\000\000\000\000\000\018~f\002\233\002\233\000\000\000\000\002\233\000\000\000\000\002\233\018n\000\000\000\000\000\000\000\000\000\000\000\000\002\233\000\000\002\233\002\233\018v\000\000\002\233\000\000\002\233\002\233\000\000\000\000\000\000\000\000\000\000\002\233\000\000\002\233\000\000\000\000\018\150\000\000\018\158\018^\000\000\002\233\000\000\000\000\000\000\018~f\002\197\002\197\000\000\000\000\002\197\000\000\000\000\002\197\018n\000\000\000\000\000\000\000\000\000\000\000\000\002\197\000\000\002\197\002\197\018v\000\000\002\197\000\000\002\197\002\197\000\000\000\000\000\000\000\000\000\000\002\197\000\000\002\197\000\000\000\000\018\150\000\000\018\158\018^\000\000\002\197\000\000\000\000\000\000\018~f\0021\0021\000\000\000\000\0021\000\000\000\000\0021\018n\000\000\000\000\000\000\000\000\000\000\000\000\0021\000\000\0021\0021\018v\000\000\0021\000\000\027z\0021\000\000\000\000\000\000\000\000\000\000\0021\000\000\0021\000\000\000\000\018\150\000\000\018\158\018^\000\000\0021\000\000\000\000\000\000\018~f\002-\002-\000\000\000\000\002-\000\000\000\000\002-\018n\000\000\000\000\000\000\000\000\000\000\000\000\002-\000\000\002-\002-\018v\000\000\002-\000\000\002-\002-\000\000\000\000\000\000\000\000\000\000\002-\000\000\002-\000\000\000\000\018\150\000\000\018\158\018^\000\000\002-\000\000\000\000\000\000\018~f\002\193\002\193\000\000\000\000\002\193\000\000\000\000\002\193\018n\000\000\000\000\000\000\000\000\000\000\000\000\002\193\000\000\002\193\002\193\018v\000\000\002\193\000\000\002\193\002\193\000\000\000\000\000\000\000\000\000\000\002\193\000\000\002\193\000\000\000\000\018\150\000\000\018\158\018^\000\000\002\193\000\000\000\000\000\000\018~b\213\000\000\000\0001\014\000\000\001\233\001\233\001\233\000\000\001\233\000\000\001\233\001\233\000\000\000\000\000\000\000\000\000\000\001\233\000\000\001\233\rZ\000\000\001\233\b\213\001\233\001\233\000\000\001\233\000\000\000\000\000\000\001\233\001\233\000\000\000\000\000\000\000\000\001\233\001\233\001\233\001\233\000\006\000\246\000\000\000\000\002f\001\002\001\006\004\238\001\n\001\022\001\"\000\000\000\000\000\000\000\000\001&\000\000\000\000\004\161\000\000\000\000\000\000\002^\000\000\000\000\000\000\000\000\000\000\001*\000\000\001n\001r\000\000\000\000\000\000\007\194\000\000\001v\000\000\001.\000\000\b\146\000\000\003\194\003\198\000\000\003\202\003\214\001Z\003\226\003\234\007\250\014\202\000\000\000\000\030~\004\230\000\000\000\000\014\230\030\134\000\000\000\000\014\246\015:\015\130\015\142\000\000\r\162\000\000\000\000\r\n\000\000\000\000\012\206\000\000\030\142\000\000\015\186\b\2131\154\r\022\000\000\007I\000\000\r\"\015\198\015\222\0162\016F\r\174\000\000\r\178\030\162\030\206\000\000\000\0001\191\000\000\000\000\000\000\015\134\000\000\015\138\007I\007I\000\000\007I\007I\000\000\000\000\000\000\000\000\000\000\000\000\000\000!\002\r\182\015\154\000\000\000\000\000\000\016Z\005F\016\210\000\006\000\246\000\000\000\000\002f\001\002\001\006\004\238\001\n\001\022\001\"\000\000\000\000\000\000\000\000\001&\000\000\000\0001\238\000\000\000\000\000\000\007I\000\000\000\000\000\000\000\000\001\006\001*\000\000\001n\001r\000\000\000\000\000\000\007\194\000\000\001v\000\000\001.\000\000\b\146\000\000\003\194\003\198\000\000\003\202\003\214\001Z\003\226\003\234\007\250\014\202\000\000\000\000\030~\004\230\000\000!\030\014\230\030\134\000\000\000\000\014\246\015:\015\130\015\142\000\000\r\162#\134\001:\012\198\000\000#\166\007I\007I\030\142\004\230\015\186\007I1\154\007I\000\000\000\000#\190\007I\015\198\015\222\0162\016F\r\174\000\000\r\178\030\162\030\206\000\000\000\000\004\169\000\000\000\000\000\000\015\134\0009\015\138\000\000\000\000\000\000\000\000#\206\000\000\000\000\000\000\0009\000\000\000\000\0009!\002\r\182\015\154\0009\bY\000\000\016Z\005F\016\210\000\014\000\000\000\018\000\022\000\026\000\030\000\000\000\"\000&\000\000\000*\000.\0002\0009\0006\000:\000\000\000\000\000>\000\000\0009\000\000\000B\000\000\000\000\000\000\000\000\000\000\000F\000\000\000\000\000\000\000\000\0009\000J\000\000\000N\000R\000V\000Z\000^\000b\000f\000\000\000\000\000\000\000j\000\000\000n\000\000\000r\0009\000\000\000v\000\000\0009\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0009\000z\000\000\000\000\000~\000\130\000\000\000\000\000\000\000\000\bY\000\134\000\138\000\142\000\000\000\000\000\000\0009\000\000\000\000\000\146\000\150\000\154\000\000\000\158\000\000\000\000\000\162\000\166\000\170\0009\000\000\000\000\000\174\000\178\000\182\000\000\000\000\000\000\000\000\000\000\000\186\000\000\000\190\000\194\000\000\000\000\000\000\000\000\000\000\000\000\000\198\000\000\000\202\000\000\000\000\007]\000\000\000\000\000\206\000\210\001~\000\214\001\130\001\134\001\138\001\142\000\000\001\146\001\150\000\000\001\154\001\158\001\162\000\000\001\166\001\170\007]\007]\001\174\007]\007]\000\000\001\178\000\000\000\000\002\245\002\245\000\000\001\182\000\000\000\000\000\000\000\000\000\000\001\186\000\000\001\190\001\194\001\198\001\202\001\206\001\210\001\214\000\000\002\245\000\000\001\218\000\000\001\222\000\000\001\226\002\245\000\n\001\230\000\000\000\000\000\000\000\000\002\245\002^\000\000\000\000\000\000\000\000\002\245\000\000\000\000\001\234\002\245\002\245\001\238\001\242\000\000\000\000\000\000\000\000\000\000\001\246\001\250\001\254\000\000\000\000\002\245\000\000\000\000\000\000\002\002\002\006\002\n\000\000\002\014\000\000\000\000\002\018\002\022\002\026\000\000\000\000\000\000\002\030\002\"\002&\000\000\000\000\000\000\000\000\000\000\002*\007]\002.\0022\012\206\007]\000\000\000\000\000\141\007]\0026\007]\002:\000\000\000\141\007]\004\"\000\141\002>\002B\004&\002F\020\210\000\000\000\000\004*\000\000\000\000\000\141\000\000\000\141\000\000\000\000\000\000\002\245\000\000\020\218\000\000\011\198\000\000\002\245\000\000\000\000\000\000\020\226\000\141\000\000\000\000\000\000\011\202\000\000\000\141\000\000\000\000\000\000\000\141\000\000\000\000\011\218\b\134\000\141\000\000\000\141\000\000\000\000\000\141\b\138\000\000\001z\011\226\000\141\000\141\000\141\015b\015f\015z\000\000\022j\012R\000\141\000\141\002\245\000\000\000\000\002\245\000\000\000\141\000\000\000\000\000\000\000\000\002\245\000\000\000\000\000\000\000\000\002\245\000\000\002\245\000\000\012^\000\000\012b\000\141\000\141\002\245\002\245\000\000\000\141\000\000\000\000\015\178\000\000\015\182\000\000\000\000\000\000\000\000\000\000\000\141\000\000\000\000\001\006\000\000\000\000\000\141\000\141\012f\020F\000\000\000\165\000\000\020V\012j\002\245\000\141\000\165\000\141\004\"\000\165\000\000\000\000\004&\000\000\020\210\002\245\000\000\004*\000\000\000\000\000\165\000\000\000\165!F\000\000\000\000\000\000\000\000\020\218\000\000\011\198\000\000\000\000\000\000!\150\nN\020\226\000\165!\154\000\000\000\000\011\202\b\138\000\165\000\000\000\000\000\000\000\165\000\000!\202\011\218\b\134\000\165\000\000\000\165\003z\004\178\000\165\b\138\000\000\004\182\011\226\000\165\000\165\000\165\015b\015f\015z\000\000\022j\012R\000\165\000\165!\230\003~\000\000\003:\004\186\000\165\000\000\000\000\000\000\000\000\000\000\003F\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012^\000\000\012b\000\165\000\165\000\000\004\190\t\194\000\165\000\000\000\000\015\178\t\210\015\182\b\138\t\242\n\014\000\000\000\000\000\165\000\000-\158\001^-\218\000\000\000\165\000\165\012f\020F\004\030\004\"\016\026\020V\012j\004&\000\165\000\000\000\165\nJ\004*\002v\000\000\000\000\000\000\004.\000\000\000\000\000\000\000\000\000\000(\030\000\000\002z\002~\002\130\0042\002\138\002\142\001\181\000\000\000\000\000\000-\230\000\000\001\181\004>\000\000\002\154\019\018\000\000\000\000\000\000\b\018\b\134\000\000\002\162\000\000\000\000\002\166-\178\b\138\000\000\000\000\012*\000\000\000\000\000\000\012.\000\000\0126\012F\000\000\012R\000\000\000\000\002\170\002\174\002\178\002\182\002\186\000\000\000\000\000\000\002\190\012V\001\181\000\000\000\000\002\194\000\000\000\000\000\000\000\000\000\000\012^\001\181\012b\000\000\012\174\002\198\001\181\001\181\002^\000\000\000\000\000\000\002\202\000\000\000\000\001\181\001\181\000\000\000\000\000\000\000\000\000\000\000\000\002\242\019\022\000\000\000\000\012f\000\000\000\000\002\246\000\000\002\250\012j\001^\000\000\002\254\000\000\003\002\003\006\000\000\004\030\004\"\017^\001\181\000\000\004&\000\000\000\000\000\000\000\000\004*\002v\000\000\000\000\001\181\004.\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002z\002~\002\130\0042\002\138\002\142\004m\000\000\000\000\000\000\000\000\000\000\004m\004>\000\000\002\154\019\018\000\000\000\000\000\000\b\018\b\134\000\000\002\162\000\000\000\000\002\166\000\000\b\138\000\000\000\000\012*\000\000\000\000\000\000\012.\000\000\0126\012F\000\000\012R\000\000\000\000\002\170\002\174\002\178\002\182\002\186\000\000\000\000\000\000\002\190\012V\004m\000\000\000\000\002\194\000\000\000\000\000\000\000\000\000\000\012^\004m\012b\000\000\012\174\002\198\004m\br\000\000\000\000\000\000\000\000\002\202\000\000\000\000\004m\004m\000\000\000\000\000\000\000\000\000\000\000\000\002\242\019\022\000\000\000\000\012f\000\000\000\000\002\246\000\000\002\250\012j\001^\000\000\002\254\000\000\003\002\003\006\000\000\004\030\004\"\018\182\004m\000\000\004&\000\000\000\000\000\000\000\000\004*\002v\000\000\000\000\004m\004.\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002z\002~\002\130\0042\002\138\002\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004>\000\000\002\154\019\018\000\000\000\000\000\000\b\018\b\134\000\000\002\162\000\000\000\000\002\166\000\000\b\138\000\000\000\000\012*\000\000\000\000\000\000\012.\000\000\0126\012F\000\000\012R\000\000\000\000\002\170\002\174\002\178\002\182\002\186\000\000\000\000\000\000\002\190\012V\000\000\000\000\000\000\002\194\000\000\000\000\000\000\000\000\000\000\012^\000\000\012b\000\000\012\174\002\198\000\000\000\000\000\000\000\000\000\000\000\000\002\202\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\242\019\022\000\000\000\000\012f\000\000\000\000\002\246\000\000\002\250\012j\001^\000\000\002\254\000\000\003\002\003\006\000\000\004\030\004\"\024\154\000\000\000\000\004&\000\000\000\000\000\000\000\000\004*\002v\000\000\000\000\000\000\004.\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002z\002~\002\130\0042\002\138\002\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004>\000\000\002\154\019\018\000\000\000\000\000\000\b\018\b\134\000\000\002\162\000\000\000\000\002\166\000\000\b\138\000\000\000\000\012*\000\000\000\000\000\000\012.\000\000\0126\012F\000\000\012R\000\000\000\000\002\170\002\174\002\178\002\182\002\186\000\000\000\000\000\000\002\190\012V\000\000\000\000\000\000\002\194\000\000\000\000\000\000\000\000\000\000\012^\000\000\012b\000\000\012\174\002\198\000\000\000\000\000\000\000\000\000\000\000\000\002\202\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\242\019\022\000\000\000\000\012f\000\000\000\000\002\246\000\000\002\250\012j\001^\000\000\002\254\000\000\003\002\003\006\000\000\004\030\004\"\027\n\000\000\000\000\004&\000\000\000\000\000\000\000\000\004*\002v\000\000\000\000\000\000\004.\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002z\002~\002\130\0042\002\138\002\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004>\000\000\002\154\019\018\000\000\000\000\000\000\b\018\b\134\000\000\002\162\000\000\000\000\002\166\000\000\b\138\000\000\000\000\012*\000\000\000\000\000\000\012.\000\000\0126\012F\000\000\012R\000\000\000\000\002\170\002\174\002\178\002\182\002\186\000\000\000\000\000\000\002\190\012V\000\000\000\000\000\000\002\194\000\000\000\000\000\000\000\000\000\000\012^\000\000\012b\000\000\012\174\002\198\000\000\000\000\000\000\000\000\000\000\000\000\002\202\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\242\019\022\000\000\000\000\012f\000\000\000\000\002\246\000\000\002\250\012j\001^\000\000\002\254\000\000\003\002\003\006\000\000\004\030\004\"\029\146\000\000\000\000\004&\000\000\000\000\000\000\000\000\004*\002v\000\000\000\000\000\000\004.\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002z\002~\002\130\0042\002\138\002\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004>\000\000\002\154\019\018\000\000\000\000\000\000\b\018\b\134\000\000\002\162\000\000\000\000\002\166\000\000\b\138\000\000\000\000\012*\000\000\000\000\000\000\012.\000\000\0126\012F\000\000\012R\000\000\000\000\002\170\002\174\002\178\002\182\002\186\000\000\000\000\000\000\002\190\012V\000\000\000\000\000\000\002\194\000\000\000\000\000\000\000\000\000\000\012^\000\000\012b\000\000\012\174\002\198\000\000\000\000\000\000\000\000\000\000\000\000\002\202\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\242\019\022\000\000\000\000\012f\000\000\000\000\002\246\000\000\002\250\012j\b\022\000\000\002\254\000\000\003\002\003\006\000\000\004\030\004\"\000\000\000\000\000\000\004&\000\000\000\000\000\000\000\000\004*\002v\000\000\000\000\000\000\b\026\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002z\002~\002\130\0042\002\138\002\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\030\000\000\002\154\019\018\000\000\000\000\000\000\b\018\b\134\000\000\002\162\000\000\000\000\002\166\000\000\b\138\000\000\000\000\012*\000\000\000\000\000\000\012.\000\000\0126\012F\000\000\012R\000\000\000\000\002\170\002\174\002\178\002\182\002\186\000\000\000\000\000\000\002\190\012V\000\000\000\000\000\000\002\194\000\000\000\000\000\000\000\000\000\000\012^\000\000\012b\000\000\012\174\002\198\000\000\000\000\002\245\002\245\000\000\000\000\002\202\002\245\000\000\002\245\000\000\000\000\002\245\000\000\000\000\000\000\000\000\002\242&\226\000\000\000\000\012f\000\000\002\245\002\246\002\245\002\250\012j\002\245\000\n\002\254\002\245\003\002\003\006\002\245\002\245\002\245\000\000\000\000\002\245\002\245\002\245\002\245\002\245\002\245\002\245\002\245\000\000\000\000\002\245\000\000\000\000\000\000\002\245\000\000\002\245\002\245\000\000\000\000\002\245\002\245\002\245\002\245\002\245\002\245\002\245\000\nb\193\002\245\001b\003\182\002\245\000\000\002\245\007\222\004\"\000\000\007\226\007\238\004&\000\000\000\000\000\000\000\000\004*\000\000\000\000\002\245\002\245\000\000\000\000\b\193\002\245\002\245\002\245\000\000\000\000\011\198\000\000\001n\001r\000\000\000\000\000\000\000\000\000\000\011\230\000\000\011\202\000\000\000\000\000\000\003\194\003\198\000\000\014\190\014\234\011\218\014\250\003\234\015\002\015F\000\000\000\000\000\000\b\138\000\000\000\000\011\226\000\000\000\000\000\000\015b\015f\015z\015\166\000\000\012R\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\242\000\000\000\000\000\000\000\000\000\000\000\000\000\000\017.\017N\017n\020\026\012^\000\000\012b\000\000\000\000\000\000\000\000\000\000\027\146\000\000\000\000\015\178\000\000\015\182\006m\000\000\000!\000!\000\000\000\000\000\000\000!\000!\000\000\000!\000!\000!\012f\020F\b\193\000\000\000!\020V\012j\020\170\000\000\006mi\000\000\000\029\000\029\000!\000\000\000!\000\029\000\029\000\000\000\029\000\029\000\029\000\000\000\000\000\000\000\000\000\029\000\000\000\000\000!\000!\006iy\000\000\012\017\012\017\000\029\000\000\000\029\012\017\012\017\000\000\012\017\012\017\012\017\000\000\000\000\000\000\000\000\012\017\000\000\000\000\000\029\000\029\006yu\000\000\012\r\012\r\012\017\000\000\012\017\012\r\012\r\000\000\012\r\012\r\012\r\000\000\000\000\000\000\000\000\012\r\000\000\000\000\012\017\012\017\006u\000\000\000\000\012\017\012\017\012\017\000\000\000\000\012\r\000\000\012\r\012\r\000\000\000\000\000\000\000\000\000\000\012\r\000\000\012\r\000\000\000\000\000\000\012\r\012\r\000\000\012\r\012\r\012\r\012\r\012\r\012\r\012\r\000\000\000\000\n\157\012\r\000\000\000\000\012\r\000\000\000\000\000\000\012\r\012\r\012\r\012\r\000\000\012\r\000\000\000\000\000\000\000\000\000\000\000\000\000\000\n\157\n\157\012\r\n\157\n\157\000\000\000\000\000\000\000\000\000\000\012\r\012\r\012\r\012\r\012\r\000\000\012\r\000\000\000\000\000\000\000\000\000\000\000\000\001b\003\182\012\r\000\000\012\r\007\222\004\"\000\000\007\226\007\238\004&\000\000\000\000\000\000\000\000\004*\000\000\000\000\012\r\012\r\n\157\000\000\b\130\012\r\012\r\012\r\000\000\000\000\011\198\000\000\001n\001r\000\000\000\000\000\000\000\000\000\000\011\230\000\000\011\202\000\000\000\000\000\000\003\194\003\198\000\000\014\190\014\234\011\218\014\250\003\234\015\002\015F\000\000\000\000\000\000\b\138\000\000\000\000\011\226\000\000\000\000\012\134\015b\015f\015z\015\166\000\000\012R\n\157\000\000\000\000\n\157\n\157\000\000\000\000\000\000\n\157\016\242\n\157\000\000\000\000\000\000\n\157\000\000\000\000\017.\017N\017n\020\026\012^\000\000\012b\000\000\000\000\000\000\000\000\000\000\020R\001b\003\182\015\178\000\000\015\182\007\222\004\"\000\000\007\226\007\238\004&\000\000\000\000\000\000\000\000\004*\000\000\000\000\012f\020F&\170\000\000\0122\020V\012j\020\170\000\000\000\000\011\198\000\000\001n\001r\000\000\000\000\000\000\000\000\000\000\011\230\000\000\011\202\000\000\000\000\000\000\003\194\003\198\000\000\014\190\014\234\011\218\014\250\003\234\015\002\015F\000\000\000\000\000\000\b\138\000\000\000\000\011\226\000\000\000\000\000\000\015b\015f\015z\015\166\000\000\012R\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\242\000\000\000\000\000\000\000\000\000\000\000\000\000\000\017.\017N\017n\020\026\012^\000\000\012b\000\000\000\000\000\000\000\000\000\000\000\000\001b\003\182\015\178\000\000\015\182\007\222\004\"\000\000\007\226\007\238\004&\000\000\000\000\000\000\000\000\004*\000\000\000\000\012f\020F\028\166\000\000\023\178\020V\012j\020\170\000\000\000\000\011\198\000\000\001n\001r\000\000\000\000\000\000\000\000\000\000\011\230\000\000\011\202\000\000\000\000\000\000\003\194\003\198\000\000\014\190\014\234\011\218\014\250\003\234\015\002\015F\000\000\000\000\000\000\b\138\000\000\000\000\011\226\000\000\000\000\000\000\015b\015f\015z\015\166\000\000\012R\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\242\000\000\000\000\000\000\000\000\000\000\000\000\000\000\017.\017N\017n\020\026\012^\000\000\012b\000\000\000\000\000\000\000\000\000\000\000\000\001b\003\182\015\178\000\000\015\182\007\222\004\"\000\000\007\226\007\238\004&\000\000\000\000\000\000\000\000\004*\000\000\000\000\012f\020F\023\146\000\000\024N\020V\012j\020\170\000\000\000\000\011\198\000\000\001n\001r\000\000\000\000\000\000\000\000\000\000\011\230\000\000\011\202\000\000\000\000\000\000\003\194\003\198\000\000\014\190\014\234\011\218\014\250\003\234\015\002\015F\000\000\000\000\007I\b\138\000\000\000\000\011\226\000\000\000\000\000\000\015b\015f\015z\015\166\000\000\012R\000\000\000\000\000\000\000\000\007I\000\000\007I\000\000\000\000\016\242\000\000\000\000\000\000\000\000\000\000\000\000\000\000\017.\017N\017n\020\026\012^\000\000\012b\000\000\000\000\007I\000\000\000\000\000\000\000\000\000\000\015\178\000\000\015\182\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\169\012\161\007I\000\000\012f\020F\024:\000\000\000\000\020V\012j\020\170\000\141\000\000\001\006\000\141\000\000\007I\001\"\000\000\017\006\003\169\000\000\001&\000\000\003\169\000\141\000\000\000\000\000\000\000\141\000\000\000\000\000\000\017\014\007I\001*\007I\000\000\000\000\000\000\000\000\017\022\000\141\000\000\000\000\000\000\001.\000\000\000\141\000\000\014>\000\000\000\000\007I\007I\001Z\003\022\000\141\000\000\000\141\007I\000\000\000\141\004\230\007I\000\000\014\230\000\141\000\141\000\141\014\246\015:\015\130\000\000\025^\r\162\000\000\000\000\000\000\000\000\012\161\012\161\000\000\000\141\000\000\000\000\000\000\000\141\000\000\000\000\0075\000\000\000\000\000\000\000\000\000\000\003\169\r\174\000\000\r\178\000\141\000\141\000\000\012\161\000\141\000\000\012\161\000\000\015\134\000\000\015\138\0075\0075\003\169\0075\0075\003\169\000\000\000\000\000\000\000\000\000\000\000\000\000\141\r\182\015\154\000\000\000\000\000\000\016Z\005F\000\000\000\000\000\165\000\141\001\006\000\165\000\000\000\000\001\"\000\000\017\006\000\000\000\000\001&\000\000\000\000\000\165\000\000\000\000\007a\000\165\000\000\000\000\0075\017\014\000\000\001*\000\000\000\000\000\000\000\000\000\000\017\022\000\165\000\000\000\000\000\000\001.\000\000\000\165\007a\007a\000\000\007a\007a\000\000\001Z\003\022\000\165\000\000\000\165\000\000\000\000\000\165\004\230\000\000\000\000\014\230\000\165\000\165\000\165\014\246\015:\015\130\000\000\025^\r\162\000\000\000\000\000\000\000\000\000\000\0075\000\000\000\165\012\206\0075\000\000\000\165\000\000\0075\000\000\0075\002^\000\000\000\000\0075\000\000\r\174\000\000\r\178\000\165\000\165\000\000\000\000\000\165\000\000\000\000\000\000\015\134\000\000\015\138\000\000\000\000\000\000\000\000\000\000\000\000\000\000\n\157\000\000\000\000\n\157\n\157\000\165\r\182\015\154\n\157\000\000\n\157\016Z\005F\n\157\000\000\000\000\000\165\000\000\n\157\000\000\n\157\000\000\000\000\007a\n\157\000\000\012\206\007a\000\000\n\157\000\000\007a\n\157\007a\000\000\000\000\000\000\007a\000\000\000\000\n\157\000\000\n\157\000\000\000\000\000\000\n\157\n\157\000\000\000\000\000\000\000\000\000\000\000\000\n\157\000\000\000\000\n\157\000\000\000\000\n\157\n\157\000\000\n\157\000\000\n\157\n\157\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\n\157\000\000\000\000\n\157\000\000\000\000\000\000\000\000\000\000\012m\000\000\000\000\000\000\n\157\012m\n\157\012m\012m\n\157\000\000\n\157\000\000\000\000\000\000\000\000\000\000\012m\r\206\012m\012m\012m\000\000\012m\012m\n\157\n\157\000\000\n\157\n\157\000\000\n\157\000\000\007Q\000\000\n\157\012m\n\157\000\000\n\157\000\000\000\000\012m\012m\000\000\000\000\000\000\000\000\000\000\000\000\012m\012m\000\000\012m\007Q\007Q\012m\007Q\007Q\000\000\000\000\012m\012m\012m\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012m\000\000\000\000\000\000\012m\b\173\000\000\000\000\012m\000\000\b\173\000\000\003&\b\173\000\000\000\000\000\000\012m\012m\012m\002^\012m\b\173\000\000\b\173\b\173\b\173\000\000\b\173\b\173\000\000\000\000\000\000\012m\000\000\012m\012m\000\000\000\000\004\202\012m\b\173\000\000\000\000\000\000\012m\000\000\b\173\b\173\012m\000\000\012m\012m\000\000\000\000\004\206\b\173\000\000\b\173\000\000\000\000\b\173\000\000\000\000\000\000\000\000\b\173\b\173\b\173\r\n\000\000\000\000\012\206\007Q\000\000\000\000\000\000\007Q\000\000\007Q\000\000\000\000\b\173\007Q\000\000\000\000\005\142\012I\000\000\000\000\b\173\000\000\012I\000\000\003&\012I\000\000\000\000\000\000\b\173\b\173\b\173\000\000\b\173\005\174\000\000\012I\012I\012I\000\000\012I\012I\000\000\000\000\000\000\b\173\000\000\b\173\b\173\000\000\003\173\012\161\b\173\012I\000\000\000\000\000\000\b\173\000\000\012I\012I\b\173\000\000\b\173\b\173\000\000\000\000\004\206\012I\000\000\012I\003\173\000\000\012I\000\000\003\173\000\000\000\000\012I\012I\012I\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012I\000\000\000\000\000\000\005\142\b\177\000\000\000\000\012I\000\000\b\177\000\000\003&\b\177\000\000\000\000\000\000\012I\012I\012I\000\000\012I\b\177\000\000\b\177\b\177\b\177\000\000\b\177\b\177\000\000\000\000\000\000\012I\000\000\012I\012I\012\161\012\161\000\000\012I\b\177\000\000\000\000\000\000\012I\000\000\b\177\b\177\012I\000\000\012I\012I\003\173\000\000\004\206\b\177\000\000\b\177\000\000\012\161\b\177\000\000\012\161\000\000\000\000\b\177\b\177\b\177\000\000\003\173\000\000\000\000\003\173\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\177\000\000\000\000\000\000\005\142\000\000\000\000\000\000\b\177\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\177\b\177\b\177\000\000\b\177\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\177\000\000\b\177\b\177\000\000\012m\012m\b\177\000\000\000\000\000\000\012m\b\177\012m\012m\000\000\b\177\000\000\b\177\b\177\000\000\000\000\000\000\012m\000\000\012m\012m\012m\000\000\000\000\012m\000\000\000\000\000\000\000\000\000\000\000\000\000\000\018\214\000\000\000\000\000\000\012m\000\000\000\000\003\"\003&\000\000\012m\012m\000\000\000\000\012m\000\000\000\000\000\000\012m\012m\000\000\012m\004\194\000\000\012m\000\000\003*\000\000\003:\012m\012m\012m\000\000\000\000\000\000\000\000\003F\000\000\012m\012m\000\000\000\000\000\000\003\146\000\000\012m\000\000\000\000\000\000\012m\003J\004\198\000\000\000\000\000\000\000\000\004\210\000\000\004\230\005\030\005*\000\000\012m\012m\012m\0056\000\000\012m\b\173\b\173\000\000\000\000\000\000\000\000\b\173\000\000\003&\b\173\012m\000\000\000\000\012m\005:\000\000\t\198\012m\b\173\000\000\b\173\b\173\b\173\000\000\000\000\b\173\012m\000\000\012m\000\000\000\000\000\000\000\000\018\226\000\000\000\000\000\000\b\173\000\000\000\000\003\"\003&\000\000\b\173\b\173\000\000\000\000\b\173(\014\000\000\000\000\nv\b\173\000\000\b\173\005\026\000\000\b\173\000\000\003*\000\000\003:\b\173\b\173\b\173\000\000\000\000\000\000\000\000\003F\000\000\b\173\b\173\000\000\000\000\000\000\003N\000\000\b\173\000\000\000\000\000\000\n\142\003J\004\198\000\000\000\000\000\000\000\000\004\210\000\000\004\230\005\030\005*\000\000\b\173\b\173\b\173\0056\000\000\b\173\012I\012I\000\000\000\000\000\000\000\000\012I\000\000\003&\012I\b\173\000\000\000\000\b\173\005:\000\000\000\000\b\173\n\174\000\000\012I\012I\012I\000\000\000\000\012I\b\173\000\000\b\173\000\000\000\000\000\000\000\000\018\226\000\000\000\000\000\000\012I\000\000\000\000\003\"\003&\019B\012I\012I\000\000\000\000\012I\006R\000\000\000\000\nv\012I\000\000\012I\000\000\000\000\012I\000\000\004\222\000\000\003:\012I\012I\012I\000\000\000\000\000\000\000\000\003F\000\000\012I\012I\000\000\000\000\000\000\000\000\000\000\012I\000\000\000\000\000\000\n\142\003J\004\198\000\000\000\000\000\000\000\000\004\210\000\000\004\230\005\030\005*\000\000\012I\012I\012I\0056\000\000\012I\b\177\b\177\000\000\000\000\000\000\000\000\b\177\000\000\003&\b\177\012I\000\000\000\000\012I\005:\000\000\000\000\012I\b\177\000\000\b\177\b\177\b\177\006-\000\000\b\177\012I\000\000\012I\000\000\003\254\001\006\000\000\000\000\000\000\001\"\000\000\b\177\000\000\000\000\001&\000\000\000\000\b\177\b\177\006-\000\000\b\177\000\000\000\000\000\000\nv\b\177\000\000\b\177\000\000\004\002\b\177\000\000\000\000\000\000\000\000\b\177\b\177\b\177\000\000\000\000\000\000\000\000\004\014\000\000\b\177\b\177\004\026\003\022\000\000\000\000\000\000\b\177\000\000\000\000\004\230\n\142\000\000\007\254\000\000\000\000\000\000\b~\000\000\011\246\r\150\000\000\r\162\000\000\b\177\b\177\b\177\000\000\000\000\b\177\000\000\012M\000\000\000\000\r\166\000\000\012M\000\000\000\000\012M\b\177\000\000\000\000\b\177\r\174\000\000\r\178\b\177\005^\000\000\012M\012M\012M\000\000\012M\012M\b\177\000\000\b\177\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012M\000\000\000\000\000\000\r\182\012M\012M\012M\000\000\000\000\005F\012M\000\000\000\000\012M\012M\000\000\012M\000\000\000\000\012M\000\000\000\000\nrn\169\000\000\000\000\003\254\001\006\012\154\000\000\000\000\001\"\000\000\015\n\001\153\000\000\001&\001\153\001\153\000\000\001\153\n\169\001\153\n\169\001\153\000\000\001\153\015*\001\153\000\000\000\000\000\000\004\002\000\000\000\000\015\234\000\000\000\000\000\000\000\000\000\000\000\000\000\000\n\169\000\000\004\014\000\000\000\000\000\000\004\026\003\022\000\000\000\000\000\000\000\000\000\000\000\000\004\230\000\000\000\000\007\254\000\000\000\000\n\169\b~\000\000\011\246\r\150\018\194\r\162\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\n\169\000\000\000\000\r\166\000\000\000\000\000\000\000\000\000\000\000\000\005a\005a\000\000\r\174\000\000\r\178\005a\014&\n\169\005a\n\169\000\000\000\000\n\165\000\000\000\000\003\254\001\006\000\000\000\000\005a\001\"\005a\000\000\n\169\000\000\001&\n\169\n\169\000\000\r\182\n\165\000\000\n\165\n\169\000\000\005F\005a\n\169\000\000\000\000\000\000\004\002\005a\005a\000\000\000\000\000\000\000\000\000\000\005a\000\000\005a\n\165\005a\004\014\000\000\005a\000\000\004\026\003\022\000\000\005a\005a\005a\000\000\000\000\004\230\000\000\000\000\007\254\000\000\000\000\n\165\b~\000\000\011\246\r\150\005a\r\162\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\n\165\000\000\000\000\r\166\000\000\000\000\000\000\005a\005a\000\000\000\000\000\000\005a\r\174\000\000\r\178\000\000\014&\n\165'~\n\165\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005a\005a\003-\000\000\000\000\n\165\000\000\003-\n\165\n\165\003-\r\182\005a\000\000\000\000\n\165\000\000\005F\000\000\n\165\000\000\003-\003-\003-\000\000\003-\003-\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003-\000\000\000\000\003\"\003&\000\000\003-\005V\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003-\000\000\003-\000\000\000\000\003-\000\000\003*\000\000\003:\003-\003-\003-\000\000\000\000\000\000\000\000\003F\000\000\000\000\"Z\000\000\000\000\000\000\000\000\000\000\003-\000\000\000\000\000\000\003-\003J\"\254\000\000\003-\"r\000\000\004\210\000\000\b\138\005\030\005*\000\000\003-\003-\003-#\014\003-\n\169\000\000\000\000\000\000\000\000\000\000\000\000\004\030\004\"\000\000\000\000\003-\004&\003-\003-\005:\000\000\004*\003-\000\000\000\000\n\169\n\169\003-\n\169\n\169\000\000\003-\000\000\003-\003-\000\000\000\000\b\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004M\000\000\000\000\004M\b\006\000\000\000\000\000\000\b\018\b\134\000\000\000\000\000\000\000\000\004M\000\000\b\138\000\000\004M\012*\000\000\000\000\n\169\012.\000\000\0126\012F\000\000\012R\000\000\000\000\004M\000\000\000\000\000\000\000\000\n\165\004M\000\000\000\000\012V\000\000\000\000\004\030\004\"\000\000\000\000\000\000\004&\000\000\012^\004M\012b\004*\012\174\000\000\004M\n\165\n\165\000\000\n\165\n\165\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\002\000\000\n\169\004M\000\000\n\169\n\169\000\000\012f\000\000\n\169\000\000\n\169\b\006\012j\000\000\n\169\b\018\b\134\000\000\004M\004M\000\000\000\000\004M\b\138\000\000\000\000\012*\000\000\000\000\n\165\012.\000\000\0126\012F\000\000\012R\000\000\000\000\000\000\000\000\000\000\004M\000\000\000\000\000\000\000\000\000\000\012V\000\000\000\000\000\000\000\000 \022\000\000\003-\003-\000\000\012^\000\000\012b\003-\012\174\000\000\003-\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003-\003-\003-\000\000\n\165\003-\000\000\n\165\n\165\000\000\012f\000\000\n\165\018\226\n\165\000\000\012j\003-\n\165\000\000\003\"\003&)\178\003-\nj\000\000\000\000\003-\000\000\000\000\000\000\000\000\003-\000\000\003-\000\000\000\000\003-\000\000\004\222\000\000\003:\003-\003-\003-\000\000\000\000\000\000\000\000\003F\000\000\003-\003-\000\000\000\000\000\000\000\000\000\000\003-\000\000\000\000\000\000\000\000\003J\004\198\000\000\000\000\000\000\000\000\004\210\000\000\004\230\005\030\005*\000\000\003-\003-\003-\0056\004m\003-\001\205\001\205\000\000\000\000\004m\000\000\001\205\004m\000\000\001\205\003-\000\000\000\000\003-\005:\000\000\000\000\003-\004m\000\000\001\205\001\205\001\205\000\000\000\000\001\205\003-\000\000\003-\000\000\000\000\000\000\000\000\000\000\000\000\004m\000\000\001\205\000\000\000\000\000\000\004m\000\000\001\205\001\205\000\000\000\000\001\205\011\n\000\000\000\000\000\000\001\205\000\000\001\205\004m\000\000\001\205\000\000\000\000\004m\br\001\205\001\205\001\205\000\000\000\000\000\000\000\000\000\000\000\000\001\205\001\205\000\000\000\000\000\000\004m\000\000\001\205\000\000\003\254\001\006\000\000\000\000\000\000\001\"\000\000\015\n\000\000\000\000\001&\000\000\000\000\004m\004m\001\205\001\205\001\205\004m\000\000\001\205\015*\000\000\000\000\000\000\011\026\004\002\000\000\000\000\015\234\000\000\001\205\000\000\000\000\001\205\000\000\004m\000\000\001\205\004\014\000\000-\190\000\000\018\178\003\022\002f\000\000\n\198\031\018\001\205\000\000\004\230\000\000\000\000\007\254\000\000\000\000\n\129\b~\031\146\011\246\000\000\018\194\r\162\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\166\031\150\000\000\000\000\000\000\000\000\000\000\031\190\000\000\000\000\r\174\000\000\r\178\000\000\000\000\018\202\000\000\000\000\003\254\001\006\000\000\030~\000\000\001\"\000\000\015\n\030\134\000\000\001&\000\000\000\000\n\129\018\210\000\000\n\129\019>\000\000\r\182\000\000\015*\000\000\n\129 6\005F\004\002\n\129\000\000\015\234\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\014\000\000\030\162 J\029\142\003\022\004u\000\000\003Q\000\000\000\000\003Q\004\230\000\000\000\000\007\254\000\000\000\000\n\129\b~\000\000\011\246\003Q\018\194\r\162 Z\003Q\000\000\000\000\000\000\000\000\000\000\000\000\001\205\000\000\000\000\r\166\000\000\001\205\003Q\006\250\001\205\000\000\000\000\000\000\003Q\r\174\000\000\r\178\000\000\000\000\029\158\001\205\000\000\001\205\000\000\001\205\000\000\000\000\003Q\000\000\000\000\000\000\000\000\003Q\003Q\003Q\n\129\018\210\001\205\n\129)\174\000\000\r\182\000\000\001\205\001\205\n\129\000\000\005F\003Q\n\129\000\000\000\000\001\205\000\000\001\205\000\000\000\000\001\205\000\000\000\000\000\000\000\000\001\205\001\205\001\205\003Q\003Q\000\000\000\000\003Q\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\205\000\000\000\000\000\000\001\205\000\000\000\000\000\000\001\205\007\030\003Q\000\000\000\000\000\000\000\000\000\000\000\000\001\205\001\205\001\205\000\000\001\205\000\000\000\000\000\000\000\000\000\000\003\254\001\006\000\000\000\000\000\000\001\"\001\205\015\n\001\205\001\205\001&\000\000\000\000\001\205\000\000\000\000\000\000\000\000\001\205\000\000\000\000\015*\005\242\000\000\001\205\000\000\004\002\000\000\000\000\015\234\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\014\000\000\000\000\000\000\018\178\003\022\000\000\000\000\000\000\001^\000\000\000\000\004\230\000\000\000\000\007\254\000\000\000\000\n\129\b~\000\000\011\246\000\000\018\194\r\162\000\000\000\000\002v\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\166\000\000\000\000\002z\002~\002\130\002\134\002\138\002\142\000\000\r\174\000\000\r\178\000\000\000\000\018\202\002\146\000\000\002\154\002\158\000\000\000\000\000\000\000\000\000\000\000\000\002\162\000\000\000\000\002\166\000\000\n\129\000\000\b\022\n\129\n\129\000\000\r\182\000\000\000\000\000\000\n\129\000\000\005F\000\000\n\129\002\170\002\174\002\178\002\182\002\186\002v\000\000\000\000\002\190\000\000\000\000\000\000\000\000\002\194\000\000\000\000\000\000\002z\002~\002\130\002\134\002\138\002\142\000\000\002\198\000\000\000\000\000\000\000\000\000\000\r.\002\202\002\154\002\158\000\000\000\000\000\000\000\000\000\000\000\000\002\162\000\000\002\242\002\166\000\000\000\000\000\000\000\000\000\000\002\246\000\000\002\250\000\000\000\000\000\000\002\254\000\000\003\002\003\006\000\000\002\170\002\174\002\178\002\182\002\186\000\000\000\000\000\000\002\190\000\000\000\000\005a\000\000\002\194\000\000\000\000\005a\000\000\000\000\005a\000\000\000\000\000\000\000\000\002\198\000\000\000\000\006\173\006\173\000\000\005a\002\202\005a\000\000\005a\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\242\000\000\005.\000\000\006\173\005a\006\173\002\246\000\000\002\250\000\000\005a\005a\002\254\006\173\003\002\003\006\000\000\005a\000\000\005a\000\000\005a\000\000\000\000\005a\000\000\000\000\006\173\006\173\005a\005a\005a\000\000\006\173\000\000\006\173\006\173\006\173\000\000\000\000\000\000\000\000\006\173\000\000\000\000\005a\005a\000\000\000\000\005a\005U\000\000\000\000\000\000\000\000\005U\000\000\000\000\005U\006\173\000\000\000\000\005a\005a\005a\000\000\005a\000\000\000\000\005U\000\000\005U\000\000\005U\tR\000\000\000\000\000\000\000\000\000\000\000\000\005a\000\000\000\000\005a\005a\005U\000\000\000\000\000\000\000\000\000\000\005U\005U\000\000\000\000\005a\000\000\000\000\011\178\005\"\005U\006\173\005U\000\000\000\000\005U\000\000\b\189\000\000\000\000\005U\005U\000\238\b\242\000\000\000\000\000\000\000\000\004m\000\000\000\000\004m\000\000\000\000\000\000\0212\005U\005U\023\166\000\000\005U\b\189\004m\000\000\000\000\000\000\004m\000\000\021j\021\130\021\138\021r\021\146\005U\005U\005U\000\000\005U\000\000\004m\000\000\000\000\021\154\021\162\000\000\004m\tn\000\000\000\000\000\000\000\000\000\000\005U\021\170\000\000\005U\005U\000\000\000\000\004m\000\000\002^\000\000\000\000\004m\007\182\000\238\005U\000\000\000\000\021:\021z\021\178\021\186\021\202\000\000\000\000\000\000\000\000\000\000\004m\000\000\000\000\021\210\000\000\000\000\000\000\000\000\000\000\000\000\006\209\000\000\000\000\000\000\021\218\000\000\000\000\004m\004m\000\000\000\000\004m\000\000\000\000\000\000\000\000\000\000\000\000\0212\tR\021\250\006\209\022\002\021\194\000\000\006\209'\002\000\000\b\189\021\226\004m\021j\021\130\021\138\021r\021\146\000\000\021\234\021\242\000\000\000\000\004m\000\000\000\000\0212\021\154\021\162\000\000'\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\021\170\021j\021\130\021\138\021r\021\146\000\000\000\000\002^\000\000\000\000\000\000\000\000\000\000\000\000\021\154\021\162\021:\021z\021\178\021\186\021\202\000\000\000\000\000\000\000\000\021\170\000\000\006\209\000\000\021\210\000\000\000\000\004m\002^\000\000\000\000\000\000\000\000\004m\000\000\021\218\004m\021:\021z\021\178\021\186\021\202\000\000\000\000\000\000\000\000\000\000\004m\000\000\000\000\021\210\021\250\000\000\022\002\021\194\000\000\000\000\000\000\000\000\000\000\021\226\021\218\000\000\000\000\004m,z\000\000\000\000\021\234\021\242\004m\000\000\000\000\000\000\000\000\000\000\000\000\021\250'\n\022\002\021\194'\026\000\000\0212\004m\000\000\021\226,~\000\000\004m\br\000\000\000\000\000\000\021\234\021\242\021j\021\130\021\138\021r\021\146\000\000\000\000\000\000\000\000\004m\003y\003y\000\000\000\000\021\154\021\162\003y\000\000\000\000\003y\000\000\000\000\000\000\000\000\000\000\021\170\004m\004m\000\000\000\000\003y\004m\003y\002^\003y\000\000\000\000\000\000'~\000\000\000\000\007]\021:\021z\021\178\021\186\021\202\003y\000\000\004m\000\000\000\000\000\000\003y\003y\021\210\000\000\000\000\000\000\007]\005!\007]\003y\000\000\003y\000\000\021\218\003y\000\000\000\000\000\000\000\000\003y\003y\003y\000\000\000\000\000\000\000\000\000\000\000\000\007]\021\250,\130\022\002\021\194,\146\000\000\003y\000\000\000\000\021\226\003y\000\000\000\000\000\000\000\000\000\000\000\000\021\234\021\242\000\238\000\000\000\000\000\000\003y\003y\003y\000\000\003y\003y\001\189\000\000\003&\001\189\000\000\007]\005!\000\000\000\000\000\000\000\000\000\000\b\153\003y\001\189\000\000\000\000\003y\001\189\000\000\000\000\000\000\000\000\007]\000\000\007]\000\000\000\000\003y\000\000\000\000\001\189\000\000\000\000\000\000\000\000\000\000\001\189\001\189\007]\000\000\000\000\014F\007]\000\000\004\206\001\189\000\000\001\189\007]\000\000\001\189\000\000\007]\000\000\000\000\001\189\001\189\001\189\000\000\000\000\000\000\000\000\003]\000\000\003&\003]\000\000\000\000\000\000\000\000\000\000\001\189\001\189\000\000\b\149\005\142\003]\000\000\000\000\000\000\003]\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\189\001\189\000\000\000\000\001\189\003]\000\000\000\000\000\000\000\000\000\000\003]\001\185\000\000\000\000\000\000\001\189\000\000\000\000\004\206\003]\000\000\003]\001\189\000\000\003]\000\000\000\000\001\189\000\000\003]\003]\003]\000\000\001\189\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003]\003]\000\000\000\000\005\142\b9\000\000\000\000\000\000\000\000\b9\000\000\000\000\b9\000\000\000\000\000\000\003]\003]\000\000\000\000\003]\b9\b9\b9\000\000\b9\000\000\b9\000\000\000\000\b9\000\000\003]\000\000\000\000\000\000\000\000\000\000\000\000\003]\b9\b9\000\000\b9\003]\000\000\b9\b9\000\000\000\000\003]\000\000\000\000\000\000\000\000\b9\000\000\b9\b9\000\000\b9\000\000\000\000\000\000\b9\b9\b9\b9\000\000\000\000\000\000\000\000\000\000\b9\000\000\b9\000\000\000\000\b9\000\000\000\000\b9\012\253\b9\b9\b9\000\000\012\253\000\000\000\000\012\253\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b9\b9\b9\012\253\b9\012\253\000\000\012\253\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b9\000\000\b9\b9\012\253\000\000\000\000\b9\000\000\000\000\012\253\012\253\000\000\000\000\000\000\000\000\005\242\005f\b9\012\253\000\000\012\253\000\000\000\000\012\253\b9\000\000\000\000\000\000\012\253\012\253\012\253\000\000\000\000\n\198\000\000\b9\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012\253\r\001\000\000\000\000\012\253\000\000\r\001\000\000\000\000\r\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012\253\012\253\012\253\r\001\012\253\r\001\000\000\r\001\000\000\000\000\000\000\000\000\005v\000\000\000\000\000\000\000\000\000\000\000\000\012\253\r\001\000\000\000\000\012\253\000\000\000\000\r\001\r\001\000\000\000\000\000\000\000\000\000\000\005f\012\253\r\001\000\000\r\001\000\000\000\000\r\001\000\000\000\000\000\000\000\000\r\001\r\001\r\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\001\003y\000\000\000\000\r\001\000\000\003y\000\000\000\000\003y\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\001\r\001\r\001\003y\r\001\003y\000\000\003y\000\000\000\000\000\000\000\000\005v\000\000\000\000\000\000\000\000\000\000\000\000\r\001\003y\000\000\000\000\r\001\000\000\000\000\003y\003y\000\000\000\000\000\000\000\000\000\000\005%\r\001\003y\000\000\003y\000\000\000\000\003y\000\000\000\000\000\000\000\000\003y\003y\003y\000\000\000\000\000\000\000\000\001\129\000\000\000\000\001\129\000\000\000\000\000\000\000\000\000\000\003y\000\000\000\000\000\000\003y\001\129\000\000\000\000\000\000\001\129\000\000\001\129\000\000\000\000\001\129\000\000\000\000\003y\003y\003y\000\000\003y\001\129\001\129\000\000\001\129\000\000\000\000\001\129\005%\000\000\000\000\000\000\000\000\000\000\005!\003y\001\129\000\000\001\129\003y\000\000\001\129\001\129\000\000\000\000\000\000\001\129\001\129\001\129\000\000\003y\000\000\000\000\000\000\005!\000\000\001\129\000\000\001\129\000\000\000\000\001\129\001\129\000\000\000\000\000\000\001\129\001\129\001\129\000\000\000\000\000\000\001\185\000\000\003&\001\185\000\000\000\000\000\000\001\129\001\129\000\000\001\129\001\129\bb=\000\000\012\249\000\000\000\000\b=\012\249\000\000\b=\000\000\000\000\000\000\012\245\012\245\012\245\005\242\012\245\012\249\000\000\b=\000\000\b=\000\000\b=\000\000\000\000\000\000\000\000\t.\000\000\000\000\012\245\000\000\000\000\000\000\012\245\b=\000\000\000\000\000\000\000\000\000\000\b=\b=\000\000\000\000\012\245\000\000\000\000\000\000\000\000\b=\000\000\b=\000\000\000\000\b=\000\000\000\000\000\000\000\000\b=\b=\000\238\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\245\002\245\b=\000\000\000\000\002\245\b=\000\000\000\000\000\000\002\245\000\000\000\000\000\000\000\000\000\000\002\245\000\000\000\000\b=\b=\b=\000\000\b=\000\000\000\000\002\245\000\n\000\000\000\000\015J\000\000\000\000\000\000\000\000\b=\027\238\000\000\b=\002\245\000\000\000\000\b=\002\245\002\245\000\000\000\000\000\000\000\000\000\000\000\000\002\245\000\000\b=\002\245\000\000\000\000\002\245\002\245\000\000\002\245\002\245\000\000\002\245\000\000\b\242\000\000\000\000\000\000\000\000\005E\003\254\001\006\005E\000\000\002\245\001\"\000\000\015\n\000\000\000\000\001&\000\000\000\000\005E\002\245\000\000\002\245\005E\028\"\000\000\000\000\015*\000\000\000\000\000\000\000\000\004\002\000\000\000\000\015\234\005E\000\000\000\000\000\000\000\000\000\000\005E\tn\000\000\004\014\000\000\002\245\000\000\018\178\003\022\000\000\000\000\002\245\000\000\022&\005E\004\230\000\000\000\000\007\254\005E\005E\000\238\b~\000\000\011\246\000\000\018\194\r\162\000\000\000\000\000\000\0212\000\000\000\000\000\000\005E\000\000\000\000\022*\r\166\000\000\000\000\000\000\000\000\021j\021\130\021\138\021r\021\146\r\174\000\000\r\178\005E\005E\018\202\000\000\005E\000\000\021\154\021\162\000\000\000\000\000\000\022>\000\000\000\000\000\000\000\000\000\000\021\170\000\000\018\210\000\000\000\000\018\222\005E\r\182\002^\000\000\000\000\000\000\0212\005F\000\000\000\000\022B\021:\021z\021\178\021\186\021\202\000\000\000\000\000\000\021j\021\130\021\138\021r\021\146\021\210\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\021\154\021\162\021\218\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\021\170\000\000\000\000\000\000\000\000\022N\000\000\021\250\002^\022\002\021\194\000\000\000\000\000\000\000\000\000\000\021\226\021:\021z\021\178\021\186\021\202\000\000\0212\021\234\021\242\000\000\000\000\000\000\022R\021\210\000\000\000\000\000\000\000\000\000\000\021j\021\130\021\138\021r\021\146\021\218\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\021\154\021\162\000\000\000\000\000\000\000\000\000\000\021\250\000\000\022\002\021\194\021\170\000\000\000\000\000\000\000\000\021\226\000\000\000\000\002^\000\000\000\000\000\000\000\000\021\234\021\242\000\000\000\000\021:\021z\021\178\021\186\021\202\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\021\210\000\000\000\000\000\000\000\000\000\000\022^\000\000\000\000\000\000\000\000\021\218\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0212\000\000\000\000\021\250\000\000\022\002\021\194\022b\022~\000\000\000\000\000\000\021\226\021j\021\130\021\138\021r\021\146\003z\003&\021\234\021\242\000\000\000\000\000\000\000\000\0212\021\154\021\162\000\000\022\130\000\000\000\000\000\000\000\000\000\000\000\000\003~\021\170\021j\021\130\021\138\021r\021\146\000\000\000\000\002^\000\000\000\000\000\000\000\000\000\000\000\000\021\154\021\162\021:\021z\021\178\021\186\021\202\000\000\003\142\nv\000\000\021\170\000\000\000\000\t\210\021\210\b\138\t\242\n\014\002^\000\000\000\000\000\000\n\"\000\000(.\021\218\000\000\021:\021z\021\178\021\186\021\202\000\000\000\000\000\000\000\000\000\000\000\000\000\000\nJ\021\210\021\250\000\000\022\002\021\194\000\000\000\000\022\150\000\000\000\000\021\226\021\218\000\000\000\000\000\000\000\000\000\000\000\000\021\234\021\242\000\000\000\000\000\000\000\000\000\000\0212\000\000\021\250\000\000\022\002\021\194\022\154\000\000\022\174\000\000\000\000\021\226\000\000\021j\021\130\021\138\021r\021\146\000\000\021\234\021\242\000\000\000\000\000\000\000\000\000\000\0212\021\154\021\162\000\000\000\000\000\000\000\000\022\178\000\000\000\000\000\000\000\000\021\170\021j\021\130\021\138\021r\021\146\000\000\000\000\002^\000\000\000\000\000\000\000\000\000\000\000\000\021\154\021\162\021:\021z\021\178\021\186\021\202\000\000\000\000\000\000\000\000\021\170\000\000\000\000\000\000\021\210\000\000\000\000\000\000\002^\000\000\000\000\000\000\000\000\000\000\000\000\021\218\000\000\021:\021z\021\178\021\186\021\202\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\021\210\021\250\000\000\022\002\021\194\000\000\022&\000\000\000\000\000\000\021\226\021\218\000\000\000\000\000\000\000\000\000\000\000\000\021\234\021\242\000\000\000\000\000\000\000\000\0212\000\000\000\000\021\250\000\000\022\002\021\194\022\242\022>\000\000\000\000\000\000\021\226\021j\021\130\021\138\021r\021\146\003z\003&\021\234\021\242\000\000\000\000\000\000\000\000\0212\021\154\021\162\000\000\023\014\000\000\000\000\000\000\000\000\000\000\000\000\003~\021\170\021j\021\130\021\138\021r\021\146\000\000\000\000\002^\000\000\000\000\000\000\000\000\000\000\000\000\021\154\021\162\021:\021z\021\178\021\186\021\202\000\000\003\142\nv\000\000\021\170\000\000\000\000\t\210\021\210\b\138\t\242\n\014\002^\000\000\000\000\000\000\n\"\000\000\006\254\021\218\000\000\021:\021z\021\178\021\186\021\202\000\000\000\000\000\000\000\000\000\000\000\000\000\000\nJ\021\210\021\250\000\000\022\002\021\194\000\000\000\000\022N\000\000\000\000\021\226\021\218\000\000\000\000\000\000\000\000\000\000\000\000\021\234\021\242\000\000\000\000\000\000\000\000\000\000\0212\000\000\021\250\000\000\022\002\021\194\023\"\000\000\022^\000\000\000\000\021\226\000\000\021j\021\130\021\138\021r\021\146\000\000\021\234\021\242\000\000\000\000\000\000\000\000\000\000\0212\021\154\021\162\000\000\000\000\000\000\000\000\0236\000\000\000\000\000\000\000\000\021\170\021j\021\130\021\138\021r\021\146\000\000\000\000\002^\000\000\000\000\000\000\000\000\000\000\000\000\021\154\021\162\021:\021z\021\178\021\186\021\202\000\000\000\000\000\000\000\000\021\170\000\000\000\000\000\000\021\210\000\000\000\000\000\000\002^\000\000\000\000\000\000\000\000\000\000\000\000\021\218\000\000\021:\021z\021\178\021\186\021\202\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\021\210\021\250\000\000\022\002\021\194\000\000\022~\000\000\000\000\000\000\021\226\021\218\000\000\000\000\000\000\000\000\000\000\000\000\021\234\021\242\000\000\000\000\000\000\000\000\0212\000\000\000\000\021\250\023f\022\002\021\194\000\000\022\150\000\000\000\000\000\000\021\226\021j\021\130\021\138\021r\021\146\000\000\000\000\021\234\021\242\000\000\000\000\000\000\000\000\0212\021\154\021\162\000\000\000\000\000\000\023r\000\000\000\000\000\000\000\000\000\000\021\170\021j\021\130\021\138\021r\021\146\000\000\000\000\002^\000\000\000\000\000\000\000\000\000\000\000\000\021\154\021\162\021:\021z\021\178\021\186\021\202\000\000\000\000\000\000\000\000\021\170\000\000\000\000\000\000\021\210\000\000\000\000\000\000\002^\000\000\000\000\000\000\000\000\000\000\000\000\021\218\000\000\021:\021z\021\178\021\186\021\202\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\021\210\021\250\000\000\022\002\021\194\000\000\022\174\000\000\000\000\000\000\021\226\021\218\000\000\000\000\000\000\000\000\000\000\000\000\021\234\021\242\000\000\000\000\000\000\000\000\0212\000\000\000\000\021\250\000\000\022\002\021\194\023~\025\026\000\000\000\000\000\000\021\226\021j\021\130\021\138\021r\021\146\000\000\000\000\021\234\021\242\000\000\000\000\000\000\000\000\0212\021\154\021\162\000\000\000\000\000\000\000\000\025\030\000\000\000\000\000\000\000\000\021\170\021j\021\130\021\138\021r\021\146\000\000\000\000\002^\000\000\000\000\000\000\000\000\000\000\000\000\021\154\021\162\021:\021z\021\178\021\186\021\202\000\000\000\000\000\000\000\000\021\170\000\000\000\000\000\000\021\210\000\000\000\000\000\000\002^\000\000\000\000\000\000\000\000\000\000\000\000\021\218\000\000\021:\021z\021\178\021\186\021\202\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\021\210\021\250\000\000\022\002\021\194\000\000\0252\000\000\000\000\000\000\021\226\021\218\000\000\000\000\000\000\000\000\000\000\000\000\021\234\021\242\000\000\000\000\000\000\000\000\0212\000\000\000\000\021\250\0256\022\002\021\194\000\000\025B\000\000\000\000\000\000\021\226\021j\021\130\021\138\021r\021\146\000\000\000\000\021\234\021\242\000\000\000\000\000\000\000\000\0212\021\154\021\162\000\000\000\000\000\000\025F\000\000\000\000\000\000\000\000\000\000\021\170\021j\021\130\021\138\021r\021\146\000\000\000\000\002^\000\000\000\000\000\000\000\000\000\000\000\000\021\154\021\162\021:\021z\021\178\021\186\021\202\000\000\000\000\000\000\000\000\021\170\000\000\000\000\000\000\021\210\000\000\000\000\000\000\002^\000\000\000\000\000\000\000\000\000\000\000\000\021\218\000\000\021:\021z\021\178\021\186\021\202\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\021\210\021\250\000\000\022\002\021\194\000\000\025R\000\000\000\000\000\000\021\226\021\218\000\000\000\000\000\000\000\000\000\000\000\000\021\234\021\242\000\000\000\000\000\000\000\000\0212\000\000\000\000\021\250\000\000\022\002\021\194\025V\025r\000\000\000\000\000\000\021\226\021j\021\130\021\138\021r\021\146\000\000\000\000\021\234\021\242\000\000\000\000\000\000\000\000\0212\021\154\021\162\000\000\025v\000\000\000\000\000\000\000\000\000\000\000\000\000\000\021\170\021j\021\130\021\138\021r\021\146\000\000\000\000\002^\000\000\000\000\000\000\000\000\000\000\000\000\021\154\021\162\021:\021z\021\178\021\186\021\202\000\000\000\000\000\000\000\000\021\170\000\000\000\000\000\000\021\210\000\000\000\000\000\000\002^\000\000\000\000\000\000\000\000\000\000\000\000\021\218\000\000\021:\021z\021\178\021\186\021\202\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\021\210\021\250\000\000\022\002\021\194\000\000\000\000\025\138\000\000\000\000\021\226\021\218\000\000\000\000\000\000\000\000\000\000\000\000\021\234\021\242\000\000\000\000\000\000\000\000\000\000\0212\000\000\021\250\000\000\022\002\021\194\025\142\000\000\025\162\000\000\000\000\021\226\000\000\021j\021\130\021\138\021r\021\146\000\000\021\234\021\242\000\000\000\000\000\000\000\000\000\000\0212\021\154\021\162\000\000\000\000\000\000\000\000\025\166\000\000\000\000\000\000\000\000\021\170\021j\021\130\021\138\021r\021\146\000\000\000\000\002^\000\000\000\000\000\000\000\000\000\000\000\000\021\154\021\162\021:\021z\021\178\021\186\021\202\000\000\000\000\000\000\000\000\021\170\000\000\000\000\000\000\021\210\000\000\000\000\000\000\002^\000\000\000\000\000\000\000\000\000\000\000\000\021\218\000\000\021:\021z\021\178\021\186\021\202\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\021\210\021\250\000\000\022\002\021\194\000\000\025\026\000\000\000\000\000\000\021\226\021\218\000\000\000\000\000\000\000\000\000\000\000\000\021\234\021\242\000\000\000\000\000\000\000\000\0212\000\000\000\000\021\250\000\000\022\002\021\194\025\230\0252\000\000\000\000\000\000\021\226\021j\021\130\021\138\021r\021\146\000\000\000\000\021\234\021\242\000\000\000\000\000\000\000\000\0212\021\154\021\162\000\000\026\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\021\170\021j\021\130\021\138\021r\021\146\000\000\000\000\002^\000\000\000\000\000\000\000\000\000\000\000\000\021\154\021\162\021:\021z\021\178\021\186\021\202\000\000\000\000\000\000\000\000\021\170\000\000\000\000\000\000\021\210\000\000\000\000\000\000\002^\000\000\000\000\000\000\000\000\000\000\000\000\021\218\000\000\021:\021z\021\178\021\186\021\202\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\021\210\021\250\000\000\022\002\021\194\000\000\000\000\025B\000\000\000\000\021\226\021\218\000\000\000\000\000\000\000\000\000\000\000\000\021\234\021\242\000\000\000\000\000\000\000\000\000\000\0212\000\000\021\250\000\000\022\002\021\194\026\022\000\000\025R\000\000\000\000\021\226\000\000\021j\021\130\021\138\021r\021\146\000\000\021\234\021\242\000\000\000\000\000\000\000\000\000\000\0212\021\154\021\162\000\000\000\000\000\000\000\000\026*\000\000\000\000\000\000\000\000\021\170\021j\021\130\021\138\021r\021\146\000\000\000\000\002^\000\000\000\000\000\000\000\000\000\000\000\000\021\154\021\162\021:\021z\021\178\021\186\021\202\000\000\000\000\000\000\000\000\021\170\000\000\000\000\000\000\021\210\000\000\000\000\000\000\002^\000\000\000\000\000\000\000\000\000\000\000\000\021\218\000\000\021:\021z\021\178\021\186\021\202\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\021\210\021\250\000\000\022\002\021\194\000\000\025r\000\000\000\000\000\000\021\226\021\218\000\000\000\000\000\000\000\000\000\000\000\000\021\234\021\242\000\000\000\000\000\000\000\000\0212\000\000\000\000\021\250\026n\022\002\021\194\000\000\025\138\000\000\000\000\000\000\021\226\021j\021\130\021\138\021r\021\146\000\000\000\000\021\234\021\242\000\000\000\000\000\000\000\000\0212\021\154\021\162\000\000\000\000\000\000\026z\000\000\000\000\000\000\000\000\000\000\021\170\021j\021\130\021\138\021r\021\146\000\000\000\000\002^\000\000\000\000\000\000\000\000\000\000\000\000\021\154\021\162\021:\021z\021\178\021\186\021\202\000\000\000\000\000\000\000\000\021\170\000\000\000\000\000\000\021\210\000\000\000\000\000\000\002^\000\000\000\000\000\000\000\000\000\000\000\000\021\218\000\000\021:\021z\021\178\021\186\021\202\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\021\210\021\250\000\000\022\002\021\194\000\000\025\162\000\000\000\000\000\000\021\226\021\218\002f\000\000\000\000\004\238\000\000\000\000\021\234\021\242\000\000\000\000\000\000\000\000\0212\000\000\004\161\021\250\000\000\022\002\021\194\026\134\000\000\000\000\000\000\000\000\021\226\021j\021\130\021\138\021r\021\146\000\000\007\194\021\234\021\242\000\000\000\000\000\000\b\146\000\000\021\154\021\162\000\000\000\000\000\000\000\000\000\000\003\234\000\000%\014\000\000\021\170\030~\000\000\000\000\000\000\000\000\030\134\000\000\002^\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\021:\021z\021\178\021\186\021\202\030\142\000\000\000\000\000\000\003\254\001\006\000\000\000\000\021\210\001\"\000\000\015\n\000\000\000\000\001&\000\000\000\000\030\162\030\206\021\218\000\000\000\000\000\000\000\000\000\000\015*\000\000\000\000\000\000\000\000\004\002\000\000\000\000\015\234\000\000\021\250\000\000\022\002\021\194\000\000!\002\000\000\000\000\004\014\021\226\000\000\000\000\029\142\003\022\000\000\000\000\000\000\021\234\021\242\000\000\004\230\000\000\000\000\007\254\000\000\000\000\000\000\b~\000\000\011\246\000\000\018\194\r\162\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\166\000\000\000\000\002f\003\"\003&\031\018\000\000\000\000\000\000\r\174\000\000\r\178\000\000\000\000\029\158\000\000\031\146\000\000\000\000\000\000\004u\000\000\003*\000\000\003:\000\000\000\000\000\000\000\000\000\000\000\000\018\210\003F\031\150\018\222\000\000\r\182\000\000\000\000\031\190\000\000\000\000\005F\000\000\000\000\000\000\003J\004\198\000\000\000\000\000\000\000\000\004\210\030~\004\230\005\030\005*\000\000\030\134\000\149\000\000\0056\000\000\000\000\000\000\000\149\000\000\000\000\000\149\000\000\000\000\000\000\000\000\000\000 6\000\000\000\000\000\000\005:\000\149\000\000\000\149\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\030\162 J\000\000\000\000\004u\000\149\000\000\000\000\000\000\000\000\000\000\000\149\000\000\000\000\000\000\000\149\000\000\000\000\000\000\b\242\000\149\000\000\000\149 Z\006\217\000\149\000\000\006\217\000\000\000\000\000\149\000\149\002^\000\000\000\000\000\000\000\000\000\000\006\217\000\149\000\149\000\000\006\217\000\000\000\000\000\000\000\149\000\217\000\000\000\000\000\000\000\000\000\000\000\217\000\000\006\217\000\217\000\000\000\000\000\000\000\000\006\217\tnb\149\000\000\003]\000\153\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\153\000\000\000\000\000\000\000\000\003]\000\153\000\153\000\000\000\000\000\000\003]\001\185\000\000\000\000\000\000\000\153\000\000\000\153\nv\003]\000\000\003]\000\000\000\000\003]\000\000\000\000\000\000\000\000\003]\003]\003]\000\000\000\000\000\000\000\000\000\000\000\000\005\133\000\000\000\000\000\000\000\000\005\133\000\000\003]\005\133\000\000\000\000\nb\242\000\000\000\000\000\000\000\000\005\129\000\000\000\000\005\129\000\000\000\000\000\000\003Y\003Y\000\000\000\000\003Y\000\000\000\000\005\129\000\000\005\129\000\000\005\129\000\000\000\000\000\000\000\000\003Y\005\157\000\000\000\000\000\000\000\000\005\157\003Y\005\129\005\157\000\000\000\000\003Y\000\000\005\129\tn\000\000\000\000\003Y\000\000\005\157\005\157\005\157\005\129\005\157\005\129\005\157\000\000\005\129\005\157\000\000\000\000\000\000\005\129\005\129\000\238\000\000\005\157\000\000\000\000\005\157\000\000\005\157\005\157\005\157\000\000\000\000\000\000\000\000\005\129\b\242\000\000\005\157\005\129\005\157\005\153\000\000\005\157\005\153\000\000\000\000\000\000\005\157\005\157\005\157\000\000\005\129\005\129\005\129\005\153\005\129\005\153\005\157\005\153\005\157\000\000\000\000\005\157\005\157\000\000\000\000\000\000\005\157\005\157\005\157\005\129\005\153\000\000\000\000\005\129\000\000\000\000\005\153\tn\000\000\005\157\005\157\005\157\005\157\005\157\005\129\005\153\000\000\005\153\000\000\000\000\005\153\000\000\000\000\000\000\000\000\005\153\005\153\000\238\005\157\005\157\005\157\000\000\005\157\000\000\005\157\000\000\000\000\000\000\000\000\000\000\000\000\005\153\000\000\tf\000\000\005\153\003\254\001\006\000\000\000\000\000\000\001\"\005\157\015\n\000\000\000\000\001&\000\000\005\153\005\153\005\153\000\000\005\153\0112\000\000\000\000\000\000\015*\000\000\000\000\000\000\000\000\004\002\000\000\000\000\015\234\000\000\005\153\000\000\000\000\000\000\005\153\000\000\016.\000\000\004\014\003\254\001\006\000\000\027\006\003\022\001\"\005\153\015\n\000\000\000\000\001&\004\230\000\000\000\000\007\254\000\000\000\000\000\000\b~\000\000\011\246\015*\018\194\r\162\000\000\000\000\004\002\000\000\000\000\015\234\000\000\000\000\000\000\000\000\000\000\r\166\000\000\017j\000\000\004\014\000\000\000\000\000\000\024\150\003\022\r\174\000\000\r\178\000\000\000\000\000\000\004\230\000\000\000\000\007\254\000\000\000\000\000\000\b~\000\000\011\246\000\000\018\194\r\162\000\000\000\000\000\000\017\206\000\000\000\000\027\022\000\000\r\182\000\000\000\000\r\166\000\000\000\000\005F\000\000\018\006\018\030\018&\018\014\018.\r\174\000\000\r\178\000\000\000\000\000\000\000\000\000\000\000\000\0186\018>\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\018F\000\000\000\000\000\000\000\000\024\166\000\000\r\182\000\238\000\000\000\000\000\000\000\000\005F\000\000\000\000\000\000\017\214\018\022\018N\018V\018f\000\000\017\206\000\000\000\000\000\000\000\000\000\000\027\134\018n\000\000\000\000\000\000\000\000\000\000\018\006\018\030\018&\018\014\018.\018v\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0186\018>\000\000\000\000\000\000\000\000\000\000\018\150\000\000\018\158\018^\018F\000\000\000\000\000\000\000\000\018~\000\000\000\000\000\238\000\000\000\000\000\000\000\000\018\134\018\142\000\000\000\000\017\214\018\022\018N\018V\018f\000\000\000\000\000\000\000\000\003\254\001\006\000\000\027\170\018n\001\"\000\000\015\n\000\000\000\000\001&\000\000\000\000\000\000\000\000\018v\000\000\000\000\000\000\000\000\000\000\015*\000\000\000\000\000\000\000\000\004\002\000\000\000\000\015\234\000\000\018\150\000\000\018\158\018^\000\000\000\000\000\000\000\000\004\014\018~\000\000\000\000\029\142\003\022\003\254\001\006\000\000\018\134\018\142\001\"\004\230\015\n\000\000\007\254\001&\000\000\000\000\b~\000\000\011\246\000\000\018\194\r\162\000\000\000\000\015*\000\000\000\000\000\000\000\000\004\002\000\000\000\000\015\234\r\166\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\014\r\174\000\000\r\178\029\142\003\022\029\158\000\000\000\000\000\000\000\000\000\000\004\230\000\000\000\000\007\254\000\000\000\000\000\000\b~\000\000\011\246\000\000\018\194\r\162\000\000\029\194\000\000\r\182\000\000\000\000\000\000\000\000\000\000\005F\000\000\r\166\003\254\001\006\000\000\000\000\000\000\001\"\000\000\015\n\000\000\r\174\001&\r\178\000\000\000\000\029\158\000\000\000\000\000\000\000\000\000\000\000\000\015*\000\000\000\000\000\000\000\000\004\002\000\000\000\000\015\234\000\000\000\000\000\000\000\000\030J\000\000\r\182!\242\000\000\004\014\000\000\001\189\005F\004\026\003\022\000\000\000\000\001\189\000\000\003&\001\189\004\230\000\000\000\000\007\254\000\000\000\000\000\000\b~\b\153\011\246\001\189\018\194\r\162\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\166\000\000\000\000\001\189\000\000\000\000\000\000\000\000\000\000\001\189\r\174\000\000\r\178\000\000\000\000!\026\001\185\nv\001\189\000\000\001\189\000\000\001\185\001\189\003&\001\185\000\000\000\000\001\189\001\189\001\189\000\000\000\000\000\000\b\149$\"\001\185\r\182\000\000\000\000\000\000\000\000\000\000\005F\001\189\000\000\000\000\000\000\n\142\000\000\000\000\000\000\000\000\001\185\000\000\000\000\000\000\000\000\000\000\001\185\000\000\001\189\001\189\000\000\000\000\000\000\001\189\nv\001\185\000\000\001\185\000\000\0045\001\185\000\000\0045\000\000\001\189\001\185\001\185\001\185\000\000\000\000\000\000\001\189\014v\0045\000\000\000\000\001\189\0045\000\000\003\254\001\006\001\185\001\189\000\000\001\"\n\142\015\n\000\000\000\000\001&\0045\000\000\000\000\000\000\000\000\000\000\0045\000\000\001\185\001\185\015*\000\000\000\000\001\185\000\000\004\002\000\000\000\000\015\234\000\000\0045\000\000\000\000\000\000\001\185\0045#\218\000\000\004\014\000\000\000\000\001\185\004\026\003\022\000\000\000\000\001\185\000\000\000\000\000\000\004\230\0045\001\185\007\254\000\000\000\000\000\000\b~\000\000\011\246\r\150\018\194\r\162\000\000\003Q\000\000\000\000\003Q\0045\0045\000\000\000\000\0045\000\000\r\166\000\000\000\000\000\000\003Q\000\000\000\000\003Q\003Q\000\000\r\174\000\000\r\178\003Q\014&*\254\003Q\0045\000\000\000\000\000\000\003Q\006\250\000\000\000\000\000\000\000\000\003Q%\234\000\000\000\000\000\000\000\000\000\000\000\000+\006\003Q\r\182\003Q\000\000\000\000\003Q\000\000\005F\003Q(*\003Q\003Q\003Q\000\000\003Q\000\000\000\000\000\000\012\253\012\253\000\000\000\000\000\000\000\000\012\253\000\000\003Q\012\253\003Q\000\000\003Q\000\000\000\000\003Q\003Q\003Q\000\000\000\000\012\253\000\000\012\253\000\000\000\000\003Q\003Q,\246\000\000\003Q\000\000\003Q\000\000\000\000\000\000\000\000\000\000\012\253\000\000\000\000\000\000\003Q\000\000\012\253\012\253\000\000\000\000\007\030\003Q\003Q\011\n\000\000\012\253\003Q\012\253\000\000\000\000\012\253\000\000\003Q\r\001\r\001\012\253\012\253\012\253\000\000\r\001\000\000\000\000\r\001(n\003Q\000\000\000\000\000\000\000\000\000\000\000\000\012\253\000\000\r\001\000\000\r\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\"\003&\000\000\000\000\000\000\012\253\012\253\r\001\000\000\000\000\012\253\000\000\000\000\r\001\r\001\000\000\000\000\011\026\000\000\003*\011\n\003:\r\001\000\000\r\001\000\000\000\000\r\001\012\253\003F\000\000\000\000\r\001\r\001\r\001\000\000\000\000\000\000\000\000\012\253\000\000\003y\003y\003J\004\198\000\000\000\000\003y\r\001\004\210\003y\004\230\005\030\005*\000\000\000\000\000\000\000\000\0056\006)\000\000\003y\000\000\003y\000\000\r\001\r\001\004\"\000\000\000\000\r\001\004&\000\000\000\000\000\000\005:\004*\011\026\003y\000\000\000\000\006)\000\000\000\000\003y\003y\000\000\000\000\r\001\011\198\000\000\005%\000\000\003y\000\000\003y\000\000\000\000\003y\r\001\011\202\000\000\000\000\003y\003y\003y\000\000\000\000\000\000\011\218\b\134\000\000\000\000\000\000\000\000\000\000\005B\b\138\005F\003y\011\226\000\000\000\000\000\000\015b\015f\015z\000\000\000\000\012R\000\000\000\000\000\000\000\000\000\000\012\166\003y\003y\000\000\000\000\000\000\003y\004\030\004\"\000\000\000\000\000\000\004&\005%\000\000\000\000\012^\004*\012b\000\000\000\000\000\000\012\170\000\000\003y\000\000\000\000\015\178\000\000\015\182\b\217\000\000\000\000\b\002\000\000\003y\000\000\004\030\004\"\000\000\000\000\000\000\004&\012f\020F\000\000\b\006\004*\020V\012j\b\018\b\134\000\000\000\000\b\217\000\000\000\000\000\000\b\138\000\000\000\000\012*\000\000\b\002\000\000\012.\000\000\0126\012F\000\000\012R\000\000\000\000\000\000\000\000\000\000\b\006\000\000\000\000\000\000\b\018\b\134\012V\000\000\000\000\000\000\000\000\000\000\b\138\000\000\000\000\012*\012^\000\000\012b\012.\012\174\0126\012F\000\000\012R\000\000\000\000\000\000\000\000\000\000\r\234\000\000\000\000\000\000\000\000\000\000\012V\004\030\004\"\000\000\012\246\000\000\004&\012f\0075,.\012^\004*\012b\012j\012\174\000\000\r\238\000\000\b\130\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0075\b\002\0075\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012f\000\000\b\217\b\006\006Q\000\000\012j\b\018\b\134\000\000\000\000\0075\004\"\000\000\000\000\b\138\004&\000\000\012*\000\000\000\000\004*\012.\000\000\0126\012F\006Q\012R\000\000\000\000\000\000\0075\000\000\000\000\011\198\000\000\000\000\000\000\000\000\012V\000\000\000\000\000\000\000\000\000\000\011\202\0075\000\000\000\000\012^\000\000\012b\000\000\012\174\011\218\b\134\000\000\000\000\000\000\000\000\000\000\000\000\b\138\000\000\0075\011\226\0075\000\000\000\000\015b\015f\015z\000\000\r\242\012R\000\000\012f\000\000\rj\000\000\0075\000\000\012j\014F\0075\000\000\000\000\004U\004U\000\000\0075\000\000\004U\000\000\0075\000\000\012^\004U\012b\000\000\000\000\000\000\000\000\004U\000\000\000\000\000\000\015\178\000\000\015\182\000\000\000\000\000\000\004U!\158\000\000\000\000!\182\000\000\000\000\000\000\000\000\000\000\012f\020F\000\000\004U\000\000\020V\012j\004U\004U\000\000\000\000\001i\000\000\000\000\000\000\004U\000\000\001i\004U\012m\001i\000\238\004U\000\000\004U\004U\000\000\004U\000\000\012m\000\000\001i\000\000\001i\000\000\000\000\000\000\004U\004U\004U\000\000\000\000\004U\000\000\000\000\000\000\000\000\004U\001i\004U\000\000\004U\000\000\004U\001i\012m\000\000\000\000\000\000\000\000\000\000\000\000\012m\004U!\158\000\000\000\000#\170\001i\000\000\000\000\000\000\000\000\001i\001i\001i\004U\000\000\000\000\000\000\004U\004U\004U\000\000\000\000\000\000\000\000\000\000\004U\001i\000\000\004U\000\000\012m\000\238\004U\000\000\004U\004U\000\000\004U\001i\000\000\012m\001i\000\000\001i\001i\000\000\000\000\000\000\001i\004U\012m\000\000\001i\000\000\000\000\000\000\001i\000\000\000\000\004U\000\000\004U\000\000\000\000\000\000#\002\001i\000\000\000\000\001i\000\000\000\000\000\000\000\000\000\000\001i\012m\001i\000\000\000\000\007a\000\000\000\000\012m\000\000\000\000\004U\000\000\000\000\001i\000\000\000\000\004U\000\000\001i\001i\001i\000\000\007a\000\000\007a\000\000\005U\005U\000\000\000\000\000\000\000\000\005U\000\000\001i\005U\000\000\000\000\012m\000\000\000\000\000\000\000\000\000\000\007a\000\000\005U\000\000\005U\000\000\000\000\001i\001i\001i\000\000\001i\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005U\000\238\000\000\000\000\000\000\000\000\005U\005U\000\000\000\000$*\001i\000\000'N\000\000\005U\007a\005U\000\000\000\000\005U\000\000\001i\000\000\000\000\005U\005U\002^\000\000\000\000\000\000\003Y\000\000\000\000\007a\000\000\007a\003Y\000\000\003&\003Y\005U\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007a\003Y\000\000\014F\007a\000\000\000\000\000\000\005U\005U\007a\000\000\000\000\005U\007a\000\000\000\000\001\197\003Y\000\000\000\000\000\000\000\000\001\197\003Y(\006\001\197\000\000\000\000\004\182\005U\005U\nv\003Y\000\000\003Y\000\000\001\197\003Y\000\000\000\000\000\000\005U\003Y\003Y\003Y\000\000\004]\000\000\000\000\004]\000\000\000\000\000\000\001\197\000\000\000\000\000\000\000\000\003Y\001\197\004]\000\000\n\142\000\000\004]\000\000(\nb=\b=\012\245\000\000\012\245\000\000\b=\012\245\012\249\b=\000\000\000\000\012\245\012\245\012\245\000\000\000\000\n\198\000\000\012\249\b=\000\000\b=\000\000\000\000\000\000\000\000\000\000\012\245\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b=\000\000\000\000\000\000\000\000\000\000\b=\b=\012\245\012\245\000\000\000\000\000\000\012\245\000\000\b=\000\000\b=\000\000\000\000\b=\000\000\000\000\000\000\n\222\b=\b=\002^\003\254\001\006\000\000\012\245\000\000\001\"\000\000\015\n\000\000\000\000\001&\000\000\000\000\b=\012\245\000\000\000\000\000\000\000\000\000\000\000\000\015*\000\000\000\000\000\000\000\000\004\002\000\000\000\000\015\234\b=\b=\000\000\000\000\000\000\b=\000\000\000\000\000\000\004\014\003\254\001\006\000\000\016\022\003\022\001\"\b=\015\n\000\000\000\000\001&\004\230\000\000\b=\007\254\000\000\000\000\000\000\b~\000\000\011\246\015*\018\194\r\162\b=\000\000\004\002\000\000\000\000\015\234\000\000\000\000\000\000\000\000\000\000\r\166\000\000\000\000\000\000\004\014\000\000\000\000\000\000\017Z\003\022\r\174\000\000\r\178\000\000\000\000\000\000\004\230\0011\000\000\007\254\0011\000\000\000\000\b~\004m\011\246\000\000\018\194\r\162\000\000\004m\0011\000\000\004m\000\000\0011\000\000\r\182\000\000\000\000\r\166\000\000\000\000\005F\004m\000\000\000\000\000\000\0011\000\000\r\174\000\000\r\178\000\000\0011\000\000\000\000\000\000\000\000\000\000\000\000\004m\000\000\0011\000\000\0011\000\000\004m\0011\000\000\000\000\004m\000\000\0011\0011\000\238\004m\r\182\004m\000\000\000\000\004m\000\000\005F\0011\000\000\004m\br\002^\0011\0011\000\000\000\000\0011\000\000\004m\004m\000\000\000\000\000\000\000\000\000\000\004m\004m\0011\000\000\0011\0011\0011\000\000\0011\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004m\004m\0011\000\000\000\000\004m\000\000\000\000\0011\000\000\0011\000\000\0011\000\000\000\000\000\000\004m\0011\000\000\0011\000\000\0011\0011\004m\000\000\000\000\000\000\0011\0011\002^\000\000\000\000\000\000\000\000\004mm\001-\000\000\000\000\006\169\000\000\001m\001-\012q\001m\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012q\000\000\001m\006\169\001m\000\000\001-\001-\000\000\000\000\000\000\001-\001\029\000\000\000\000\000\000\000\000\000\000\001\029\001m\000}\001\029\001-\000\000\000\000\001m\012q\000\000\000\000\001-\000}\000\000\001\029\012q\001\029\000\000\000\000\000\000\000\000\001m\001-\000\000\000\000\000\000\001m\001m\001m\000\000\000\000\001\029\000\000\005\218\000\000\000\000\000\000\001\029\000}\000\000\000\000\000\000\001m\000\000\000\000\000}\012q\000\000\000\000\000\000\001m\001\029\012q\001m\000\000\000\000\001\029\001\029\001\029\001m\001m\000\000\012q\000\000\001m\000\000\000\000\000\000\001m\000\000\000\000\000\000\001\029\000\000\000\000\000\000\000}\000\000\000\000\000\000\000\000\001m\001m\000\000\000\000\000\000\000\000\001m\012q\001\029\001\029\000\000\000\000\001m\001\029\012q\000\000\000\000\000\000\000\000\000\000\001m\000\000\000\000\000\000\000\000\001m\001m\001m\000\000\000\000\000\000\001\029\001\029\000\000\000}\001\029\000\000\000\000\000\000\000\000\000\000\001m\001\029\000\000\000}\012q\001\029\000\000\000\000\000\000\001\029\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001m\001m\001m\000\000\001m\001\029\000\000\000\000\000\000\000\000\000\000\001\029\000}\000\000\000\000\000\000\000\000\000\000\000\000\000}\000\000\000\000\000\000\001m\000\000\001\029\000\000\000\000\000\000\000\000\001\029\001\029\001\029\000\000\001m\000\000\000\000\000\000\005\133\005\133\000\000\000\000\000\000\000\000\005\133\000\000\001\029\005\133\000\000\000\000\000}b~\000\000\011\246\r\150\000\000\r\162\000\000\005\133\005\133\000\000\000\000\000\000\005\133\000\000\000\000\000\000\000\000\r\166\003Q\003Q\000\000\003Q\000\000\000\000\000\000\003Q\000\000\r\174\003Q\r\178\005\133\014&\003Q\000\000\000\000\000\000\003Q\000\000\000\000\003Q\000\000\005\133\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003Q\006\250\000\000\000\000\000\000\rn\003Q\004\026\003\022\000\000\000\000\003Q\000\000\000\000\000\000\004\230\000\000\003Q\007\254\000\000\000\000\000\000\b~\000\000\011\246\r\150\000\000\r\162\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\166\000\000\012\029\000\000\001\006\012\029\000\000\000\0001\162\000\000\r\174\000\000\r\1781\166\014&\000\000\012\029\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012e\000\000\012\029\012e\000\000\000\000\r\182\000\000\012\029\000\000\015\210\000\000\005F\000\000\012e\002r\003\022\012\029\012e\012\029\000\000\000\000\012\029\000\000\000\000\012m\000\000\012\029\000\000\000\000\000\000\012e\000\000\000\000\000\0001\170\000\000\012e\000\000\000\000\000\000\000\000\000\000\012\029\000\000\000\000\012e\012\029\012e\000\000\000\000\012e\000\000\000\000\000\000\000\000\012e\012e\000\0001\174\012\029\012\029\000\000\005\225\012\029\000\000\005\225\000\000\000\000\000\000\000\000\000\000\012e\000\000\000\000\000\000\012e\005\225\000\000\000\000\000\000\005\225\000\000\012\029\000\000\000\000\000\000\000\000\000\000\012e\012e\005\006\000\000\012e\005\225\000\000\000\000\000\000\000\000\000\000\005\225\000\000\000\000\000\000\000\000\012e\000\000\005\129\t\174\005\225\000\000\005\225\012e\005\129\005\225\000\000\005\129\000\000\000\000\005\225\005\225\000\238\000\000\012e\000\000\000\000\000\000\005\129\000\000\005\129\000\000\000\000\000\000\000\000\000\000\005\225\000\000\000\000\000\000\005\225\000\000\000\000\000\000\000\000\005\129\000\000\000\000\000\000\000\000\000\000\005\129\011:\005\225\005\225\007z\000\000\005\225\005\153\t\174\005\129\000\000\005\129\000\000\005\153\005\129\000\000\005\153\000\000\005\225\005\129\005\129\002^\000\000\000\000\000\000\005\225\000\000\005\153\000\000\005\153\012\210\000\000\000\000\000\000\000\000\005\129\005\225\004\030\004\"\000\000\000\000\000\000\004&\000\000\005\153\000\000\000\000\004*\000\000\000\000\005\153\011:\005\129\005\129\0122\000\000\000\000\005\129\000\000\005\153\000\000\005\153\000\000\b\002\005\153\000\000\000\000\000\000\000\000\005\153\005\153\002^\000\000\000\000\000\000\005\129\b\006\000\000\000\000\000\000\b\018\b\134\000\000\000\000\000\000\005\153\005\129\000\000\b\138\000\000\000\000\012*\000\000\000\000\000\000\012.\000\000\0126\012F\000\000\012R\r\014\005\153\005\153\000\000\000\000\000\000\005\153\004\030\004\"\000\000\000\000\012V\004&\000\000\000\000\000\000\000\000\004*\000\000\000\000\000\000\012^\000\000\012b\005\153\012\174\000\000\000\000\000\000\000\000\r\026\000\000\000\000\b\002\000\000\005\153\000\000\004\030\004\"\000\000\000\000\000\000\004&\000\000\000\000\000\000\b\006\004*\012f\000\000\b\018\b\134\000\000\000\000\012j\000\000\000\000\000\000\b\138\000\000\000\000\012*\000\000\b\002\000\000\012.\000\000\0126\012F\000\000\012R\000\000\000\000\000\000\000\000\000\000\b\006\000\000\000\000\000\000\b\018\b\134\012V\000\000\000\000\000\000\000\000\000\000\b\138\000\000\000\000\012*\012^\000\000\012b\012.\012\174\0126\012F\000\000\012R\000\000\000\000\004\030\004\"\000\000\000\000\000\000\004&\000\000\000\000\000\000\012V\004*\000\000\000\000\000\000\000\000\000\000\012f\rF\000\000\012^\000\000\012b\012j\012\174\000\000\000\000\b\002\000\000\000\000\000\000\004\030\004\"\000\000\000\000\000\000\004&\000\000\000\000\000\000\b\006\004*\000\000\000\000\b\018\b\134\000\000\012f\014\n\000\000\000\000\000\000\b\138\012j\000\000\012*\000\000\b\002\000\000\012.\000\000\0126\012F\000\000\012R\000\000\000\000\000\000\000\000\000\000\b\006\000\000\000\000\000\000\b\018\b\134\012V\000\000\000\000\000\000\000\000\000\000\b\138\000\000\000\000\012*\012^\000\000\012b\012.\012\174\0126\012F\000\000\012R\014\142\000\000\000\000\000\000\000\000\000\000\000\000\003\254\001\006\000\000\000\000\012V\001\"\000\000\000\000\000\000\000\000\001&\012f\000\000\000\000\012^\000\000\012b\012j\012\174\000\000\000\000\000\000\000\000\019\162\000\000\000\000\004\002\000\000\000\000\000\000\003\254\001\006\000\000\000\000\000\000\001\"\000\000\000\000\000\000\004\014\001&\012f\000\000\004\026\003\022\000\000\000\000\012j\000\000\000\000\000\000\004\230\000\000\000\000\007\254\000\000\004\002\000\000\b~\000\000\011\246\r\150\000\000\r\162\000\000\000\000\000\000\000\000\000\000\004\014\000\000\000\000\000\000\004\026\003\022\r\166\000\000\000\000\000\000\000\000\000\000\004\230\000\000\000\000\007\254\r\174\000\000\r\178\b~\014&\011\246\r\150\000\000\r\162\019\174\000\000\000\000\000\000\000\000\000\000\000\000\003\254\001\006\000\000\000\000\r\166\001\"\000\000\000\000\000\000\000\000\001&\r\182\000\000\000\000\r\174\000\000\r\178\005F\014&\000\000\000\000\000\000\000\000\019\186\000\000\000\000\004\002\000\000\000\000\000\000\003\254\001\006\000\000\000\000\000\000\001\"\000\000\000\000\000\000\004\014\001&\r\182\000\000\004\026\003\022\000\000\000\000\005F\000\000\000\000\000\000\004\230\000\000\000\000\007\254\000\000\004\002\000\000\b~\000\000\011\246\r\150\000\000\r\162\000\000\005=\000\000\000\000\005=\004\014\000\000\000\000\000\000\004\026\003\022\r\166\000\000\000\000\000\000\005=\000\000\004\230\000\000\005=\007\254\r\174\000\000\r\178\b~\014&\011\246\r\150\000\000\r\162\000\000\000\000\005=\000\000\000\000\000\000\000\000\000\000\005=\000\000\000\000\r\166\000\000\000\000\000\000\011\178\000\000\005=\r\182\005=\000\000\r\174\005=\r\178\005F\014&\000\000\005=\005=\000\238\000\000\003Q\000\000\000\000\003Q\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005=\005=\003Q\000\000\005=\rn\003Q\001\201\000\000\000\000\000\000\003Q\001\201\001\201\000\000\000\000\007\249\000\000\000\000\000\000\000\000\000\000\007\249\000\000\000\000\000\000\005\229\000\000\001\201\005\229\000\000\000\000\001\201\012e\000\000\000\000\000\000\000\000\000\000\012e\005\229\000\000\012e\000\000\005\229\001\201\001\201\000\000\000\000\001\201\000\000\000\000\000\000\012e\000\000\000\000\000\000\005\229\000\000\000\000\000\000\001\201\000\000\005\229\012m\000\000\000\000\000\000\001\201\000\000\012e\000\000\005\229\007>\005\229\000\000\012e\005\229\000\000\001\201\000\000\000\000\005\229\005\229\000\238\012e\000\000\012e\000\000\001-\012e\000\000\001-\000\000\000\000\012e\012e\000\000\005\229\000\000\000\000\000\000\005\229\001-\000\000\000\000\000\000\001-\000\000\000\000\000\000\012e\000\000\000\000\000\000\005\229\005\229\000\000\000\000\005\229\001-\000\000\000\000\000\000\000\000\000\000\001-\000\000\012e\012e\004\174\005\229\000\000\012e\000\000\001-\000\000\001-\005\229\000\000\001-\000\000\000\000\000\000\012e\001-\001-\000\238.&\005\229\000\000\012e\000\000\000\000\003Q\000\000\000\000\000\000\000\000\000\000\003Q\001-\012en\000\000\000\000\000\000\005\014\000\000\000\000\005\225\000\000\000\000\000\000\003Q\003Q*~\000\000\000\000\003Q\000\000\003*\000\000\003:\005\018\000\000\000\000\005\225\005\225-\242\000\000\003F\005\225\000\000\000\000\000\000(n\003Q\000\000\000\000\000\000\000\000\000\000\005\225\000\000\005\022\004\198\000\000\000\000\004m\005\225\004\210\004m\004\230\005\030\005*\000\000\000\000\000\000\000\000\006\134\005\225\007b\004m\000\000\000\000\000\000\004m\000\000\000\000\000\000\000\000\000\000\0009\000\000\000\000\000\000\005:\000\000\0009\004m\0009\000\000\000\000\000\000\000\000\004m\000\000\000\000\006\222\000\000\0009\000\000\011\178\000\000\004m\000\000\004m\000\000\bY\004m\007n\000\000\000\000\000\000\004m\007\182\000\238\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0009\006\230\000\000\0009\004m\004m\000\000\0009\004m\000\000\000\000\000\000\000\000\0009\000\000\000\000\000\000\000\000\0009\0009\0009\004m\004m\000\000\000\000\004m\000\000\0009\0009\012e\000\000\000\000\012e\000\000\000\000\000\000\000\000\t.\0009\012e\000\000\000\000\012e\012e\004m\000\000\000\000\012e\000\000,\238\000\000\000\000\000\000\012e\012m\004m\0009\012e\000\000\000\000\012e\000\000\000\000\bY\012m\000\000\012e\0009\000\000\000\000\012e\000\000\000\000\000\000\000\000\000\000\012e\000\000\000\000\000\000\012e\000\000\000\000\0009\000\000\012e\012e\000\000\000\000\000\000\012e\000\000\000\000\000\000\000\000\012e\012e\000\000\000\000\000\000\000\000\012e\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\149\000\000\012e\000\149\000\000\000\000\000\000\000\000\000\000\012e\012e\005\006\000\000\012e\000\149\000\000\000\000\000\000\000\149\012e\012e\005\006\000\000\012e\000\000\012e\000\000\000\000\000\000\031*\000\000\000\149\012e\000\000\000\000\012e\000\000\000\149\000\000\031b\000\000\000\000\012e\012e\000\000\000\000\000\149\000\000\000\149\000\217\000\000\000\149\000\217\012ete\000\000\000\000\000\000\000\000\000\000\012e\000\000\005\229\012e\005=\000\000\001\201\001\201\000\000\000\000\000\000\001\201\000\000\000\000\012e\000\000\000\000\r\005\r\005\005\229\005\229\004u\001\201\000\000\005\229\012m\000\000\003f\000\000\001\201\004b\012e\000\000\000\000-\190\005\229\r\005\012e\r\005\t\022\001\201.\130\005\229\000\000\003z\004\178\r\005\000\000\000\000\004\182\000\000\012e\000\000\005\229\000\000\000\000\012e\012e.\134\000\000\r\005\r\005\000\000\003~.\174\003:\r\005\000\000\r\005\r\005\r\005\000\000\012e\003F\000\000\r\005\000\000\000\000\030v\000\000\000\000\000\000\000\000 \250\000\000\000\000\000\000\004\190\t\194\012e\012e\004\174\r\005\t\210\012e\b\138\t\242\n\014\000\000/&\000\000\000\000-\158\000\000-\162\012e\003\"\005\n\000\000.^\000\000\005\014\012e\000\000\000\000\000\000*B/:\000\000\nJ\000\000\004u\000\000\012e\000\000\003*\000\000\003:\004m\t\174\000\000(\030\000\000\000\000\004m\003F\000\000\004m\000\000/J\000\000\000\000\000\000-\174\000\000\000\000\000\000\000\000\004m\005\022\004\198\000\000\000\000\000\000\000\000\004\210\000\000\004\230\005\030\005*-\178\000\000\000\000\000\000\006\134\004m\006\142\000\000\000\000\000\000\000\000\004m\011:\000\000\000\000\000\000\000\000\000\000'N\000\000\004m\005:\004m\000\000\006\213\004m\000\000\006\213\000\000\000\000\004m\br\002^\006\222\000\000\000\000\005\217\000\000\006\213\005\217\000\000\000\000\006\213\000\000\000\000\006\226\004m\030\190\000\000\000\000\005\217\000\000\000\000\000\000\005\217\006\213\000\000\000\000\000\000\000\000\000\000\006\213\006\230\004m\004m\000\000\000\000\005\217\004m\000\000\006\213\000\000\006\213\005\217\000\000\006\213\000\000\000\000\000\000\n\222\006\213\006\213\005\217\000\000\005\217\000\000\004m\005\217\000\000\000\000\000\000\011\201\005\217\005\217\011\201\000\000\006\213\004m\000\000\000\000\006\213\000\000\000\000\000\000\000\000\011\201\000\000\000\000\005\217\011\201\000\000\000\000\005\217\006\213\006\213\bm\000\000\000\000\000\000\004=\000\000\004m\000\000\000\000\004m\000\000\004E\000\000\004E\000\000%\162\000\000\004E\000\000\000\000\004m\000\000)~\000\000\000\000\000\000\000\000\000\000\000\000\006\213\004E\004E\000\000\000\000\004E\006\213\000\000\004m\006\213\000\000\000\000\000\000\000\000\004m\000\000\000\000\000\000\000\000\000\000\006\213\000\000\000\000\004m\004E\004m\000\000\000\000\004m\000\000\000\000\000\000\000\000\004m\br'\190\005\217\006\213\000\000\000\000\000\000\000\000\005\217\006\213\000\000\005\217\000\000\000\000\000\000\004m\000\000\000\000\006\213*^\006\213\000\000\005\217\006\213\000\000\000\000\000\000\000\000\006\213\006\213\000\000\000\000\004m\004m\000\000\000\000\000\000\004m\000\000\005\217\000\000\000\000\000\000\000\000\006\213\005\217\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005\217\004mt\174\000\000\000\000\000\000\000\000\005E\011\205\021&\005E\000\000\000\000\011\201\011\201\000\000\000\000\000\000\011\201\000\000\000\000\005E\000\000\000\000\000\000\011\205\011\205\000\000\000\000\000\000\011\205\000\000\006\173\006\173\000\000\000\000\011\201\000\000\005E\000\000\000\000\005B\000\000\005F\005E\011:\000\000+n\011\205\n\018\000\000\006\173\000\000\006\173\000\000\000\000\000\000\000\000\005E+n\000\000\006\173\000\000\005E\005E\002^\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004m\006\173\006\173\004m\000\000\005E\000\000\006\173\000\000\006\173\006\173\006\173\000\000\000\000\004m\000\000\006\173\000\000\004m\000\000\000\000\000\000\005E\005E\000\000\000\000\004=\005E\000\000\000\000\000\000\004m\004=\006\173\000\000\004=\000\000\004m\000\000\000\000\000\000\000\000\000\000\000\000\005f\005E\004=\000\000\000\000\000\000\000\000\004m\000\000\000\000\000\000\000\000\004m\007\182\000\000\000\000\000\000\000\000\004-\004=\000\000\000\000\000\000\000\000\004-\004=\000\000\004-\004m\000\000\005\"\000\000\006\173\000\000\004=\000\000\004=\000\000\004-\004=\000\000\000\000\000\000\000\000\004=\004m\004m\000\000\000\000\004m\000\000\000\000\000\000\000\000\000\000\004-\000\000\005v\000\000\000\000\004=\004-\000\000\000\000\000\000\004]\000\000\000\000\004mn&\000\000\005F\002f\003J$&\004\238\012-$6\004\129\004\210\000\000\004\230\005\030\005*\003f\000\000\007\190\bR$\142\000\000\004\129\000\000\000\000\000\000\000\000\000\000\000\000\000\000(\234\000\000\000\000\000\000\000\000\007\194\000\000\005:\000\000\000\000\000\000\b\146\000\000\000\000\000\000\000\000\000\000(\238\000\000\000\000\003\234\000\000%\014)\022\000\000\030~\000\000\000\000\000\000\000\000\030\134\000\000)\154\000\000+R\000\000\000\000\030v\000\000\000\000\000\000\002f \250\019.\004\238\000\000\030\142\000\000\000\000\000\000\003z\003&\000\000\000\000\000\0001\238\000\000\000\000*.\000\000\000\000\000\000\000\000\030\162\030\206\000\000\000\000\004\129\000\000\003~\000\000\003:\007\194\000\000\000\000*B*n\000\000\b\146\003F\004\129\000\000\000\000\000\000\000\000\000\000!\002\003\234\000\000%\014\000\000\000\000\030~\003\142\t\194\000\000\000\000\030\134*\154\t\210\000\000\b\138\t\242\n\014\000\000\000\000\000\000\023\234\n\"\000\000\000\000\000\000\000\000\030\142\003z\003&\000\0001\154\000\000\023\246\000\000\000\000\000\000\000\000\000\000\nJ\003z\003&\000\000\000\000\030\162\030\206\000\000\003~\004\169\003:\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003F\000\000\003~\000\000\003:\000\000\000\000\000\000\000\000\000\000!\002\000\000\003F\000\000\003\142\t\194\000\000\000\000\000\000\000\000\t\210\000\000\b\138\t\242\n\014\000\000\003\142\t\194\000\000\n\"\000\000\000\000\t\210\000\000\b\138\t\242\n\014\000\000\003\"\003&\029\198\n\"\000\000\000\000\000\000\000\000\nJ\000\000\000\000\003\"\003&\030N\000\000\000\000\000\000\000\000\000\000\004\222\nJ\003:\000\000\000\000\000\000\000\000\000\000\000\000\004e\003F\004\222\004e\003:\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003F\000\000\004e\003J\004\198\000\000\004e\000\000\000\000\004\210\000\000\004\230\005\030\005*\003J\004\198\000\000\000\000\0056\004e\004\210\000\000\004\230\005\030\005*\004e\000\000\000\000\004M\0056\000\000\000\000\000\000,\030\004M\005:\000\000\004M\004e\004e\003z\003&\000\000\000\000\004e\000\000\005:\004e\004M\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004e\003~\004e\003:\000\000\000\000\000\000\004M\000\000\000\000\000\000\003F\000\000\004M\000\000\000\000\000\000\004e\000\000\004e\004e\000\000\000\000\004e\000\000\003\142\t\194\004M\000\000\000\000\0045\t\210\004M\b\138\t\242\n\014\0045\004e\000\000\0045\n\"\000\000\004e\000\000\000\000\000\000\000\000\000\000\004M\000\000\0045\000\000\000\000&F\000\000\000\000\000\000\nJ\004e\000\000\000\000\000\000\003\"\003&\000\000\004M\004M\0045\000\000\000\000\004M\000\000\000\000\0045\000\000\004e\004e\000\000\000\000\000\000\004e\003*\000\000\000\000\000\000\000\000\000\000\0045\004M\000\000\000\000\000\000\0045\000\000\000\000\000\000\000\000\000\000\004e/\006\003\"\003&\000\000\000\000\000\000\003J\004\214\000\000\0045/\202\000\000\004\210\000\000\004\230\005\030\005*\000\000\000\000\000\000\003*\0056\000\000\000\000\000\000\000\000\0045\0045\000\000\000\000\000\000\0045\000\000\000\000\000\000\000\000\000\000\000\000\005:\003\"\003&\000\000-j\000\000\003J\004\214\007Q\000\000\000\000\0045\004\210\000\000\004\230\005\030\005*\000\000\000\000\000\000\003*\0056/n\000\000\t\218\000\000\007Q\000\000\007Q\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005:\000\000\000\000\000\000\t\214\000\000\003J\004\214\000\000\000\000\007Q\000\000\004\210\000\000\004\230\005\030\005*\000\000\000\000\000\000\000\000\0056\000\000\000\000\t\218\000\000\000\000\000\000\000\000\000\000\000\238\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005:\000\000\000\000\000\000\004\245\000\000\000\000\007Q\000\000\003z\003&\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\"\003&\000\000\000\000\t\218\007Q\000\000\007Q\030&\000\000\003:\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003F\003*\000\000\014r\000\000\000\000\014F\007Q\000\000\000\000\000\000\000\000\000\000\007Q\003\142\t\194\000\000\007Q\000\000\000\000\t\210\000\000\b\138\t\242\n\014\003J\004\214\000\000\000\000\n\"\000\000\004\210\000\000\004\230\005\030\005*\000\000\000\000\000\000\000\000\0056\000\000\000\000\000\000\000\000\000\000\nJ\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005:\000\000\000\000\000\000\004\241\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t\218"))
  
  and lhs =
~~~}}}}||{{zzyyyyyxxxxwvvuuutsssssssrrrrrrrqqqqppooonnmmmmmmmmmllkkkkkkkkkkkjiihhgggggfeeddccccccccccccccbbaa```````````````````````````````r\r\r\r\r\012\011\011\n\n\n\t\t\t\b\b\b\b\007\007")
  
  and goto =
n\228\000\000\0010\002\148\rj\003z\003\240\003d\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000`\140\000\000\000\000\003\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\025:\003\024\004\186\000\201\000\000\005\238O\130\003b\006b\004\178\000\000`\232\000\000\003\198\000\000\000\000\000\000\031\140\003\234\007 \000\173\000\000\000\000\007f\001\250\007h\007\176\004\012\nL\r\130\000\000\000\000\004\134\n^\r\154\004\148\n\182\r\218\000\0000\250\004\224\011<\005\174\000\000O\242\000\000\000\000\000\000\000\000\000\000\000\000\000\000O\252\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005\188\011l\000\000\000\000\000\000\000\159\000\000\012\"P\020\005\202\012L\000\023\000\000\000\011\000\000\000^\007\b\000\000\006\022\000\000\000\000\000\000\000\000\000\000\0006\000\000\002\128\007\228\r\250\000\000\000\0000\224\031\140\000\000\000\000\000:\000\000\004h\000\000\027\228\006\240\000\000\005\006\001\142\006\216\012\134\000&\000T\003\186\b\020\014~\000\000\000\0001t\025:\000\000\b\016\000\000\022\132\b\020\000\0000\174\004z\000i\000\000@j\007\204\000\000\000\000\000\000\014\198\000\000\003\224\000\000\b&\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\244\001~\000\000\000\000\000\162\000\000\016\238\000\000\004\244\005\026\004\244\000\000\000\000\000\000\000\000\000\000\005\180\000\000\012\194\bX\000\000\t\236\r\000\n\200\000\000\000\000\000\000\b\b\000\000\000\000\000\000\000\000\007\218\000\000\000\000\000\000\000\000\000\000P\170\000\000\000\000\000\000\000\000\000\000\000\000\002\226\b\168\000\000\000\000\000\000\000\000\000\000\000\000\005\156\005\014\000\000\000\000a(\007\218\007\218\000\000aL\007\218\004z\000\000\000;\000\000\000\000\000\000\031@\000\000\bd\000\000\029\134\000\000\rL\000\000\r\144\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\b6\000\000\000\000\000\000\bf\000<\004b\000\000\000\000\000\000\005j\004\244\000\000\004\244\000t\000\000\006\164\004\244\004\244\014\006\000\000\bx\b6\000\000\000\000\000\000\007\218\000\000\b\198\014\n\000\000\005\156\000\000\000\000\000\000\000\000\007\218\002\n\003\000\006\014\000\000\000\000\000\000\000\000\006\242\000\000\000\000\000\000\000\000\000\000\t\166\004\226\005\194\002z\t\166\b\238\t:\014\016\002\030\004\024\014\0241\194\000\000\t>\014T\014\160\tz\014\146\0150\t>P\212\000\000\000\000\000\000\000\000P\240\000\000\000\000\t\150\000\000\0154\000\000\000\000\000\000\000\145\000\000\000\000\0156\004\146\016\002\bF\t\206\016\018\000\228\001t\0060\007\228\n\190\006*\005\238\002\200V\236Q:\000\000\000\000\007\186\003\180\n\000\n(\016h\nb\n\226\0002\004\202\004\222\016l\000\027\nj\000\000\000\000\000\000\000\000\005\160\016\156\000\192\n\148\000\000\000\000\005\208\000\000\000\196\002\180\002&\000\163\000\000\000\000\000\000\000\000\011\204\000\000\000\000%R\000\0009\198\011\246\000\000a\134\007\218a\152\007\218\000\000\011\156\000\000\011\222\000\000\000\000\011\234\000\000\000\000\000\000\012\214\000\000\006\000\000\196\000\000\000\000\011\220\000\000\000\000\000\000\000\000\000\000\000\196\000\000\000\000\007(\000\000\011\152\004\162\003\152\001\020\r\014B\138\000\000\000\250\000\000\021V\007\242\000\000\000\000\000\000\000\000\004\244\b<\000\000\012pQ\130\000\000\000\000\006\136\b\168\000\000\012\152\000\000Q\148\000\000\000\000\006\238Q\180\000\000\000\000\000\000\000\000\000\000Q\230\000\000\000\000\005\148\000\000\000\000\000\000\000\000\000\000\000\000\000\000\023\210\000\000\011\b\000\000\000\000\000\000\000\000\000\000\006\240\t\020\000\000\000\000\002\192\000\000\027x\000\000\006\240\r\028\006\240\000\000\000\000\000\000\000\000\000\000\0120\000\000M|\rB\000\000a\210\007\218a\220\007\182\000\000\000\000\r\026\000\000\r,\000\000\000\000\rF\000\000\000\000\000\000\000\000\000\000\rP\000\000\000\000\000\000\014F\000\000\b\028\011\152\000\000\000\000\rl\000\000\000\000\000\000\000\000\011\152\000\000\000\000\011\152\000\000\000\000\000\196\006\186\b\b\000\000\000\000\016\188\000\000\006\200\t\018\016\192\001\214\000\000\t\212\000\000\0078\004\024\000\000\n\212\016\1982D\t\134\rd\016\200\nv\000\000\011.\t\134\015\130\r\136\016\208\rpWZ\003\134\000\000\000\000\000\000\000\000\000\000\000\000\000\000\014`a\236\007\182\014\136WxR`Rv\000\000\004\142\000\000\000\000\000\000\014\020\017\022\007\238\000\000\007\020\000\000\000\000\000\000\000\000\014D\000\000\000\000\000\000\000\000\000\000\000\000\000\027\000\000\000\000\000\000\000\000\015>\000\000W\150\000\000\000\000\014P\0170X\"\000\000\000\000\000\000X4\014.X@\000\000\014.\000\000XR\014.\000\000Xj\014.\014.\000\000\000\000\014.\000\000\000\000X\222\000\000\014.X\252\000\000\014.\015\178\000\000\011.\000\000\000\000\000\000\000\000\000\000Rv\000\000\000\000\000\000\000\000\014.R\218\000\000\000\000\000\000\000\000\000\000\000\000\000\000\014.\000\000\006\n\015.\000\000\000\000\000\000\015\000\017@\014L\000\000\b\228\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001d\000\000\000\000\000\000\000\000\016RY\014\000\000\000\000\000\000\000\000\014.\000\000\000\000Q:\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015\\\017dY\154\000\000\000\000\000\000Y\180\015TY\202\000\000\015T\000\000Y\214\015TZD\015T\015T\015T\000\000Zh\000\000\015Ta\246\007\218\000\000Z\130\000\000\015T\016\186\000\000\000\000\000\196\000\019\017\132\016\014\000\000\016\188\015\170\015\206\017\164\015\220\016\004\016\014\016$\017\206\011\130\0078\016\004\016V\016(\017\244\016\176\017*\000\0002\\&&\026\154\000\000\016x\000\000bX\007\218\000\000\000\000\000\000\000\000\016\220\017\160\017@\017\250\017\2322\156\016\004\017\142\017\194\018(\012(\0078\017\150\017\214\019\014\000\000\000\000\000\000\000\000\007\144\000\000\t8\011$2\252\018@\018*\012\140\018J\018\146\018\142\018j\018\182\016^\017\1863T\018v\018\204\018\160\018\130\018\228\000\016S\004\015T\018\224\018\170\019\022_\176\019p\000\000S>\015Tb\150\007\218\019b\000\000\000\000\000\000\000\000O\252\019X\019\220\000\000\000\000\017\006\018\234\019X\0198Z\162\015T\019@\019r\019\\Z\172\015T\020\000\019*\000\000\000\000\000\000\000\000\000\000\020\178\011\170\000\000\000\000\000\000\019\128\019|\012\238\0078\bN\000\000\000\196\000\000\000\000\000\000\000\000\000\000\000\000\000\000&&\000\000b\178\007\218\020\n\019\134\019\130\019\206\000\000\021\n\000\000\000\0003\130\019\140\019\148\020J3\194\003\b\000\000\000\000\000\000\000\000\026\132\000\000\000\000\000\000\002\182\020T\019\144\020\004\021.SH\015T\021\168\000\000\021\190\019\148\020\012_\204O\252\020(\000\000\0202\021\230\019\162\020R[\020\015T\021\254\000\000\022\020\000\000\000\000\000\0003\218\027\210\000\000\000\000\000\000\000\000\019~\022T\000\000\000\000\019\128\023\012\000\000\019\1404\028\019\1404z\019\140\000\000$6\000\0004\232\019\140\023:\b\162\023^\000\000\000\0005\000\019\14052\019\1405V\019\1405\160\019\1405\248\019\1406\014\019\1406L\019\1406\164\019\1406\248\019\1406\254\019\1407\152\019\1407\170\019\14088\019\1408v\019\1408\136\019\1408\142\019\1408\228\019\1409f\019\1409\232\019\140:\006\019\140\020XSh\025\224O\252\020Z\000\000T\018\"\012\000\000\023h\000\000b\196\000\000\007\218_\252\000\000\007\218b\214\007\218\000\000\0242\000\000\000\000\000\000Tv\000\000\000\000\000\000\000\000\000\000\014.\000\000\000\000c\"\000\000\007\182\000\000\000\000_\252\020p\000\000cB\007\218\024\136\000\000\000\000c^\007\218\024\142\000\000\000\000\024\222\000\000\000\000\000\000c\154\007\218\024\228\000\000\019\190\025\184\000\000[ \000\000\015T[\146\000\000\015T[\220\000\000\015T\021p\000\000\000\000\000\000\000\000\000\000[\244\015T\t\170\000\000\000\000\000\000\019\140\025\232\020L\000\000\000\000\0262\000\000\026:\000\000\000\000\020Z\020x[\254\015T\026\242\020\\\027\022\000\000\027D\000\000\000\000\020x\020\140\027\146\000\000$\234\000\000\000\000\000\000\000\000\000\000\021\178\011\218\000\000\020\154\020\148\r`\0078\b\152\000\000\000\196\000\000$\234\000\000\000\000\000\000\020\160\020\162*T\000\000,\144\000\000\000\000:::D\004B\000\000\000\000\000\000\000\000.B\000\000\000\000\000\000\003l\027\164\000\000\000\000\000\000\000\000:\148/\228\000\000\019~\028\000\000\000\019\128\028n\000\000\020\166;&\020\166;Z\020\166\000\0001x\000\000;\180\020\166\028\184\n@\029\014\000\000\000\000<\012\020\166<\018\020\166<0\020\166<`\020\166<\190\020\166<\240\020\166=j\020\166=\170\020\166=\200\020\166=\250\020\166>D\020\166>V\020\166>t\020\166? \020\166?N\020\166?\162\020\166?\250\020\166@D\020\166@N\020\166@\222\020\166\020\166\029&\000\000\000\000\000\000@\240\020\166\000\000\000\000\000\000\000\000A:\020\166\000\000\000\000A\168\020\166\000\000\000\000B\000\020\166\000\000\000\000\000\0002t\000\000\000\000B.\020\166\000\000\000\000B`\020\166B\142\020\166\000\000\000\000B\188\020\166C\130\020\166\000\000\000\000C\160\020\166\005*\029X\000\000\000\000C\222\020\166\029\198\000\000\000\000D\028\020\166D.\020\166\000\000DL\020\166\000\000\000\000D\206\020\166\000\000E.\020\166E\\\020\166\000\000E\170\020\166E\176\020\166\000\000F\b\020\166\000\000F\\\020\166\000\000\001\206\000\000\000\000\020\166\020\166\000\000F\180\020\166\000\000F\186\020\166\000\000\000\000\000\000\000\000\029\168\000\000\000\000\000\000\000\000\020\166\030\004\000\000\030r\000\000\000\000\000\000\000\000\021\208\000\000\000\000\000\000\012\248\000\000\001X\000\000\005vc\192\000\000\007\182c\226\000\000\007\182d&\007\182\000\000\021\144\000\000\001|\000\000\000\000\000\000\000\000\000\000\000\000\020\178\000\000\030\188\000\000\000\000\000\000\000\000\031\018\000\000\000\000\000\000\000\000\021\240\000\000\000\000\000\000\018P\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000O\252\021\132\000\000;\144\rh\004\244\031*\000\000@\000\000\000\000\000\000\000B\018\000\000\000\000\031\\\000\000\000\000\000\000\000\000S\172\000\000\000\000\000\000\000\000\000\000\000\000\031\202\000\000\000\000\000\000G\b\020\166\000\000\000\000\000\000\000\000G\014\020\166\000\000\000\000G6\020\166\000\000\000\000Gf\020\166\000\000\000\000\000\0005n\000\000\000\000H\018\020\166\000\000\000\000H\024\019\140Hf\020\166\000\000\000\000Hp\019\140H\148\020\166\000\000\000\000H\196\019\140\005x \b\000\000\000\000H\236\019\140 8\000\000\000\000I\196\019\140I\206\020\166\000\000I\242\019\140\000\000\000\000JJ\020\166\000\000J\170\019\140J\216\020\166\000\000K,\019\140Kj\020\166\000\000K\186\019\140\000\000K\216\019\140\000\000\006\b\000\000\000\000\019\140\000\000L6\020\166LZ\020\166\020\166\000\000L\164\020\166\000\000L\200\020\166\000\000\000\000\019\190 v\000\000\000\000 \180\000\000T\144\000\000\000\000\000\000\000\000\000\000\021\014 \228\000\000!\"\000\000\000\000\000\000!\144\000\000\000\000!\194\021\016!\218\000\000\"0\000\000\000\000\000\000O\252\021\174\000\000\\\218\014\220\004\244\"H\000\000]4\000\000\000\000\000\000]d\000\000\000\000\"z\000\000\"\232\000\000\000\000\000\000\000\000T\180\000\000\000\000\000\000\000\000M\018\019\140M6\019\140\019\140\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\019\140\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\020\172\014\242\0078#&\000\000\021*\020\188\000\000\tl\b\214\000\196\015\158\0078\000\000#V\000\000\n\166\000\000\021>\020\190\021>\021j\020\222\000\000#\148\000\000\020\250\022*T\206\011\024\000\000\020\166\000\000\022^\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\020\166\000\000\000\000\000\000\000\000$L\000\000\000\000\000\000\000\000\000\000\000\000\021\004\015\172\0078#\236\000\000\021\134\021<\000\000\n\236\000\000$\002\000\000\021\138\021L\021\132\021\184\021h\000\000$\242\000\000\000\000%&\000\000\000\000\000\000%<\000\000\011\198\012\236\000\000\000\000\000,\000\000\000\000\000\000\000\000\000\000\000\000d>\007\182\000\000\022\216%\184\000\000\000\000%\202\000\000\001|\021\234\022\154\000\000\000\000Q|O\252\022\224\000\000U@%\220\000\000\000\000&\148\000\000\000\000U\134\000\000\000\000\001\244\022\226\000\000d`\007\218&\194\000\000\000\000d\142\007\218\000\000'\022\000\000\007\218\000\000\r\022\000\000\000\\\000\000\000\000\000\000\000\000\000\000\000\000\012V\022~\000\000\000\000d\174\007\182\000\000\007\182\000\000]zC\206\022\236\000\000d\202\007\218'T\000\000\000\000'\166\000\000\000\000\011\238\004\002\012\156\004\238\r\002\005<\022~\021\246\017\128\007\224\000\000\022\128\022\000\023\188\000\000d\220\007\218\023\024\023\026\000\000\r\182\000\000\022\158\022\012\022\156\022\208\001\220\000\000\000\000\000\000\000\000\000\000\022\016\014\238\000\000\022\020\015`\000\000\n\140\022\198\022:\004\150\005\208\t\000\b\020(\000\023\166\015\194\000\000\000\000\023\164\005\174\006x\000\000\000\000\000\000\000\000\t\240\024\n(>\023\188\015\200\000\000\023\202\016\028\000\000\000\000\023\220\006\\\006\230\000\000'f\023\"\0232\022H\023\170\016\220\000\000\022V\023\192\016\230\000\000\023^\022\142\000\000\003\248\023\250\018>\000\000\023\252\000\000\018\200\000\000\n\136\000\196\019\n\000\000\006\028\000\000\000\000\000\000\n\184\000\196\023\230\022\148\000\000\000\000\014&\003\160\023\242\000\000\000\000\023\180\022\150\014\140\005\174\000\000\023\184\022\158\023\198\022\208\023\226\023\232\022\192\025:\000\000\024\016\003\018\000\000\000\000\000\000\000\000\001\006\022\238\023\238e,\007\218\000\000\007\146\023\028\024\152\000\000\000\000\000\000\000\000\000\000\000\000eH\007\182\000\000\023(\024\228\000\000\000\000\000\000\000\000\000\000\000\000J\024\0194\000\000\rN\006(\024\030\0236\025j\024<\000\000]\148\003f\023T\024\028\002\\\023d(\144\019p\000\000\023n\023t\004\160\023\132\024(\t4\023\1408\178\007\218eZ\007\182\020.\000\000\000\000\000\000\000\000\020Z\000\000\000\000\t\128\000\000\023\142\000\000\006\220\023\220\r\216\023\226\025\028U\160\020\240\000\000\023\242\024\012\024\200\000\000\t\164_\162\000\000\011\134\000\000ej\007\218\007\218\024,]\196^\030\012\186\024,\r\202\000\000\005|\001\206\000\000\000\156\000\000\000\000\000\156\000\000\000\000\000\156\024\212\000\000\015\138\000\156\025<U\222\021X\000\000\000\156\000\000\000\000\000\148\0248\024T\007\172\024:\003z\000\000\000\000\024@\024H\0256\000\000\006\250` \000\000\0040\000\000\000\000\000\000\000\000\000\000\000\000\n\024\000\000\025H\000\000\bd\n\024\n\024\000\000\024N`<\021\130\000\000\000\000\000\000\000\000\021\198\000\000\000\000\t\186\000\000\000\000\007t\000\000 \220\002\006\007\218\000\000'f\t\228\000\000(\234\000\000\000\000\000\000\000\000\000\000\n\024\000\000\000\000\000\000\000\000\000\000\000\156\000\000\000\000\021\202\000\000\016\230\006\204\021\248\000\000\000\000\000\000\000\000\021\186\000\156\000\000\000\0003&\000\000\000\000\000\000\023\220\024Z\024t\025f\000\000\023\184`d\000\000\011\252\000\000\024z^t^\190\0248\024,\0276\000\000/\160\006\b\000\000\024\228\000\000\024\228\000\000\000\000\024\228\025\172\000\000\030\238\024\228\024\2283f\000\000\0120\000\000>\186\000\000\024\138\024\144\025\176\000\000\b\208\000\000`\138\000\000\011\208\000\000\000\000\000\000\000\000\000\000\000\000\012\180\000\000\025\182\000\000\n0\012\180\003@\000\000@\148\014\"\000\000B\134\000\000\000\000\000\000\000\000\000\000\012\180\000\000\000\000\000\000\"v\024\228^\212\000\000\022\140\025\156\024\148\026\152\025r\000\000_\004\022\206\025\196\000\000\000\000\000\000M&\016\004\000\000\000\000\000\000\000\000\000\000\019~\000\000\019\128\022\240\000\000\025\224\024\220\nF\000\000\026\194\026z\023\132\026\b\000\000\000\000\000\000\000\000\000\000\023\162M\188\000\000\000\000\000\000\019~\000\000\019\128\000\000\000\000\000\000\012\180\026\024\024\226\027R\026$\000\000\000\000\r\016\r\198\026d\000\000\000\000\024\230\027r\026L\000\000\000\000O\004\023\204\026\148\024\244\027\156\026l\000\000\000\000a\b\024,\026\202\000\000\000\000\000\000\\:\000\000\000\000\000\000\000\000\000\000\000\000\024D\000\000\026\254\000\000\0276\024\254\011z\000\000\000\000(\196\027\190\024J\027J\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\218\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\026\254\025\030\018\018\0078\000\000\015\020\000\000\000\196\000\000\000\000\000\000\0286\000\000\000\000\000\000\000\000\020\166\000\000\000\000\0158\000\000\000\196\000\000\016\n\000\000\000\196\000\000\016\214\000\196\000\000\0252\003l\000\000\0182\000\000\tB\n\212\000\000\tB\000\000\000\000\018n\011\152\000\000\000\000\000\000\000\000\000\000\000\000\000\000\tB\000\000\000\000\018\130\011\152\000\000\000\000\0078\024\140\000\000\000\000\012\168\025z\027\182\0256\000\000\r\148\025\178\027\202\000\000\000\000\000\000\000\000\015T)\022\000\000\000\000\000\000\000\000\000\000\028T\000\127\000\000\000\000\000\000\000\000\000\000\000\000\000\000\027\156\027\208\001\220\rf\000\000\000\000\000\000\017\014\006\240\000\000\006\240\002\158\000\000\000\000\000\000\000\000\000\000\025N\000\000\002\166\000\000\017\250\006\240\006\240\025Z\000\000\b~\000\000\000\000\000\000\000\000\000\000\000\000\000\000\027\212\017\160\025\\\000\000\025h\000\000\012$\028\232\028\172\025\190\000\000\000\000\028\166\002z\t\198\000\000\t\244\028\000\028 \025l\0186\015\178\000\000\025r\018\170\016\004\000\000\028:\028D\025\132\028l\028\236\018\148\011\152\025\198\000\000\025\150\000\000\016\162\019\006\tB\019\236\000\196\0194\tB\025\204\000\000\016\210\000\000\000\000\017L\025\242\028\154\025\164\000\000\018Z\0268\028\160\000\000\000\000\028X\025\240\029,U\2522\162`\220\028\238\000\000e\170\007\218)J\000\000\000\000e\254\007\218)\182\000\000\000\000*\006\000\000\000\000\000\000f\022\007\218*$\000\000\019\190*\166\000\000\026\\\000\000\028n\025\244\029FV\142\026\134\000\000\028\132\025\246\019\224\016\022\000\000\028\138\025\254\029\204\000\000fV\007\218\029,\029.\000\000\026\158\000\000\028\174\026*\028\160\028\214\018\196\026:\026\200\000\000\026|\026\202\000\000\028\204\028\216\026\140\030\024\028\234\000\000\000\000\014\200\r\208\029*\026\160\030 \028\248\000\000\000\000\015\192\014\020\029@\000\000\000\000\026\168\030:\029\n\000\000_\018#\186\000\156fd\000\000%\238\000\156_^\000\000\026\206\029F\026\180\030@\029\016\000\000_v\027@\029L\000\000\000\000\000\000NR\028n\000\000\000\000\000\000\000\000\000\000\028\214\026\238V\206\027B\000\000\000\000\000\000\000\000\028\222\000\000\027z\000\000\029h\0278\012z\000\000\030@\029\252\027\132\029z\000\000\000\000\000\000\000\000\027\138Nf\000\000\028\214\000\000\028\222\000\000\000\000\000\000\027\152N\190\000\000\000\000\tB\011\152\000\000\000\000\014.\000\000\000\000ff\000\000\007\182\000\000\000\000\000\000\000\000\000\000\000\000\000\000*\228\000\000\000\000+\b\000\000\000\000\000\000+\218\000\000+\200\000\000+\250\000\000\020\166\000\000\000\000\0208\000\000\000\196\000\000\021\018\000\000\000\196\000\000\021R\000\196\000\000\016\252\000\000\027J\019\250\018\016\000\000\027\156O\b\000\000\000\000\000\000\000\000\000\000\000\000\029\244\0038\029\030\bf\018\250\027\\\000\000\0154\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\198\019f\027d\000\000\014\152\024\n\000\000\029\248\003\180\017z\000\000\000\000\000\000\027h\000\000\027\188\012>\000\000\000\000\000\000\000\000\000\0007\144\000\000\000\000\017\146\r6\000\000\000\000\007\218\000\000\006\238\r\250\000\000\000\000\000\000\029\"\027\208\029T\029\"\000\000\000\000\000\000\007\182\000\000\027\212\019\140\000\000\000\000\000\000\000\000\007\182\003\024\004r\020 \000\000\000\000\000\000\000\000\020\150\000\000\000\000\000\000\000\000\000\000+\172\030\030\027\158\000\000\000\000\030\018\007\136\b\248\000\000\000\000\000\000\000\000\020\186\028\232+\222\030\"\028 \000\000\000\000\030\022\b0\nz\000\000\\\158\029P\029R\027\192\029\204\028\"\000\000\027\230\029\212\028J\000\000\029l\027\254\000\000\014\232\029\226\028L\000\000\029\226\000\000\028l\000\000\021\236\011\152\028\130\000\000\015\232\000\000\000\000\000\000\022\236\014\166\029\192\028\002\000\000\000\000\023\018\014\180\029\196\000\000\000\000\029z\028\014\023\020\014\220\000\000\029\128\028\018\029z\028\214\029\142\0284\030\208\029\160\000\000\000\000f\168\028\150\029\222\028H\030\214\029\166\000\000\000\000f\170\028\176\029\234\000\000\000\000\000\000\\\186\000\000\000\000\000\000\000\000\000\000\000\000\028\234\000\000\029\248\000\000\029\254\028T\r\\\000\000\000\000,\194\030\132\028\238\030\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\011\152\000\000\000\000\029.\000\000\019\140\000\000-6\000\000\000\000-L\000\000\000\000-\144\000\000\000\000\000\000\000\000\000\000\0078\000\196\000\000\016\240\000\000\000\000\000\000\000\000\000\196\000\000\017N\000\000\000\000\000\000\029\146\n\182\000\000\000\000\000\000\000\000-\234\000\000\000\000\029\190\028\150\020 \0078\000\000\023.\000\000\000\196\000\000\030\228\000\000\000\000\000\000\000\000\000\000\000\000-p\000\000\000\000\000\000.H\000\000.\150\000\000.\238\000\000\000\000.\244\000\000\000\000\000\000\000\000/B\000\000/H\000\000\000\000\000\000\000\000\000\000\000\222\000\000\000\000\000\000\011\\\000\000\007\218\000\000\012\n\000\000\000\000\000\000V\176\015T\000\000\000\000\006v\029\228\000\t\000\000\000\000\000\000\000\000\000\000\000\000\020\178\000\000\000\000\000\000\000\000O6\000\000\029<\000\000\000\000\000\000\000\000\007b\t\016/\15804\000\000\000\000\029J0\160\000\000\000\000\000\000\029P0\234\000\000\000\000\000\000\000\000"), (16, "\tB\n#\004\024\004\025\007J\002;\001 \012\031\011\150\002P\012m\004\025\001 \002_\001*\002P\004@\tC\012S\002;\tE\012\024\000P\003o\004A\003#\002j\002_\012\004\tF\t\\\002A\007S\002j\002\210\011\001\001 \004e\011M\002P\0007\002\210\003p\003\141\001 \003r\003s\001)\0027\012N\001T\001T\002c\011^\tB\007\135\004\024\004\025\tG\001 \000P\001@\002P\002D\001 \006\215\002c\001%\002d\000;\004@\tC\t[\002\214\tE\001\166\0007\001W\004A\001T\002\214\001\195\002d\tF\t\\\003\142\tH\003\143\003\246\002\215\004g\004e\n'\n(\tI\001T\002\215\000T\b\198\001&\004\028\000@\001T\n)\n*\001h\ta\004o\012n\001\195\003\150\000U\tG\tb\n+\007\145\012L\001\179\001\181\001\183\003x\007N\001W\t\133\006\218\006\219\007W\0007\tc\001W\002;\001 \002\222\n1\002P\001P\001\166\tM\002_\012U\tH\tO\001Y\001Y\004g\002h\001T\002e\tI\002s\t\134\012W\t\135\tY\004\028\000\147\004i\0027\004s\b\200\ta\004o\000\147\000U\004y\003$\004k\tb\tZ\002\224\b\217\001Y\tB\001W\004\024\004\025\003\136\002c\001\182\001\181\001\183\t\136\tc\000U\003\152\004{\003v\b\203\004@\tC\t[\tM\tE\002d\001Y\tO\004A\001b\001b\000?\000:\tF\t\\\001 \001\198\002\025\002P\tY\t\137\004e\004i\tB\004s\004\024\004\025\005\248\003u\t\138\004y\t\139\004k\t\168\tZ\001k\001\199\b\005\001b\004@\tC\t[\tG\tE\001\201\006\006\012#\004A\0009\t\160\001Y\004{\tF\t\\\b\206\000D\t\024\005\023\005\024\b_\004e\001b\002A\000G\001\204\b\171\0029\b\211\002e\b\208\tH\002\153\t\141\012Y\004g\ba\t\143\t\145\tI\005\212\001k\tG\b\133\001T\004\028\011T\001U\001k\t\156\000M\ta\004o\001T\0007\002o\001U\003\000\tb\001\134\000=\bb\n\015\002^\t\157\001 \001b\002?\002P\0027\tH\001W\t\028\tc\004g\003\000\000P\007\128\tI\001\136\001W\007x\tM\t\029\004\028\b\164\tO\tg\000\150\005\249\ta\004o\001k\007\130\000Z\000\149\007{\tb\tY\001\207\000E\004i\tB\004s\004\024\004\025\005\026\005\249\001g\004y\002\235\004k\tc\tZ\011\142\000H\005\027\001g\004@\tC\t[\tM\tE\007\187\002\159\tO\004A\002X\002\235\003v\004{\tF\t\\\002\153\001u\012\023\001Y\tY\004,\004e\004i\tB\004s\004\024\004\025\001Y\001T\005\214\004y\002\168\004k\001e\tZ\011,\n9\000U\004,\004@\tC\t[\tG\tE\000U\001\195\0116\004A\002\233\000N\002e\004{\tF\t\\\005(\001W\002Y\004\024\004\025\000U\004e\002\162\005)\000\151\005*\001 \001{\n\018\001%\007\190\tH\001\210\001\211\001b\004g\001{\004-\007~\tI\006\145\b\223\tG\001b\001\145\004\028\t\252\b\197\n\019\001Y\001\234\ta\004o\001T\001\214\004-\001U\000\153\tb\001\134\001k\b\030\001\133\n\023\006\146\001\207\000V\b_\002\159\001k\tH\001\133\000U\tc\004g\006I\000[\011o\tI\001\136\001W\001Y\tM\ba\004\028\t\022\tO\001\148\n'\n(\ta\004o\011A\001 \000\155\002n\002P\tb\tY\n)\n*\004i\tB\004s\004\024\004\025\004\027\006W\bb\004y\n+\004k\tc\tZ\0119\0027\004\028\001g\004@\tC\t[\tM\tE\002\162\012%\tO\004A\n\026\000U\n\029\004{\tF\t\\\001T\001u\000\199\001b\tY\000U\004e\004i\tB\004s\004\024\004\025\001Y\000\195\006\148\004y\n \004k\002\224\tZ\000\206\011R\001\210\001\211\004@\tC\t[\tG\tE\001k\000P\t\247\004A\005\140\011r\011s\004{\tF\t\\\004i\001\229\b\166\005\023\005\024\001\214\004e\003\000\004j\000\213\004k\011E\011F\011\136\bd\003\003\tH\011v\b\248\000\156\004g\001{\011G\011H\tI\005\212\005\154\tG\001b\001T\004\028\t\166\b\197\011I\001Y\b\011\ta\004o\001T\003\006\t\208\001U\002e\tb\001\134\002\203\000\219\b\250\001 \005\213\007\215\002P\t\210\001Y\001k\tH\001\133\b\170\tc\004g\000\221\b\251\007\253\tI\001\136\001W\b\253\tM\b\171\004\028\t\b\tO\b\178\011E\011F\ta\004o\t\226\011o\000\227\t\223\000U\tb\tY\011G\011H\004i\tB\004s\004\024\004\025\005\026\002\204\b\166\004y\011I\004k\tc\tZ\001f\002^\005\027\001g\004@\tC\t[\tM\tE\001b\001\166\tO\004A\007\255\t\210\000\230\004{\tF\t\\\001T\001u\0007\001Y\tY\011\\\004e\004i\tB\004s\004\024\004\025\001Y\000\239\005\215\004y\001c\004k\t\225\tZ\011\000\003\000\002\224\t\223\004@\tC\t[\tG\tE\003\015\002\149\t\164\004A\001\193\001\181\001\183\004{\tF\t\\\005(\001T\b\169\005\023\005\024\002j\004e\002\219\005)\006\002\005*\011r\011s\002\210\003\006\002j\tH\002\216\b~\001b\004g\001{\000\214\002\210\tI\005\212\001\155\tG\001b\011\131\004\028\t\162\001\131\011v\001Y\000\244\ta\004o\001T\0118\t\225\001U\000\247\tb\001o\002z\000P\b\128\001 \b\130\007\201\002P\002\214\001Y\001k\tH\001\133\0007\tc\004g\005\192\b\129\002\214\tI\001t\001W\b\131\tM\002\215\004\028\b\214\tO\006\003\004\024\004\025\ta\004o\007\210\002\215\0007\000\252\000\255\tb\tY\000U\002\224\004i\tB\004s\004\024\004\025\005\026\005\209\001Y\004y\006\145\004k\tc\tZ\006}\t\255\005\027\001g\004@\tC\t[\tM\tE\001b\001\166\tO\004A\002;\002\149\002f\004{\tF\t\\\001Y\001u\002_\001\154\tY\001;\004e\004i\tB\004s\004\024\004\025\001Y\006\142\005\215\004y\001m\004k\002;\tZ\002<\012q\012r\b\018\004@\012t\002_\tG\tE\007K\001b\t_\004A\001\218\001\181\001\183\004{\tF\012v\005(\001T\002c\002;\004\027\002]\004e\007\227\005)\001\166\005*\002_\007\213\007\214\004\028\003\000\tH\001\197\002d\000\217\004g\001{\b\000\003e\tI\002\130\002c\tG\001b\002\224\004\028\002\152\001\131\001\017\001\214\001Y\ta\004o\001T\002\166\001\026\001U\002d\tb\002\141\006\147\t\254\003\006\001$\002^\002c\001\226\001\181\001\183\001k\tH\001\133\003\023\tc\004g\001\239\001#\002\224\tI\002\143\001W\002d\tM\001\148\004\028\004i\tO\007\255\004\024\004\025\ta\004o\000\220\004j\012y\004k\bd\002\030\tY\002\224\007\211\004i\tB\004s\004\024\004\025\012\133\b\221\001Y\004y\012<\004k\tc\tZ\007\213\007\214\012}\001g\004@\012~\001T\tM\tE\b\194\t\234\tO\004A\004\024\004\025\007\212\004{\tF\012\134\002\226\001u\002\149\001\214\tY\001\166\004e\004i\n\211\004s\005\023\005\024\001Y\002\159\001W\004y\005\246\004k\b\166\tZ\004*\000U\007\228\006\007\0053\n\212\012\020\tG\n\214\b~\001b\002\159\0054\002j\0007\002k\004{\n\215\n\252\011\145\007\007\002\210\003\029\004\027\002\027\005B\006\240\001\231\001\181\001\183\001T\007\212\0019\004\028\000\231\tH\001\203\001=\b\128\004g\001{\003\030\003\031\tI\003 \003!\n\216\001b\001\236\004\028\007K\001\131\b\129\b\170\b\133\ta\004o\b\131\012\138\001Y\002\214\b\147\004\027\n\211\b\171\005\023\005\024\001T\b\172\000\235\000\237\002\224\006\011\001k\n\217\001\133\002\215\tc\005D\0053\n\212\n\249\n\218\n\214\004*\td\tM\0054\005\027\004i\tO\002\224\n\215\n\252\n\246\n\225\000U\004j\b\184\004k\005B\n\255\tY\011\159\005\249\004i\b3\004s\004+\003%\b\187\011\148\011\149\004y\001b\004k\n\248\tZ\001J\003&\001M\n\216\001Y\b\187\002x\n\229\b\189\007\168\004i\n\231\0007\000U\bd\011v\004{\002j\004j\002\208\004k\b\189\001k\n\241\001S\002\210\005(\b\190\005L\002\225\001\\\n\217\007K\003k\005R\005D\005*\001x\n\242\n\218\b\190\001Y\002;\002|\004(\005\027\tB\007\207\004\024\004\025\002_\n\246\n\225\002\188\001\127\005T\002$\003:\n\255\001b\012}\b\166\004@\012~\002\214\003Z\tE\003$\004\024\004\025\004A\001\132\003\194\n\248\004+\tF\012\129\011\148\011\149\002;\002\215\005%\n\229\004e\001\147\002z\n\231\002_\n$\002c\005\246\003p\0041\007K\003r\003s\001b\006\007\n\241\011v\001\171\005(\001\190\005L\tG\002d\001\205\005\023\005\024\005R\002;\005*\007\001\n\242\001\209\t\024\b\170\n%\002_\002\235\006\237\tB\002z\004\024\004\025\001Y\002c\b\171\n&\t\175\005T\b\177\tH\006\164\004\245\004\246\004g\004@\tC\001Y\tI\tE\002d\t\221\t\233\004A\004\028\004,\002\149\011\146\tF\0112\ta\004o\001\215\012\132\004\027\002c\004e\003\150\n\211\001T\005\023\005\024\b\201\001T\006\011\007\224\001U\003x\t\028\001\237\004\127\002d\tc\b\\\0053\n\212\011\147\tG\n\214\t\029\002\224\tM\0054\t\030\011.\tO\001W\n\215\n\243\007\004\001W\011\016\006\172\005\026\007K\005B\005\249\tY\001y\b_\004i\004-\004s\005\027\001 \tH\tR\002P\004y\004g\004k\bc\tZ\tI\002\235\ba\n\216\0007\002\149\004\028\004i\002\165\001\243\003\136\001\250\ta\004o\001g\004j\004{\004k\003\152\0115\003v\t\133\007K\004\250\b_\007\007\002\236\bb\b\191\004,\001T\n\217\b~\001U\tc\005D\t\222\n:\001Y\n\218\ba\001\253\001Y\tM\001Y\005\027\005(\tO\t\134\t\159\t\135\n\246\n\225\b\187\005)\002\n\005*\001W\n\247\tY\001T\b\128\004i\001U\004s\bb\n%\005\023\005\024\b\189\004y\007K\004k\n\248\tZ\b\129\t\024\n&\b\179\t\136\b\131\0053\n\229\002\022\b\138\004-\n\231\001W\b\190\0054\001{\004{\002\153\001b\001g\0127\002\028\001b\n\241\004\024\004\025\005(\005B\005L\005\023\005\024\t\137\000\240\002\227\005R\002\149\005*\002;\n\242\007\252\t\138\000\245\t\139\0053\001k\002_\006\236\001Y\001k\001g\001\129\0054\011\160\002'\t\210\005T\t\028\t\187\007\b\001T\t\160\002;\001U\b\004\005B\002)\002\223\t\029\b\173\002_\001 \t#\t\148\002P\000\195\002\224\0023\001Y\012'\t\214\005D\011\147\t\223\t\141\002c\000\248\001W\t\143\t\145\005X\005\027\005\023\005\024\0078\000U\001{\005F\004o\0028\t\156\002d\002I\001b\000U\b_\0053\t\161\007\007\002c\002\159\002\246\003M\004\027\0054\t\157\005\023\005\024\005D\005I\006\173\ba\012[\004\028\001g\002d\001{\005B\005\027\001k\0053\001\133\007\021\001b\005F\004o\004\024\004\025\0054\t\225\004\024\004\025\002\235\007\007\005\225\0007\bb\005(\000U\005L\004@\005B\001Y\000\253\004@\005R\005I\005*\004A\001k\n6\001|\004A\007K\012H\002\162\001T\003\184\012_\t\012\004,\004e\002\149\001T\000\195\004e\005T\001\018\002K\004i\005D\004\024\004\025\002R\005(\002\153\005L\004j\002\154\004k\005\027\002\163\005R\001W\005*\004@\005F\004o\003M\001 \001{\n\234\002P\004A\005D\004\024\004\025\001b\012a\012A\t\024\012\\\002\156\005T\005\027\000U\004e\002T\005I\007M\005F\004o\007\140\002W\004g\002\235\004-\006\233\004g\004\024\004\025\000P\0007\001k\004\028\001\133\002[\007\143\004\028\000U\004l\004o\005I\004@\004l\004o\005(\bv\005L\002\167\003\215\004A\001Y\004,\005R\002b\005*\012=\001Y\004\024\004\025\002\209\004p\002\181\004e\001Y\004p\011Z\001\024\004g\005(\002~\005L\004\024\004\025\005T\t\027\002\159\005R\004\028\005*\005\246\002\224\0007\002\153\004l\004o\004@\006\007\001\027\004i\002\134\004s\004\027\004i\004A\004s\002\180\004y\005T\004k\012*\004y\004\028\004k\007\159\b\243\004p\004e\004-\007K\006\b\001 \001b\011\245\002P\t\238\004g\001>\004{\001b\0007\001T\004{\002\235\002\176\002\149\004\028\004\024\004\025\bd\007K\002\162\004l\004o\004i\007\144\004s\th\001k\004\024\004\025\004@\004y\002\183\004k\002z\004\027\001\130\004%\004A\000U\004,\b~\004@\004p\012\016\006\011\002\171\004i\002\189\004g\004A\004e\004{\007\007\007L\004j\012\r\004k\t\024\004\028\004\024\004\025\002\191\004e\002\159\004l\004o\001\128\000U\002\235\b\128\004i\002\194\004s\004@\007\129\002\149\005\249\0007\004y\007\161\004k\004A\002\153\b\129\002\197\002\154\004p\012\n\b\131\002\202\t\031\001\166\b\135\005\"\004e\004-\004,\000U\002\224\004{\004i\001Y\001T\004g\001\175\t(\002\224\002\206\004j\002\156\004k\007K\t\028\004\028\004i\004g\004s\003o\002\162\004l\004o\t\243\004y\t\029\004k\004\028\011o\to\000U\001W\007\163\004l\004o\n\r\001\181\001\183\003p\003q\001\177\003r\003s\004p\002\213\004{\002\173\007K\002\167\004g\001T\002\149\011d\001U\004-\004p\007\179\002\244\001b\004\028\005\023\005\024\011{\011O\tp\004l\004o\001\166\000U\n\176\b@\004i\007\007\004s\0053\002\251\002\159\001W\b~\004y\003\169\004k\0054\004i\006+\004s\001T\004p\011\023\001U\002;\004y\b\n\004k\001\207\005B\001Y\001T\002_\001\206\004{\001\216\000U\n\184\001\244\003\t\003w\b\128\001\247\011j\001\181\001\183\004{\001W\001g\004i\003x\004s\011r\011s\007K\b\129\003`\004y\002\176\004k\b\131\007K\001\221\t\031\b\132\002\162\004\024\004\025\b\173\011|\011\137\002c\001\251\bi\011v\002;\001Y\b\017\004{\003\019\004@\007K\005D\002_\001g\001b\003\028\002d\004A\001Y\002\224\002\171\005\027\002\189\011\019\000U\003Y\000U\005F\004o\000U\004e\b\173\001\254\000U\002\235\003\136\005\023\005\024\003-\011\193\001k\001Y\b\166\003\137\0037\003v\011\199\001\210\001\211\005I\0053\002c\001Y\001{\002\224\011\185\005\023\005\024\0054\006\249\001b\003P\004,\000U\001\222\001\235\011\206\002d\t\172\001\214\0053\005B\002;\003d\t\183\007\192\002\224\005(\0054\005L\002_\004\024\004\025\004g\007F\005R\001k\005*\001\133\001n\002;\005B\t\197\004\028\000U\004@\001b\b\170\002_\004l\004o\004\024\004\025\004A\002\209\011\187\005T\001b\b\171\007C\011B\002\209\n\175\002\011\002\018\004@\004e\007K\004-\002c\002\235\004p\001k\004A\005D\002\224\003g\002\235\002\224\007.\t\221\002\209\007\195\006\199\005\027\002d\004e\002c\002\149\011C\005F\004o\005\023\005\024\005D\007\003\005\023\005\024\004,\004i\011D\004s\0071\002d\005\027\004,\0053\004y\007K\004k\005F\004o\005I\003\135\0054\b~\b\166\007K\006\228\004g\002\224\t\221\003\139\nA\007+\000U\000U\005B\004{\004\028\t\221\007\206\005I\011\188\007\220\004l\004o\004\024\004\025\004g\005(\003\149\005\233\003\168\b\128\002;\003\173\t\201\005R\004\028\005*\004@\007G\002_\004-\004l\004o\004p\b\129\004A\005(\004-\005L\b\131\nE\007'\002\020\b\142\005R\005T\005*\b\170\004e\n\144\002\023\001T\007\223\004p\001U\003\177\005D\003o\b\171\011\187\005\026\004i\n\183\004s\t\222\005T\005\027\002\153\002c\004y\005\027\004k\005F\004o\005\023\005\024\003p\004\193\001W\003r\003s\004i\007\017\004s\002d\004\024\004\025\007/\0053\004y\004{\004k\002\224\002(\005I\002.\0054\002\224\003\182\004@\003\188\004g\007K\nX\bd\t\222\007$\004A\002\224\005B\004{\004\028\000U\007\030\t\222\001g\003\200\004l\004o\0026\004e\004*\005(\002;\005\233\t\204\005(\n[\005\023\005\024\005R\002_\005*\011e\005)\002\228\005*\002\232\002\149\004p\002\241\002\245\0053\001Y\003w\002\252\005\023\005\024\007\235\002\224\0054\005T\nZ\007\239\003x\000U\006\246\000U\012\027\002\159\005\023\005\024\005D\005B\011-\b~\003\205\004i\006\227\004s\002c\002\224\005\027\004g\0053\004y\nZ\004k\005F\004o\003\020\000U\0054\004\028\006\202\002\153\002d\002\235\n^\004l\004o\001j\006\243\003.\b\128\005B\004{\000U\001b\000U\005I\003h\000U\000U\006\205\012\"\007\031\bd\b\129\007\027\003\136\004p\007\167\b\131\002\162\004,\005D\b\220\003\137\003\140\003v\004\024\004\025\002\188\001k\002\159\005\027\011S\005(\004+\005\233\n\023\005F\004o\005\026\003\172\005R\nZ\005*\004i\n\017\004s\000U\005\246\005\027\007\023\002\224\004y\005D\004k\006\007\003\178\005\023\005\024\005I\000U\011C\005T\005\027\004*\002\235\004\024\004\025\000U\005F\004o\0053\011D\004{\002\224\001\132\004-\003\183\006\029\0054\004@\t\210\002\159\t\210\006\247\006\230\000U\005(\004A\005L\t\179\005I\005B\004,\006\220\005R\003\189\005*\004\024\004\025\n-\004e\000U\004\024\004\025\005(\t\211\0111\n@\t\223\003\213\t\223\004@\005)\004\027\005*\005T\004@\000U\005(\004A\005\233\003\214\003\230\006\011\004A\006\208\005R\nc\005*\007\246\006\193\002j\004e\t\218\004\024\004\025\002\162\004e\000U\002\210\t\210\002j\002\224\t\230\005D\004\024\004\025\005T\004-\002\210\002j\003\220\nL\004g\005\027\005\249\004\026\000U\002\210\004@\005F\004o\n\031\004\028\t\225\nD\t\225\004A\t\223\004l\004o\004+\003\229\006\182\003\233\002\224\nZ\003\232\002\214\004i\004e\n\023\005I\000U\000U\004g\t\210\004j\002\214\004k\004g\004p\003\236\003\235\002\215\004\028\007K\002\214\007\250\003\240\004\028\004l\004o\003\241\002\215\003\243\004l\004o\007\187\t\210\005(\nS\005L\002\215\t\223\003\244\004\024\004\025\005R\004i\005*\004s\004\027\004p\t\225\003\249\007K\004y\004p\004k\004\005\007\254\004\028\004g\nW\004\002\000U\t\223\0048\005T\003\250\004\024\004\025\004\028\004\n\n\161\004\024\004\025\004{\004l\004o\004i\b>\004s\000U\004@\004i\004\015\004s\004y\004@\004k\007\187\004A\004y\000U\004k\003o\004A\006\176\t\225\004p\011?\001\166\006\163\004\020\004e\000U\004\024\004\025\004{\004e\bN\005\023\005\024\004{\003p\004\193\004i\003r\003s\004$\004@\t\225\0047\t\210\004j\0053\004k\004i\004A\004s\000U\004?\004\027\0054\006\150\004y\002\235\004k\004\t\006>\004\014\004e\004\028\011x\001\181\001\183\005B\000U\n\143\007K\002;\t\223\nU\004\019\011K\002\235\004{\004g\002_\006 \004#\0110\004g\0046\004,\000U\004>\004\028\004M\011\156\004U\007K\004\028\004l\004o\001\166\004Y\004]\004l\004o\0121\000U\003w\004,\000U\004\252\004\251\004N\002;\004x\011#\004V\003x\000U\004g\004p\002_\002c\004i\005D\004p\004\175\004\024\004\025\004\028\b[\004j\t\225\004k\005\027\004l\004o\004\210\002d\004\244\005F\004o\011\128\001\181\001\183\004-\003o\006.\004i\004:\004s\004^\b`\004i\004\171\004s\004y\004p\004k\001\166\002c\004y\005I\004k\004-\003p\003\141\0061\003r\003s\005\t\002\224\002\153\003\136\000U\002\154\002d\004{\000U\004\243\005\020\003\137\004{\003v\005!\004i\001Y\004s\0069\005\002\005(\005-\005L\004y\005\b\004k\006\248\005\r\005R\002\156\005*\011\133\001\181\001\183\006\254\007\011\004\024\004\025\003\142\005\019\003\143\004P\006!\000U\004{\004\027\000U\005\023\005\024\005T\004@\007\014\002;\002\224\011'\004\028\005 \bm\004A\005,\002_\0053\000U\003\150\004R\007\018\002\167\005\023\005\024\0054\0070\004e\000U\003x\007K\0064\000U\006<\006=\004\024\004\025\0053\005B\000U\002;\005Q\011*\005\242\000U\0054\004\024\004\025\002_\004@\002\159\006%\000U\000U\0076\002c\006\004\004A\005B\006\025\004@\006(\007=\004a\007K\b\146\007K\004i\004A\000U\004e\002d\006\177\006\188\004c\004j\007@\004k\004\024\004\025\004g\004e\006\196\000U\006\253\003\136\b\183\002c\000U\007K\004\028\005D\004@\003\152\007\n\003v\004l\004o\002\175\002\149\004A\005\027\007\012\002d\007\r\002\162\004n\005F\004o\001T\007\019\005D\001U\004e\007\025\001o\000U\002j\004p\011\184\b\188\005\027\b\218\004g\000U\002\210\b~\005F\004o\005I\0075\002\171\007<\004\028\004g\001p\001W\007>\000U\004l\004o\007`\001\142\007?\004\028\b\222\004i\007\166\004s\005I\004l\004o\007\171\007[\004y\b\128\004k\005(\007\182\005L\007\191\004p\007\194\002\224\002\214\005R\004g\005*\007b\b\129\004\024\004\025\004p\001g\b\131\004{\004\028\005(\b\227\005L\002\215\007\199\004l\004o\004@\005R\005T\005*\007\233\004i\001u\004s\004A\004\024\004\025\007\237\002\224\004y\004r\004k\004i\001Y\004s\000U\004p\004e\005T\004@\004y\000U\004k\004\024\004\025\002\224\000U\004A\004\024\004\025\004{\t8\000U\004\129\000U\007\242\000U\004@\b\007\b\016\004e\004{\004@\b\021\004i\004A\004s\007f\007s\007\139\004A\004\128\004y\007\149\004k\000U\004\180\002j\004e\011\192\b\026\001{\000U\004e\t?\002\210\007\165\007\170\001b\000U\004g\007\172\001\131\004{\007\178\007\177\002j\002j\011\198\011\205\004\028\tN\007\181\b$\002\210\002\210\004l\004o\002\153\007\183\002;\002\154\0125\004g\001k\007\193\001\133\000U\002_\002\224\000U\000U\007\198\004\028\002\214\000U\b*\007\205\004p\004l\004o\004g\b5\007\209\002\224\002\156\004g\007\221\007\219\bC\002\215\004\028\000U\002\214\002\214\007\222\004\028\004l\004o\004\024\004\025\004p\004l\004o\bI\002\224\004i\002c\004s\002\215\002\215\007\226\bL\004@\004y\bd\004k\b\219\007\236\004p\bQ\004A\002\167\002d\004p\tV\007\232\004\191\bS\004i\007\234\004s\bV\be\004e\004{\000P\004y\000U\004k\t]\007\238\004\024\004\025\000U\004\024\004\025\004i\007\241\004s\002\159\000U\004i\002\224\004s\004y\004@\004k\004{\004@\004y\tz\004k\b\248\004A\002\224\bd\004A\002\224\007\245\004\214\007\249\b\143\004\219\000U\bj\004{\004e\b\r\000U\004e\004{\000U\b\139\b\012\004\024\004\025\004g\004\024\004\025\bd\b\015\b\250\b\020\000U\bd\bp\004\028\002\174\004@\000P\002\224\004@\004l\004o\002\162\b\251\004A\b\022\t\130\004A\b\253\b{\004\222\ts\t\003\004\228\b\025\b\152\b\155\004e\t\142\b\174\004e\t\153\004p\b\160\b\248\b\028\b\181\004g\002\171\b \004g\000U\t\004\b(\000U\001T\b/\004\028\001U\b:\004\028\bB\000U\004l\004o\b\237\004l\004o\b\245\bD\004i\bE\004s\b\250\t\235\000U\t \bJ\004y\t\017\004k\t:\001W\bT\001\151\004p\bk\b\251\004p\bq\004g\000U\b\253\004g\b\134\b\140\t\000\bd\000U\004{\004\028\000U\b\144\004\028\b\153\000U\004l\004o\000U\004l\004o\004\024\004\025\004i\000U\004s\004i\tQ\004s\001g\tj\004y\tt\004k\004y\004@\004k\000U\004p\t|\000U\004p\003o\004A\t\147\004\024\004\025\002\224\000U\004\231\004\220\000U\004{\000U\b\161\004{\004e\001Y\004\223\004@\t\178\003p\004\193\b\175\003r\003s\004i\004A\004s\004i\t\207\004s\t\241\004\255\004y\002\224\004k\004y\b\238\004k\004e\007K\004\024\004\025\n\027\007K\004\024\004\025\007K\000U\n\"\n.\000U\b\255\000U\004{\004@\n0\004{\n?\004@\000U\nC\t\239\004A\001{\000U\007K\004A\004g\005\003\nI\001b\t\005\005\005\t\018\001\158\004e\t!\004\028\nP\004e\000U\004\024\004\025\004l\004o\na\tA\003w\t;\t\244\000U\004g\000U\003o\t<\n5\001k\003x\001\133\nN\007K\004\028\nY\004G\bd\004p\t@\004l\004o\007\"\bd\bd\003p\004\193\tX\003r\003s\bd\007K\000U\tT\n_\000U\ni\tU\n\136\n\142\004\194\004g\004p\n\147\000U\004g\004i\tW\004s\004\024\004\025\004\028\007K\000U\004y\004\028\004k\004l\004o\tr\000U\004l\004o\004@\007K\n\158\003\136\004\024\004\025\nd\004i\004A\004s\n\162\003\137\004{\003v\005\012\004y\004p\004k\004@\004\027\004p\004e\007K\007K\n\133\007K\004A\004\024\004\025\004\028\003w\tk\005\014\tl\tq\000U\004{\000U\000U\004e\003x\004@\000U\n\165\004i\n\139\004s\tu\004i\004A\004s\n\170\004y\tv\004k\005\016\004y\n\155\004k\t\132\002\153\n\178\004e\002\154\000U\n\188\005\023\005\024\t}\t~\004\194\n\203\bd\004{\004g\005\023\005\024\004{\n\163\n\166\0053\n\201\007K\007K\004\028\004i\t\131\002\156\0054\0053\004l\004o\004g\004j\006\"\004k\003\136\0054\004\024\004\025\n\221\005B\004\028\005?\003\137\bd\003v\t\144\004l\004o\005B\007K\004p\000U\001T\004g\007K\001U\000P\007K\004h\005\023\005\024\000U\002\167\004\028\007K\000U\002\224\007K\004p\004l\004o\000U\t\155\0053\t\152\n\233\n\208\n\223\004i\001W\004s\0054\t\154\b\248\011/\t\177\004y\005H\004k\001\169\002\159\004p\005D\011@\005B\t\190\004i\011L\004s\011W\000U\005D\005\027\011V\004y\n\230\004k\004{\005F\004o\n\238\005\027\b\250\n\244\005\023\005\024\001g\005F\004o\004i\n\253\004s\0113\011\141\004\027\004{\b\251\004y\0053\004k\005I\b\253\007K\007K\004\028\b\254\0054\000U\002\170\005I\t\246\011Y\005K\011\165\001Y\002\162\000U\005D\004{\005B\t\245\005\023\005\024\007K\007K\000U\n\001\005\027\005(\000U\005L\000U\011\169\005F\004o\0053\005R\005(\005*\005L\007K\002\171\n\n\0054\011\174\005R\011\195\005*\n!\005Z\n/\007K\011\204\n3\011\209\005I\005B\005T\011\155\011\167\004i\007K\001{\n4\005\023\005\024\005T\n8\004j\001b\004k\011\213\005D\000U\007K\000U\005\023\005\024\0053\011\171\011\178\011\221\005\027\005(\nB\005L\0054\011\244\005F\004o\0053\005R\005Y\005*\000U\001k\011\182\001\178\0054\005B\n>\005\023\005\024\007K\005\133\007K\000U\011\186\000U\005D\005I\005B\005T\nO\000U\0053\000U\011\219\nH\005\027\0120\nJ\nM\0054\nf\005F\004o\ne\nh\005\178\011\227\001T\nj\000U\001U\nn\005B\002\224\005(\n\135\005L\005\023\005\024\000U\002\224\n\137\005R\005I\005*\000U\n\141\002\224\005D\n\146\002\224\0053\005\023\005\024\001W\011\239\n\148\011\250\005\027\0054\005D\n\154\n\153\005T\005F\004o\0053\n\157\n\159\005\230\005\027\005(\005B\005L\0054\n\164\005F\004o\000U\005R\005\183\005*\n\187\005\023\005\024\005D\005I\005B\n\169\012\b\n\171\001g\n\172\n\186\n\179\005\027\012w\0053\005I\n\180\005T\005F\004o\012\130\n\185\0054\012\135\n\189\n\190\n\210\n\204\n\205\n\209\n\224\005(\005\235\005L\n\228\005B\001Y\n\240\n\236\005R\005I\005*\005D\005(\n\237\005L\n\239\011;\011=\011Q\011n\005R\005\027\005*\011q\005\023\005\024\005D\005F\004o\005T\011\140\011\144\011\154\011\158\011\168\011\164\005\027\005(\0053\005L\011\166\005T\005F\004o\011\170\005R\0054\005*\011\173\005I\011\177\011\181\011\201\001{\011\200\011\203\005\238\005D\011\208\005B\001b\005\023\005\024\011\210\005I\011\212\005T\005\027\011\214\011\215\011\229\011\222\011\223\005F\004o\0053\011\228\005(\011\241\005\233\011\252\011\249\011\251\0054\012&\005R\001k\005*\001\173\012/\012:\012h\005(\006\016\005L\005I\005B\000\000\000\000\000\000\005R\000\000\005*\000\000\005\023\005\024\005T\000\000\000\000\000\000\000\000\000\000\005D\000\000\000\000\000\000\005\023\005\024\0053\000\000\000\000\005T\005\027\005(\000\000\005\233\0054\000\000\005F\004o\0053\005R\000\000\005*\001T\000\000\006\021\001U\0054\005B\000\000\005\023\005\024\000\000\006-\000\000\000\000\000\000\000\000\005D\005I\005B\005T\000\000\000\000\0053\000\000\000\000\000\000\005\027\000\000\001W\000\000\0054\000\000\005F\004o\000\000\000\000\0067\000\000\001\169\001T\000\000\000\000\001U\005B\000\000\005(\000\000\005\233\000\000\000\000\000\000\000P\001\174\005R\005I\005*\000\000\000\000\000\000\005D\000\000\000\000\000\000\005\023\005\024\001g\001W\000\000\011a\005\027\000\000\005D\000\000\000\000\005T\005F\004o\0053\b\248\000\000\000\000\005\027\005(\000\000\005\233\0054\000\000\005F\004o\000\000\005R\006B\005*\001Y\005\023\005\024\005D\005I\005B\000\000\000\000\000\000\000\000\001g\000\000\000\000\005\027\b\250\0053\005I\000\000\005T\005F\004o\000\000\000\000\0054\000\000\005\023\005\024\000\000\b\251\006o\000\000\000\000\005(\b\253\005\233\000\000\005B\t\007\001Y\0053\005R\005I\005*\000\000\005(\000\000\005L\0054\001{\000\000\000\000\000\000\005R\006t\005*\001b\004\024\004\025\005D\000\000\005B\005T\000\000\000\000\000\000\000\000\000\000\000\000\005\027\005(\004@\005L\000\000\005T\005F\004o\000\000\005R\004A\005*\000\000\001k\000\000\001\178\006\166\000\000\001{\005\023\005\024\005D\000\000\004e\000\000\001b\000\000\000\000\005I\011f\005T\005\027\000\000\0053\000\000\000\000\000\000\005F\004o\000\000\000\000\0054\000\000\004\024\004\025\005D\001T\006\169\000\000\b\198\000\000\001k\000\000\001\133\005B\005\027\005(\004@\005L\005I\000\000\005F\004o\000\000\005R\004A\005*\000\000\000\000\000\000\000\000\006\178\000\000\001W\004\024\004\025\004g\000\000\004e\000\000\000\000\000\000\000\000\005I\000\000\005T\004\028\005(\004@\005L\000\000\000\000\004l\004o\000\000\005R\004A\005*\000\000\000\000\000\000\000\000\006\180\000\000\000\000\000\000\000\000\005D\000\000\004e\b\200\005(\000\000\005L\004p\000\000\005T\005\027\000\000\005R\000\000\005*\000\000\005F\004o\000\000\000\000\000\000\000\000\004\024\004\025\004g\000\000\000\000\000\000\000\000\000\000\000\000\b\203\000\000\005T\004\028\004i\004@\004s\005I\000\000\004l\004o\000\000\004y\004A\004k\000\000\004\024\004\025\000\000\006\184\000\000\000\000\000\000\000\000\004g\000\000\004e\000\000\004\024\004\025\004@\004p\000\000\004{\004\028\005(\000\000\005L\004A\000\000\004l\004o\004@\005R\006\187\005*\000\000\000\000\000\000\000\000\004A\004e\000\000\000\000\003o\b\206\006\189\000\000\000\000\004i\000\000\004s\004p\004e\005T\000\000\b\171\004y\b\210\004k\b\208\004\024\004\025\003p\004\178\000\000\003r\003s\000\000\004g\000\000\001k\000\000\004\024\004\025\004@\000\000\000\000\004{\004\028\004i\000\000\004s\004A\000\000\004l\004o\004@\004y\006\191\004k\000\000\000\000\000\000\004g\004A\004e\000\000\004\024\004\025\000\000\006\201\000\000\000\000\004\028\000\000\004g\004p\004e\004{\004l\004o\004@\000\000\000\000\000\000\004\028\000\000\000\000\000\000\004A\000\000\004l\004o\000\000\000\000\006\210\000\000\000\000\000\000\000\000\003w\004p\004e\000\000\004i\000\000\004s\000\000\000\000\000\000\003x\000\000\004y\004p\004k\000\000\000\000\000\000\004g\000\000\000\000\000\000\004\024\004\025\000\000\000\000\000\000\000\000\004\028\004i\004g\004s\000\000\004{\004l\004o\004@\004y\000\000\004k\004\028\004i\000\000\004s\004A\000\000\004l\004o\000\000\004y\006\213\004k\000\000\005\023\005\024\004g\004p\004e\004{\000\000\000\000\000\000\000\000\000P\000\000\004\028\003\136\0053\004p\000\000\004{\004l\004o\000\000\003\137\0054\003v\005\023\005\024\000\000\000\000\006\251\000\000\000\000\004i\000\000\004s\000\000\005B\000\000\b\248\0053\004y\004p\004k\000\000\004i\000\000\004s\0054\000\000\000\000\000\000\000\000\004y\007\006\004k\000\000\005\023\005\024\004g\000\000\005B\004{\000\000\000\000\000\000\000\000\000\000\b\250\004\028\004i\0053\004s\000\000\004{\004l\004o\000\000\004y\0054\004k\000\000\b\251\000\000\000\000\007\016\000\000\b\253\000\000\000\000\005D\t4\005B\000\000\000\000\000\000\000\000\004p\000\000\004{\005\027\004\024\004\025\000\000\000\000\000\000\005F\004o\000\000\000\000\000\000\000\000\004\024\004\025\005D\004@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004A\005\027\004i\004@\004s\005I\0073\005F\004o\000\000\004y\004A\004k\004e\000\000\004\024\004\025\007:\000\000\000\000\000\000\000\000\005D\000\000\004e\000\000\000\000\003o\000\000\005I\000\000\004{\005\027\005(\000\000\005L\000\000\004z\005F\004o\000\000\005R\000\000\005*\000\000\000\000\003p\003\141\000\000\003r\003s\002\149\000\000\000\000\000\000\000\000\000\000\005(\000\000\005L\005I\000\000\005T\000\000\000\000\005R\004g\005*\000\000\0069\000\000\000\000\000\000\000\000\000\000\000\000\004\028\004g\b~\000\000\000\000\000\000\004l\004o\000\000\000\000\005T\004\028\005(\003\142\005L\003\143\004P\004l\004o\000\000\005R\000\000\005*\000\000\000\000\000\000\000\000\004\027\004p\005\023\005\024\b\128\000\000\004\024\004\025\000\000\000\000\004\028\003\150\004p\000\000\005T\000\000\000\000\000\000\b\129\000\000\004@\003x\000\000\b\131\005\025\007)\006=\n\193\004A\004i\000\000\004s\000\000\003o\007B\000\000\000\000\004y\000\000\004k\004i\004e\004s\005\023\005\024\000\000\000\000\000\000\004y\000\000\004k\000\000\003p\003\141\000\000\003r\003s\0053\004{\000\000\000\000\001T\000\000\000\000\001U\0054\004i\000\000\000\000\004{\000\000\007I\000\000\000\000\004j\0069\004k\003\136\005B\000\000\000\000\000\000\000\000\000\000\000\000\003\152\000\000\003v\001W\000\000\005\026\000\000\000\000\000\000\004g\003\142\000\000\003\143\004P\000\000\005\027\000\000\000\000\000\000\004\028\005\023\005\024\000\000\000\000\000\000\004l\004o\000\000\000\000\005\023\005\024\000\000\000\000\000\000\0053\003\150\000\000\000\000\005\023\005\024\001g\000\000\0054\0053\000\000\003x\005D\004p\007Z\007E\006=\0054\0053\000\000\000\000\005B\005\027\007]\000\000\000\000\0054\000\000\005F\004o\005B\000\000\007i\000\000\001Y\000\000\000\000\005(\000\000\005B\000\000\004i\003\194\004s\000\000\005)\000\000\005*\000\000\004y\005I\004k\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003p\0041\000\000\003r\003s\000\000\003\136\000\000\000\000\004{\000\000\000\000\000\000\005D\003\152\000\000\003v\005(\000\000\005L\000\000\001{\005D\005\027\000\000\005R\000\000\005*\001b\005F\004o\005D\005\027\000\000\000\000\005\023\005\024\000\000\005F\004o\000\000\005\027\006\164\004\245\004\246\000\000\005T\005F\004o\0053\002\149\005I\000\000\000\000\001k\000\000\002H\0054\005\023\005\024\005I\000\000\000\000\007l\000\000\000\000\000\000\000\000\003\150\005I\005B\000\000\0053\000\000\000\000\000\000\000\000\b~\003x\005(\0054\005L\000\000\000\000\000\000\000\000\007w\005R\005(\005*\005L\000\000\000\000\005B\000\000\000\000\005R\005(\005*\005L\005\023\005\024\006\167\006\172\000\000\005R\b\128\005*\005T\000\000\000\000\000\000\000\000\000\000\0053\000\000\000\000\005T\000\000\000\000\b\129\000\000\0054\005D\000\000\b\131\005T\000\000\007}\n\197\000\000\005\023\005\024\005\027\003\136\005B\000\000\000\000\t\133\005F\004o\000\000\003\152\000\000\003v\0053\005D\001T\000\000\000\000\b\198\000\000\000\000\0054\000\000\000\000\005\027\000\000\000\000\007\153\000\000\005I\005F\004o\000\000\t\134\005B\t\135\000\000\000\000\000\000\000\000\005\023\005\024\001W\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005I\000\000\0053\000\000\005D\005(\000\000\005L\000\000\000\000\0054\000\000\t\136\005R\005\027\005*\007\156\000\000\000\000\000\000\005F\004o\000\000\005B\000\000\000\000\000\000\b\200\005(\000\000\005L\000\000\000\000\000\000\005T\005D\005R\000\000\005*\t\137\001T\000\000\005I\001U\000\000\005\027\000\000\000\000\t\138\000\000\t\139\005F\004o\000\000\000\000\b\203\000\000\005T\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001W\t\158\000\000\005(\001T\005L\005I\001U\000\000\005D\000\000\005R\000\000\005*\000\000\000\000\000\000\001\207\000\000\005\027\000\000\000\000\000\000\000\000\t\141\005F\004o\000\000\t\143\t\145\000\000\001W\005T\000\000\005(\000\000\005L\001g\005\023\005\024\t\156\000\000\005R\b\206\005*\000\000\000\000\005I\001\207\000\000\000\000\007\204\0053\000\000\b\171\t\157\b\209\000\000\b\208\000\000\0054\000\000\000\000\005T\000\000\001Y\bM\000\000\001g\001k\000\000\001T\000\000\005B\001U\005(\000\000\005L\000\000\000\000\000\000\000\000\007\218\005R\000\000\005*\000\000\000\000\000\000\000\000\001T\000\000\000\000\b\198\000\000\000\000\001Y\000\000\001W\000\000\000\000\000\000\000\000\000\000\005T\004\024\004\025\001\210\001\211\000\000\000\000\000\000\000\000\001{\000\000\001\207\000\000\001W\000\000\004@\001b\000\000\000\000\000\000\001\222\001\235\005D\004A\000\000\001\214\000\000\005\023\005\024\t\251\000\000\001g\005\027\000\000\001\210\001\211\004e\000\000\005F\004o\001{\0053\001k\000\000\001\133\t\151\000\000\001b\000\000\0054\b\200\001\222\001\235\000\000\000\000\nr\001\214\000\000\000\000\001Y\005I\000\000\005B\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001k\000\000\001\133\000\000\000\000\b\203\000\000\000\000\005\023\005\024\000\000\000\000\000\000\000\000\000\000\005(\004g\005L\000\000\000\000\000\000\000\000\0053\005R\000\000\005*\004\028\000\000\001\210\001\211\0054\000\000\004l\004o\001{\000\000\nw\000\000\000\000\000\000\000\000\001b\005D\005B\005T\001\222\001\235\000\000\005\023\005\024\001\214\000\000\005\027\000\000\004p\000\000\000\000\000\000\005F\004o\b\206\000\000\0053\005\023\005\024\000\000\000\000\001k\000\000\001\133\0054\b\171\000\000\b\207\000\000\b\208\nz\0053\000\000\000\000\005I\000\000\004i\005B\004s\0054\001k\005\023\005\024\000\000\004y\n\128\004k\000\000\000\000\000\000\005D\000\000\005B\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005\027\000\000\005(\005.\005L\004{\005F\004o\000\000\000\000\005R\000\000\005*\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005\023\005\024\000\000\000\000\000\000\000\000\005I\000\000\005D\005T\000\000\000\000\000\000\000\000\0053\000\000\000\000\000\000\005\027\000\000\000\000\000\000\0054\005D\005F\004o\000\000\000\000\n\131\000\000\000\000\004\024\004\025\005\027\005(\005B\005L\000\000\000\000\005F\004o\000\000\005R\000\000\005*\004@\005I\005\026\000\000\000\000\003o\000\000\000\000\004A\000\000\000\000\000\000\005\027\000\000\011\018\000\000\005I\000\000\005T\000\000\000\000\004e\000\000\000\000\003p\003\141\000\000\003r\003s\005(\000\000\005L\000\000\000\000\000\000\000\000\000\000\005R\000\000\005*\000\000\000\000\000\000\005D\005(\000\000\005L\0069\000\000\000\000\000\000\000\000\005R\005\027\005*\000\000\000\000\000\000\005T\005F\004o\000\000\000\000\000\000\000\000\000\000\000\000\003\142\005(\003\143\004P\000\000\000\000\005T\004g\000\000\005)\000\000\005*\000\000\000\000\005I\000\000\000\000\004\028\000\000\000\000\000\000\000\000\000\000\004l\004o\003\150\002\153\000\000\000\000\002\154\000\000\000\000\000\000\005\023\005\024\003x\000\000\000\000\000\000\011\022\006=\000\000\005(\003o\005L\004p\000\000\0053\000\000\000\000\005R\002\153\005*\002\156\002\154\0054\000\000\000\000\005\023\005\024\000\000\011\027\003p\003\141\000\000\003r\003s\000\000\005B\000\000\011o\005T\0053\004i\000\000\004s\000\000\000\000\002\156\000\000\0054\004y\000\000\004k\000\000\0069\011\029\000\000\000\000\000\000\002\167\003\136\000\000\005B\000\000\011o\000\000\000\000\000\000\003\152\000\000\003v\004{\000\000\011\139\003\142\000\000\003\143\004P\000\000\000\000\000\000\000\000\000\000\000\000\002\167\000\000\000\000\002\159\000\000\000\000\005D\000\000\000\000\000\000\000\000\000\000\000\000\000\000\011\153\003\150\005\027\000\000\005\023\005\024\000\000\000\000\005F\004o\000\000\003x\000\000\000\000\002\159\011\025\006=\005D\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0050\005\027\000\000\000\000\005I\011r\011s\005F\004o\000\000\002\153\002\176\000\000\002\154\000\000\000\000\000\000\000\000\002\162\000\000\000\000\000\000\011|\011\137\000\000\000\000\000\000\011v\000\000\005I\011r\011s\005(\000\000\005L\000\000\002\176\002\156\000\000\000\000\005R\003\136\005*\002\162\002\171\000\000\002\189\011|\011\137\003\152\000\000\003v\011v\000\000\011o\000\000\000\000\005(\000\000\005L\000\000\005T\003o\000\000\000\000\005R\005\026\005*\000\000\002\171\000\000\002\189\000\000\003o\002\167\000\000\005\027\000\000\000\000\000\000\000\000\003p\003\141\000\000\003r\003s\005T\000\000\011\248\000\000\000\000\003o\003p\003\141\000\000\003r\003s\000\000\000\000\000\000\000\000\000\000\002\159\000\000\006\215\000\000\004\024\004\025\000\000\000\000\003p\003\141\000\000\003r\003s\006\215\000\000\000\000\000\000\000\000\004@\000\000\000\000\000\000\003\142\000\000\003\143\003\246\004A\000\000\000\000\000\000\005(\006\215\012\018\003\142\000\000\003\143\003\246\000\000\005)\004e\005*\000\000\011r\011s\000\000\000\000\000\000\003\150\002\176\004\024\004\025\003\142\000\000\003\143\003\246\002\162\000\000\003x\003\150\011|\011\137\012\012\006\219\004@\011v\000\000\000\000\000\000\003x\000\000\000\000\004A\012\015\006\219\000\000\000\000\003\150\012,\000\000\000\000\000\000\002\171\000\000\002\189\004e\000\000\003x\000\000\000\000\000\000\012@\006\219\004g\005\023\005\024\000\000\000\000\003o\000\000\000\000\000\000\000\000\004\028\000\000\000\000\000\000\000\000\000\000\004l\004o\000\000\000\000\000\000\003\136\000\000\005:\003p\003\141\000\000\003r\003s\003\152\000\000\003v\003\136\000\000\000\000\000\000\000\000\000\000\004p\000\000\003\152\000\000\003v\004\024\004\025\004g\000\000\006\215\000\000\000\000\003\136\000\000\000\000\000\000\000\000\004\028\000\000\004@\003\152\000\000\003v\004l\004o\000\000\000\000\004A\004i\003\142\004s\003\143\003\246\012E\000\000\000\000\004y\000\000\004k\000\000\004e\000\000\000\000\000\000\000\000\004p\000\000\000\000\000\000\004\024\004\025\005\026\004\024\004\025\003\150\000\000\000\000\004{\000\000\000\000\000\000\005\027\000\000\004@\003x\000\000\004@\000\000\012C\006\219\000\000\004A\000\000\004i\004A\004s\000\000\012G\000\000\000\000\012J\004y\000\000\004k\004e\000\000\000\000\004e\000\000\000\000\000\000\004\024\004\025\004g\004\024\004\025\000\000\000\000\000\000\000\000\000\000\000\000\004{\004\028\000\000\004@\000\000\000\000\004@\004l\004o\000\000\000\000\004A\000\000\000\000\004A\005(\000\000\012O\003\136\000\000\012Q\000\000\000\000\005)\004e\005*\003\152\004e\003v\004p\000\000\000\000\000\000\tB\000\000\004g\004\024\004\025\004g\000\000\000\000\000\000\000\000\000\000\000\000\004\028\000\000\012}\004\028\000\000\012~\004l\004o\tE\004l\004o\000\000\004i\006\145\004s\000\000\000\000\tF\000\000\000\000\004y\000\000\004k\000\000\000\000\005\023\005\024\000\000\004p\000\000\000\000\004p\004g\000\000\000\000\004g\000\000\b\252\000\000\000\000\000\000\004{\004\028\000\000\000\000\004\028\tG\005E\004l\004o\000\000\004l\004o\000\000\000\000\000\000\004i\000\000\004s\004i\000\000\004s\000\000\tB\004y\000\000\004k\004y\000\000\004k\004p\000\000\000\000\004p\tH\000\000\000\000\012}\000\000\004\027\012~\000\000\tI\tE\000\000\004{\000\000\000\000\004{\004\028\000\000\000\000\tF\000\000\tJ\004o\000\000\012\128\004i\000\000\004s\004i\000\000\004s\000\000\000\000\004y\000\000\004k\004y\000\000\004k\000\000\005\026\000\000\000\000\tL\tB\000\000\000\000\006\148\tG\000\000\005\027\000\000\tM\000\000\004{\000\000\tO\004{\012}\000\000\001T\012~\000\000\001U\tE\000\000\001o\000\000\tY\000\000\000\000\000\000\004i\tF\000\000\000\000\tH\000\000\000\000\000\000\004j\tB\004k\tZ\tI\002\153\001p\001W\002\154\000\000\000\000\004\024\004\025\001\140\000\000\012}\tJ\004o\012~\012\127\000\000\tE\tG\000\000\000\000\004@\005(\000\000\000\000\000\000\tF\000\000\002\156\004A\005)\000\000\005*\000\000\tL\000\000\000\000\000\000\000\000\000\000\001g\000\000\004e\tM\000\000\011o\tH\tO\000\000\000\000\000\000\000\000\000\000\000\000\tI\tG\000\000\001u\000\000\tY\000\000\000\000\000\000\000\000\000\000\002\167\tJ\004o\001Y\012\131\005\023\005\024\000\000\000\000\tZ\001T\000\000\000\000\001U\000\000\000\000\000\000\000\000\tH\000\000\000\000\000\000\000\000\tL\000\000\000\000\tI\005S\002\159\000\000\004g\000\000\tM\000\000\000\000\000\000\tO\001W\tJ\004o\004\028\012\136\005\023\005\024\000\000\000\000\004l\004o\tY\000\000\000\000\001{\000\000\000\000\001\207\000\000\0053\000\000\001b\000\000\tL\000\000\001\131\tZ\0054\000\000\000\000\000\000\004p\tM\011r\011s\000\000\tO\001g\000\000\002\176\005B\000\000\000\000\000\000\000\000\000\000\002\162\001k\tY\001\133\011t\011u\000\000\000\000\000\000\011v\005\026\000\000\000\000\004i\000\000\012\t\000\000\tZ\000\000\001Y\005\027\004y\000\000\004k\005\023\005\024\002\171\000\000\002\189\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005\023\005\024\0053\000\000\000\000\000\000\004{\000\000\000\000\000\000\0054\005D\005\023\005\024\0053\000\000\000\000\000\000\000\000\000\000\000\000\005\027\0054\005B\000\000\001\210\001\211\005F\004o\000\000\000\000\001{\005\023\005\024\005\156\005B\003o\000\000\001b\000\000\005(\000\000\001\212\001\213\nx\000\000\0053\001\214\005)\005I\005*\000\000\n{\000\000\0054\003p\004\193\000\000\003r\003s\000\000\000\000\000\000\000\000\001k\000\000\001\133\005B\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005D\005(\000\000\011\030\004\024\004\025\000\000\000\000\000\000\005R\005\027\005*\005D\000\000\000\000\000\000\005F\004o\004@\000\000\000\000\000\000\005\027\000\000\005\026\000\000\004A\000\000\005F\004o\005T\000\000\001T\000\000\005\027\b\198\000\000\000\000\005I\004e\000\000\000\000\000\000\000\000\005D\000\000\000\000\003w\004\024\004\025\005I\000\000\000\000\000\000\005\027\000\000\000\000\003x\000\000\001W\005F\004o\004@\000\000\001T\000\000\005(\t%\t\192\000\000\004A\005\023\005\024\000\000\005R\000\000\005*\000\000\005(\000\000\007#\000\000\005I\004e\000\000\0053\005R\007n\005*\000\000\005(\001W\004g\0054\000\000\005T\b\200\000\000\005)\000\000\005*\000\000\004\028\004\024\004\025\000\000\005B\005T\004l\004o\005(\000\000\007\022\003\136\000\000\004\024\004\025\004@\005R\000\000\005*\003\137\000\000\003v\b\203\004A\000\000\000\000\t'\004@\004p\000\000\000\000\000\000\000\000\000\000\004g\004A\004e\005T\000\000\000\000\000\000\000\000\000\000\000\000\004\028\000\000\004\024\004\025\004e\000\000\004l\004o\000\000\000\000\t*\000\000\004i\005D\006\234\000\000\004@\000\000\000\000\000\000\004y\000\000\004k\005\027\004A\000\000\000\000\000\000\004p\005F\004o\000\000\000\000\b\206\000\000\000\000\000\000\004e\000\000\000\000\000\000\004{\000\000\000\000\b\171\004g\b\231\000\000\b\208\004\024\004\025\005I\000\000\000\000\000\000\004\028\004i\004g\006\225\001k\000\000\004l\004o\004@\004y\t-\004k\004\028\000\000\000\000\000\000\004A\000\000\004l\004o\000\000\t\029\000\000\t2\005(\t/\006\155\000\000\004p\004e\004{\000\000\005R\000\000\005*\004g\001k\000\000\000\000\000\000\004p\000\000\000\000\000\000\000\000\004\028\000\000\000\000\000\000\004\024\004\025\004l\004o\005T\000\000\000\000\004i\000\000\006\149\000\000\000\000\004\024\004\025\004@\004y\000\000\004k\000\000\004i\000\000\004\253\004A\000\000\004p\000\000\004@\004y\000\000\004k\000\000\000\000\000\000\004g\004A\004e\004{\004\024\004\025\000\000\000\000\000\000\000\000\004\028\000\000\000\000\000\000\004e\004{\004l\004o\004@\004i\000\000\004u\004\024\004\025\000\000\000\000\004A\004y\000\000\004k\000\000\000\000\000\000\000\000\004\024\004\025\004@\000\000\004p\004e\000\000\000\000\000\000\000\000\004A\000\000\000\000\000\000\004{\000\000\000\000\000\000\000\000\000\000\000\000\004g\006Y\004e\000\000\004\024\004\025\000\000\000\000\000\000\000\000\004\028\004i\004g\004w\000\000\000\000\004l\004o\004@\004y\000\000\004k\004\028\000\000\000\000\000\000\004A\000\000\004l\004o\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004g\004p\004e\004{\000\000\000\000\000\000\000\000\000\000\000\000\004\028\004\024\004\025\004p\000\000\000\000\004l\004o\004g\000\000\000\000\000\000\004\024\004\025\000\000\004@\000\000\000\000\004\028\004i\004\027\004|\000\000\004A\004l\004o\004@\004y\004p\004k\004\028\004i\000\000\004\131\004A\000\000\004e\000\000\000\000\004y\000\000\004k\000\000\004\024\004\025\004g\004p\004e\004{\000\000\000\000\000\000\000\000\000\000\000\000\004\028\004i\004@\004\133\000\000\004{\004l\004o\000\000\004y\004A\004k\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004i\000\000\004\135\000\000\004e\000\000\000\000\000\000\004y\004p\004k\004{\004i\004\024\004\025\004g\000\000\000\000\000\000\000\000\004j\000\000\004k\000\000\000\000\004\028\004g\004@\000\000\004{\000\000\004l\004o\000\000\000\000\004A\004\028\004i\000\000\004\137\000\000\000\000\004l\004o\000\000\004y\000\000\004k\004e\000\000\000\000\000\000\000\000\004p\000\000\004\024\004\025\004g\004\024\004\025\000\000\000\000\000\000\000\000\004p\000\000\004{\004\028\000\000\004@\000\000\000\000\004@\004l\004o\000\000\000\000\004A\000\000\000\000\004A\004i\000\000\004\139\000\000\000\000\000\000\000\000\000\000\004y\004e\004k\004i\004e\004\141\004p\000\000\000\000\000\000\000\000\004y\004g\004k\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004{\004\028\000\000\000\000\000\000\000\000\000\000\004l\004o\000\000\000\000\004{\000\000\004i\000\000\004\143\000\000\000\000\000\000\000\000\000\000\004y\000\000\004k\000\000\004\024\004\025\000\000\001T\004p\000\000\001U\000\000\004g\004\024\004\025\004g\000\000\000\000\004@\000\000\000\000\004{\004\028\000\000\000\000\004\028\004A\004@\004l\004o\000\000\004l\004o\000\000\001W\004A\004i\000\000\004\145\004e\000\000\000\000\000\000\000\000\004y\000\000\004k\000\000\004e\000\000\004p\000\000\000\000\004p\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004{\000\000\000\000\000\000\000\000\000\000\001g\000\000\000\000\000\000\000\000\000\000\000\000\004i\000\000\004\147\004i\000\000\004\149\004\024\004\025\004y\000\000\004k\004y\000\000\004k\004g\000\000\000\000\000\000\000\000\000\000\004@\001Y\000\000\004g\004\028\000\000\000\000\000\000\004A\004{\004l\004o\004{\004\028\000\000\000\000\000\000\004\024\004\025\004l\004o\004e\000\000\000\000\000\000\000\000\004\024\004\025\000\000\004\024\004\025\004@\004p\000\000\000\000\000\000\000\000\000\000\000\000\004A\004@\004p\000\000\004@\000\000\000\000\000\000\000\000\004A\011`\000\000\004A\004e\000\000\001T\000\000\001b\001U\000\000\000\000\004i\004e\004\151\000\000\004e\000\000\000\000\000\000\004y\004i\004k\004\153\004\024\004\025\004g\000\000\000\000\004y\000\000\004k\000\000\001W\001k\000\000\004\028\000\000\004@\000\000\000\000\004{\004l\004o\000\000\000\000\004A\000\000\000\000\000\000\004{\000\000\000\000\000\000\000\000\000\000\000\000\004g\000\000\004e\000\000\000\000\000\000\000\000\004p\000\000\004g\004\028\000\000\004g\001g\000\000\000\000\004l\004o\000\000\004\028\000\000\000\000\004\028\000\000\000\000\004l\004o\000\000\004l\004o\000\000\000\000\004\024\004\025\000\000\004i\000\000\004\155\004p\000\000\000\000\001Y\000\000\004y\000\000\004k\004@\004p\000\000\000\000\004p\000\000\000\000\000\000\004A\004g\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004{\004\028\004i\004e\004\157\000\000\000\000\004l\004o\000\000\004y\004i\004k\004\159\004i\000\000\004\161\000\000\000\000\004y\000\000\004k\004y\001T\004k\001{\001U\000\000\000\000\004p\000\000\004{\001b\004\024\004\025\000\000\bW\000\000\000\000\bZ\004{\000\000\000\000\004{\000\000\000\000\000\000\004@\004\024\004\025\001W\000\000\000\000\000\000\000\000\004A\004g\004i\001k\004\163\001\133\000\000\004@\000\000\000\000\004y\004\028\004k\004e\000\000\004A\000\000\004l\004o\005\023\005\024\000\000\000\000\000\000\005\023\005\024\000\000\000\000\004e\000\000\000\000\004{\001g\0053\000\000\000\000\000\000\000\000\0053\004p\000\000\0054\000\000\000\000\000\000\000\000\0054\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005B\000\000\000\000\000\000\000\000\005B\001Y\000\000\000\000\000\000\005\023\005\024\004g\004i\000\000\004\165\000\000\000\000\000\000\000\000\000\000\004y\004\028\004k\0053\000\000\000\000\004g\004l\004o\000\000\000\000\0054\000\000\000\000\000\000\000\000\004\028\000\000\000\000\000\000\000\000\004{\004l\004o\005B\000\000\000\000\000\000\000\000\004p\000\000\000\000\005D\001{\000\000\000\000\000\000\005D\000\000\000\000\001b\000\000\005\027\000\000\004p\000\000\000\000\005\027\005F\004o\000\000\000\000\000\000\005F\004o\000\000\000\000\004i\000\000\004\167\000\000\000\000\005\023\005\024\000\000\004y\001k\004k\002J\000\000\005I\000\000\004i\000\000\004\169\005I\0053\005D\000\000\000\000\004y\000\000\004k\000\000\0054\000\000\004{\005\027\005\023\005\024\000\000\000\000\000\000\005F\004o\000\000\000\000\005B\005(\000\000\005\217\004{\0053\005(\000\000\005\216\005R\000\000\005*\000\000\0054\005R\000\000\005*\000\000\005I\003o\000\000\000\000\000\000\000\000\000\000\000\000\005B\000\000\000\000\000\000\005T\000\000\000\000\000\000\000\000\005T\005\023\005\024\003p\004\193\000\000\003r\003s\000\000\000\000\000\000\005(\000\000\005\131\000\000\0053\000\000\000\000\005D\005R\000\000\005*\000\000\0054\000\000\000\000\000\000\000\000\005\027\000\000\000\000\000\000\000\000\000\000\005F\004o\005B\000\000\000\000\000\000\005T\000\000\000\000\000\000\005D\005\023\005\024\000\000\005\023\005\024\000\000\000\000\000\000\000\000\005\027\000\000\005I\000\000\000\000\0053\005F\004o\0053\005\023\005\024\000\000\000\000\0054\000\000\000\000\0054\003w\000\000\000\000\000\000\000\000\000\000\0053\000\000\000\000\005B\003x\005I\005B\005(\0054\005N\005\023\005\024\005D\000\000\000\000\005R\000\000\005*\000\000\000\000\000\000\005B\005\027\000\000\0053\000\000\000\000\000\000\005F\004o\000\000\000\000\0054\005(\006.\005P\005T\000\000\000\000\000\000\000\000\005R\000\000\005*\000\000\005B\000\000\000\000\000\000\000\000\005I\000\000\000\000\000\000\0060\000\000\005D\005\023\005\024\005D\003\136\000\000\005T\000\000\000\000\000\000\005\027\000\000\003\137\005\027\003v\0053\005F\004o\005D\005F\004o\000\000\005(\0054\005U\000\000\005\023\005\024\005\027\000\000\005R\000\000\005*\000\000\005F\004o\005B\000\000\005I\000\000\0053\005I\005D\000\000\000\000\000\000\000\000\000\000\0054\000\000\000\000\005T\005\027\000\000\000\000\000\000\005I\000\000\005F\004o\000\000\005B\000\000\000\000\000\000\000\000\005(\000\000\005\\\005(\000\000\005^\000\000\000\000\005R\000\000\005*\005R\000\000\005*\005I\000\000\000\000\000\000\005(\000\000\005`\005\023\005\024\005D\000\000\000\000\005R\000\000\005*\005T\000\000\000\000\005T\005\027\000\000\0053\000\000\000\000\000\000\005F\004o\000\000\005(\0054\005b\000\000\000\000\005T\005D\000\000\005R\000\000\005*\005\023\005\024\000\000\005B\000\000\005\027\000\000\000\000\005I\000\000\000\000\005F\004o\000\000\0053\005\023\005\024\000\000\005T\000\000\000\000\000\000\0054\000\000\000\000\000\000\000\000\000\000\000\000\0053\000\000\000\000\000\000\005I\000\000\005B\005(\0054\005d\000\000\005\023\005\024\000\000\000\000\005R\000\000\005*\000\000\000\000\000\000\005B\000\000\000\000\000\000\0053\000\000\005D\000\000\000\000\000\000\000\000\005(\0054\005f\000\000\005T\005\027\000\000\000\000\005R\000\000\005*\005F\004o\000\000\005B\000\000\005\023\005\024\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005\023\005\024\005D\000\000\005T\0053\000\000\000\000\005I\000\000\000\000\000\000\005\027\0054\0053\005\023\005\024\005D\005F\004o\000\000\000\000\0054\000\000\000\000\000\000\005B\005\027\000\000\0053\000\000\000\000\000\000\005F\004o\005B\005(\0054\005h\000\000\005I\000\000\005D\000\000\005R\000\000\005*\000\000\000\000\000\000\005B\000\000\005\027\000\000\000\000\005I\000\000\001T\005F\004o\t%\000\000\000\000\000\000\000\000\005T\000\000\000\000\005(\000\000\005j\000\000\000\000\000\000\000\000\000\000\005R\000\000\005*\005D\005I\000\000\000\000\005(\001W\005l\000\000\000\000\005D\005\027\000\000\005R\000\000\005*\000\000\005F\004o\005T\005\027\000\000\000\000\005\023\005\024\005D\005F\004o\000\000\000\000\005(\000\000\005n\000\000\005T\005\027\000\000\0053\005R\005I\005*\005F\004o\t'\000\000\0054\005\023\005\024\005I\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005B\005T\0053\000\000\000\000\005I\000\000\000\000\000\000\005(\0054\005p\000\000\t*\000\000\000\000\000\000\005R\005(\005*\005r\000\000\000\000\005B\000\000\000\000\005R\000\000\005*\000\000\005\023\005\024\000\000\005(\000\000\005t\000\000\000\000\005T\000\000\000\000\005R\000\000\005*\0053\000\000\000\000\005T\000\000\000\000\000\000\000\000\0054\005D\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005T\005\027\000\000\005B\000\000\000\000\t-\005F\004o\000\000\000\000\000\000\005\023\005\024\005D\000\000\003o\t\029\000\000\t1\000\000\t/\000\000\000\000\005\027\000\000\0053\000\000\000\000\005I\005F\004o\001k\000\000\0054\003p\004\193\000\000\003r\003s\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005B\000\000\005\023\005\024\000\000\005I\000\000\005\023\005\024\005D\005(\000\000\005v\000\000\000\000\000\000\0053\000\000\005R\005\027\005*\0053\000\000\000\000\0054\005F\004o\000\000\001T\0054\000\000\001U\000\000\005(\001o\005x\000\000\005B\000\000\005T\000\000\005R\005B\005*\000\000\000\000\000\000\005I\000\000\001T\000\000\000\000\t%\005D\001p\001W\003w\000\000\000\000\000\000\000\000\001q\005T\005\027\000\000\000\000\003x\000\000\000\000\005F\004o\000\000\000\000\000\000\000\000\005(\001W\005z\000\000\005\023\005\024\000\000\000\000\005R\000\000\005*\000\000\000\000\005\023\005\024\005D\005I\001g\0053\000\000\005D\006.\000\000\000\000\000\000\005\027\0054\0053\000\000\005T\005\027\005F\004o\000\000\001u\0054\005F\004o\t'\005B\000\000\006/\000\000\000\000\005(\001Y\005|\003\136\005B\000\000\005\023\005\024\005R\005I\005*\003\137\000\000\003v\005I\000\000\000\000\000\000\000\000\000\000\0053\000\000\t*\000\000\000\000\000\000\000\000\000\000\0054\005T\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005(\000\000\005~\000\000\005B\005(\000\000\005\128\005R\000\000\005*\005D\001{\005R\000\000\005*\000\000\000\000\000\000\001b\005D\005\027\000\000\001\131\005\023\005\024\000\000\005F\004o\005T\005\027\000\000\000\000\000\000\005T\000\000\005F\004o\0053\000\000\t-\000\000\000\000\000\000\000\000\001k\0054\001\133\000\000\005I\000\000\t\029\000\000\t0\000\000\t/\000\000\005D\005I\005B\000\000\000\000\000\000\000\000\000\000\000\000\001k\005\027\005\023\005\024\000\000\000\000\000\000\005F\004o\000\000\000\000\005(\003o\005\130\000\000\000\000\0053\000\000\000\000\005R\005(\005*\005\137\000\000\0054\005\023\005\024\000\000\005R\005I\005*\003p\004\193\000\000\003r\003s\000\000\005B\000\000\0053\005T\000\000\000\000\000\000\000\000\000\000\005D\0054\000\000\005T\005\023\005\024\000\000\000\000\000\000\000\000\005\027\005(\000\000\005\143\005B\000\000\005F\004o\0053\005R\000\000\005*\000\000\000\000\000\000\000\000\0054\005\023\005\024\000\000\001T\000\000\002\153\t%\000\000\002\154\000\000\000\000\005I\005B\005T\0053\000\000\000\000\005D\000\000\000\000\000\000\000\000\0054\005\023\005\024\000\000\003w\005\027\000\000\000\000\001W\000\000\002\156\005F\004o\005B\003x\0053\000\000\005(\005D\005\147\000\000\000\000\000\000\0054\000\000\005R\000\000\005*\005\027\000\000\000\000\000\000\000\000\005I\005F\004o\005B\000\000\000\000\000\000\000\000\000\000\000\000\005D\006.\t'\005T\002\167\000\000\000\000\000\000\000\000\000\000\005\027\000\000\000\000\005I\000\000\000\000\005F\004o\005(\000\000\005\151\0063\000\000\005D\000\000\000\000\005R\003\136\005*\000\000\t*\000\000\002\159\005\027\000\000\003\137\000\000\003v\005I\005F\004o\005(\000\000\005\159\000\000\000\000\005D\005T\000\000\005R\000\000\005*\000\000\000\000\000\000\000\000\005\027\005\023\005\024\000\000\000\000\005I\005F\004o\000\000\000\000\005(\000\000\005\163\000\000\005T\0053\005\023\005\024\005R\000\000\005*\000\000\000\000\0054\002\176\000\000\000\000\000\000\005I\t-\0053\002\162\000\000\005(\000\000\005\165\005B\000\000\0054\005T\t\029\005R\t.\005*\t/\000\000\001T\005\023\005\024\001U\000\000\005B\000\000\000\000\000\000\001k\005(\002\171\005\169\002\177\000\000\0053\005T\000\000\005R\000\000\005*\000\000\000\000\0054\000\000\000\000\000\000\001W\000\000\000\000\000\000\000\000\005\023\005\024\000\000\000\000\005B\007x\000\000\005T\000\000\005\023\005\024\005D\000\000\000\000\0053\000\000\000\000\000\000\000\000\000\000\007\154\005\027\0054\0053\005\023\005\024\005D\005F\004o\000\000\000\000\0054\001g\000\000\000\000\005B\005\027\000\000\0053\000\000\000\000\000\000\005F\004o\005B\000\000\0054\000\000\000\000\005I\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005D\000\000\005B\001Y\000\000\000\000\000\000\005I\000\000\000\000\005\027\000\000\000\000\000\000\000\000\000\000\005F\004o\000\000\000\000\005(\000\000\005\171\000\000\000\000\000\000\000\000\000\000\005R\000\000\005*\005D\005\023\005\024\000\000\005(\000\000\005\175\005I\000\000\005D\005\027\000\000\005R\000\000\005*\0053\005F\004o\005T\005\027\001{\000\000\000\000\0054\005D\005F\004o\001b\000\000\000\000\000\000\007~\000\000\005T\005\027\005(\005B\005\181\005I\000\000\005F\004o\000\000\005R\000\000\005*\000\000\005I\000\000\005\023\005\024\000\000\000\000\001k\000\000\001\133\000\000\000\000\000\000\000\000\000\000\000\000\005I\0053\005T\000\000\005(\000\000\005\186\000\000\000\000\0054\005\023\005\024\005R\005(\005*\005\188\000\000\000\000\000\000\000\000\000\000\005R\005B\005*\0053\000\000\000\000\005D\005(\000\000\005\191\000\000\0054\005T\000\000\000\000\005R\005\027\005*\000\000\000\000\000\000\005T\005F\004o\005B\000\000\000\000\000\000\005\023\005\024\000\000\005\023\005\024\000\000\000\000\000\000\005T\000\000\000\000\000\000\000\000\000\000\0053\000\000\005I\0053\000\000\000\000\000\000\000\000\0054\000\000\000\000\0054\005D\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005B\005\027\000\000\005B\000\000\000\000\000\000\005F\004o\005(\000\000\005\195\005\023\005\024\005D\000\000\000\000\005R\000\000\005*\000\000\000\000\000\000\000\000\005\027\000\000\0053\000\000\000\000\005I\005F\004o\000\000\000\000\0054\000\000\000\000\000\000\005T\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005B\000\000\000\000\000\000\000\000\005I\005D\005\023\005\024\005D\005(\000\000\005\198\000\000\000\000\000\000\005\027\000\000\005R\005\027\005*\0053\005F\004o\000\000\005F\004o\000\000\000\000\0054\000\000\000\000\000\000\005(\000\000\005\200\000\000\000\000\000\000\005T\000\000\005R\005B\005*\005I\000\000\000\000\005I\000\000\000\000\000\000\005\023\005\024\005D\005\023\005\024\000\000\000\000\000\000\000\000\000\000\000\000\005T\005\027\000\000\0053\000\000\000\000\0053\005F\004o\000\000\005(\0054\005\203\005(\0054\005\205\000\000\000\000\005R\000\000\005*\005R\000\000\005*\005B\000\000\000\000\005B\000\000\005I\000\000\005\023\005\024\005D\005\023\005\024\000\000\000\000\000\000\005T\000\000\000\000\005T\005\027\000\000\0053\000\000\000\000\0053\005F\004o\000\000\000\000\0054\005\023\005\024\0054\005(\000\000\005\208\000\000\000\000\000\000\000\000\000\000\005R\005B\005*\0053\005B\000\000\005I\000\000\000\000\000\000\000\000\0054\005D\005\023\005\024\005D\000\000\000\000\000\000\000\000\000\000\005T\005\027\000\000\005B\005\027\000\000\0053\005F\004o\000\000\005F\004o\000\000\005(\0054\005\211\000\000\000\000\000\000\000\000\000\000\005R\000\000\005*\000\000\000\000\000\000\005B\000\000\005I\000\000\000\000\005I\005D\000\000\000\000\005D\000\000\000\000\000\000\000\000\000\000\005T\005\027\000\000\000\000\005\027\000\000\000\000\005F\004o\000\000\005F\004o\000\000\000\000\005D\005(\000\000\005\220\005(\000\000\005\223\000\000\000\000\005R\005\027\005*\005R\000\000\005*\005I\005F\004o\005I\000\000\000\000\000\000\005\023\005\024\005D\004\024\004\025\000\000\000\000\000\000\005T\000\000\000\000\005T\005\027\000\000\0053\000\000\005I\004@\005F\004o\000\000\005(\0054\006F\005(\004A\006L\000\000\000\000\005R\000\000\005*\005R\000\000\005*\005B\000\000\000\000\004e\000\000\005I\000\000\005\023\005\024\005(\000\000\006P\004\024\004\025\000\000\005T\000\000\005R\005T\005*\000\000\0053\000\000\000\000\000\000\000\000\004@\000\000\000\000\0054\005\023\005\024\000\000\005(\004A\006T\000\000\000\000\005T\000\000\000\000\005R\005B\005*\0053\000\000\000\000\004e\000\000\000\000\000\000\000\000\0054\005D\004\024\004\025\004g\000\000\000\000\000\000\000\000\000\000\005T\005\027\000\000\005B\004\028\000\000\004@\005F\004o\000\000\004l\004o\004\024\004\025\004A\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004@\004e\000\000\005I\000\000\000\000\004p\005D\004A\000\000\000\000\000\000\004g\000\000\000\000\000\000\000\000\005\027\000\000\000\000\000\000\004e\004\028\005F\004o\000\000\000\000\000\000\004l\004o\005D\005(\000\000\006\\\004i\000\000\006`\000\000\000\000\005R\005\027\005*\004y\000\000\004k\005I\005F\004o\000\000\000\000\004p\000\000\000\000\000\000\004g\000\000\000\000\000\000\000\000\000\000\005T\000\000\000\000\004{\004\028\000\000\000\000\000\000\005I\000\000\004l\004o\000\000\005(\004g\006b\000\000\000\000\004i\000\000\006f\005R\000\000\005*\004\028\000\000\004y\000\000\004k\000\000\004l\004o\004p\000\000\004\024\004\025\005(\000\000\006h\005\023\005\024\000\000\005T\000\000\005R\000\000\005*\004{\004@\000\000\000\000\000\000\004p\0053\000\000\000\000\004A\004\024\004\025\000\000\004i\0054\006l\000\000\000\000\005T\000\000\000\000\004y\004e\004k\004@\000\000\000\000\005B\000\000\000\000\000\000\000\000\004A\004i\000\000\006r\002\153\000\000\000\000\002\154\000\000\004y\004{\004k\000\000\004e\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005\023\005\024\000\000\000\000\000\000\000\000\000\000\000\000\004{\002\156\000\000\000\000\000\000\000\000\0053\000\000\000\000\000\000\000\000\007\140\000\000\004g\0054\000\000\000\000\000\000\005D\000\000\000\000\000\000\000\000\004\028\000\000\000\000\b=\005B\005\027\004l\004o\000\000\000\000\000\000\005F\004o\004g\000\000\002\167\000\000\004\024\004\025\000\000\000\000\000\000\000\000\004\028\000\000\000\000\000\000\000\000\004p\004l\004o\004@\000\000\005I\000\000\000\000\000\000\000\000\000\000\004A\005\023\005\024\000\000\002\159\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004p\004e\000\000\0053\000\000\004i\005D\006w\000\000\000\000\005(\0054\006y\004y\000\000\004k\005\027\000\000\005R\000\000\005*\000\000\005F\004o\005B\000\000\000\000\000\000\004i\000\000\006|\004\024\004\025\000\000\004{\000\000\004y\000\000\004k\005T\002\176\000\000\000\000\000\000\005I\004@\000\000\002\162\000\000\000\000\000\000\007\144\000\000\004A\004g\000\000\000\000\004{\000\000\000\000\000\000\000\000\005\023\005\024\004\028\000\000\004e\000\000\000\000\000\000\004l\004o\005(\002\171\006\128\002\189\0053\005D\000\000\000\000\005R\000\000\005*\000\000\0054\000\000\000\000\005\027\000\000\000\000\000\000\000\000\004p\005F\004o\000\000\000\000\005B\000\000\000\000\000\000\005T\004\024\004\025\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005I\004@\004\024\004\025\004g\004i\000\000\006\131\000\000\004A\000\000\000\000\000\000\004y\004\028\004k\004@\000\000\000\000\000\000\004l\004o\004e\000\000\004A\000\000\000\000\000\000\005(\000\000\006\133\000\000\000\000\000\000\004{\005D\005R\004e\005*\000\000\000\000\000\000\004p\000\000\000\000\005\027\000\000\000\000\000\000\005\023\005\024\005F\004o\000\000\000\000\000\000\000\000\005T\000\000\000\000\000\000\000\000\000\000\0053\000\000\000\000\000\000\005\023\005\024\000\000\004i\0054\006\136\005I\000\000\004g\000\000\000\000\004y\000\000\004k\0053\000\000\000\000\005B\004\028\000\000\000\000\000\000\0054\004g\004l\004o\000\000\000\000\000\000\000\000\000\000\000\000\004{\004\028\005(\005B\006\138\005\023\005\024\004l\004o\000\000\005R\000\000\005*\000\000\004p\000\000\000\000\000\000\000\000\0053\000\000\000\000\000\000\005\023\005\024\000\000\000\000\0054\000\000\004p\000\000\005T\000\000\000\000\000\000\000\000\000\000\0053\005D\000\000\005B\000\000\004i\000\000\006\141\0054\000\000\000\000\005\027\000\000\004y\000\000\004k\000\000\005F\004o\005D\004i\005B\006\144\004\024\004\025\000\000\000\000\000\000\004y\005\027\004k\tB\000\000\000\000\004{\005F\004o\004@\000\000\005I\000\000\004\024\004\025\000\000\000\000\004A\000\000\000\000\tC\004{\000\000\tE\000\000\000\000\000\000\004@\005D\005I\004e\000\000\tF\000\000\000\000\004A\000\000\000\000\005\027\005(\000\000\006\152\000\000\000\000\005F\004o\005D\005R\004e\005*\000\000\000\000\000\000\000\000\000\000\002\153\005\027\005(\002\154\006\154\000\000\tG\005F\004o\000\000\005R\005I\005*\005T\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\tB\000\000\000\000\000\000\002\156\004g\005I\000\000\005T\000\000\000\000\tH\000\000\000\000\000\000\004\028\005(\tC\006\158\tI\tE\004l\004o\004g\005R\000\000\005*\000\000\000\000\tF\000\000\tJ\004o\004\028\005(\000\000\006\161\000\000\tK\004l\004o\002\167\005R\004p\005*\005T\000\000\000\000\000\000\000\000\000\000\000\000\000\000\tL\000\000\000\000\000\000\000\000\tG\000\000\000\000\004p\tM\005T\000\000\000\000\tO\000\000\000\000\002\159\000\000\004i\000\000\006\222\000\000\n\211\000\000\000\000\tY\004y\000\000\004k\000\000\000\000\000\000\n\211\tH\000\000\000\000\004i\000\000\006\224\n\212\tZ\tI\n\214\000\000\004y\000\000\004k\004{\000\000\n\212\000\000\n\215\n\214\tJ\004o\000\000\000\000\000\000\000\000\000\000\t^\n\215\000\000\000\000\002\176\004{\000\000\000\000\000\000\000\000\000\000\002\162\000\000\000\000\000\000\tL\n\211\000\000\000\000\000\000\n\216\000\000\000\000\000\000\tM\000\000\000\000\000\000\tO\000\000\n\216\000\000\000\000\n\212\000\000\000\000\n\214\002\171\000\000\002\182\tY\000\000\000\000\000\000\000\000\n\215\000\000\000\000\n\217\000\000\000\000\000\000\000\000\tB\000\000\tZ\n\218\000\000\n\217\000\000\001T\000\000\000\000\t%\000\000\000\000\n\218\000\000\n\219\n\225\tC\000\000\000\000\tE\n\216\n\226\tB\000\000\n\219\n\225\000\000\000\000\tF\000\000\000\000\n\245\000\000\001W\000\000\000\000\n\227\000\000\000\000\012t\000\000\000\000\tE\000\000\000\000\n\229\n\227\000\000\n\217\n\231\000\000\tF\000\000\000\000\000\000\n\229\n\218\tG\000\000\n\231\011\230\n\241\000\000\000\000\000\000\000\000\000\000\000\000\n\219\n\225\t'\n\241\000\000\000\000\000\000\n\254\n\242\000\000\000\000\000\000\tG\000\000\000\000\000\000\000\000\tH\n\242\011\231\012\028\011\232\n\227\000\000\000\000\tI\000\000\000\000\000\000\000\000\t*\n\229\000\000\000\000\000\000\n\231\000\000\tJ\004o\000\000\tH\000\000\000\000\000\000\0114\000\000\000\000\n\241\tI\000\000\011\233\004\172\000\000\000\000\000\000\000\000\003\029\000\000\000\000\tL\tJ\004o\n\242\000\000\012u\011\230\000\000\000\000\tM\000\000\004\224\003\141\tO\003r\003s\003\030\003/\011\234\003 \003!\000\000\000\000\tL\000\000\tY\t-\011\235\000\000\011\236\000\000\000\000\tM\011\231\012\000\011\232\tO\t\029\000\000\ty\tZ\t/\000\000\000\000\000\000\000\000\000\000\012\003\tY\000\000\000\000\000\000\001k\004\229\004\245\004\246\000\000\000\000\000\000\0030\000\000\0031\004\200\tZ\011\233\000\000\000\000\000\000\000\000\000\000\011\238\000\000\000\000\000\000\011\240\011\242\000\000\000\000\000\195\003\150\000\000\000\000\000\000\000\000\0038\000\000\011\253\000\000\000\000\003x\001T\011\234\000\000\001U\003&\000\000\001o\000\000\000\000\000\000\011\235\011\254\011\236\000\000\000\000\003\029\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001p\001W\012\007\003\029\012\003\000\000\000\000\001\138\003\030\003/\000\000\003 \003!\000\000\000\000\000\000\000\000\000\000\011\r\000\000\000\000\000\000\003\030\003/\000\000\003 \003!\011\238\000\000\003\136\000\000\011\240\011\242\000\000\003:\000\000\000\000\003\152\001g\003v\003\029\000\000\003;\011\253\003$\000\000\000\000\000\000\000\000\000\000\000\000\0030\000\000\0031\003V\001u\000\000\000\000\011\254\003\030\003/\000\000\003 \003!\000\000\0030\001Y\0031\011\004\003\132\000\000\000\000\000\000\003o\000\000\000\000\0038\000\000\000\000\000\000\000\000\000\000\001T\000\000\003M\001U\003&\000\000\001o\007\127\0038\001T\003p\004\193\001U\003r\003s\001o\000\000\000\000\003&\000\000\0030\000\000\0031\003V\000\000\001T\001p\001W\001U\000\000\000\000\001o\001{\002\127\000\000\001p\001W\000\000\000\000\001b\000\000\000\000\002\135\001\131\000\000\0038\000\000\000\000\000\000\000\000\001T\001p\001W\001U\000\000\003&\001o\000\000\002\139\000\000\003:\000\000\000\000\000\000\001g\001k\000\000\001\133\003;\000\000\003$\000\000\000\000\001g\003:\000\000\001p\001W\003w\000\000\000\000\001u\003;\002\145\003$\000\000\000\000\000\000\003x\001g\001u\000\000\001Y\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001Y\000\000\000\000\000\000\003\029\001u\000\000\000\000\000\000\000\000\003:\000\000\000\000\001g\000\000\003\029\001Y\007n\003;\000\000\003$\000\000\000\000\003\030\003/\000\000\003 \003!\000\000\000\000\001u\000\000\000\000\003\\\003\030\003/\000\000\003 \003!\001{\000\000\001Y\000\000\003\136\003S\000\000\001b\000\000\001{\000\000\001\131\003\137\000\000\003v\000\000\001b\000\000\000\000\000\000\001\131\000\000\000\000\000\000\000\000\001{\003\029\0030\000\000\0031\003V\000\000\001b\001k\000\000\001\133\001\131\000\000\0030\000\000\0031\003V\001k\000\000\001\133\003\030\003/\003o\003 \003!\001{\000\000\0038\000\000\000\000\003X\000\000\001b\001k\000\000\001\133\001\131\003&\0038\000\000\000\000\003p\003\141\000\000\003r\003s\000\000\000\000\003&\000\000\000\000\003o\000\000\000\000\000\000\000\000\003o\000\000\001k\000\000\001\133\000\000\000\000\0030\000\000\0031\003V\000\000\000\000\000\000\003p\003\141\004\172\003r\003s\003p\003\141\000\000\003r\003s\000\000\000\000\000\000\000\000\003\142\000\000\003\143\003\246\0038\000\000\000\000\004\224\003\141\003:\003r\003s\000\000\000\000\003&\000\000\000\000\003;\000\000\003$\003:\000\000\003o\000\000\000\000\003\150\000\000\000\000\003;\003\142\003$\003\143\003\254\000\000\003\142\003x\003\143\004P\000\000\000\000\006\214\003p\003\141\000\000\003r\003s\000\000\000\000\000\000\004\229\004\245\004\246\000\000\000\000\003\150\000\000\000\000\000\000\000\000\003\150\000\000\000\000\000\000\000\000\003x\000\000\000\000\000\000\000\000\003x\003:\000\000\000\000\003o\0068\003\150\000\000\000\000\003;\000\000\003$\004\189\000\000\000\000\003\142\003x\003\143\004P\000\000\004\192\004\001\003\136\003p\004\193\000\000\003r\003s\000\000\000\000\003\152\000\000\003v\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\150\000\000\000\000\000\000\000\000\004\249\000\000\000\000\000\000\000\000\003x\003\136\000\000\000\000\003o\006;\003\136\000\000\000\000\003\152\000\000\003v\004\189\000\000\003\152\000\000\003v\004\172\000\000\000\000\004\192\000\000\003\136\003p\004\193\000\000\003r\003s\000\000\000\000\003\152\000\000\003v\000\000\000\000\003o\004\224\003\141\000\000\003r\003s\003w\000\000\000\000\000\000\000\000\000\000\000\000\004\172\000\000\000\000\003x\000\000\000\000\003p\003\141\003\136\003r\003s\000\000\000\000\000\000\000\000\000\000\003\152\000\000\003v\004\224\003\141\000\000\003r\003s\000\000\000\000\000\000\000\000\000\000\000\000\004\229\004\245\004\246\004\194\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003w\000\000\000\000\000\000\000\000\000\000\003\142\000\000\003\143\003\246\003x\004\196\000\000\003\150\003o\000\000\003\136\000\000\004\229\004\245\004\246\000\000\007j\003x\003\137\000\000\003v\000\000\000\000\000\000\007m\003\150\000\000\003p\004\193\000\000\003r\003s\000\000\000\000\004\194\003x\000\000\000\000\003\150\000\000\006\217\000\000\000\000\003o\000\000\000\000\006\171\000\000\003x\000\000\000\000\007j\000\000\000\000\000\000\004\195\004\172\000\000\000\000\007m\003\136\000\000\003p\004\193\000\000\003r\003s\000\000\003\137\000\000\003v\000\000\000\000\003\136\000\000\004\224\003\141\007\020\003r\003s\000\000\003\152\000\000\003v\000\000\000\000\000\000\004\172\000\000\000\000\000\000\003\136\000\000\000\000\000\000\003w\000\000\000\000\000\000\003\152\000\000\003v\nk\000\000\003\136\003x\004\224\003\141\000\000\003r\003s\000\000\003\152\000\000\003v\000\000\000\000\004\229\004\245\004\246\000\000\n|\003\141\000\000\003r\003s\000\000\000\000\000\000\000\000\003w\000\000\000\000\000\000\000\000\007n\000\000\000\000\000\000\000\000\003x\000\000\000\000\003\150\000\000\000\000\000\000\000\000\004\229\004\245\004\246\000\000\000\000\003x\000\000\000\000\007p\000\000\000\000\000\000\000\000\003\136\000\000\n\129\004\245\004\246\000\000\000\000\000\000\003\137\007n\003v\000\000\000\000\003\150\nk\000\000\000\000\000\000\000\000\000\000\000\000\bl\000\000\003x\000\000\000\000\000\000\000\000\003\150\000\000\007o\003o\000\000\n|\003\141\003\136\003r\003s\003x\000\000\000\000\000\000\000\000\003\137\000\000\003v\nk\000\000\003\136\000\000\003p\003\141\b\145\003r\003s\000\000\003\152\000\000\003v\000\000\000\000\003o\000\000\000\000\000\000\n|\003\141\n\132\003r\003s\000\000\000\000\000\000\000\000\000\000\n\129\004\245\004\246\000\000\003\136\003p\003\141\000\000\003r\003s\000\000\000\000\003\152\000\000\003v\000\000\000\000\000\000\003\142\003\136\003\143\012c\012e\000\000\000\000\000\000\003\150\003\152\000\000\003v\000\000\000\000\n\129\004\245\004\246\000\000\003x\000\000\000\000\000\000\000\000\003o\000\000\003\150\000\000\000\000\000\000\000\000\003\142\000\000\003\143\t\249\000\000\003x\000\000\000\000\003\029\000\000\003\150\000\000\003p\003\141\000\000\003r\003s\n\138\000\000\000\000\003x\000\000\000\000\003\029\000\000\003\150\000\000\003\030\003/\000\000\003 \003!\000\000\000\000\000\000\003x\000\000\000\000\000\000\000\000\000\000\000\000\003\030\003/\003\136\003 \003!\000\000\000\000\n\222\000\000\000\000\003\152\000\000\003v\003\142\000\000\003\143\003\155\000\000\000\000\003\136\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\152\0030\003v\0031\003_\000\000\000\000\003\136\000\000\000\000\000\000\003\150\000\000\000\000\000\000\003\152\0030\003v\0031\003@\000\000\003x\003\136\000\000\003\029\000\000\0038\000\000\000\000\000\000\003\152\000\000\003v\003\029\000\000\000\000\003&\000\000\000\000\003\029\000\000\0038\000\000\003\030\003/\000\000\003 \003!\003\029\000\000\000\000\003&\003\030\003/\000\000\003 \003!\000\000\003\030\003/\003\029\003 \003!\000\000\000\000\000\000\000\000\003\030\003/\000\000\003 \003!\000\000\000\000\000\000\000\000\000\000\003\136\000\000\003\030\003/\000\000\003 \003!\000\000\003\152\0030\003vo\003:\000\000\003&\000\000\000\000\000\000\000\000\0038\003;\000\000\003$\000\000\003o\000\000\000\000\000\000\0038\003&\003p\003\141\000\000\003r\003s\003o\000\000\000\000\003&\000\000\000\000\003o\000\000\003p\003\141\000\000\003r\003s\000\000\000\000\000\000\000\000\000\000\000\000\003p\003\141\000\000\003r\003s\000\000\003p\003\141\000\000\003r\003s\000\000\000\000\000\000\000\000\000\000\003:\000\000\000\000\003\142\000\000\003\143\003\154\000\000\003;\000\000\003$\000\000\000\000\000\000\000\000\003:\003\142\000\000\003\143\003\145\000\000\000\000\000\000\003;\003:\003$\003o\003\142\003\150\003\143\003\148\000\000\003;\003\142\003$\003\143\003\151\000\000\003x\000\000\000\000\003\150\000\000\000\000\003o\003p\003\141\000\000\003r\003s\000\000\003x\003\150\000\000\000\000\000\000\000\000\003o\003\150\000\000\000\000\000\000\003x\003p\003\141\000\000\003r\003s\003x\000\000\000\000\000\000\000\000\003o\000\000\000\000\003p\003\141\003o\003r\003s\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\142\000\000\003\143\003\153\003p\003\141\003\136\003r\003s\003p\003\141\000\000\003r\003s\003\152\000\000\003v\000\000\003\142\003\136\003\143\003\159\000\000\000\000\000\000\003\150\000\000\003\152\000\000\003v\003\136\003\142\000\000\003\143\003\165\003x\003\136\000\000\003\152\000\000\003v\000\000\003o\003\150\003\152\000\000\003v\003\142\003o\003\143\004\016\000\000\003\142\003x\003\143\004\021\003\150\000\000\000\000\000\000\000\000\003p\003\141\000\000\003r\003s\003x\003p\003\141\000\000\003r\003s\003\150\000\000\000\000\000\000\000\000\003\150\000\000\000\000\000\000\000\000\003x\000\000\000\000\000\000\000\000\003x\000\000\000\000\000\000\003\136\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\152\000\000\003v\000\000\000\000\003\142\003o\003\143\004_\000\000\003\136\003\142\000\000\003\143\004\234\000\000\000\000\000\000\003\152\000\000\003v\000\000\000\000\003\136\000\000\003p\003\141\000\000\003r\003s\003\150\003\152\000\000\003v\000\000\000\000\003\150\000\000\000\000\003\136\003x\000\000\000\000\003o\003\136\000\000\003x\003\152\000\000\003v\000\000\000\000\003\152\000\000\003v\003o\000\000\000\000\000\000\000\000\003o\000\000\003p\003\141\000\000\003r\003s\000\000\003\142\000\000\003\143\004\237\000\000\000\000\003p\003\141\000\000\003r\003s\003p\003\141\000\000\003r\003s\000\000\000\000\000\000\t\133\000\000\000\000\000\000\000\000\000\000\003\150\000\000\000\000\003\136\000\000\000\000\000\000\000\000\000\000\003\136\003x\003\152\003\142\003v\003\143\004\240\000\000\003\152\000\000\003v\000\000\t\134\000\000\t\135\003\142\000\000\003\143\004\248\000\000\003\142\000\000\003\143\005\n\000\000\000\000\000\000\000\000\003\150\000\000\000\000\000\000\000\000\000\000\000\000\011\230\000\000\000\000\003x\000\000\003\150\000\000\000\000\t\136\000\000\003\150\000\000\000\000\000\000\011\230\003x\000\000\000\000\000\000\000\000\003x\000\000\003\136\000\000\000\000\000\000\000\000\011\231\000\000\011\232\003\152\000\000\003v\003o\000\000\t\137\000\000\000\000\000\000\000\000\000\000\011\231\000\000\011\232\t\138\000\000\t\139\000\000\000\000\000\000\000\000\000\000\003p\004\193\000\000\003r\003s\000\000\011\233\003\136\000\000\000\000\000\000\000\000\t\140\000\000\000\000\003\152\000\000\003v\000\000\003\136\011\233\000\000\000\000\000\000\003\136\000\000\003o\003\152\000\000\003v\000\000\000\000\003\152\011\234\003v\t\141\000\000\000\000\000\000\t\143\t\145\000\000\011\235\000\000\011\236\003p\004\193\011\234\003r\003s\003o\t\156\000\000\000\000\000\000\000\000\011\235\000\000\011\236\000\000\000\000\003o\011\255\000\000\000\000\000\000\t\157\000\000\003w\003p\004\193\000\000\003r\003s\003o\000\000\011\237\007\157\003x\000\000\003p\004\193\000\000\003r\003s\011\238\000\000\000\000\000\000\011\240\011\242\000\000\000\000\003p\004\193\000\000\003r\003s\003o\011\238\000\000\011\253\000\000\011\240\011\242\000\000\000\000\000\000\006\202\000\000\000\000\000\000\000\000\003w\000\000\011\253\011\254\003p\004\193\000\000\003r\003s\000\000\003x\000\000\000\000\000\000\000\000\006\204\000\000\011\254\000\000\000\000\000\000\003\136\000\000\000\000\003w\000\000\000\000\000\000\000\000\003\137\003o\003v\000\000\000\000\003x\003w\000\000\000\000\000\000\000\000\006\202\000\000\000\000\000\000\000\000\003x\000\000\000\000\003w\003p\004\193\000\000\003r\003s\000\000\000\000\000\000\000\000\003x\000\000\006\203\000\000\000\000\000\000\006\202\000\000\003\136\000\000\000\000\000\000\000\000\000\000\003w\003o\003\137\007n\003v\000\000\000\000\000\000\000\000\000\000\003x\000\000\006\207\000\000\000\000\000\000\t5\000\000\003\136\000\000\003p\004\193\000\000\003r\003s\000\000\003\137\000\000\003v\003\136\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\137\003o\003v\b|\000\000\003\136\000\000\000\000\003w\000\000\000\000\000\000\003o\003\137\000\000\003v\000\000\000\000\003x\000\000\003p\004\193\000\000\003r\003s\000\000\t7\000\000\000\000\003\136\000\000\003p\004\193\000\000\003r\003s\003o\003\137\000\000\003v\000\000\000\000\000\000\003o\000\000\000\000\000\000\000\000\b|\b\137\000\000\003w\000\000\000\000\000\000\003p\004\193\000\000\003r\003s\000\000\003x\003p\004\193\000\000\003r\003s\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\136\000\000\000\000\000\000\000\000\000\000\000\000\003o\003\137\000\000\003v\000\000\000\000\000\000\003w\000\000\000\000\b\246\000\000\003o\b\136\000\000\000\000\000\000\003x\003w\003p\004\193\000\000\003r\003s\000\000\000\000\000\000\000\000\003x\000\000\000\000\003p\004\193\000\000\003r\003s\003\136\000\000\000\000\000\000\001T\003o\003w\001U\003\137\000\000\003v\b\246\000\000\003w\000\000\000\000\003x\000\000\000\000\003o\t\002\000\000\t5\003x\003p\004\193\000\000\003r\003s\000\000\000\000\001W\000\000\000\000\000\000\000\000\bt\003\136\003p\004\193\000\000\003r\003s\000\000\000\000\003\137\t5\003v\003\136\001T\000\000\003w\001U\n\198\000\000\000\000\003\137\t\001\003v\000\000\000\000\003x\000\000\003w\000\000\000\000\000\000\001T\001g\t6\001U\000\000\003\136\003x\000\000\000\000\001W\000\000\000\000\003\136\003\137\001T\003v\000\000\001U\000\000\004\215\003\137\000\000\003v\000\000\n\198\003w\t>\001W\000\000\001Y\000\000\000\000\b\164\n\200\001T\003x\n\198\001U\000\000\003w\000\000\001W\000\000\000\000\000\000\000\000\001g\000\000\000\000\003x\003\136\000\000\000\000\001T\001T\000\000\001U\001U\003\137\000\000\003v\001W\003\136\000\000\001g\006\206\b\241\000\000\000\000\000\000\003\137\n\199\003v\000\000\001Y\000\000\000\000\001{\001g\0062\001W\001W\000\000\n\207\001b\t\022\000\000\000\000\by\000\000\000\000\003\136\001Y\000\000\001T\000\000\000\000\001U\001g\003\137\002\153\003v\000\000\002\154\000\000\003\136\001Y\000\000\000\000\000\000\001k\000\000\001\133\003\137\000\000\003v\001T\001g\001g\t%\000\000\001W\001{\000\000\000\000\000\000\001Y\002\156\000\000\001b\000\000\ns\001T\004\186\000\000\001U\000\000\000\000\000\000\000\000\001{\000\000\000\000\001W\000\000\001Y\001Y\001b\000\000\000\000\001T\by\000\000\001U\001{\001k\000\000\001\133\001g\001W\000\000\001b\000\000\000\000\002\167\bW\000\000\000\000\b\182\000\000\000\000\000\000\000\000\001k\001{\001\133\000\000\001W\000\000\001T\t'\001b\001U\000\000\000\000\by\001Y\001k\001T\001\133\000\000\001U\002\159\001{\001{\000\000\001g\000\000\000\000\000\000\001b\001b\000\000\000\000\by\012!\001W\001k\t*\001\133\000\000\000\000\000\000\000\000\001g\001W\000\000\001T\000\000\000\000\001U\000\000\002\153\000\000\001Y\002\154\001k\001k\001\133\001\133\002\153\000\000\000\000\002\154\001{\001T\000\000\000\000\001U\000\000\002\176\001b\001Y\001g\001W\004\186\000\000\002\162\000\000\002\156\000\000\012\026\001g\000\000\000\000\000\000\000\000\002\156\000\000\000\000\000\000\000\000\001W\t-\000\000\000\000\000\000\001k\000\000\001\133\000\000\001Y\001{\002\171\t\029\002\189\t\129\000\000\t/\001b\001Y\001g\000\000\001\157\001T\000\000\002\167\001U\000\000\001k\001{\000\000\000\000\000\000\002\167\000\000\000\000\001b\000\000\001g\000\000\001\161\000\000\000\000\000\000\001k\000\000\001\133\000\000\001Y\000\000\001W\000\000\000\000\002\159\001T\000\000\000\000\001U\001{\000\000\000\000\002\159\001k\000\000\001\133\001b\001Y\001{\001T\002M\000\000\001U\000\000\000\000\001b\000\000\000\000\001T\002O\000\000\001U\001W\000\000\000\000\000\000\000\000\001T\001g\000\000\001U\000\000\001k\000\000\001\133\000\000\001W\001{\000\000\000\000\000\000\001k\002\176\001\133\001b\001W\000\000\000\000\002\185\002\162\002\176\000\000\000\000\002\187\001W\001{\001Y\002\162\000\000\001g\000\000\003\b\001b\000\000\000\000\002\153\003\161\000\000\002\154\000\000\001k\000\000\001\133\001g\000\000\002\171\000\000\002\189\000\000\000\000\000\000\001T\001g\002\171\001U\002\189\000\000\001Y\001k\000\000\001\133\001g\002\156\000\000\000\000\001T\000\000\000\000\001U\000\000\000\000\001Y\000\000\000\000\001{\000\000\000\000\000\000\001W\000\000\001Y\001b\000\000\000\000\000\000\003\199\000\000\000\000\000\000\001Y\000\000\000\000\001W\000\000\000\000\001T\000\000\000\000\001U\002\167\000\000\000\000\000\000\000\000\000\000\001{\000\000\001k\000\000\001\133\000\000\000\000\001b\000\000\002\153\001g\004\000\002\154\000\000\001{\000\000\000\000\001W\000\000\000\000\000\000\001b\002\159\001{\001g\0043\002\153\000\000\000\000\002\154\001b\000\000\001{\001k\004\183\001\133\002\156\000\000\001Y\001b\000\000\000\000\000\000\004\188\000\000\000\000\000\000\001k\000\000\001\133\000\000\000\000\001Y\002\156\001g\000\000\001k\000\000\001\133\000\000\002\153\000\000\000\000\002\154\000\000\001k\000\000\001\133\000\000\000\000\002\176\000\000\002\153\002\167\000\000\002\154\000\000\002\162\000\000\000\000\000\000\004\205\001Y\000\000\000\000\000\000\001{\002\156\000\000\001T\002\167\000\000\001U\001b\000\000\000\000\000\000\004\212\000\000\002\156\001{\002\159\000\000\002\171\000\000\002\189\000\000\001b\000\000\000\000\000\000\004\217\001T\000\000\000\000\001U\001W\000\000\002\159\001k\000\000\001\133\000\000\000\000\002\167\000\000\000\000\000\000\002\153\000\000\001{\002\154\000\000\001k\000\000\001\133\002\167\001b\000\000\001W\000\000\004\226\001T\000\000\000\000\001U\000\000\000\000\000\000\002\176\000\000\001T\002\159\001g\001U\002\156\002\162\000\000\000\000\000\000\005\252\000\000\000\000\001k\002\159\001\133\002\176\000\000\000\000\001W\000\000\000\000\000\000\002\162\000\000\000\000\001g\005\255\001W\000\000\000\000\001Y\002\171\000\000\002\189\000\000\000\000\000\000\000\000\000\000\000\000\001T\002\167\000\000\001U\000\000\000\000\000\000\000\000\002\171\002\176\002\189\000\000\000\000\001Y\002\153\001g\002\162\002\154\000\000\000\000\006\001\002\176\000\000\002\153\001g\000\000\002\154\001W\002\162\002\159\000\000\001T\007V\000\000\001U\000\000\000\000\000\000\001{\000\000\000\000\002\156\002\171\001Y\002\189\001b\000\000\000\000\000\000\007u\002\156\000\000\001Y\000\000\002\171\000\000\002\189\000\000\001W\000\000\000\000\001{\000\000\001T\001g\000\000\001U\000\000\001b\000\000\000\000\001k\007z\001\133\000\000\000\000\000\000\002\176\002\167\000\000\000\000\000\000\000\000\000\000\002\162\000\000\000\000\002\167\007\142\000\000\001W\001{\001Y\000\000\001k\001g\001\133\000\000\001b\000\000\001{\000\000\007\151\000\000\000\000\001T\002\159\001b\001U\000\000\002\171\007\174\002\189\000\000\000\000\002\159\000\000\001T\000\000\000\000\001U\000\000\000\000\001Y\001k\000\000\001\133\001g\000\000\000\000\000\000\000\000\001W\001k\000\000\001\133\000\000\000\000\000\000\000\000\001{\000\000\000\000\000\000\001W\000\000\000\000\001b\000\000\001T\000\000\b&\001U\000\000\002\176\001Y\001T\002\153\000\000\t%\002\154\002\162\000\000\002\176\000\000\b2\000\000\000\000\000\000\001g\002\162\001{\000\000\001k\bY\001\133\001W\000\000\001b\000\000\000\000\001g\bx\001W\002\156\000\000\000\000\002\171\000\000\002\189\001T\001T\000\000\b\198\b\198\000\000\002\171\001Y\002\189\000\000\000\000\000\000\000\000\001{\001k\000\000\001\133\000\000\000\000\001Y\001b\000\000\000\000\001g\np\000\000\000\000\001W\001W\000\000\t'\002\167\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001k\000\000\001\133\000\000\000\000\001Y\000\000\000\000\000\000\001{\000\000\000\000\t*\002\159\000\000\000\000\001b\000\000\b\200\b\200\nu\001{\000\000\000\000\000\000\000\000\000\000\000\000\001b\000\000\000\000\000\000\n~\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001k\000\000\001\133\000\000\b\203\b\203\000\000\000\000\000\000\000\000\000\000\001{\001k\000\000\001\133\000\000\000\000\000\000\001b\002\176\000\000\000\000\n\150\000\000\000\000\t-\002\162\000\000\000\000\000\000\011\t\000\000\000\000\000\000\000\000\000\000\t\029\000\000\n\195\000\000\t/\000\000\000\000\000\000\001k\000\000\001\133\000\000\000\000\000\000\000\000\001k\002\171\000\000\002\189\000\000\000\000\000\000\000\000\b\206\b\206\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\171\b\171\011\218\011\226\b\208\b\208\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001k\001k"))
  
  and semantic_action =
    [|
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3287 "parser_raw.mly"
         ( "+" )
# 1283 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3288 "parser_raw.mly"
            ( "+." )
# 1308 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.core_type) = 
# 2885 "parser_raw.mly"
      ( _1 )
# 1333 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = tyvar00;
          MenhirLib.EngineTypes.startp = _startpos_tyvar00_;
          MenhirLib.EngineTypes.endp = _endpos_tyvar00_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _300;
            MenhirLib.EngineTypes.startp = _startpos__300_;
            MenhirLib.EngineTypes.endp = _endpos__300_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _200;
              MenhirLib.EngineTypes.startp = _startpos__200_;
              MenhirLib.EngineTypes.endp = _endpos__200_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = ty00;
                MenhirLib.EngineTypes.startp = _startpos_ty00_;
                MenhirLib.EngineTypes.endp = _endpos_ty00_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let tyvar00 : (string) = Obj.magic tyvar00 in
        let _300 : unit = Obj.magic _300 in
        let _200 : unit = Obj.magic _200 in
        let ty00 : (Parsetree.core_type) = Obj.magic ty00 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ty00_ in
        let _endpos = _endpos_tyvar00_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _endpos_tyvar0_ = _endpos_tyvar00_ in
          let _startpos_ty0_ = _startpos_ty00_ in
          let tyvar0 = tyvar00 in
          let _30 = _300 in
          let _20 = _200 in
          let ty0 = ty00 in
          let _1 =
            let tyvar = tyvar0 in
            let _3 = _30 in
            let _2 = _20 in
            let ty = ty0 in
            
# 2888 "parser_raw.mly"
        ( Ptyp_alias(ty, tyvar) )
# 1388 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_tyvar0_ in
          let _startpos__1_ = _startpos_ty0_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 725 "parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 1399 "parser_raw.ml"
          
        in
        
# 2890 "parser_raw.mly"
    ( _1 )
# 1405 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _11;
          MenhirLib.EngineTypes.startp = _startpos__11_;
          MenhirLib.EngineTypes.endp = _endpos__11_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = body;
            MenhirLib.EngineTypes.startp = _startpos_body_;
            MenhirLib.EngineTypes.endp = _endpos_body_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _10;
              MenhirLib.EngineTypes.startp = _startpos__10_;
              MenhirLib.EngineTypes.endp = _endpos__10_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _11 : (Parsetree.attributes) = Obj.magic _11 in
        let body : (Parsetree.pattern * Parsetree.expression) = Obj.magic body in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__11_ in
        let _v : (Ast_helper.let_binding) = let attrs2 =
          let _1 = _11 in
          
# 3368 "parser_raw.mly"
    ( _1 )
# 1450 "parser_raw.ml"
          
        in
        let _endpos_attrs2_ = _endpos__11_ in
        let attrs1 =
          let _1 = _10 in
          
# 3372 "parser_raw.mly"
    ( _1 )
# 1459 "parser_raw.ml"
          
        in
        let _endpos = _endpos_attrs2_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2211 "parser_raw.mly"
    (
      let attrs = attrs1 @ attrs2 in
      mklb ~loc:_sloc false body attrs
    )
# 1471 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.core_type) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.core_type) = 
# 2944 "parser_raw.mly"
      ( _2 )
# 1508 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _1000;
            MenhirLib.EngineTypes.startp = _startpos__1000_;
            MenhirLib.EngineTypes.endp = _endpos__1000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _100;
              MenhirLib.EngineTypes.startp = _startpos__100_;
              MenhirLib.EngineTypes.endp = _endpos__100_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _11;
                MenhirLib.EngineTypes.startp = _startpos__11_;
                MenhirLib.EngineTypes.endp = _endpos__11_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _1000 : (Parsetree.module_type) = Obj.magic _1000 in
        let _100 : (Parsetree.attributes) = Obj.magic _100 in
        let _11 : (string Location.loc option) = Obj.magic _11 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.core_type) = let _4 =
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _100 = _1000 in
          let _1 =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _10 = _100 in
            let _1 =
              let _1 = _10 in
              
# 3003 "parser_raw.mly"
      ( Ptyp_package (package_type_of_module_type _1) )
# 1573 "parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 725 "parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 1584 "parser_raw.ml"
            
          in
          
# 3004 "parser_raw.mly"
      ( _1 )
# 1590 "parser_raw.ml"
          
        in
        let _3 =
          let _10 = _100 in
          let _1 = _11 in
          let _2 =
            let _1 = _10 in
            
# 3372 "parser_raw.mly"
    ( _1 )
# 1601 "parser_raw.ml"
            
          in
          
# 3383 "parser_raw.mly"
                 ( _1, _2 )
# 1607 "parser_raw.ml"
          
        in
        let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2946 "parser_raw.mly"
      ( wrap_typ_attrs ~loc:_sloc (reloc_typ ~loc:_sloc _4) _3 )
# 1616 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _200;
          MenhirLib.EngineTypes.startp = _startpos__200_;
          MenhirLib.EngineTypes.endp = _endpos__200_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _100;
            MenhirLib.EngineTypes.startp = _startpos__100_;
            MenhirLib.EngineTypes.endp = _endpos__100_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _200 : (string) = Obj.magic _200 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__200_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _endpos__20_ = _endpos__200_ in
          let _startpos__10_ = _startpos__100_ in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _2 = _20 in
            let _1 = _10 in
            
# 2949 "parser_raw.mly"
        ( Ptyp_var _2 )
# 1655 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__20_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 725 "parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 1666 "parser_raw.ml"
          
        in
        
# 2981 "parser_raw.mly"
  ( _1 )
# 1672 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__100_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 2951 "parser_raw.mly"
        ( Ptyp_any )
# 1703 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 725 "parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 1714 "parser_raw.ml"
          
        in
        
# 2981 "parser_raw.mly"
  ( _1 )
# 1720 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1000;
          MenhirLib.EngineTypes.startp = _startpos__1000_;
          MenhirLib.EngineTypes.endp = _endpos__1000_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1000 : (Longident.t) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos__1000_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _100 = _1000 in
          let _1 =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _10 = _100 in
            let tid =
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _1 = _10 in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 1760 "parser_raw.ml"
              
            in
            let tys =
              
# 2995 "parser_raw.mly"
      ( [] )
# 1767 "parser_raw.ml"
              
            in
            
# 2954 "parser_raw.mly"
        ( Ptyp_constr(tid, tys) )
# 1773 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__100_ in
          let _startpos__1_ = _startpos__100_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 725 "parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 1784 "parser_raw.ml"
          
        in
        
# 2981 "parser_raw.mly"
  ( _1 )
# 1790 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _1000;
          MenhirLib.EngineTypes.startp = _startpos__1000_;
          MenhirLib.EngineTypes.endp = _endpos__1000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = ty000;
            MenhirLib.EngineTypes.startp = _startpos_ty000_;
            MenhirLib.EngineTypes.endp = _endpos_ty000_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _1000 : (Longident.t) = Obj.magic _1000 in
        let ty000 : (Parsetree.core_type) = Obj.magic ty000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ty000_ in
        let _endpos = _endpos__1000_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _startpos_ty00_ = _startpos_ty000_ in
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _100 = _1000 in
          let ty00 = ty000 in
          let _1 =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _10 = _100 in
            let ty0 = ty00 in
            let tid =
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _1 = _10 in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 1839 "parser_raw.ml"
              
            in
            let tys =
              let ty = ty0 in
              
# 2997 "parser_raw.mly"
      ( [ty] )
# 1847 "parser_raw.ml"
              
            in
            
# 2954 "parser_raw.mly"
        ( Ptyp_constr(tid, tys) )
# 1853 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__100_ in
          let _startpos__1_ = _startpos_ty00_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 725 "parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 1864 "parser_raw.ml"
          
        in
        
# 2981 "parser_raw.mly"
  ( _1 )
# 1870 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _1100;
          MenhirLib.EngineTypes.startp = _startpos__1100_;
          MenhirLib.EngineTypes.endp = _endpos__1100_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3000;
            MenhirLib.EngineTypes.startp = _startpos__3000_;
            MenhirLib.EngineTypes.endp = _endpos__3000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = xs00000;
              MenhirLib.EngineTypes.startp = _startpos_xs00000_;
              MenhirLib.EngineTypes.endp = _endpos_xs00000_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1000;
                MenhirLib.EngineTypes.startp = _startpos__1000_;
                MenhirLib.EngineTypes.endp = _endpos__1000_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _1100 : (Longident.t) = Obj.magic _1100 in
        let _3000 : unit = Obj.magic _3000 in
        let xs00000 : (Parsetree.core_type list) = Obj.magic xs00000 in
        let _1000 : unit = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos__1100_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _endpos__110_ = _endpos__1100_ in
          let _startpos__110_ = _startpos__1100_ in
          let _startpos__100_ = _startpos__1000_ in
          let _110 = _1100 in
          let _300 = _3000 in
          let xs0000 = xs00000 in
          let _100 = _1000 in
          let _1 =
            let _endpos__11_ = _endpos__110_ in
            let _startpos__11_ = _startpos__110_ in
            let _11 = _110 in
            let _30 = _300 in
            let xs000 = xs0000 in
            let _10 = _100 in
            let tid =
              let _endpos__1_ = _endpos__11_ in
              let _startpos__1_ = _startpos__11_ in
              let _1 = _11 in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 1935 "parser_raw.ml"
              
            in
            let tys =
              let _3 = _30 in
              let xs00 = xs000 in
              let _1 = _10 in
              let tys =
                let xs0 = xs00 in
                let xs =
                  let xs = xs0 in
                  
# 253 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( List.rev xs )
# 1949 "parser_raw.ml"
                  
                in
                
# 824 "parser_raw.mly"
    ( xs )
# 1955 "parser_raw.ml"
                
              in
              
# 2999 "parser_raw.mly"
      ( tys )
# 1961 "parser_raw.ml"
              
            in
            
# 2954 "parser_raw.mly"
        ( Ptyp_constr(tid, tys) )
# 1967 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__110_ in
          let _startpos__1_ = _startpos__100_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 725 "parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 1978 "parser_raw.ml"
          
        in
        
# 2981 "parser_raw.mly"
  ( _1 )
# 1984 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _300;
          MenhirLib.EngineTypes.startp = _startpos__300_;
          MenhirLib.EngineTypes.endp = _endpos__300_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _200;
            MenhirLib.EngineTypes.startp = _startpos__200_;
            MenhirLib.EngineTypes.endp = _endpos__200_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _100;
              MenhirLib.EngineTypes.startp = _startpos__100_;
              MenhirLib.EngineTypes.endp = _endpos__100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _300 : unit = Obj.magic _300 in
        let _200 : (Parsetree.object_field list * Asttypes.closed_flag) = Obj.magic _200 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__300_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _endpos__30_ = _endpos__300_ in
          let _startpos__10_ = _startpos__100_ in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            
# 2956 "parser_raw.mly"
        ( let (f, c) = _2 in Ptyp_object (f, c) )
# 2031 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__30_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 725 "parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 2042 "parser_raw.ml"
          
        in
        
# 2981 "parser_raw.mly"
  ( _1 )
# 2048 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _200;
          MenhirLib.EngineTypes.startp = _startpos__200_;
          MenhirLib.EngineTypes.endp = _endpos__200_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _100;
            MenhirLib.EngineTypes.startp = _startpos__100_;
            MenhirLib.EngineTypes.endp = _endpos__100_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _200 : unit = Obj.magic _200 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__200_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _endpos__20_ = _endpos__200_ in
          let _startpos__10_ = _startpos__100_ in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _2 = _20 in
            let _1 = _10 in
            
# 2958 "parser_raw.mly"
        ( Ptyp_object ([], Closed) )
# 2087 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__20_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 725 "parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 2098 "parser_raw.ml"
          
        in
        
# 2981 "parser_raw.mly"
  ( _1 )
# 2104 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _1000;
          MenhirLib.EngineTypes.startp = _startpos__1000_;
          MenhirLib.EngineTypes.endp = _endpos__1000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _200;
            MenhirLib.EngineTypes.startp = _startpos__200_;
            MenhirLib.EngineTypes.endp = _endpos__200_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _1000 : (Longident.t) = Obj.magic _1000 in
        let _200 : unit = Obj.magic _200 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__200_ in
        let _endpos = _endpos__1000_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _startpos__20_ = _startpos__200_ in
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _100 = _1000 in
          let _20 = _200 in
          let _1 =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _10 = _100 in
            let _2 = _20 in
            let cid =
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _1 = _10 in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 2153 "parser_raw.ml"
              
            in
            let tys =
              
# 2995 "parser_raw.mly"
      ( [] )
# 2160 "parser_raw.ml"
              
            in
            
# 2962 "parser_raw.mly"
        ( Ptyp_class(cid, tys) )
# 2166 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__100_ in
          let _startpos__1_ = _startpos__20_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 725 "parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 2177 "parser_raw.ml"
          
        in
        
# 2981 "parser_raw.mly"
  ( _1 )
# 2183 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _1000;
          MenhirLib.EngineTypes.startp = _startpos__1000_;
          MenhirLib.EngineTypes.endp = _endpos__1000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _200;
            MenhirLib.EngineTypes.startp = _startpos__200_;
            MenhirLib.EngineTypes.endp = _endpos__200_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = ty000;
              MenhirLib.EngineTypes.startp = _startpos_ty000_;
              MenhirLib.EngineTypes.endp = _endpos_ty000_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1000 : (Longident.t) = Obj.magic _1000 in
        let _200 : unit = Obj.magic _200 in
        let ty000 : (Parsetree.core_type) = Obj.magic ty000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ty000_ in
        let _endpos = _endpos__1000_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _startpos_ty00_ = _startpos_ty000_ in
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _100 = _1000 in
          let _20 = _200 in
          let ty00 = ty000 in
          let _1 =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _10 = _100 in
            let _2 = _20 in
            let ty0 = ty00 in
            let cid =
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _1 = _10 in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 2240 "parser_raw.ml"
              
            in
            let tys =
              let ty = ty0 in
              
# 2997 "parser_raw.mly"
      ( [ty] )
# 2248 "parser_raw.ml"
              
            in
            
# 2962 "parser_raw.mly"
        ( Ptyp_class(cid, tys) )
# 2254 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__100_ in
          let _startpos__1_ = _startpos_ty00_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 725 "parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 2265 "parser_raw.ml"
          
        in
        
# 2981 "parser_raw.mly"
  ( _1 )
# 2271 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _1100;
          MenhirLib.EngineTypes.startp = _startpos__1100_;
          MenhirLib.EngineTypes.endp = _endpos__1100_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _200;
            MenhirLib.EngineTypes.startp = _startpos__200_;
            MenhirLib.EngineTypes.endp = _endpos__200_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3000;
              MenhirLib.EngineTypes.startp = _startpos__3000_;
              MenhirLib.EngineTypes.endp = _endpos__3000_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = xs00000;
                MenhirLib.EngineTypes.startp = _startpos_xs00000_;
                MenhirLib.EngineTypes.endp = _endpos_xs00000_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1000;
                  MenhirLib.EngineTypes.startp = _startpos__1000_;
                  MenhirLib.EngineTypes.endp = _endpos__1000_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _1100 : (Longident.t) = Obj.magic _1100 in
        let _200 : unit = Obj.magic _200 in
        let _3000 : unit = Obj.magic _3000 in
        let xs00000 : (Parsetree.core_type list) = Obj.magic xs00000 in
        let _1000 : unit = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos__1100_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _endpos__110_ = _endpos__1100_ in
          let _startpos__110_ = _startpos__1100_ in
          let _startpos__100_ = _startpos__1000_ in
          let _110 = _1100 in
          let _20 = _200 in
          let _300 = _3000 in
          let xs0000 = xs00000 in
          let _100 = _1000 in
          let _1 =
            let _endpos__11_ = _endpos__110_ in
            let _startpos__11_ = _startpos__110_ in
            let _11 = _110 in
            let _2 = _20 in
            let _30 = _300 in
            let xs000 = xs0000 in
            let _10 = _100 in
            let cid =
              let _endpos__1_ = _endpos__11_ in
              let _startpos__1_ = _startpos__11_ in
              let _1 = _11 in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 2344 "parser_raw.ml"
              
            in
            let tys =
              let _3 = _30 in
              let xs00 = xs000 in
              let _1 = _10 in
              let tys =
                let xs0 = xs00 in
                let xs =
                  let xs = xs0 in
                  
# 253 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( List.rev xs )
# 2358 "parser_raw.ml"
                  
                in
                
# 824 "parser_raw.mly"
    ( xs )
# 2364 "parser_raw.ml"
                
              in
              
# 2999 "parser_raw.mly"
      ( tys )
# 2370 "parser_raw.ml"
              
            in
            
# 2962 "parser_raw.mly"
        ( Ptyp_class(cid, tys) )
# 2376 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__110_ in
          let _startpos__1_ = _startpos__100_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 725 "parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 2387 "parser_raw.ml"
          
        in
        
# 2981 "parser_raw.mly"
  ( _1 )
# 2393 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _300;
          MenhirLib.EngineTypes.startp = _startpos__300_;
          MenhirLib.EngineTypes.endp = _endpos__300_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _200;
            MenhirLib.EngineTypes.startp = _startpos__200_;
            MenhirLib.EngineTypes.endp = _endpos__200_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _100;
              MenhirLib.EngineTypes.startp = _startpos__100_;
              MenhirLib.EngineTypes.endp = _endpos__100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _300 : unit = Obj.magic _300 in
        let _200 : (Parsetree.row_field) = Obj.magic _200 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__300_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _endpos__30_ = _endpos__300_ in
          let _startpos__10_ = _startpos__100_ in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            
# 2965 "parser_raw.mly"
        ( Ptyp_variant([_2], Closed, None) )
# 2440 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__30_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 725 "parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 2451 "parser_raw.ml"
          
        in
        
# 2981 "parser_raw.mly"
  ( _1 )
# 2457 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _400;
          MenhirLib.EngineTypes.startp = _startpos__400_;
          MenhirLib.EngineTypes.endp = _endpos__400_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = xs00000;
            MenhirLib.EngineTypes.startp = _startpos_xs00000_;
            MenhirLib.EngineTypes.endp = _endpos_xs00000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _200;
              MenhirLib.EngineTypes.startp = _startpos__200_;
              MenhirLib.EngineTypes.endp = _endpos__200_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _100;
                MenhirLib.EngineTypes.startp = _startpos__100_;
                MenhirLib.EngineTypes.endp = _endpos__100_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _400 : unit = Obj.magic _400 in
        let xs00000 : (Parsetree.row_field list) = Obj.magic xs00000 in
        let _200 : unit = Obj.magic _200 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__400_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _endpos__40_ = _endpos__400_ in
          let _startpos__10_ = _startpos__100_ in
          let _40 = _400 in
          let xs0000 = xs00000 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _4 = _40 in
            let xs000 = xs0000 in
            let _2 = _20 in
            let _1 = _10 in
            let _3 =
              let xs00 = xs000 in
              let _1 =
                let xs0 = xs00 in
                let xs =
                  let xs = xs0 in
                  
# 253 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( List.rev xs )
# 2518 "parser_raw.ml"
                  
                in
                
# 801 "parser_raw.mly"
    ( xs )
# 2524 "parser_raw.ml"
                
              in
              
# 3008 "parser_raw.mly"
    ( _1 )
# 2530 "parser_raw.ml"
              
            in
            
# 2967 "parser_raw.mly"
        ( Ptyp_variant(_3, Closed, None) )
# 2536 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__40_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 725 "parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 2547 "parser_raw.ml"
          
        in
        
# 2981 "parser_raw.mly"
  ( _1 )
# 2553 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _500;
          MenhirLib.EngineTypes.startp = _startpos__500_;
          MenhirLib.EngineTypes.endp = _endpos__500_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = xs00000;
            MenhirLib.EngineTypes.startp = _startpos_xs00000_;
            MenhirLib.EngineTypes.endp = _endpos_xs00000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _300;
              MenhirLib.EngineTypes.startp = _startpos__300_;
              MenhirLib.EngineTypes.endp = _endpos__300_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _200;
                MenhirLib.EngineTypes.startp = _startpos__200_;
                MenhirLib.EngineTypes.endp = _endpos__200_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _100;
                  MenhirLib.EngineTypes.startp = _startpos__100_;
                  MenhirLib.EngineTypes.endp = _endpos__100_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _500 : unit = Obj.magic _500 in
        let xs00000 : (Parsetree.row_field list) = Obj.magic xs00000 in
        let _300 : unit = Obj.magic _300 in
        let _200 : (Parsetree.row_field) = Obj.magic _200 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__500_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _endpos__50_ = _endpos__500_ in
          let _startpos__10_ = _startpos__100_ in
          let _50 = _500 in
          let xs0000 = xs00000 in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _5 = _50 in
            let xs000 = xs0000 in
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            let _4 =
              let xs00 = xs000 in
              let _1 =
                let xs0 = xs00 in
                let xs =
                  let xs = xs0 in
                  
# 253 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( List.rev xs )
# 2622 "parser_raw.ml"
                  
                in
                
# 801 "parser_raw.mly"
    ( xs )
# 2628 "parser_raw.ml"
                
              in
              
# 3008 "parser_raw.mly"
    ( _1 )
# 2634 "parser_raw.ml"
              
            in
            
# 2969 "parser_raw.mly"
        ( Ptyp_variant(_2 :: _4, Closed, None) )
# 2640 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__50_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 725 "parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 2651 "parser_raw.ml"
          
        in
        
# 2981 "parser_raw.mly"
  ( _1 )
# 2657 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _400;
          MenhirLib.EngineTypes.startp = _startpos__400_;
          MenhirLib.EngineTypes.endp = _endpos__400_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = xs00000;
            MenhirLib.EngineTypes.startp = _startpos_xs00000_;
            MenhirLib.EngineTypes.endp = _endpos_xs00000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _200;
              MenhirLib.EngineTypes.startp = _startpos__200_;
              MenhirLib.EngineTypes.endp = _endpos__200_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _100;
                MenhirLib.EngineTypes.startp = _startpos__100_;
                MenhirLib.EngineTypes.endp = _endpos__100_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _400 : unit = Obj.magic _400 in
        let xs00000 : (Parsetree.row_field list) = Obj.magic xs00000 in
        let _200 : (unit option) = Obj.magic _200 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__400_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _endpos__40_ = _endpos__400_ in
          let _startpos__10_ = _startpos__100_ in
          let _40 = _400 in
          let xs0000 = xs00000 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _4 = _40 in
            let xs000 = xs0000 in
            let _2 = _20 in
            let _1 = _10 in
            let _3 =
              let xs00 = xs000 in
              let _1 =
                let xs0 = xs00 in
                let xs =
                  let xs = xs0 in
                  
# 253 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( List.rev xs )
# 2718 "parser_raw.ml"
                  
                in
                
# 801 "parser_raw.mly"
    ( xs )
# 2724 "parser_raw.ml"
                
              in
              
# 3008 "parser_raw.mly"
    ( _1 )
# 2730 "parser_raw.ml"
              
            in
            
# 2971 "parser_raw.mly"
        ( Ptyp_variant(_3, Open, None) )
# 2736 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__40_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 725 "parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 2747 "parser_raw.ml"
          
        in
        
# 2981 "parser_raw.mly"
  ( _1 )
# 2753 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _200;
          MenhirLib.EngineTypes.startp = _startpos__200_;
          MenhirLib.EngineTypes.endp = _endpos__200_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _100;
            MenhirLib.EngineTypes.startp = _startpos__100_;
            MenhirLib.EngineTypes.endp = _endpos__100_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _200 : unit = Obj.magic _200 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__200_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _endpos__20_ = _endpos__200_ in
          let _startpos__10_ = _startpos__100_ in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _2 = _20 in
            let _1 = _10 in
            
# 2973 "parser_raw.mly"
        ( Ptyp_variant([], Open, None) )
# 2792 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__20_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 725 "parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 2803 "parser_raw.ml"
          
        in
        
# 2981 "parser_raw.mly"
  ( _1 )
# 2809 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _400;
          MenhirLib.EngineTypes.startp = _startpos__400_;
          MenhirLib.EngineTypes.endp = _endpos__400_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = xs00000;
            MenhirLib.EngineTypes.startp = _startpos_xs00000_;
            MenhirLib.EngineTypes.endp = _endpos_xs00000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _200;
              MenhirLib.EngineTypes.startp = _startpos__200_;
              MenhirLib.EngineTypes.endp = _endpos__200_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _100;
                MenhirLib.EngineTypes.startp = _startpos__100_;
                MenhirLib.EngineTypes.endp = _endpos__100_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _400 : unit = Obj.magic _400 in
        let xs00000 : (Parsetree.row_field list) = Obj.magic xs00000 in
        let _200 : (unit option) = Obj.magic _200 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__400_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _endpos__40_ = _endpos__400_ in
          let _startpos__10_ = _startpos__100_ in
          let _40 = _400 in
          let xs0000 = xs00000 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _4 = _40 in
            let xs000 = xs0000 in
            let _2 = _20 in
            let _1 = _10 in
            let _3 =
              let xs00 = xs000 in
              let _1 =
                let xs0 = xs00 in
                let xs =
                  let xs = xs0 in
                  
# 253 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( List.rev xs )
# 2870 "parser_raw.ml"
                  
                in
                
# 801 "parser_raw.mly"
    ( xs )
# 2876 "parser_raw.ml"
                
              in
              
# 3008 "parser_raw.mly"
    ( _1 )
# 2882 "parser_raw.ml"
              
            in
            
# 2975 "parser_raw.mly"
        ( Ptyp_variant(_3, Closed, Some []) )
# 2888 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__40_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 725 "parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 2899 "parser_raw.ml"
          
        in
        
# 2981 "parser_raw.mly"
  ( _1 )
# 2905 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _600;
          MenhirLib.EngineTypes.startp = _startpos__600_;
          MenhirLib.EngineTypes.endp = _endpos__600_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = xs00100;
            MenhirLib.EngineTypes.startp = _startpos_xs00100_;
            MenhirLib.EngineTypes.endp = _endpos_xs00100_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _400;
              MenhirLib.EngineTypes.startp = _startpos__400_;
              MenhirLib.EngineTypes.endp = _endpos__400_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = xs00000;
                MenhirLib.EngineTypes.startp = _startpos_xs00000_;
                MenhirLib.EngineTypes.endp = _endpos_xs00000_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _200;
                  MenhirLib.EngineTypes.startp = _startpos__200_;
                  MenhirLib.EngineTypes.endp = _endpos__200_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _100;
                    MenhirLib.EngineTypes.startp = _startpos__100_;
                    MenhirLib.EngineTypes.endp = _endpos__100_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _600 : unit = Obj.magic _600 in
        let xs00100 : (string list) = Obj.magic xs00100 in
        let _400 : unit = Obj.magic _400 in
        let xs00000 : (Parsetree.row_field list) = Obj.magic xs00000 in
        let _200 : (unit option) = Obj.magic _200 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__600_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _endpos__60_ = _endpos__600_ in
          let _startpos__10_ = _startpos__100_ in
          let _60 = _600 in
          let xs0010 = xs00100 in
          let _40 = _400 in
          let xs0000 = xs00000 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _6 = _60 in
            let xs001 = xs0010 in
            let _4 = _40 in
            let xs000 = xs0000 in
            let _2 = _20 in
            let _1 = _10 in
            let _5 =
              let xs00 = xs001 in
              let _1 =
                let xs0 = xs00 in
                let xs =
                  let xs = xs0 in
                  
# 253 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( List.rev xs )
# 2982 "parser_raw.ml"
                  
                in
                
# 775 "parser_raw.mly"
    ( xs )
# 2988 "parser_raw.ml"
                
              in
              
# 3036 "parser_raw.mly"
    ( _1 )
# 2994 "parser_raw.ml"
              
            in
            let _3 =
              let xs00 = xs000 in
              let _1 =
                let xs0 = xs00 in
                let xs =
                  let xs = xs0 in
                  
# 253 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( List.rev xs )
# 3006 "parser_raw.ml"
                  
                in
                
# 801 "parser_raw.mly"
    ( xs )
# 3012 "parser_raw.ml"
                
              in
              
# 3008 "parser_raw.mly"
    ( _1 )
# 3018 "parser_raw.ml"
              
            in
            
# 2977 "parser_raw.mly"
        ( Ptyp_variant(_3, Closed, Some _5) )
# 3024 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__60_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 725 "parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 3035 "parser_raw.ml"
          
        in
        
# 2981 "parser_raw.mly"
  ( _1 )
# 3041 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _100 : (Parsetree.extension) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__100_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 2979 "parser_raw.mly"
        ( Ptyp_extension _1 )
# 3072 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 725 "parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 3083 "parser_raw.ml"
          
        in
        
# 2981 "parser_raw.mly"
  ( _1 )
# 3089 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _100 : (string) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__100_ in
        let _v : (string Location.loc) = let _1 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 3349 "parser_raw.mly"
                     ( _1 )
# 3120 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 719 "parser_raw.mly"
    ( mkloc _1 (make_loc _sloc) )
# 3131 "parser_raw.ml"
          
        in
        
# 3351 "parser_raw.mly"
    ( _1 )
# 3137 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _300;
          MenhirLib.EngineTypes.startp = _startpos__300_;
          MenhirLib.EngineTypes.endp = _endpos__300_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _200;
            MenhirLib.EngineTypes.startp = _startpos__200_;
            MenhirLib.EngineTypes.endp = _endpos__200_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _100;
              MenhirLib.EngineTypes.startp = _startpos__100_;
              MenhirLib.EngineTypes.endp = _endpos__100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _300 : (string Location.loc) = Obj.magic _300 in
        let _200 : unit = Obj.magic _200 in
        let _100 : (string) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__300_ in
        let _v : (string Location.loc) = let _1 =
          let _endpos__30_ = _endpos__300_ in
          let _startpos__10_ = _startpos__100_ in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            
# 3350 "parser_raw.mly"
                                 ( _1 ^ "." ^ _3.txt )
# 3184 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__30_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 719 "parser_raw.mly"
    ( mkloc _1 (make_loc _sloc) )
# 3195 "parser_raw.ml"
          
        in
        
# 3351 "parser_raw.mly"
    ( _1 )
# 3201 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.payload) = Obj.magic _3 in
        let _2 : (string Location.loc) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.attribute) = let _endpos = _endpos__4_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3355 "parser_raw.mly"
    ( Attr.mk ~loc:(make_loc _sloc) _2 _3 )
# 3247 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.class_expr) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.class_expr) = 
# 1509 "parser_raw.mly"
      ( _1 )
# 3272 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _10;
            MenhirLib.EngineTypes.startp = _startpos__10_;
            MenhirLib.EngineTypes.endp = _endpos__10_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.class_expr) = Obj.magic _3 in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.class_expr) = let _2 =
          let _1 = _10 in
          
# 3372 "parser_raw.mly"
    ( _1 )
# 3311 "parser_raw.ml"
          
        in
        let _endpos = _endpos__3_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1511 "parser_raw.mly"
      ( wrap_class_attrs ~loc:_sloc _3 _2 )
# 3320 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.class_expr) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Ast_helper.let_bindings) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.class_expr) = let _endpos = _endpos__3_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1513 "parser_raw.mly"
      ( class_of_let_bindings ~loc:_sloc _1 _3 )
# 3360 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _11;
              MenhirLib.EngineTypes.startp = _startpos__11_;
              MenhirLib.EngineTypes.endp = _endpos__11_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _10;
                MenhirLib.EngineTypes.startp = _startpos__10_;
                MenhirLib.EngineTypes.endp = _endpos__10_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.class_expr) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _11 : (Longident.t) = Obj.magic _11 in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.class_expr) = let _5 =
          let _endpos__1_ = _endpos__11_ in
          let _startpos__1_ = _startpos__11_ in
          let _1 = _11 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 3422 "parser_raw.ml"
          
        in
        let _4 =
          let _1 = _10 in
          
# 3372 "parser_raw.mly"
    ( _1 )
# 3430 "parser_raw.ml"
          
        in
        let _endpos__4_ = _endpos__10_ in
        let _3 =
          
# 3279 "parser_raw.mly"
                                                ( Fresh )
# 3438 "parser_raw.ml"
          
        in
        let _endpos = _endpos__7_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1515 "parser_raw.mly"
      ( let loc = (_startpos__2_, _endpos__4_) in
        let od = Opn.mk ~override:_3 ~loc:(make_loc loc) _5 in
        mkclass ~loc:_sloc ~attrs:_4 (Pcl_open(od, _7)) )
# 3449 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _12;
              MenhirLib.EngineTypes.startp = _startpos__12_;
              MenhirLib.EngineTypes.endp = _endpos__12_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _11;
                MenhirLib.EngineTypes.startp = _startpos__11_;
                MenhirLib.EngineTypes.endp = _endpos__11_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _10;
                  MenhirLib.EngineTypes.startp = _startpos__10_;
                  MenhirLib.EngineTypes.endp = _endpos__10_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.class_expr) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _12 : (Longident.t) = Obj.magic _12 in
        let _11 : (Parsetree.attributes) = Obj.magic _11 in
        let _10 : unit = Obj.magic _10 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.class_expr) = let _5 =
          let _endpos__1_ = _endpos__12_ in
          let _startpos__1_ = _startpos__12_ in
          let _1 = _12 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 3517 "parser_raw.ml"
          
        in
        let _4 =
          let _1 = _11 in
          
# 3372 "parser_raw.mly"
    ( _1 )
# 3525 "parser_raw.ml"
          
        in
        let _endpos__4_ = _endpos__11_ in
        let _3 =
          let _1 = _10 in
          
# 3280 "parser_raw.mly"
         ( Override )
# 3534 "parser_raw.ml"
          
        in
        let _endpos = _endpos__7_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1515 "parser_raw.mly"
      ( let loc = (_startpos__2_, _endpos__4_) in
        let od = Opn.mk ~override:_3 ~loc:(make_loc loc) _5 in
        mkclass ~loc:_sloc ~attrs:_4 (Pcl_open(od, _7)) )
# 3545 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.attribute) = Obj.magic _2 in
        let _1 : (Parsetree.class_expr) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.class_expr) = 
# 1519 "parser_raw.mly"
      ( Cl.attr _1 _2 )
# 3576 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs0000;
          MenhirLib.EngineTypes.startp = _startpos_xs0000_;
          MenhirLib.EngineTypes.endp = _endpos_xs0000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _100;
            MenhirLib.EngineTypes.startp = _startpos__100_;
            MenhirLib.EngineTypes.endp = _endpos__100_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs0000 : ((Asttypes.arg_label * Parsetree.expression) list) = Obj.magic xs0000 in
        let _100 : (Parsetree.class_expr) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos_xs0000_ in
        let _v : (Parsetree.class_expr) = let _1 =
          let _endpos_xs000_ = _endpos_xs0000_ in
          let _startpos__10_ = _startpos__100_ in
          let xs000 = xs0000 in
          let _10 = _100 in
          let _1 =
            let xs00 = xs000 in
            let _1 = _10 in
            let _2 =
              let xs0 = xs00 in
              let xs =
                let xs = xs0 in
                
# 253 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( List.rev xs )
# 3619 "parser_raw.ml"
                
              in
              
# 775 "parser_raw.mly"
    ( xs )
# 3625 "parser_raw.ml"
              
            in
            
# 1522 "parser_raw.mly"
        ( Pcl_apply(_1, _2) )
# 3631 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_xs000_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 741 "parser_raw.mly"
    ( mkclass ~loc:_sloc _1 )
# 3642 "parser_raw.ml"
          
        in
        
# 1525 "parser_raw.mly"
      ( _1 )
# 3648 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _100 : (Parsetree.extension) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__100_ in
        let _v : (Parsetree.class_expr) = let _1 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 1524 "parser_raw.mly"
        ( Pcl_extension _1 )
# 3679 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 741 "parser_raw.mly"
    ( mkclass ~loc:_sloc _1 )
# 3690 "parser_raw.ml"
          
        in
        
# 1525 "parser_raw.mly"
      ( _1 )
# 3696 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _11;
          MenhirLib.EngineTypes.startp = _startpos__11_;
          MenhirLib.EngineTypes.endp = _endpos__11_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = self;
            MenhirLib.EngineTypes.startp = _startpos_self_;
            MenhirLib.EngineTypes.endp = _endpos_self_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _10;
                MenhirLib.EngineTypes.startp = _startpos__10_;
                MenhirLib.EngineTypes.endp = _endpos__10_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _11 : (Parsetree.attributes) = Obj.magic _11 in
        let self : (string Location.loc option) = Obj.magic self in
        let _4 : (Parsetree.class_expr) = Obj.magic _4 in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__11_ in
        let _v : (Parsetree.class_field) = let _6 =
          let _1 = _11 in
          
# 3368 "parser_raw.mly"
    ( _1 )
# 3747 "parser_raw.ml"
          
        in
        let _endpos__6_ = _endpos__11_ in
        let _3 =
          let _1 = _10 in
          
# 3372 "parser_raw.mly"
    ( _1 )
# 3756 "parser_raw.ml"
          
        in
        let _2 =
          
# 3279 "parser_raw.mly"
                                                ( Fresh )
# 3763 "parser_raw.ml"
          
        in
        let _endpos = _endpos__6_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1573 "parser_raw.mly"
      ( let docs = symbol_docs _sloc in
        mkcf ~loc:_sloc (Pcf_inherit (_2, _4, self)) ~attrs:(_3@_6) ~docs )
# 3773 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _12;
          MenhirLib.EngineTypes.startp = _startpos__12_;
          MenhirLib.EngineTypes.endp = _endpos__12_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = self;
            MenhirLib.EngineTypes.startp = _startpos_self_;
            MenhirLib.EngineTypes.endp = _endpos_self_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _11;
                MenhirLib.EngineTypes.startp = _startpos__11_;
                MenhirLib.EngineTypes.endp = _endpos__11_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _10;
                  MenhirLib.EngineTypes.startp = _startpos__10_;
                  MenhirLib.EngineTypes.endp = _endpos__10_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _12 : (Parsetree.attributes) = Obj.magic _12 in
        let self : (string Location.loc option) = Obj.magic self in
        let _4 : (Parsetree.class_expr) = Obj.magic _4 in
        let _11 : (Parsetree.attributes) = Obj.magic _11 in
        let _10 : unit = Obj.magic _10 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__12_ in
        let _v : (Parsetree.class_field) = let _6 =
          let _1 = _12 in
          
# 3368 "parser_raw.mly"
    ( _1 )
# 3830 "parser_raw.ml"
          
        in
        let _endpos__6_ = _endpos__12_ in
        let _3 =
          let _1 = _11 in
          
# 3372 "parser_raw.mly"
    ( _1 )
# 3839 "parser_raw.ml"
          
        in
        let _2 =
          let _1 = _10 in
          
# 3280 "parser_raw.mly"
         ( Override )
# 3847 "parser_raw.ml"
          
        in
        let _endpos = _endpos__6_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1573 "parser_raw.mly"
      ( let docs = symbol_docs _sloc in
        mkcf ~loc:_sloc (Pcf_inherit (_2, _4, self)) ~attrs:(_3@_6) ~docs )
# 3857 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let _2 : ((string Location.loc * Asttypes.mutable_flag * Parsetree.class_field_kind) *
  Parsetree.attributes) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__10_ in
        let _v : (Parsetree.class_field) = let _3 =
          let _1 = _10 in
          
# 3368 "parser_raw.mly"
    ( _1 )
# 3897 "parser_raw.ml"
          
        in
        let _endpos__3_ = _endpos__10_ in
        let _endpos = _endpos__3_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1576 "parser_raw.mly"
      ( let v, attrs = _2 in
        let docs = symbol_docs _sloc in
        mkcf ~loc:_sloc (Pcf_val v) ~attrs:(attrs@_3) ~docs )
# 3909 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let _2 : ((string Location.loc * Asttypes.private_flag * Parsetree.class_field_kind) *
  Parsetree.attributes) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__10_ in
        let _v : (Parsetree.class_field) = let _3 =
          let _1 = _10 in
          
# 3368 "parser_raw.mly"
    ( _1 )
# 3949 "parser_raw.ml"
          
        in
        let _endpos__3_ = _endpos__10_ in
        let _endpos = _endpos__3_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1580 "parser_raw.mly"
      ( let meth, attrs = _2 in
        let docs = symbol_docs _sloc in
        mkcf ~loc:_sloc (Pcf_method meth) ~attrs:(attrs@_3) ~docs )
# 3961 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _11;
          MenhirLib.EngineTypes.startp = _startpos__11_;
          MenhirLib.EngineTypes.endp = _endpos__11_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _10;
              MenhirLib.EngineTypes.startp = _startpos__10_;
              MenhirLib.EngineTypes.endp = _endpos__10_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _11 : (Parsetree.attributes) = Obj.magic _11 in
        let _3 : (Parsetree.core_type * Parsetree.core_type) = Obj.magic _3 in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__11_ in
        let _v : (Parsetree.class_field) = let _4 =
          let _1 = _11 in
          
# 3368 "parser_raw.mly"
    ( _1 )
# 4006 "parser_raw.ml"
          
        in
        let _endpos__4_ = _endpos__11_ in
        let _2 =
          let _1 = _10 in
          
# 3372 "parser_raw.mly"
    ( _1 )
# 4015 "parser_raw.ml"
          
        in
        let _endpos = _endpos__4_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1584 "parser_raw.mly"
      ( let docs = symbol_docs _sloc in
        mkcf ~loc:_sloc (Pcf_constraint _3) ~attrs:(_2@_4) ~docs )
# 4025 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _11;
          MenhirLib.EngineTypes.startp = _startpos__11_;
          MenhirLib.EngineTypes.endp = _endpos__11_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _10;
              MenhirLib.EngineTypes.startp = _startpos__10_;
              MenhirLib.EngineTypes.endp = _endpos__10_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _11 : (Parsetree.attributes) = Obj.magic _11 in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__11_ in
        let _v : (Parsetree.class_field) = let _4 =
          let _1 = _11 in
          
# 3368 "parser_raw.mly"
    ( _1 )
# 4070 "parser_raw.ml"
          
        in
        let _endpos__4_ = _endpos__11_ in
        let _2 =
          let _1 = _10 in
          
# 3372 "parser_raw.mly"
    ( _1 )
# 4079 "parser_raw.ml"
          
        in
        let _endpos = _endpos__4_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1587 "parser_raw.mly"
      ( let docs = symbol_docs _sloc in
        mkcf ~loc:_sloc (Pcf_initializer _3) ~attrs:(_2@_4) ~docs )
# 4089 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let _1 : (Parsetree.extension) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__10_ in
        let _v : (Parsetree.class_field) = let _2 =
          let _1 = _10 in
          
# 3368 "parser_raw.mly"
    ( _1 )
# 4122 "parser_raw.ml"
          
        in
        let _endpos__2_ = _endpos__10_ in
        let _endpos = _endpos__2_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1590 "parser_raw.mly"
      ( let docs = symbol_docs _sloc in
        mkcf ~loc:_sloc (Pcf_extension _1) ~attrs:_2 ~docs )
# 4133 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _100 : (Parsetree.attribute) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__100_ in
        let _v : (Parsetree.class_field) = let _1 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 1593 "parser_raw.mly"
      ( Pcf_attribute _1 )
# 4164 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 739 "parser_raw.mly"
    ( mkcf ~loc:_sloc _1 )
# 4175 "parser_raw.ml"
          
        in
        
# 1594 "parser_raw.mly"
      ( _1 )
# 4181 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.class_expr) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.class_expr) = 
# 1493 "parser_raw.mly"
      ( _2 )
# 4212 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _400;
          MenhirLib.EngineTypes.startp = _startpos__400_;
          MenhirLib.EngineTypes.endp = _endpos__400_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _300;
            MenhirLib.EngineTypes.startp = _startpos__300_;
            MenhirLib.EngineTypes.endp = _endpos__300_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _200;
              MenhirLib.EngineTypes.startp = _startpos__200_;
              MenhirLib.EngineTypes.endp = _endpos__200_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _100;
                MenhirLib.EngineTypes.startp = _startpos__100_;
                MenhirLib.EngineTypes.endp = _endpos__100_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _400 : (Parsetree.class_expr) = Obj.magic _400 in
        let _300 : unit = Obj.magic _300 in
        let _200 : (Parsetree.class_type) = Obj.magic _200 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__400_ in
        let _v : (Parsetree.class_expr) = let _1 =
          let _endpos__40_ = _endpos__400_ in
          let _startpos__10_ = _startpos__100_ in
          let _40 = _400 in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _4 = _40 in
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            
# 1496 "parser_raw.mly"
        ( Pcl_constraint(_4, _2) )
# 4267 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__40_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 741 "parser_raw.mly"
    ( mkclass ~loc:_sloc _1 )
# 4278 "parser_raw.ml"
          
        in
        
# 1499 "parser_raw.mly"
      ( _1 )
# 4284 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _200;
          MenhirLib.EngineTypes.startp = _startpos__200_;
          MenhirLib.EngineTypes.endp = _endpos__200_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _100;
            MenhirLib.EngineTypes.startp = _startpos__100_;
            MenhirLib.EngineTypes.endp = _endpos__100_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _200 : (Parsetree.class_expr) = Obj.magic _200 in
        let _100 : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__200_ in
        let _v : (Parsetree.class_expr) = let _1 =
          let _endpos__20_ = _endpos__200_ in
          let _startpos__10_ = _startpos__100_ in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _2 = _20 in
            let _1 = _10 in
            
# 1498 "parser_raw.mly"
      ( let (l,o,p) = _1 in Pcl_fun(l, o, p, _2) )
# 4323 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__20_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 741 "parser_raw.mly"
    ( mkclass ~loc:_sloc _1 )
# 4334 "parser_raw.ml"
          
        in
        
# 1499 "parser_raw.mly"
      ( _1 )
# 4340 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = e00;
          MenhirLib.EngineTypes.startp = _startpos_e00_;
          MenhirLib.EngineTypes.endp = _endpos_e00_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _200;
            MenhirLib.EngineTypes.startp = _startpos__200_;
            MenhirLib.EngineTypes.endp = _endpos__200_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _100;
              MenhirLib.EngineTypes.startp = _startpos__100_;
              MenhirLib.EngineTypes.endp = _endpos__100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e00 : (Parsetree.class_expr) = Obj.magic e00 in
        let _200 : unit = Obj.magic _200 in
        let _100 : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos_e00_ in
        let _v : (Parsetree.class_expr) = let _1 =
          let _endpos_e0_ = _endpos_e00_ in
          let _startpos__10_ = _startpos__100_ in
          let e0 = e00 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let e = e0 in
            let _2 = _20 in
            let _1 = _10 in
            
# 1549 "parser_raw.mly"
      ( let (l,o,p) = _1 in Pcl_fun(l, o, p, e) )
# 4387 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_e0_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 741 "parser_raw.mly"
    ( mkclass ~loc:_sloc _1 )
# 4398 "parser_raw.ml"
          
        in
        
# 1550 "parser_raw.mly"
    ( _1 )
# 4404 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = e00;
          MenhirLib.EngineTypes.startp = _startpos_e00_;
          MenhirLib.EngineTypes.endp = _endpos_e00_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _100;
            MenhirLib.EngineTypes.startp = _startpos__100_;
            MenhirLib.EngineTypes.endp = _endpos__100_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let e00 : (Parsetree.class_expr) = Obj.magic e00 in
        let _100 : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos_e00_ in
        let _v : (Parsetree.class_expr) = let _1 =
          let _endpos_e0_ = _endpos_e00_ in
          let _startpos__10_ = _startpos__100_ in
          let e0 = e00 in
          let _10 = _100 in
          let _1 =
            let e = e0 in
            let _1 = _10 in
            
# 1549 "parser_raw.mly"
      ( let (l,o,p) = _1 in Pcl_fun(l, o, p, e) )
# 4443 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_e0_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 741 "parser_raw.mly"
    ( mkclass ~loc:_sloc _1 )
# 4454 "parser_raw.ml"
          
        in
        
# 1550 "parser_raw.mly"
    ( _1 )
# 4460 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 564 "parser_raw.mly"
       (string)
# 4481 "parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 3185 "parser_raw.mly"
           ( Lident _1 )
# 4489 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (
# 564 "parser_raw.mly"
       (string)
# 4520 "parser_raw.ml"
        ) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Longident.t) = 
# 3186 "parser_raw.mly"
                             ( Ldot(_1, _3) )
# 4530 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.pattern) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.pattern) = let _endpos = _endpos__3_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1558 "parser_raw.mly"
      ( reloc_pat ~loc:_sloc _2 )
# 4570 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _500;
          MenhirLib.EngineTypes.startp = _startpos__500_;
          MenhirLib.EngineTypes.endp = _endpos__500_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _400;
            MenhirLib.EngineTypes.startp = _startpos__400_;
            MenhirLib.EngineTypes.endp = _endpos__400_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _300;
              MenhirLib.EngineTypes.startp = _startpos__300_;
              MenhirLib.EngineTypes.endp = _endpos__300_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _200;
                MenhirLib.EngineTypes.startp = _startpos__200_;
                MenhirLib.EngineTypes.endp = _endpos__200_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _100;
                  MenhirLib.EngineTypes.startp = _startpos__100_;
                  MenhirLib.EngineTypes.endp = _endpos__100_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _500 : unit = Obj.magic _500 in
        let _400 : (Parsetree.core_type) = Obj.magic _400 in
        let _300 : unit = Obj.magic _300 in
        let _200 : (Parsetree.pattern) = Obj.magic _200 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__500_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__50_ = _endpos__500_ in
          let _startpos__10_ = _startpos__100_ in
          let _50 = _500 in
          let _40 = _400 in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _5 = _50 in
            let _4 = _40 in
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            
# 1560 "parser_raw.mly"
      ( Ppat_constraint(_2, _4) )
# 4633 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__50_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 723 "parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 4644 "parser_raw.ml"
          
        in
        
# 1561 "parser_raw.mly"
      ( _1 )
# 4650 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.pattern) = let _endpos = _endpos__0_ in
        let _symbolstartpos = _endpos in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1563 "parser_raw.mly"
      ( ghpat ~loc:_sloc Ppat_any )
# 4671 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.core_type) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.core_type) = 
# 1685 "parser_raw.mly"
      ( _2 )
# 4708 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.core_type) = let _1 =
          let _1 =
            
# 1686 "parser_raw.mly"
                      ( Ptyp_any )
# 4728 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__0_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _endpos in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 725 "parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 4738 "parser_raw.ml"
          
        in
        
# 1687 "parser_raw.mly"
      ( _1 )
# 4744 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _11;
          MenhirLib.EngineTypes.startp = _startpos__11_;
          MenhirLib.EngineTypes.endp = _endpos__11_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _10;
              MenhirLib.EngineTypes.startp = _startpos__10_;
              MenhirLib.EngineTypes.endp = _endpos__10_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _11 : (Parsetree.attributes) = Obj.magic _11 in
        let _3 : (Parsetree.class_type) = Obj.magic _3 in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__11_ in
        let _v : (Parsetree.class_type_field) = let _4 =
          let _1 = _11 in
          
# 3368 "parser_raw.mly"
    ( _1 )
# 4789 "parser_raw.ml"
          
        in
        let _endpos__4_ = _endpos__11_ in
        let _2 =
          let _1 = _10 in
          
# 3372 "parser_raw.mly"
    ( _1 )
# 4798 "parser_raw.ml"
          
        in
        let _endpos = _endpos__4_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1695 "parser_raw.mly"
      ( let docs = symbol_docs _sloc in
        mkctf ~loc:_sloc (Pctf_inherit _3) ~attrs:(_2@_4) ~docs )
# 4808 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _11;
          MenhirLib.EngineTypes.startp = _startpos__11_;
          MenhirLib.EngineTypes.endp = _endpos__11_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ty0;
            MenhirLib.EngineTypes.startp = _startpos_ty0_;
            MenhirLib.EngineTypes.endp = _endpos_ty0_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _30;
              MenhirLib.EngineTypes.startp = _startpos__30_;
              MenhirLib.EngineTypes.endp = _endpos__30_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _1000;
                MenhirLib.EngineTypes.startp = _startpos__1000_;
                MenhirLib.EngineTypes.endp = _endpos__1000_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = flags0;
                  MenhirLib.EngineTypes.startp = _startpos_flags0_;
                  MenhirLib.EngineTypes.endp = _endpos_flags0_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _10;
                    MenhirLib.EngineTypes.startp = _startpos__10_;
                    MenhirLib.EngineTypes.endp = _endpos__10_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _11 : (Parsetree.attributes) = Obj.magic _11 in
        let ty0 : (Parsetree.core_type) = Obj.magic ty0 in
        let _30 : unit = Obj.magic _30 in
        let _1000 : (
# 564 "parser_raw.mly"
       (string)
# 4862 "parser_raw.ml"
        ) = Obj.magic _1000 in
        let flags0 : (Asttypes.mutable_flag * Asttypes.virtual_flag) = Obj.magic flags0 in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__11_ in
        let _v : (Parsetree.class_type_field) = let _4 =
          let _1 = _11 in
          
# 3368 "parser_raw.mly"
    ( _1 )
# 4875 "parser_raw.ml"
          
        in
        let _endpos__4_ = _endpos__11_ in
        let _3 =
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let ty = ty0 in
          let _3 = _30 in
          let _100 = _1000 in
          let flags = flags0 in
          let label =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _10 = _100 in
            let _1 =
              let _1 = _10 in
              
# 3073 "parser_raw.mly"
           ( _1 )
# 4895 "parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 4906 "parser_raw.ml"
            
          in
          
# 1720 "parser_raw.mly"
  (
    let mut, virt = flags in
    label, mut, virt, ty
  )
# 4915 "parser_raw.ml"
          
        in
        let _2 =
          let _1 = _10 in
          
# 3372 "parser_raw.mly"
    ( _1 )
# 4923 "parser_raw.ml"
          
        in
        let _endpos = _endpos__4_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1698 "parser_raw.mly"
      ( let docs = symbol_docs _sloc in
        mkctf ~loc:_sloc (Pctf_val _3) ~attrs:(_2@_4) ~docs )
# 4933 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _12;
          MenhirLib.EngineTypes.startp = _startpos__12_;
          MenhirLib.EngineTypes.endp = _endpos__12_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _11;
            MenhirLib.EngineTypes.startp = _startpos__11_;
            MenhirLib.EngineTypes.endp = _endpos__11_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _100;
                MenhirLib.EngineTypes.startp = _startpos__100_;
                MenhirLib.EngineTypes.endp = _endpos__100_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _10;
                    MenhirLib.EngineTypes.startp = _startpos__10_;
                    MenhirLib.EngineTypes.endp = _endpos__10_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _12 : (Parsetree.attributes) = Obj.magic _12 in
        let _11 : (Parsetree.core_type) = Obj.magic _11 in
        let _5 : unit = Obj.magic _5 in
        let _100 : (
# 564 "parser_raw.mly"
       (string)
# 4987 "parser_raw.ml"
        ) = Obj.magic _100 in
        let _3 : (Asttypes.private_flag * Asttypes.virtual_flag) = Obj.magic _3 in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__12_ in
        let _v : (Parsetree.class_type_field) = let _7 =
          let _1 = _12 in
          
# 3368 "parser_raw.mly"
    ( _1 )
# 5000 "parser_raw.ml"
          
        in
        let _endpos__7_ = _endpos__12_ in
        let _6 =
          let _1 = _11 in
          
# 2856 "parser_raw.mly"
    ( _1 )
# 5009 "parser_raw.ml"
          
        in
        let _4 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 3073 "parser_raw.mly"
           ( _1 )
# 5021 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 5032 "parser_raw.ml"
          
        in
        let _2 =
          let _1 = _10 in
          
# 3372 "parser_raw.mly"
    ( _1 )
# 5040 "parser_raw.ml"
          
        in
        let _endpos = _endpos__7_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1702 "parser_raw.mly"
      ( let (p, v) = _3 in
        let docs = symbol_docs _sloc in
        mkctf ~loc:_sloc (Pctf_method (_4, p, v, _6)) ~attrs:(_2@_7) ~docs )
# 5051 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _11;
          MenhirLib.EngineTypes.startp = _startpos__11_;
          MenhirLib.EngineTypes.endp = _endpos__11_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _10;
              MenhirLib.EngineTypes.startp = _startpos__10_;
              MenhirLib.EngineTypes.endp = _endpos__10_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _11 : (Parsetree.attributes) = Obj.magic _11 in
        let _3 : (Parsetree.core_type * Parsetree.core_type) = Obj.magic _3 in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__11_ in
        let _v : (Parsetree.class_type_field) = let _4 =
          let _1 = _11 in
          
# 3368 "parser_raw.mly"
    ( _1 )
# 5096 "parser_raw.ml"
          
        in
        let _endpos__4_ = _endpos__11_ in
        let _2 =
          let _1 = _10 in
          
# 3372 "parser_raw.mly"
    ( _1 )
# 5105 "parser_raw.ml"
          
        in
        let _endpos = _endpos__4_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1706 "parser_raw.mly"
      ( let docs = symbol_docs _sloc in
        mkctf ~loc:_sloc (Pctf_constraint _3) ~attrs:(_2@_4) ~docs )
# 5115 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let _1 : (Parsetree.extension) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__10_ in
        let _v : (Parsetree.class_type_field) = let _2 =
          let _1 = _10 in
          
# 3368 "parser_raw.mly"
    ( _1 )
# 5148 "parser_raw.ml"
          
        in
        let _endpos__2_ = _endpos__10_ in
        let _endpos = _endpos__2_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1709 "parser_raw.mly"
      ( let docs = symbol_docs _sloc in
        mkctf ~loc:_sloc (Pctf_extension _1) ~attrs:_2 ~docs )
# 5159 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _100 : (Parsetree.attribute) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__100_ in
        let _v : (Parsetree.class_type_field) = let _1 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 1712 "parser_raw.mly"
      ( Pctf_attribute _1 )
# 5190 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 737 "parser_raw.mly"
    ( mkctf ~loc:_sloc _1 )
# 5201 "parser_raw.ml"
          
        in
        
# 1713 "parser_raw.mly"
      ( _1 )
# 5207 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1000;
          MenhirLib.EngineTypes.startp = _startpos__1000_;
          MenhirLib.EngineTypes.endp = _endpos__1000_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1000 : (Longident.t) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos__1000_ in
        let _v : (Parsetree.class_type) = let _1 =
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _100 = _1000 in
          let _1 =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _10 = _100 in
            let cid =
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _1 = _10 in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 5247 "parser_raw.ml"
              
            in
            let tys =
              let tys =
                
# 1671 "parser_raw.mly"
      ( [] )
# 5255 "parser_raw.ml"
                
              in
              
# 1677 "parser_raw.mly"
    ( tys )
# 5261 "parser_raw.ml"
              
            in
            
# 1654 "parser_raw.mly"
        ( Pcty_constr (cid, tys) )
# 5267 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__100_ in
          let _startpos__1_ = _startpos__100_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 735 "parser_raw.mly"
    ( mkcty ~loc:_sloc _1 )
# 5278 "parser_raw.ml"
          
        in
        
# 1657 "parser_raw.mly"
      ( _1 )
# 5284 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _1010;
          MenhirLib.EngineTypes.startp = _startpos__1010_;
          MenhirLib.EngineTypes.endp = _endpos__1010_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _30000;
            MenhirLib.EngineTypes.startp = _startpos__30000_;
            MenhirLib.EngineTypes.endp = _endpos__30000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = xs000000;
              MenhirLib.EngineTypes.startp = _startpos_xs000000_;
              MenhirLib.EngineTypes.endp = _endpos_xs000000_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _10000;
                MenhirLib.EngineTypes.startp = _startpos__10000_;
                MenhirLib.EngineTypes.endp = _endpos__10000_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _1010 : (Longident.t) = Obj.magic _1010 in
        let _30000 : unit = Obj.magic _30000 in
        let xs000000 : (Parsetree.core_type list) = Obj.magic xs000000 in
        let _10000 : unit = Obj.magic _10000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10000_ in
        let _endpos = _endpos__1010_ in
        let _v : (Parsetree.class_type) = let _1 =
          let _endpos__101_ = _endpos__1010_ in
          let _startpos__101_ = _startpos__1010_ in
          let _startpos__1000_ = _startpos__10000_ in
          let _101 = _1010 in
          let _3000 = _30000 in
          let xs00000 = xs000000 in
          let _1000 = _10000 in
          let _1 =
            let _endpos__10_ = _endpos__101_ in
            let _startpos__10_ = _startpos__101_ in
            let _10 = _101 in
            let _300 = _3000 in
            let xs0000 = xs00000 in
            let _100 = _1000 in
            let cid =
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _1 = _10 in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 5349 "parser_raw.ml"
              
            in
            let tys =
              let _30 = _300 in
              let xs000 = xs0000 in
              let _10 = _100 in
              let tys =
                let _3 = _30 in
                let xs00 = xs000 in
                let _1 = _10 in
                let params =
                  let xs0 = xs00 in
                  let xs =
                    let xs = xs0 in
                    
# 253 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( List.rev xs )
# 5367 "parser_raw.ml"
                    
                  in
                  
# 801 "parser_raw.mly"
    ( xs )
# 5373 "parser_raw.ml"
                  
                in
                
# 1673 "parser_raw.mly"
      ( params )
# 5379 "parser_raw.ml"
                
              in
              
# 1677 "parser_raw.mly"
    ( tys )
# 5385 "parser_raw.ml"
              
            in
            
# 1654 "parser_raw.mly"
        ( Pcty_constr (cid, tys) )
# 5391 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__101_ in
          let _startpos__1_ = _startpos__1000_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 735 "parser_raw.mly"
    ( mkcty ~loc:_sloc _1 )
# 5402 "parser_raw.ml"
          
        in
        
# 1657 "parser_raw.mly"
      ( _1 )
# 5408 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _100 : (Parsetree.extension) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__100_ in
        let _v : (Parsetree.class_type) = let _1 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 1656 "parser_raw.mly"
        ( Pcty_extension _1 )
# 5439 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 735 "parser_raw.mly"
    ( mkcty ~loc:_sloc _1 )
# 5450 "parser_raw.ml"
          
        in
        
# 1657 "parser_raw.mly"
      ( _1 )
# 5456 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = xss0000;
            MenhirLib.EngineTypes.startp = _startpos_xss0000_;
            MenhirLib.EngineTypes.endp = _endpos_xss0000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _11;
              MenhirLib.EngineTypes.startp = _startpos__11_;
              MenhirLib.EngineTypes.endp = _endpos__11_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _10;
                MenhirLib.EngineTypes.startp = _startpos__10_;
                MenhirLib.EngineTypes.endp = _endpos__10_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let xss0000 : (Parsetree.class_type_field list list) = Obj.magic xss0000 in
        let _11 : (Parsetree.core_type) = Obj.magic _11 in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.class_type) = let _3 =
          let _endpos_xss000_ = _endpos_xss0000_ in
          let _startpos_xss000_ = _startpos_xss0000_ in
          let xss000 = xss0000 in
          let _1 = _11 in
          let _2 =
            let _endpos_xss00_ = _endpos_xss000_ in
            let _startpos_xss00_ = _startpos_xss000_ in
            let xss00 = xss000 in
            let _1 =
              let xss0 = xss00 in
              let _1 =
                let xss = xss0 in
                
# 260 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( List.flatten xss )
# 5518 "parser_raw.ml"
                
              in
              
# 1691 "parser_raw.mly"
    ( _1 )
# 5524 "parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos_xss00_ in
            let _startpos__1_ = _startpos_xss00_ in
            let _endpos = _endpos__1_ in
            let _startpos = _startpos__1_ in
            
# 688 "parser_raw.mly"
                               ( extra_csig _startpos _endpos _1 )
# 5534 "parser_raw.ml"
            
          in
          
# 1681 "parser_raw.mly"
      ( Csig.mk _1 _2 )
# 5540 "parser_raw.ml"
          
        in
        let _2 =
          let _1 = _10 in
          
# 3372 "parser_raw.mly"
    ( _1 )
# 5548 "parser_raw.ml"
          
        in
        let _endpos = _endpos__4_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1659 "parser_raw.mly"
      ( mkcty ~loc:_sloc ~attrs:_2 (Pcty_signature _3) )
# 5557 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = xss0000;
            MenhirLib.EngineTypes.startp = _startpos_xss0000_;
            MenhirLib.EngineTypes.endp = _endpos_xss0000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _11;
              MenhirLib.EngineTypes.startp = _startpos__11_;
              MenhirLib.EngineTypes.endp = _endpos__11_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _10;
                MenhirLib.EngineTypes.startp = _startpos__10_;
                MenhirLib.EngineTypes.endp = _endpos__10_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let xss0000 : (Parsetree.class_type_field list list) = Obj.magic xss0000 in
        let _11 : (Parsetree.core_type) = Obj.magic _11 in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.class_type) = let _3 =
          let _endpos_xss000_ = _endpos_xss0000_ in
          let _startpos_xss000_ = _startpos_xss0000_ in
          let xss000 = xss0000 in
          let _1 = _11 in
          let _2 =
            let _endpos_xss00_ = _endpos_xss000_ in
            let _startpos_xss00_ = _startpos_xss000_ in
            let xss00 = xss000 in
            let _1 =
              let xss0 = xss00 in
              let _1 =
                let xss = xss0 in
                
# 260 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( List.flatten xss )
# 5619 "parser_raw.ml"
                
              in
              
# 1691 "parser_raw.mly"
    ( _1 )
# 5625 "parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos_xss00_ in
            let _startpos__1_ = _startpos_xss00_ in
            let _endpos = _endpos__1_ in
            let _startpos = _startpos__1_ in
            
# 688 "parser_raw.mly"
                               ( extra_csig _startpos _endpos _1 )
# 5635 "parser_raw.ml"
            
          in
          
# 1681 "parser_raw.mly"
      ( Csig.mk _1 _2 )
# 5641 "parser_raw.ml"
          
        in
        let _2 =
          let _1 = _10 in
          
# 3372 "parser_raw.mly"
    ( _1 )
# 5649 "parser_raw.ml"
          
        in
        let _loc__4_ = (_startpos__4_, _endpos__4_) in
        let _loc__1_ = (_startpos__1_, _endpos__1_) in
        
# 1661 "parser_raw.mly"
      ( unclosed "object" _loc__1_ "end" _loc__4_ )
# 5657 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.attribute) = Obj.magic _2 in
        let _1 : (Parsetree.class_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.class_type) = 
# 1663 "parser_raw.mly"
      ( Cty.attr _1 _2 )
# 5688 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _11;
              MenhirLib.EngineTypes.startp = _startpos__11_;
              MenhirLib.EngineTypes.endp = _endpos__11_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _10;
                MenhirLib.EngineTypes.startp = _startpos__10_;
                MenhirLib.EngineTypes.endp = _endpos__10_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.class_type) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _11 : (Longident.t) = Obj.magic _11 in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.class_type) = let _5 =
          let _endpos__1_ = _endpos__11_ in
          let _startpos__1_ = _startpos__11_ in
          let _1 = _11 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 5750 "parser_raw.ml"
          
        in
        let _4 =
          let _1 = _10 in
          
# 3372 "parser_raw.mly"
    ( _1 )
# 5758 "parser_raw.ml"
          
        in
        let _endpos__4_ = _endpos__10_ in
        let _3 =
          
# 3279 "parser_raw.mly"
                                                ( Fresh )
# 5766 "parser_raw.ml"
          
        in
        let _endpos = _endpos__7_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1665 "parser_raw.mly"
      ( let loc = (_startpos__2_, _endpos__4_) in
        let od = Opn.mk ~override:_3 ~loc:(make_loc loc) _5 in
        mkcty ~loc:_sloc ~attrs:_4 (Pcty_open(od, _7)) )
# 5777 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _12;
              MenhirLib.EngineTypes.startp = _startpos__12_;
              MenhirLib.EngineTypes.endp = _endpos__12_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _11;
                MenhirLib.EngineTypes.startp = _startpos__11_;
                MenhirLib.EngineTypes.endp = _endpos__11_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _10;
                  MenhirLib.EngineTypes.startp = _startpos__10_;
                  MenhirLib.EngineTypes.endp = _endpos__10_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.class_type) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _12 : (Longident.t) = Obj.magic _12 in
        let _11 : (Parsetree.attributes) = Obj.magic _11 in
        let _10 : unit = Obj.magic _10 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.class_type) = let _5 =
          let _endpos__1_ = _endpos__12_ in
          let _startpos__1_ = _startpos__12_ in
          let _1 = _12 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 5845 "parser_raw.ml"
          
        in
        let _4 =
          let _1 = _11 in
          
# 3372 "parser_raw.mly"
    ( _1 )
# 5853 "parser_raw.ml"
          
        in
        let _endpos__4_ = _endpos__11_ in
        let _3 =
          let _1 = _10 in
          
# 3280 "parser_raw.mly"
         ( Override )
# 5862 "parser_raw.ml"
          
        in
        let _endpos = _endpos__7_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1665 "parser_raw.mly"
      ( let loc = (_startpos__2_, _endpos__4_) in
        let od = Opn.mk ~override:_3 ~loc:(make_loc loc) _5 in
        mkcty ~loc:_sloc ~attrs:_4 (Pcty_open(od, _7)) )
# 5873 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.class_expr) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.class_expr) = 
# 1529 "parser_raw.mly"
      ( _2 )
# 5910 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.class_expr) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.class_expr) = let _loc__3_ = (_startpos__3_, _endpos__3_) in
        let _loc__1_ = (_startpos__1_, _endpos__1_) in
        
# 1531 "parser_raw.mly"
      ( unclosed "(" _loc__1_ ")" _loc__3_ )
# 5949 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1000;
          MenhirLib.EngineTypes.startp = _startpos__1000_;
          MenhirLib.EngineTypes.endp = _endpos__1000_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1000 : (Longident.t) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos__1000_ in
        let _v : (Parsetree.class_expr) = let _1 =
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _100 = _1000 in
          let _1 =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _10 = _100 in
            let cid =
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _1 = _10 in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 5989 "parser_raw.ml"
              
            in
            let tys =
              let tys =
                
# 1671 "parser_raw.mly"
      ( [] )
# 5997 "parser_raw.ml"
                
              in
              
# 1677 "parser_raw.mly"
    ( tys )
# 6003 "parser_raw.ml"
              
            in
            
# 1534 "parser_raw.mly"
        ( Pcl_constr(cid, tys) )
# 6009 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__100_ in
          let _startpos__1_ = _startpos__100_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 741 "parser_raw.mly"
    ( mkclass ~loc:_sloc _1 )
# 6020 "parser_raw.ml"
          
        in
        
# 1541 "parser_raw.mly"
      ( _1 )
# 6026 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _1010;
          MenhirLib.EngineTypes.startp = _startpos__1010_;
          MenhirLib.EngineTypes.endp = _endpos__1010_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _30000;
            MenhirLib.EngineTypes.startp = _startpos__30000_;
            MenhirLib.EngineTypes.endp = _endpos__30000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = xs000000;
              MenhirLib.EngineTypes.startp = _startpos_xs000000_;
              MenhirLib.EngineTypes.endp = _endpos_xs000000_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _10000;
                MenhirLib.EngineTypes.startp = _startpos__10000_;
                MenhirLib.EngineTypes.endp = _endpos__10000_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _1010 : (Longident.t) = Obj.magic _1010 in
        let _30000 : unit = Obj.magic _30000 in
        let xs000000 : (Parsetree.core_type list) = Obj.magic xs000000 in
        let _10000 : unit = Obj.magic _10000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10000_ in
        let _endpos = _endpos__1010_ in
        let _v : (Parsetree.class_expr) = let _1 =
          let _endpos__101_ = _endpos__1010_ in
          let _startpos__101_ = _startpos__1010_ in
          let _startpos__1000_ = _startpos__10000_ in
          let _101 = _1010 in
          let _3000 = _30000 in
          let xs00000 = xs000000 in
          let _1000 = _10000 in
          let _1 =
            let _endpos__10_ = _endpos__101_ in
            let _startpos__10_ = _startpos__101_ in
            let _10 = _101 in
            let _300 = _3000 in
            let xs0000 = xs00000 in
            let _100 = _1000 in
            let cid =
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _1 = _10 in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 6091 "parser_raw.ml"
              
            in
            let tys =
              let _30 = _300 in
              let xs000 = xs0000 in
              let _10 = _100 in
              let tys =
                let _3 = _30 in
                let xs00 = xs000 in
                let _1 = _10 in
                let params =
                  let xs0 = xs00 in
                  let xs =
                    let xs = xs0 in
                    
# 253 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( List.rev xs )
# 6109 "parser_raw.ml"
                    
                  in
                  
# 801 "parser_raw.mly"
    ( xs )
# 6115 "parser_raw.ml"
                  
                in
                
# 1673 "parser_raw.mly"
      ( params )
# 6121 "parser_raw.ml"
                
              in
              
# 1677 "parser_raw.mly"
    ( tys )
# 6127 "parser_raw.ml"
              
            in
            
# 1534 "parser_raw.mly"
        ( Pcl_constr(cid, tys) )
# 6133 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__101_ in
          let _startpos__1_ = _startpos__1000_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 741 "parser_raw.mly"
    ( mkclass ~loc:_sloc _1 )
# 6144 "parser_raw.ml"
          
        in
        
# 1541 "parser_raw.mly"
      ( _1 )
# 6150 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _400;
          MenhirLib.EngineTypes.startp = _startpos__400_;
          MenhirLib.EngineTypes.endp = _endpos__400_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = xss000000;
            MenhirLib.EngineTypes.startp = _startpos_xss000000_;
            MenhirLib.EngineTypes.endp = _endpos_xss000000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _1100;
              MenhirLib.EngineTypes.startp = _startpos__1100_;
              MenhirLib.EngineTypes.endp = _endpos__1100_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _1000;
                MenhirLib.EngineTypes.startp = _startpos__1000_;
                MenhirLib.EngineTypes.endp = _endpos__1000_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _120;
                  MenhirLib.EngineTypes.startp = _startpos__120_;
                  MenhirLib.EngineTypes.endp = _endpos__120_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _400 : unit = Obj.magic _400 in
        let xss000000 : (Parsetree.class_field list list) = Obj.magic xss000000 in
        let _1100 : (Parsetree.pattern) = Obj.magic _1100 in
        let _1000 : (Parsetree.attributes) = Obj.magic _1000 in
        let _120 : unit = Obj.magic _120 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__120_ in
        let _endpos = _endpos__400_ in
        let _v : (Parsetree.class_expr) = let _1 =
          let _endpos_xss00000_ = _endpos_xss000000_ in
          let _startpos_xss00000_ = _startpos_xss000000_ in
          let _endpos__40_ = _endpos__400_ in
          let _startpos__40_ = _startpos__400_ in
          let _endpos__12_ = _endpos__120_ in
          let _startpos__12_ = _startpos__120_ in
          let _40 = _400 in
          let xss00000 = xss000000 in
          let _110 = _1100 in
          let _100 = _1000 in
          let _12 = _120 in
          let _1 =
            let _endpos_xss0000_ = _endpos_xss00000_ in
            let _startpos_xss0000_ = _startpos_xss00000_ in
            let _endpos__4_ = _endpos__40_ in
            let _startpos__4_ = _startpos__40_ in
            let _endpos__1_ = _endpos__12_ in
            let _startpos__1_ = _startpos__12_ in
            let _4 = _40 in
            let xss0000 = xss00000 in
            let _11 = _110 in
            let _10 = _100 in
            let _1 = _12 in
            let _3 =
              let _endpos_xss000_ = _endpos_xss0000_ in
              let _startpos_xss000_ = _startpos_xss0000_ in
              let xss000 = xss0000 in
              let _1 = _11 in
              let _2 =
                let _endpos_xss00_ = _endpos_xss000_ in
                let _startpos_xss00_ = _startpos_xss000_ in
                let xss00 = xss000 in
                let _1 =
                  let xss0 = xss00 in
                  let _1 =
                    let xss = xss0 in
                    
# 260 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( List.flatten xss )
# 6236 "parser_raw.ml"
                    
                  in
                  
# 1567 "parser_raw.mly"
    ( _1 )
# 6242 "parser_raw.ml"
                  
                in
                let _endpos__1_ = _endpos_xss00_ in
                let _startpos__1_ = _startpos_xss00_ in
                let _endpos = _endpos__1_ in
                let _startpos = _startpos__1_ in
                
# 687 "parser_raw.mly"
                               ( extra_cstr _startpos _endpos _1 )
# 6252 "parser_raw.ml"
                
              in
              
# 1554 "parser_raw.mly"
       ( Cstr.mk _1 _2 )
# 6258 "parser_raw.ml"
              
            in
            let _2 =
              let _1 = _10 in
              
# 3372 "parser_raw.mly"
    ( _1 )
# 6266 "parser_raw.ml"
              
            in
            let _loc__4_ = (_startpos__4_, _endpos__4_) in
            let _loc__1_ = (_startpos__1_, _endpos__1_) in
            
# 1536 "parser_raw.mly"
        ( unclosed "object" _loc__1_ "end" _loc__4_ )
# 6274 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__40_ in
          let _startpos__1_ = _startpos__12_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 741 "parser_raw.mly"
    ( mkclass ~loc:_sloc _1 )
# 6285 "parser_raw.ml"
          
        in
        
# 1541 "parser_raw.mly"
      ( _1 )
# 6291 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _500;
          MenhirLib.EngineTypes.startp = _startpos__500_;
          MenhirLib.EngineTypes.endp = _endpos__500_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _400;
            MenhirLib.EngineTypes.startp = _startpos__400_;
            MenhirLib.EngineTypes.endp = _endpos__400_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _300;
              MenhirLib.EngineTypes.startp = _startpos__300_;
              MenhirLib.EngineTypes.endp = _endpos__300_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _200;
                MenhirLib.EngineTypes.startp = _startpos__200_;
                MenhirLib.EngineTypes.endp = _endpos__200_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _100;
                  MenhirLib.EngineTypes.startp = _startpos__100_;
                  MenhirLib.EngineTypes.endp = _endpos__100_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _500 : unit = Obj.magic _500 in
        let _400 : (Parsetree.class_type) = Obj.magic _400 in
        let _300 : unit = Obj.magic _300 in
        let _200 : (Parsetree.class_expr) = Obj.magic _200 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__500_ in
        let _v : (Parsetree.class_expr) = let _1 =
          let _endpos__50_ = _endpos__500_ in
          let _startpos__10_ = _startpos__100_ in
          let _50 = _500 in
          let _40 = _400 in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _5 = _50 in
            let _4 = _40 in
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            
# 1538 "parser_raw.mly"
        ( Pcl_constraint(_2, _4) )
# 6354 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__50_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 741 "parser_raw.mly"
    ( mkclass ~loc:_sloc _1 )
# 6365 "parser_raw.ml"
          
        in
        
# 1541 "parser_raw.mly"
      ( _1 )
# 6371 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _500;
          MenhirLib.EngineTypes.startp = _startpos__500_;
          MenhirLib.EngineTypes.endp = _endpos__500_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _400;
            MenhirLib.EngineTypes.startp = _startpos__400_;
            MenhirLib.EngineTypes.endp = _endpos__400_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _300;
              MenhirLib.EngineTypes.startp = _startpos__300_;
              MenhirLib.EngineTypes.endp = _endpos__300_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _200;
                MenhirLib.EngineTypes.startp = _startpos__200_;
                MenhirLib.EngineTypes.endp = _endpos__200_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _100;
                  MenhirLib.EngineTypes.startp = _startpos__100_;
                  MenhirLib.EngineTypes.endp = _endpos__100_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _500 : unit = Obj.magic _500 in
        let _400 : (Parsetree.class_type) = Obj.magic _400 in
        let _300 : unit = Obj.magic _300 in
        let _200 : (Parsetree.class_expr) = Obj.magic _200 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__500_ in
        let _v : (Parsetree.class_expr) = let _1 =
          let _endpos__50_ = _endpos__500_ in
          let _startpos__50_ = _startpos__500_ in
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _50 = _500 in
          let _40 = _400 in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _endpos__5_ = _endpos__50_ in
            let _startpos__5_ = _startpos__50_ in
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _5 = _50 in
            let _4 = _40 in
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            let _loc__5_ = (_startpos__5_, _endpos__5_) in
            let _loc__1_ = (_startpos__1_, _endpos__1_) in
            
# 1540 "parser_raw.mly"
        ( unclosed "(" _loc__1_ ")" _loc__5_ )
# 6442 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__50_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 741 "parser_raw.mly"
    ( mkclass ~loc:_sloc _1 )
# 6453 "parser_raw.ml"
          
        in
        
# 1541 "parser_raw.mly"
      ( _1 )
# 6459 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = xss0000;
            MenhirLib.EngineTypes.startp = _startpos_xss0000_;
            MenhirLib.EngineTypes.endp = _endpos_xss0000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _11;
              MenhirLib.EngineTypes.startp = _startpos__11_;
              MenhirLib.EngineTypes.endp = _endpos__11_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _10;
                MenhirLib.EngineTypes.startp = _startpos__10_;
                MenhirLib.EngineTypes.endp = _endpos__10_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let xss0000 : (Parsetree.class_field list list) = Obj.magic xss0000 in
        let _11 : (Parsetree.pattern) = Obj.magic _11 in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.class_expr) = let _3 =
          let _endpos_xss000_ = _endpos_xss0000_ in
          let _startpos_xss000_ = _startpos_xss0000_ in
          let xss000 = xss0000 in
          let _1 = _11 in
          let _2 =
            let _endpos_xss00_ = _endpos_xss000_ in
            let _startpos_xss00_ = _startpos_xss000_ in
            let xss00 = xss000 in
            let _1 =
              let xss0 = xss00 in
              let _1 =
                let xss = xss0 in
                
# 260 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( List.flatten xss )
# 6521 "parser_raw.ml"
                
              in
              
# 1567 "parser_raw.mly"
    ( _1 )
# 6527 "parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos_xss00_ in
            let _startpos__1_ = _startpos_xss00_ in
            let _endpos = _endpos__1_ in
            let _startpos = _startpos__1_ in
            
# 687 "parser_raw.mly"
                               ( extra_cstr _startpos _endpos _1 )
# 6537 "parser_raw.ml"
            
          in
          
# 1554 "parser_raw.mly"
       ( Cstr.mk _1 _2 )
# 6543 "parser_raw.ml"
          
        in
        let _2 =
          let _1 = _10 in
          
# 3372 "parser_raw.mly"
    ( _1 )
# 6551 "parser_raw.ml"
          
        in
        let _endpos = _endpos__4_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1543 "parser_raw.mly"
    ( mkclass ~loc:_sloc ~attrs:_2 (Pcl_structure _3) )
# 6560 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.class_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.class_type) = 
# 1642 "parser_raw.mly"
      ( _1 )
# 6585 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = codomain00;
          MenhirLib.EngineTypes.startp = _startpos_codomain00_;
          MenhirLib.EngineTypes.endp = _endpos_codomain00_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _300;
            MenhirLib.EngineTypes.startp = _startpos__300_;
            MenhirLib.EngineTypes.endp = _endpos__300_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = domain00;
              MenhirLib.EngineTypes.startp = _startpos_domain00_;
              MenhirLib.EngineTypes.endp = _endpos_domain00_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = label000;
                MenhirLib.EngineTypes.startp = _startpos_label000_;
                MenhirLib.EngineTypes.endp = _endpos_label000_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let codomain00 : (Parsetree.class_type) = Obj.magic codomain00 in
        let _300 : unit = Obj.magic _300 in
        let domain00 : (Parsetree.core_type) = Obj.magic domain00 in
        let label000 : (string) = Obj.magic label000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label000_ in
        let _endpos = _endpos_codomain00_ in
        let _v : (Parsetree.class_type) = let _1 =
          let _startpos_label00_ = _startpos_label000_ in
          let _endpos_codomain0_ = _endpos_codomain00_ in
          let codomain0 = codomain00 in
          let _30 = _300 in
          let domain0 = domain00 in
          let label00 = label000 in
          let _1 =
            let codomain = codomain0 in
            let _3 = _30 in
            let domain = domain0 in
            let label0 = label00 in
            let label =
              let label = label0 in
              
# 2913 "parser_raw.mly"
      ( Optional label )
# 6642 "parser_raw.ml"
              
            in
            
# 1648 "parser_raw.mly"
        ( Pcty_arrow(label, domain, codomain) )
# 6648 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_codomain0_ in
          let _startpos__1_ = _startpos_label00_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 735 "parser_raw.mly"
    ( mkcty ~loc:_sloc _1 )
# 6659 "parser_raw.ml"
          
        in
        
# 1649 "parser_raw.mly"
      ( _1 )
# 6665 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = codomain00;
          MenhirLib.EngineTypes.startp = _startpos_codomain00_;
          MenhirLib.EngineTypes.endp = _endpos_codomain00_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _300;
            MenhirLib.EngineTypes.startp = _startpos__300_;
            MenhirLib.EngineTypes.endp = _endpos__300_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = domain00;
              MenhirLib.EngineTypes.startp = _startpos_domain00_;
              MenhirLib.EngineTypes.endp = _endpos_domain00_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2000;
                MenhirLib.EngineTypes.startp = _startpos__2000_;
                MenhirLib.EngineTypes.endp = _endpos__2000_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = label000;
                  MenhirLib.EngineTypes.startp = _startpos_label000_;
                  MenhirLib.EngineTypes.endp = _endpos_label000_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain00 : (Parsetree.class_type) = Obj.magic codomain00 in
        let _300 : unit = Obj.magic _300 in
        let domain00 : (Parsetree.core_type) = Obj.magic domain00 in
        let _2000 : unit = Obj.magic _2000 in
        let label000 : (
# 564 "parser_raw.mly"
       (string)
# 6710 "parser_raw.ml"
        ) = Obj.magic label000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label000_ in
        let _endpos = _endpos_codomain00_ in
        let _v : (Parsetree.class_type) = let _1 =
          let _startpos_label00_ = _startpos_label000_ in
          let _endpos_codomain0_ = _endpos_codomain00_ in
          let codomain0 = codomain00 in
          let _30 = _300 in
          let domain0 = domain00 in
          let _200 = _2000 in
          let label00 = label000 in
          let _1 =
            let codomain = codomain0 in
            let _3 = _30 in
            let domain = domain0 in
            let _20 = _200 in
            let label0 = label00 in
            let label =
              let _2 = _20 in
              let label = label0 in
              
# 2915 "parser_raw.mly"
      ( Labelled label )
# 6735 "parser_raw.ml"
              
            in
            
# 1648 "parser_raw.mly"
        ( Pcty_arrow(label, domain, codomain) )
# 6741 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_codomain0_ in
          let _startpos__1_ = _startpos_label00_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 735 "parser_raw.mly"
    ( mkcty ~loc:_sloc _1 )
# 6752 "parser_raw.ml"
          
        in
        
# 1649 "parser_raw.mly"
      ( _1 )
# 6758 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = codomain00;
          MenhirLib.EngineTypes.startp = _startpos_codomain00_;
          MenhirLib.EngineTypes.endp = _endpos_codomain00_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _300;
            MenhirLib.EngineTypes.startp = _startpos__300_;
            MenhirLib.EngineTypes.endp = _endpos__300_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = domain00;
              MenhirLib.EngineTypes.startp = _startpos_domain00_;
              MenhirLib.EngineTypes.endp = _endpos_domain00_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let codomain00 : (Parsetree.class_type) = Obj.magic codomain00 in
        let _300 : unit = Obj.magic _300 in
        let domain00 : (Parsetree.core_type) = Obj.magic domain00 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_domain00_ in
        let _endpos = _endpos_codomain00_ in
        let _v : (Parsetree.class_type) = let _1 =
          let _startpos_domain0_ = _startpos_domain00_ in
          let _endpos_codomain0_ = _endpos_codomain00_ in
          let codomain0 = codomain00 in
          let _30 = _300 in
          let domain0 = domain00 in
          let _1 =
            let codomain = codomain0 in
            let _3 = _30 in
            let domain = domain0 in
            let label =
              
# 2917 "parser_raw.mly"
      ( Nolabel )
# 6806 "parser_raw.ml"
              
            in
            
# 1648 "parser_raw.mly"
        ( Pcty_arrow(label, domain, codomain) )
# 6812 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_codomain0_ in
          let _startpos__1_ = _startpos_domain0_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 735 "parser_raw.mly"
    ( mkcty ~loc:_sloc _1 )
# 6823 "parser_raw.ml"
          
        in
        
# 1649 "parser_raw.mly"
      ( _1 )
# 6829 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = bs0;
          MenhirLib.EngineTypes.startp = _startpos_bs0_;
          MenhirLib.EngineTypes.endp = _endpos_bs0_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _1200;
            MenhirLib.EngineTypes.startp = _startpos__1200_;
            MenhirLib.EngineTypes.endp = _endpos__1200_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = csig00;
              MenhirLib.EngineTypes.startp = _startpos_csig00_;
              MenhirLib.EngineTypes.endp = _endpos_csig00_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _800;
                MenhirLib.EngineTypes.startp = _startpos__800_;
                MenhirLib.EngineTypes.endp = _endpos__800_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _1100;
                  MenhirLib.EngineTypes.startp = _startpos__1100_;
                  MenhirLib.EngineTypes.endp = _endpos__1100_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = params00;
                    MenhirLib.EngineTypes.startp = _startpos_params00_;
                    MenhirLib.EngineTypes.endp = _endpos_params00_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = virt00;
                      MenhirLib.EngineTypes.startp = _startpos_virt00_;
                      MenhirLib.EngineTypes.endp = _endpos_virt00_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.semv = _1000;
                        MenhirLib.EngineTypes.startp = _startpos__1000_;
                        MenhirLib.EngineTypes.endp = _endpos__1000_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.semv = ext00;
                          MenhirLib.EngineTypes.startp = _startpos_ext00_;
                          MenhirLib.EngineTypes.endp = _endpos_ext00_;
                          MenhirLib.EngineTypes.next = {
                            MenhirLib.EngineTypes.semv = _200;
                            MenhirLib.EngineTypes.startp = _startpos__200_;
                            MenhirLib.EngineTypes.endp = _endpos__200_;
                            MenhirLib.EngineTypes.next = {
                              MenhirLib.EngineTypes.state = _menhir_s;
                              MenhirLib.EngineTypes.semv = _130;
                              MenhirLib.EngineTypes.startp = _startpos__130_;
                              MenhirLib.EngineTypes.endp = _endpos__130_;
                              MenhirLib.EngineTypes.next = _menhir_stack;
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let bs0 : (Parsetree.class_type_declaration list) = Obj.magic bs0 in
        let _1200 : (Parsetree.attributes) = Obj.magic _1200 in
        let csig00 : (Parsetree.class_type) = Obj.magic csig00 in
        let _800 : unit = Obj.magic _800 in
        let _1100 : (
# 564 "parser_raw.mly"
       (string)
# 6904 "parser_raw.ml"
        ) = Obj.magic _1100 in
        let params00 : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic params00 in
        let virt00 : (Asttypes.virtual_flag) = Obj.magic virt00 in
        let _1000 : (Parsetree.attributes) = Obj.magic _1000 in
        let ext00 : (string Location.loc option) = Obj.magic ext00 in
        let _200 : unit = Obj.magic _200 in
        let _130 : unit = Obj.magic _130 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__130_ in
        let _endpos = _endpos_bs0_ in
        let _v : (string Location.loc option * Parsetree.class_type_declaration list) = let _1 =
          let _startpos__13_ = _startpos__130_ in
          let _endpos__120_ = _endpos__1200_ in
          let _endpos__110_ = _endpos__1100_ in
          let _startpos__110_ = _startpos__1100_ in
          let bs = bs0 in
          let _120 = _1200 in
          let csig0 = csig00 in
          let _80 = _800 in
          let _110 = _1100 in
          let params0 = params00 in
          let virt0 = virt00 in
          let _100 = _1000 in
          let ext0 = ext00 in
          let _20 = _200 in
          let _13 = _130 in
          let a =
            let _endpos__12_ = _endpos__120_ in
            let _endpos__11_ = _endpos__110_ in
            let _startpos__11_ = _startpos__110_ in
            let _startpos__1_ = _startpos__13_ in
            let _12 = _120 in
            let csig = csig0 in
            let _8 = _80 in
            let _11 = _110 in
            let params = params0 in
            let virt = virt0 in
            let _10 = _100 in
            let ext = ext0 in
            let _2 = _20 in
            let _1 = _13 in
            let attrs2 =
              let _1 = _12 in
              
# 3368 "parser_raw.mly"
    ( _1 )
# 6951 "parser_raw.ml"
              
            in
            let _endpos_attrs2_ = _endpos__12_ in
            let id =
              let _endpos__1_ = _endpos__11_ in
              let _startpos__1_ = _startpos__11_ in
              let _1 = _11 in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 6965 "parser_raw.ml"
              
            in
            let attrs1 =
              let _1 = _10 in
              
# 3372 "parser_raw.mly"
    ( _1 )
# 6973 "parser_raw.ml"
              
            in
            let _endpos = _endpos_attrs2_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1787 "parser_raw.mly"
    (
      let attrs = attrs1 @ attrs2 in
      let loc = make_loc _sloc in
      let docs = symbol_docs _sloc in
      ext,
      Ci.mk id csig ~virt ~params ~attrs ~loc ~docs
    )
# 6988 "parser_raw.ml"
            
          in
          
# 881 "parser_raw.mly"
    ( let (x, b) = a in x, b :: bs )
# 6994 "parser_raw.ml"
          
        in
        
# 1775 "parser_raw.mly"
    ( _1 )
# 7000 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 564 "parser_raw.mly"
       (string)
# 7021 "parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 3181 "parser_raw.mly"
           ( Lident _1 )
# 7029 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (
# 564 "parser_raw.mly"
       (string)
# 7060 "parser_raw.ml"
        ) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Longident.t) = 
# 3182 "parser_raw.mly"
                                 ( Ldot(_1, _3) )
# 7070 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 549 "parser_raw.mly"
       (string * char option)
# 7091 "parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.constant) = 
# 3076 "parser_raw.mly"
        ( let (n, m) = _1 in Pconst_integer (n, m) )
# 7099 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 507 "parser_raw.mly"
       (char)
# 7120 "parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.constant) = 
# 3077 "parser_raw.mly"
         ( Pconst_char _1 )
# 7128 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 602 "parser_raw.mly"
       (string * string option)
# 7149 "parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.constant) = 
# 3078 "parser_raw.mly"
           ( let (s, d) = _1 in Pconst_string (s, d) )
# 7157 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 527 "parser_raw.mly"
       (string * char option)
# 7178 "parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.constant) = 
# 3079 "parser_raw.mly"
          ( let (f, m) = _1 in Pconst_float (f, m) )
# 7186 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 610 "parser_raw.mly"
       (string)
# 7207 "parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3136 "parser_raw.mly"
           ( _1 )
# 7215 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (string) = 
# 3137 "parser_raw.mly"
                      ( "[]" )
# 7246 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (string) = 
# 3138 "parser_raw.mly"
                  ( "()" )
# 7277 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (string) = 
# 3139 "parser_raw.mly"
                             ( "::" )
# 7314 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3140 "parser_raw.mly"
          ( "false" )
# 7339 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3141 "parser_raw.mly"
         ( "true" )
# 7364 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 3148 "parser_raw.mly"
                                  ( _1 )
# 7389 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Longident.t) = 
# 3149 "parser_raw.mly"
                                               ( Ldot(_1,"::") )
# 7438 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Longident.t) = 
# 3150 "parser_raw.mly"
                      ( Lident "[]" )
# 7469 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Longident.t) = 
# 3151 "parser_raw.mly"
                  ( Lident "()" )
# 7500 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Longident.t) = 
# 3152 "parser_raw.mly"
                             ( Lident "::" )
# 7537 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 3153 "parser_raw.mly"
          ( Lident "false" )
# 7562 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 3154 "parser_raw.mly"
         ( Lident "true" )
# 7587 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.core_type) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.core_type * Parsetree.core_type) = 
# 1731 "parser_raw.mly"
    ( _1, _3 )
# 7624 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x000;
          MenhirLib.EngineTypes.startp = _startpos_x000_;
          MenhirLib.EngineTypes.endp = _endpos_x000_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x000 : (Parsetree.core_type) = Obj.magic x000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x000_ in
        let _endpos = _endpos_x000_ in
        let _v : (Parsetree.constructor_arguments) = let tys =
          let x00 = x000 in
          let xs =
            let x0 = x00 in
            let xs =
              let x = x0 in
              
# 788 "parser_raw.mly"
    ( [ x ] )
# 7655 "parser_raw.ml"
              
            in
            
# 253 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( List.rev xs )
# 7661 "parser_raw.ml"
            
          in
          
# 804 "parser_raw.mly"
    ( xs )
# 7667 "parser_raw.ml"
          
        in
        
# 2737 "parser_raw.mly"
      ( Pcstr_tuple tys )
# 7673 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = x000;
          MenhirLib.EngineTypes.startp = _startpos_x000_;
          MenhirLib.EngineTypes.endp = _endpos_x000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2000;
            MenhirLib.EngineTypes.startp = _startpos__2000_;
            MenhirLib.EngineTypes.endp = _endpos__2000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs000;
              MenhirLib.EngineTypes.startp = _startpos_xs000_;
              MenhirLib.EngineTypes.endp = _endpos_xs000_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let x000 : (Parsetree.core_type) = Obj.magic x000 in
        let _2000 : unit = Obj.magic _2000 in
        let xs000 : (Parsetree.core_type list) = Obj.magic xs000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs000_ in
        let _endpos = _endpos_x000_ in
        let _v : (Parsetree.constructor_arguments) = let tys =
          let x00 = x000 in
          let _200 = _2000 in
          let xs00 = xs000 in
          let xs =
            let x0 = x00 in
            let _20 = _200 in
            let xs0 = xs00 in
            let xs =
              let x = x0 in
              let _2 = _20 in
              let xs = xs0 in
              
# 792 "parser_raw.mly"
    ( x :: xs )
# 7722 "parser_raw.ml"
              
            in
            
# 253 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( List.rev xs )
# 7728 "parser_raw.ml"
            
          in
          
# 804 "parser_raw.mly"
    ( xs )
# 7734 "parser_raw.ml"
          
        in
        
# 2737 "parser_raw.mly"
      ( Pcstr_tuple tys )
# 7740 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.label_declaration list) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.constructor_arguments) = 
# 2739 "parser_raw.mly"
      ( Pcstr_record _2 )
# 7777 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.constructor_declaration list) = 
# 2659 "parser_raw.mly"
      ( [] )
# 7802 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = xs0;
          MenhirLib.EngineTypes.startp = _startpos_xs0_;
          MenhirLib.EngineTypes.endp = _endpos_xs0_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let xs0 : (Parsetree.constructor_declaration list) = Obj.magic xs0 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs0_ in
        let _endpos = _endpos_xs0_ in
        let _v : (Parsetree.constructor_declaration list) = let cs =
          let xs = xs0 in
          
# 875 "parser_raw.mly"
    ( List.rev xs )
# 7829 "parser_raw.ml"
          
        in
        
# 2661 "parser_raw.mly"
      ( cs )
# 7835 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _10 : (Parsetree.core_type) = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__10_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _1 = _10 in
          
# 2877 "parser_raw.mly"
    ( _1 )
# 7862 "parser_raw.ml"
          
        in
        
# 2868 "parser_raw.mly"
      ( _1 )
# 7868 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.attribute) = Obj.magic _2 in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.core_type) = 
# 2870 "parser_raw.mly"
      ( Typ.attr _1 _2 )
# 7899 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.direction_flag) = 
# 3225 "parser_raw.mly"
       ( Upto )
# 7924 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.direction_flag) = 
# 3226 "parser_raw.mly"
           ( Downto )
# 7949 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Ast_helper.let_bindings) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__3_ in
        let _startpos = _startpos__1_ in
        let _loc = (_startpos, _endpos) in
        
# 3419 "parser_raw.mly"
    ( expr_of_lwt_bindings ~loc:_loc _1 (merloc _endpos__2_ _3) )
# 7989 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _100;
                MenhirLib.EngineTypes.startp = _startpos__100_;
                MenhirLib.EngineTypes.endp = _endpos__100_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _11;
                  MenhirLib.EngineTypes.startp = _startpos__11_;
                  MenhirLib.EngineTypes.endp = _endpos__11_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.case list) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _100 : (Parsetree.attributes) = Obj.magic _100 in
        let _11 : (string Location.loc option) = Obj.magic _11 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.expression) = let _2 =
          let _10 = _100 in
          let _1 = _11 in
          let _2 =
            let _1 = _10 in
            
# 3372 "parser_raw.mly"
    ( _1 )
# 8049 "parser_raw.ml"
            
          in
          
# 3383 "parser_raw.mly"
                 ( _1, _2 )
# 8055 "parser_raw.ml"
          
        in
        let _endpos = _endpos__5_ in
        let _startpos = _startpos__1_ in
        let _loc = (_startpos, _endpos) in
        
# 3421 "parser_raw.mly"
    ( let expr = mkexp_attrs ~loc:_loc
          (Pexp_match(Fake.app Fake.Lwt.un_lwt _3, List.rev _5)) _2 in
      Fake.app Fake.Lwt.in_lwt expr )
# 8066 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _100;
            MenhirLib.EngineTypes.startp = _startpos__100_;
            MenhirLib.EngineTypes.endp = _endpos__100_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _11;
              MenhirLib.EngineTypes.startp = _startpos__11_;
              MenhirLib.EngineTypes.endp = _endpos__11_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _100 : (Parsetree.attributes) = Obj.magic _100 in
        let _11 : (string Location.loc option) = Obj.magic _11 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.expression) = let _2 =
          let _10 = _100 in
          let _1 = _11 in
          let _2 =
            let _1 = _10 in
            
# 3372 "parser_raw.mly"
    ( _1 )
# 8114 "parser_raw.ml"
            
          in
          
# 3383 "parser_raw.mly"
                 ( _1, _2 )
# 8120 "parser_raw.ml"
          
        in
        let _endpos = _endpos__3_ in
        let _startpos = _startpos__1_ in
        let _loc = (_startpos, _endpos) in
        
# 3425 "parser_raw.mly"
    ( reloc_exp ~loc:_loc (Fake.app Fake.Lwt.in_lwt _3) )
# 8129 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _100;
                MenhirLib.EngineTypes.startp = _startpos__100_;
                MenhirLib.EngineTypes.endp = _endpos__100_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _11;
                  MenhirLib.EngineTypes.startp = _startpos__11_;
                  MenhirLib.EngineTypes.endp = _endpos__11_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.case list) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _100 : (Parsetree.attributes) = Obj.magic _100 in
        let _11 : (string Location.loc option) = Obj.magic _11 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.expression) = let _2 =
          let _10 = _100 in
          let _1 = _11 in
          let _2 =
            let _1 = _10 in
            
# 3372 "parser_raw.mly"
    ( _1 )
# 8189 "parser_raw.ml"
            
          in
          
# 3383 "parser_raw.mly"
                 ( _1, _2 )
# 8195 "parser_raw.ml"
          
        in
        let _endpos = _endpos__5_ in
        let _startpos = _startpos__1_ in
        let _loc = (_startpos, _endpos) in
        
# 3427 "parser_raw.mly"
    ( mkexp_attrs ~loc:_loc
        (Pexp_try(Fake.app Fake.Lwt.in_lwt _3, List.rev _5)) _2 )
# 8205 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _100;
                MenhirLib.EngineTypes.startp = _startpos__100_;
                MenhirLib.EngineTypes.endp = _endpos__100_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _11;
                  MenhirLib.EngineTypes.startp = _startpos__11_;
                  MenhirLib.EngineTypes.endp = _endpos__11_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _100 : (Parsetree.attributes) = Obj.magic _100 in
        let _11 : (string Location.loc option) = Obj.magic _11 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.expression) = let _2 =
          let _10 = _100 in
          let _1 = _11 in
          let _2 =
            let _1 = _10 in
            
# 3372 "parser_raw.mly"
    ( _1 )
# 8265 "parser_raw.ml"
            
          in
          
# 3383 "parser_raw.mly"
                 ( _1, _2 )
# 8271 "parser_raw.ml"
          
        in
        
# 3430 "parser_raw.mly"
    ( Fake.app (Fake.app Fake.Lwt.finally_ _3) _5 )
# 8277 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _100;
                    MenhirLib.EngineTypes.startp = _startpos__100_;
                    MenhirLib.EngineTypes.endp = _endpos__100_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = _11;
                      MenhirLib.EngineTypes.startp = _startpos__11_;
                      MenhirLib.EngineTypes.endp = _endpos__11_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _1;
                        MenhirLib.EngineTypes.startp = _startpos__1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _5 : (Parsetree.case list) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _100 : (Parsetree.attributes) = Obj.magic _100 in
        let _11 : (string Location.loc option) = Obj.magic _11 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.expression) = let _2 =
          let _10 = _100 in
          let _1 = _11 in
          let _2 =
            let _1 = _10 in
            
# 3372 "parser_raw.mly"
    ( _1 )
# 8349 "parser_raw.ml"
            
          in
          
# 3383 "parser_raw.mly"
                 ( _1, _2 )
# 8355 "parser_raw.ml"
          
        in
        let _endpos = _endpos__7_ in
        let _startpos = _startpos__1_ in
        let _loc = (_startpos, _endpos) in
        
# 3432 "parser_raw.mly"
    ( let expr = mkexp_attrs ~loc:_loc
        (Pexp_try (Fake.app Fake.Lwt.in_lwt _3, List.rev _5)) _2 in
      Fake.app (Fake.app Fake.Lwt.finally_ expr) _7 )
# 8366 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _3;
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _100;
                  MenhirLib.EngineTypes.startp = _startpos__100_;
                  MenhirLib.EngineTypes.endp = _endpos__100_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _11;
                    MenhirLib.EngineTypes.startp = _startpos__11_;
                    MenhirLib.EngineTypes.endp = _endpos__11_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : unit = Obj.magic _6 in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _100 : (Parsetree.attributes) = Obj.magic _100 in
        let _11 : (string Location.loc option) = Obj.magic _11 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v : (Parsetree.expression) = let _2 =
          let _10 = _100 in
          let _1 = _11 in
          let _2 =
            let _1 = _10 in
            
# 3372 "parser_raw.mly"
    ( _1 )
# 8432 "parser_raw.ml"
            
          in
          
# 3383 "parser_raw.mly"
                 ( _1, _2 )
# 8438 "parser_raw.ml"
          
        in
        let _endpos = _endpos__6_ in
        let _startpos = _startpos__1_ in
        let _loc = (_startpos, _endpos) in
        
# 3436 "parser_raw.mly"
  ( let expr = Pexp_while (_3, Fake.(app Lwt.un_lwt _5)) in
    Fake.(app Lwt.to_lwt (mkexp_attrs ~loc:_loc expr _2)) )
# 8448 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _9;
            MenhirLib.EngineTypes.startp = _startpos__9_;
            MenhirLib.EngineTypes.endp = _endpos__9_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _8;
              MenhirLib.EngineTypes.startp = _startpos__8_;
              MenhirLib.EngineTypes.endp = _endpos__8_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _7;
                MenhirLib.EngineTypes.startp = _startpos__7_;
                MenhirLib.EngineTypes.endp = _endpos__7_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _6;
                  MenhirLib.EngineTypes.startp = _startpos__6_;
                  MenhirLib.EngineTypes.endp = _endpos__6_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _5;
                    MenhirLib.EngineTypes.startp = _startpos__5_;
                    MenhirLib.EngineTypes.endp = _endpos__5_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = _4;
                      MenhirLib.EngineTypes.startp = _startpos__4_;
                      MenhirLib.EngineTypes.endp = _endpos__4_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.semv = _3;
                        MenhirLib.EngineTypes.startp = _startpos__3_;
                        MenhirLib.EngineTypes.endp = _endpos__3_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.semv = _100;
                          MenhirLib.EngineTypes.startp = _startpos__100_;
                          MenhirLib.EngineTypes.endp = _endpos__100_;
                          MenhirLib.EngineTypes.next = {
                            MenhirLib.EngineTypes.semv = _11;
                            MenhirLib.EngineTypes.startp = _startpos__11_;
                            MenhirLib.EngineTypes.endp = _endpos__11_;
                            MenhirLib.EngineTypes.next = {
                              MenhirLib.EngineTypes.state = _menhir_s;
                              MenhirLib.EngineTypes.semv = _1;
                              MenhirLib.EngineTypes.startp = _startpos__1_;
                              MenhirLib.EngineTypes.endp = _endpos__1_;
                              MenhirLib.EngineTypes.next = _menhir_stack;
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _10 : unit = Obj.magic _10 in
        let _9 : (Parsetree.expression) = Obj.magic _9 in
        let _8 : unit = Obj.magic _8 in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : (Asttypes.direction_flag) = Obj.magic _6 in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.pattern) = Obj.magic _3 in
        let _100 : (Parsetree.attributes) = Obj.magic _100 in
        let _11 : (string Location.loc option) = Obj.magic _11 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__10_ in
        let _v : (Parsetree.expression) = let _2 =
          let _10 = _100 in
          let _1 = _11 in
          let _2 =
            let _1 = _10 in
            
# 3372 "parser_raw.mly"
    ( _1 )
# 8538 "parser_raw.ml"
            
          in
          
# 3383 "parser_raw.mly"
                 ( _1, _2 )
# 8544 "parser_raw.ml"
          
        in
        let _endpos = _endpos__10_ in
        let _startpos = _startpos__1_ in
        let _loc = (_startpos, _endpos) in
        
# 3439 "parser_raw.mly"
    ( let expr = Pexp_for (_3, _5, _7, _6, Fake.(app Lwt.un_lwt _9)) in
      Fake.(app Lwt.to_lwt (mkexp_attrs ~loc:_loc expr _2)) )
# 8554 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _8;
          MenhirLib.EngineTypes.startp = _startpos__8_;
          MenhirLib.EngineTypes.endp = _endpos__8_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _7;
            MenhirLib.EngineTypes.startp = _startpos__7_;
            MenhirLib.EngineTypes.endp = _endpos__7_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _6;
              MenhirLib.EngineTypes.startp = _startpos__6_;
              MenhirLib.EngineTypes.endp = _endpos__6_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _5;
                MenhirLib.EngineTypes.startp = _startpos__5_;
                MenhirLib.EngineTypes.endp = _endpos__5_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _4;
                  MenhirLib.EngineTypes.startp = _startpos__4_;
                  MenhirLib.EngineTypes.endp = _endpos__4_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _3;
                    MenhirLib.EngineTypes.startp = _startpos__3_;
                    MenhirLib.EngineTypes.endp = _endpos__3_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = _100;
                      MenhirLib.EngineTypes.startp = _startpos__100_;
                      MenhirLib.EngineTypes.endp = _endpos__100_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.semv = _11;
                        MenhirLib.EngineTypes.startp = _startpos__11_;
                        MenhirLib.EngineTypes.endp = _endpos__11_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _8 : unit = Obj.magic _8 in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.pattern) = Obj.magic _3 in
        let _100 : (Parsetree.attributes) = Obj.magic _100 in
        let _11 : (string Location.loc option) = Obj.magic _11 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__8_ in
        let _v : (Parsetree.expression) = let _2 =
          let _10 = _100 in
          let _1 = _11 in
          let _2 =
            let _1 = _10 in
            
# 3372 "parser_raw.mly"
    ( _1 )
# 8632 "parser_raw.ml"
            
          in
          
# 3383 "parser_raw.mly"
                 ( _1, _2 )
# 8638 "parser_raw.ml"
          
        in
        let _endpos = _endpos__8_ in
        let _startpos = _startpos__1_ in
        let _loc = (_startpos, _endpos) in
        
# 3442 "parser_raw.mly"
    ( mkexp_attrs ~loc:_loc
          (Pexp_let (Nonrecursive, [Vb.mk _3 (Fake.(app Lwt.un_stream _5))],
             Fake.(app Lwt.unit_lwt _7)))
          _2
    )
# 8651 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.expression) = 
# 1872 "parser_raw.mly"
      ( _1 )
# 8676 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _70;
          MenhirLib.EngineTypes.startp = _startpos__70_;
          MenhirLib.EngineTypes.endp = _endpos__70_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _60;
            MenhirLib.EngineTypes.startp = _startpos__60_;
            MenhirLib.EngineTypes.endp = _endpos__60_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _50;
              MenhirLib.EngineTypes.startp = _startpos__50_;
              MenhirLib.EngineTypes.endp = _endpos__50_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _101;
                MenhirLib.EngineTypes.startp = _startpos__101_;
                MenhirLib.EngineTypes.endp = _endpos__101_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _1000;
                  MenhirLib.EngineTypes.startp = _startpos__1000_;
                  MenhirLib.EngineTypes.endp = _endpos__1000_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _110;
                    MenhirLib.EngineTypes.startp = _startpos__110_;
                    MenhirLib.EngineTypes.endp = _endpos__110_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = _20;
                      MenhirLib.EngineTypes.startp = _startpos__20_;
                      MenhirLib.EngineTypes.endp = _endpos__20_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _12;
                        MenhirLib.EngineTypes.startp = _startpos__12_;
                        MenhirLib.EngineTypes.endp = _endpos__12_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _70 : (Parsetree.expression) = Obj.magic _70 in
        let _60 : unit = Obj.magic _60 in
        let _50 : (Parsetree.module_expr) = Obj.magic _50 in
        let _101 : (
# 610 "parser_raw.mly"
       (string)
# 8735 "parser_raw.ml"
        ) = Obj.magic _101 in
        let _1000 : (Parsetree.attributes) = Obj.magic _1000 in
        let _110 : (string Location.loc option) = Obj.magic _110 in
        let _20 : unit = Obj.magic _20 in
        let _12 : unit = Obj.magic _12 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__12_ in
        let _endpos = _endpos__70_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__6_ = _endpos__60_ in
          let _endpos__10_ = _endpos__101_ in
          let _startpos__10_ = _startpos__101_ in
          let _7 = _70 in
          let _6 = _60 in
          let _5 = _50 in
          let _10 = _101 in
          let _100 = _1000 in
          let _11 = _110 in
          let _2 = _20 in
          let _1 = _12 in
          let _4 =
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _1 = _10 in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 8766 "parser_raw.ml"
            
          in
          let _3 =
            let _10 = _100 in
            let _1 = _11 in
            let _2 =
              let _1 = _10 in
              
# 3372 "parser_raw.mly"
    ( _1 )
# 8777 "parser_raw.ml"
              
            in
            
# 3383 "parser_raw.mly"
                 ( _1, _2 )
# 8783 "parser_raw.ml"
            
          in
          
# 1917 "parser_raw.mly"
      ( Pexp_letmodule(_4, _5, (merloc _endpos__6_ _7)), _3 )
# 8789 "parser_raw.ml"
          
        in
        let _endpos__1_ = _endpos__70_ in
        let _startpos__1_ = _startpos__12_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1874 "parser_raw.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 8801 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _60;
          MenhirLib.EngineTypes.startp = _startpos__60_;
          MenhirLib.EngineTypes.endp = _endpos__60_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _50;
            MenhirLib.EngineTypes.startp = _startpos__50_;
            MenhirLib.EngineTypes.endp = _endpos__50_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _1100;
              MenhirLib.EngineTypes.startp = _startpos__1100_;
              MenhirLib.EngineTypes.endp = _endpos__1100_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _200;
                MenhirLib.EngineTypes.startp = _startpos__200_;
                MenhirLib.EngineTypes.endp = _endpos__200_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _1010;
                  MenhirLib.EngineTypes.startp = _startpos__1010_;
                  MenhirLib.EngineTypes.endp = _endpos__1010_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _1000;
                    MenhirLib.EngineTypes.startp = _startpos__1000_;
                    MenhirLib.EngineTypes.endp = _endpos__1000_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = _111;
                      MenhirLib.EngineTypes.startp = _startpos__111_;
                      MenhirLib.EngineTypes.endp = _endpos__111_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.semv = _21;
                        MenhirLib.EngineTypes.startp = _startpos__21_;
                        MenhirLib.EngineTypes.endp = _endpos__21_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _10;
                          MenhirLib.EngineTypes.startp = _startpos__10_;
                          MenhirLib.EngineTypes.endp = _endpos__10_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _60 : (Parsetree.expression) = Obj.magic _60 in
        let _50 : unit = Obj.magic _50 in
        let _1100 : (Parsetree.attributes) = Obj.magic _1100 in
        let _200 : (Parsetree.constructor_arguments * Parsetree.core_type option) = Obj.magic _200 in
        let _1010 : (string) = Obj.magic _1010 in
        let _1000 : (Parsetree.attributes) = Obj.magic _1000 in
        let _111 : (string Location.loc option) = Obj.magic _111 in
        let _21 : unit = Obj.magic _21 in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__60_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__110_ = _endpos__1100_ in
          let _endpos__101_ = _endpos__1010_ in
          let _startpos__101_ = _startpos__1010_ in
          let _6 = _60 in
          let _5 = _50 in
          let _110 = _1100 in
          let _20 = _200 in
          let _101 = _1010 in
          let _100 = _1000 in
          let _11 = _111 in
          let _2 = _21 in
          let _1 = _10 in
          let _4 =
            let _endpos__11_ = _endpos__110_ in
            let _endpos__10_ = _endpos__101_ in
            let _startpos__10_ = _startpos__101_ in
            let _11 = _110 in
            let _2 = _20 in
            let _10 = _101 in
            let _3 =
              let _1 = _11 in
              
# 3372 "parser_raw.mly"
    ( _1 )
# 8896 "parser_raw.ml"
              
            in
            let _endpos__3_ = _endpos__11_ in
            let _1 =
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _1 = _10 in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 8910 "parser_raw.ml"
              
            in
            let _startpos__1_ = _startpos__10_ in
            let _endpos = _endpos__3_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2723 "parser_raw.mly"
      ( let args, res = _2 in
        Te.decl _1 ~args ?res ~attrs:_3 ~loc:(make_loc _sloc) )
# 8921 "parser_raw.ml"
            
          in
          let _3 =
            let _10 = _100 in
            let _1 = _11 in
            let _2 =
              let _1 = _10 in
              
# 3372 "parser_raw.mly"
    ( _1 )
# 8932 "parser_raw.ml"
              
            in
            
# 3383 "parser_raw.mly"
                 ( _1, _2 )
# 8938 "parser_raw.ml"
            
          in
          
# 1919 "parser_raw.mly"
      ( Pexp_letexception(_4, _6), _3 )
# 8944 "parser_raw.ml"
          
        in
        let _endpos__1_ = _endpos__60_ in
        let _startpos__1_ = _startpos__10_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1874 "parser_raw.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 8956 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _70;
          MenhirLib.EngineTypes.startp = _startpos__70_;
          MenhirLib.EngineTypes.endp = _endpos__70_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _60;
            MenhirLib.EngineTypes.startp = _startpos__60_;
            MenhirLib.EngineTypes.endp = _endpos__60_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _50;
              MenhirLib.EngineTypes.startp = _startpos__50_;
              MenhirLib.EngineTypes.endp = _endpos__50_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _1000;
                MenhirLib.EngineTypes.startp = _startpos__1000_;
                MenhirLib.EngineTypes.endp = _endpos__1000_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _110;
                  MenhirLib.EngineTypes.startp = _startpos__110_;
                  MenhirLib.EngineTypes.endp = _endpos__110_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _20;
                    MenhirLib.EngineTypes.startp = _startpos__20_;
                    MenhirLib.EngineTypes.endp = _endpos__20_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _10;
                      MenhirLib.EngineTypes.startp = _startpos__10_;
                      MenhirLib.EngineTypes.endp = _endpos__10_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _70 : (Parsetree.expression) = Obj.magic _70 in
        let _60 : unit = Obj.magic _60 in
        let _50 : (Parsetree.module_expr) = Obj.magic _50 in
        let _1000 : (Parsetree.attributes) = Obj.magic _1000 in
        let _110 : (string Location.loc option) = Obj.magic _110 in
        let _20 : unit = Obj.magic _20 in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__70_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__6_ = _endpos__60_ in
          let _endpos__5_ = _endpos__50_ in
          let _startpos__2_ = _startpos__20_ in
          let _7 = _70 in
          let _6 = _60 in
          let _5 = _50 in
          let _100 = _1000 in
          let _11 = _110 in
          let _2 = _20 in
          let _1 = _10 in
          let _4 =
            let _10 = _100 in
            let _1 = _11 in
            let _2 =
              let _1 = _10 in
              
# 3372 "parser_raw.mly"
    ( _1 )
# 9033 "parser_raw.ml"
              
            in
            
# 3383 "parser_raw.mly"
                 ( _1, _2 )
# 9039 "parser_raw.ml"
            
          in
          let _3 =
            
# 3279 "parser_raw.mly"
                                                ( Fresh )
# 9046 "parser_raw.ml"
            
          in
          
# 1921 "parser_raw.mly"
      ( let open_loc = make_loc (_startpos__2_, _endpos__5_) in
        let od = Opn.mk _5 ~override:_3 ~loc:open_loc in
        Pexp_open(od, (merloc _endpos__6_ _7)), _4 )
# 9054 "parser_raw.ml"
          
        in
        let _endpos__1_ = _endpos__70_ in
        let _startpos__1_ = _startpos__10_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1874 "parser_raw.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 9066 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _70;
          MenhirLib.EngineTypes.startp = _startpos__70_;
          MenhirLib.EngineTypes.endp = _endpos__70_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _60;
            MenhirLib.EngineTypes.startp = _startpos__60_;
            MenhirLib.EngineTypes.endp = _endpos__60_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _50;
              MenhirLib.EngineTypes.startp = _startpos__50_;
              MenhirLib.EngineTypes.endp = _endpos__50_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _1000;
                MenhirLib.EngineTypes.startp = _startpos__1000_;
                MenhirLib.EngineTypes.endp = _endpos__1000_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _110;
                  MenhirLib.EngineTypes.startp = _startpos__110_;
                  MenhirLib.EngineTypes.endp = _endpos__110_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _101;
                    MenhirLib.EngineTypes.startp = _startpos__101_;
                    MenhirLib.EngineTypes.endp = _endpos__101_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = _20;
                      MenhirLib.EngineTypes.startp = _startpos__20_;
                      MenhirLib.EngineTypes.endp = _endpos__20_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _12;
                        MenhirLib.EngineTypes.startp = _startpos__12_;
                        MenhirLib.EngineTypes.endp = _endpos__12_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _70 : (Parsetree.expression) = Obj.magic _70 in
        let _60 : unit = Obj.magic _60 in
        let _50 : (Parsetree.module_expr) = Obj.magic _50 in
        let _1000 : (Parsetree.attributes) = Obj.magic _1000 in
        let _110 : (string Location.loc option) = Obj.magic _110 in
        let _101 : unit = Obj.magic _101 in
        let _20 : unit = Obj.magic _20 in
        let _12 : unit = Obj.magic _12 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__12_ in
        let _endpos = _endpos__70_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__6_ = _endpos__60_ in
          let _endpos__5_ = _endpos__50_ in
          let _startpos__2_ = _startpos__20_ in
          let _7 = _70 in
          let _6 = _60 in
          let _5 = _50 in
          let _100 = _1000 in
          let _11 = _110 in
          let _10 = _101 in
          let _2 = _20 in
          let _1 = _12 in
          let _4 =
            let _10 = _100 in
            let _1 = _11 in
            let _2 =
              let _1 = _10 in
              
# 3372 "parser_raw.mly"
    ( _1 )
# 9150 "parser_raw.ml"
              
            in
            
# 3383 "parser_raw.mly"
                 ( _1, _2 )
# 9156 "parser_raw.ml"
            
          in
          let _3 =
            let _1 = _10 in
            
# 3280 "parser_raw.mly"
         ( Override )
# 9164 "parser_raw.ml"
            
          in
          
# 1921 "parser_raw.mly"
      ( let open_loc = make_loc (_startpos__2_, _endpos__5_) in
        let od = Opn.mk _5 ~override:_3 ~loc:open_loc in
        Pexp_open(od, (merloc _endpos__6_ _7)), _4 )
# 9172 "parser_raw.ml"
          
        in
        let _endpos__1_ = _endpos__70_ in
        let _startpos__1_ = _startpos__12_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1874 "parser_raw.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 9184 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _30;
          MenhirLib.EngineTypes.startp = _startpos__30_;
          MenhirLib.EngineTypes.endp = _endpos__30_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _1000;
            MenhirLib.EngineTypes.startp = _startpos__1000_;
            MenhirLib.EngineTypes.endp = _endpos__1000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _110;
              MenhirLib.EngineTypes.startp = _startpos__110_;
              MenhirLib.EngineTypes.endp = _endpos__110_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _10;
                MenhirLib.EngineTypes.startp = _startpos__10_;
                MenhirLib.EngineTypes.endp = _endpos__10_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _30 : (Parsetree.case list) = Obj.magic _30 in
        let _1000 : (Parsetree.attributes) = Obj.magic _1000 in
        let _110 : (string Location.loc option) = Obj.magic _110 in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__30_ in
        let _v : (Parsetree.expression) = let _1 =
          let _3 = _30 in
          let _100 = _1000 in
          let _11 = _110 in
          let _1 = _10 in
          let _2 =
            let _10 = _100 in
            let _1 = _11 in
            let _2 =
              let _1 = _10 in
              
# 3372 "parser_raw.mly"
    ( _1 )
# 9237 "parser_raw.ml"
              
            in
            
# 3383 "parser_raw.mly"
                 ( _1, _2 )
# 9243 "parser_raw.ml"
            
          in
          
# 1925 "parser_raw.mly"
      ( Pexp_function _3, _2 )
# 9249 "parser_raw.ml"
          
        in
        let _endpos__1_ = _endpos__30_ in
        let _startpos__1_ = _startpos__10_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1874 "parser_raw.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 9261 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _40;
          MenhirLib.EngineTypes.startp = _startpos__40_;
          MenhirLib.EngineTypes.endp = _endpos__40_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _30;
            MenhirLib.EngineTypes.startp = _startpos__30_;
            MenhirLib.EngineTypes.endp = _endpos__30_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _1000;
              MenhirLib.EngineTypes.startp = _startpos__1000_;
              MenhirLib.EngineTypes.endp = _endpos__1000_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _110;
                MenhirLib.EngineTypes.startp = _startpos__110_;
                MenhirLib.EngineTypes.endp = _endpos__110_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _10;
                  MenhirLib.EngineTypes.startp = _startpos__10_;
                  MenhirLib.EngineTypes.endp = _endpos__10_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _40 : (Parsetree.expression) = Obj.magic _40 in
        let _30 : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = Obj.magic _30 in
        let _1000 : (Parsetree.attributes) = Obj.magic _1000 in
        let _110 : (string Location.loc option) = Obj.magic _110 in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__40_ in
        let _v : (Parsetree.expression) = let _1 =
          let _4 = _40 in
          let _3 = _30 in
          let _100 = _1000 in
          let _11 = _110 in
          let _1 = _10 in
          let _2 =
            let _10 = _100 in
            let _1 = _11 in
            let _2 =
              let _1 = _10 in
              
# 3372 "parser_raw.mly"
    ( _1 )
# 9321 "parser_raw.ml"
              
            in
            
# 3383 "parser_raw.mly"
                 ( _1, _2 )
# 9327 "parser_raw.ml"
            
          in
          
# 1927 "parser_raw.mly"
      ( let (l,o,p) = _3 in
        Pexp_fun(l, o, p, _4), _2 )
# 9334 "parser_raw.ml"
          
        in
        let _endpos__1_ = _endpos__40_ in
        let _startpos__1_ = _startpos__10_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1874 "parser_raw.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 9346 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _70;
          MenhirLib.EngineTypes.startp = _startpos__70_;
          MenhirLib.EngineTypes.endp = _endpos__70_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _60;
            MenhirLib.EngineTypes.startp = _startpos__60_;
            MenhirLib.EngineTypes.endp = _endpos__60_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = xs00;
              MenhirLib.EngineTypes.startp = _startpos_xs00_;
              MenhirLib.EngineTypes.endp = _endpos_xs00_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _40;
                MenhirLib.EngineTypes.startp = _startpos__40_;
                MenhirLib.EngineTypes.endp = _endpos__40_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _30;
                  MenhirLib.EngineTypes.startp = _startpos__30_;
                  MenhirLib.EngineTypes.endp = _endpos__30_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _1000;
                    MenhirLib.EngineTypes.startp = _startpos__1000_;
                    MenhirLib.EngineTypes.endp = _endpos__1000_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = _110;
                      MenhirLib.EngineTypes.startp = _startpos__110_;
                      MenhirLib.EngineTypes.endp = _endpos__110_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _10;
                        MenhirLib.EngineTypes.startp = _startpos__10_;
                        MenhirLib.EngineTypes.endp = _endpos__10_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _70 : (Parsetree.expression) = Obj.magic _70 in
        let _60 : unit = Obj.magic _60 in
        let xs00 : (string Location.loc list) = Obj.magic xs00 in
        let _40 : unit = Obj.magic _40 in
        let _30 : unit = Obj.magic _30 in
        let _1000 : (Parsetree.attributes) = Obj.magic _1000 in
        let _110 : (string Location.loc option) = Obj.magic _110 in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__70_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__7_ = _endpos__70_ in
          let _startpos__1_ = _startpos__10_ in
          let _7 = _70 in
          let _6 = _60 in
          let xs0 = xs00 in
          let _4 = _40 in
          let _3 = _30 in
          let _100 = _1000 in
          let _11 = _110 in
          let _1 = _10 in
          let _5 =
            let xs = xs0 in
            
# 2147 "parser_raw.mly"
    ( xs )
# 9426 "parser_raw.ml"
            
          in
          let _2 =
            let _10 = _100 in
            let _1 = _11 in
            let _2 =
              let _1 = _10 in
              
# 3372 "parser_raw.mly"
    ( _1 )
# 9437 "parser_raw.ml"
              
            in
            
# 3383 "parser_raw.mly"
                 ( _1, _2 )
# 9443 "parser_raw.ml"
            
          in
          let _endpos = _endpos__7_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1930 "parser_raw.mly"
      ( (mk_newtypes ~loc:_sloc _5 _7).pexp_desc, _2 )
# 9452 "parser_raw.ml"
          
        in
        let _endpos__1_ = _endpos__70_ in
        let _startpos__1_ = _startpos__10_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1874 "parser_raw.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 9464 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _50;
          MenhirLib.EngineTypes.startp = _startpos__50_;
          MenhirLib.EngineTypes.endp = _endpos__50_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _40;
            MenhirLib.EngineTypes.startp = _startpos__40_;
            MenhirLib.EngineTypes.endp = _endpos__40_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _30;
              MenhirLib.EngineTypes.startp = _startpos__30_;
              MenhirLib.EngineTypes.endp = _endpos__30_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _1000;
                MenhirLib.EngineTypes.startp = _startpos__1000_;
                MenhirLib.EngineTypes.endp = _endpos__1000_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _110;
                  MenhirLib.EngineTypes.startp = _startpos__110_;
                  MenhirLib.EngineTypes.endp = _endpos__110_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _10;
                    MenhirLib.EngineTypes.startp = _startpos__10_;
                    MenhirLib.EngineTypes.endp = _endpos__10_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _50 : (Parsetree.case list) = Obj.magic _50 in
        let _40 : unit = Obj.magic _40 in
        let _30 : (Parsetree.expression) = Obj.magic _30 in
        let _1000 : (Parsetree.attributes) = Obj.magic _1000 in
        let _110 : (string Location.loc option) = Obj.magic _110 in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__50_ in
        let _v : (Parsetree.expression) = let _1 =
          let _5 = _50 in
          let _4 = _40 in
          let _3 = _30 in
          let _100 = _1000 in
          let _11 = _110 in
          let _1 = _10 in
          let _2 =
            let _10 = _100 in
            let _1 = _11 in
            let _2 =
              let _1 = _10 in
              
# 3372 "parser_raw.mly"
    ( _1 )
# 9531 "parser_raw.ml"
              
            in
            
# 3383 "parser_raw.mly"
                 ( _1, _2 )
# 9537 "parser_raw.ml"
            
          in
          
# 1932 "parser_raw.mly"
      ( Pexp_match(_3, _5), _2 )
# 9543 "parser_raw.ml"
          
        in
        let _endpos__1_ = _endpos__50_ in
        let _startpos__1_ = _startpos__10_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1874 "parser_raw.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 9555 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _50;
          MenhirLib.EngineTypes.startp = _startpos__50_;
          MenhirLib.EngineTypes.endp = _endpos__50_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _40;
            MenhirLib.EngineTypes.startp = _startpos__40_;
            MenhirLib.EngineTypes.endp = _endpos__40_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _30;
              MenhirLib.EngineTypes.startp = _startpos__30_;
              MenhirLib.EngineTypes.endp = _endpos__30_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _1000;
                MenhirLib.EngineTypes.startp = _startpos__1000_;
                MenhirLib.EngineTypes.endp = _endpos__1000_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _110;
                  MenhirLib.EngineTypes.startp = _startpos__110_;
                  MenhirLib.EngineTypes.endp = _endpos__110_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _10;
                    MenhirLib.EngineTypes.startp = _startpos__10_;
                    MenhirLib.EngineTypes.endp = _endpos__10_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _50 : (Parsetree.case list) = Obj.magic _50 in
        let _40 : unit = Obj.magic _40 in
        let _30 : (Parsetree.expression) = Obj.magic _30 in
        let _1000 : (Parsetree.attributes) = Obj.magic _1000 in
        let _110 : (string Location.loc option) = Obj.magic _110 in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__50_ in
        let _v : (Parsetree.expression) = let _1 =
          let _5 = _50 in
          let _4 = _40 in
          let _3 = _30 in
          let _100 = _1000 in
          let _11 = _110 in
          let _1 = _10 in
          let _2 =
            let _10 = _100 in
            let _1 = _11 in
            let _2 =
              let _1 = _10 in
              
# 3372 "parser_raw.mly"
    ( _1 )
# 9622 "parser_raw.ml"
              
            in
            
# 3383 "parser_raw.mly"
                 ( _1, _2 )
# 9628 "parser_raw.ml"
            
          in
          
# 1934 "parser_raw.mly"
      ( Pexp_try(_3, _5), _2 )
# 9634 "parser_raw.ml"
          
        in
        let _endpos__1_ = _endpos__50_ in
        let _startpos__1_ = _startpos__10_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1874 "parser_raw.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 9646 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _50;
          MenhirLib.EngineTypes.startp = _startpos__50_;
          MenhirLib.EngineTypes.endp = _endpos__50_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _40;
            MenhirLib.EngineTypes.startp = _startpos__40_;
            MenhirLib.EngineTypes.endp = _endpos__40_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _30;
              MenhirLib.EngineTypes.startp = _startpos__30_;
              MenhirLib.EngineTypes.endp = _endpos__30_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _1000;
                MenhirLib.EngineTypes.startp = _startpos__1000_;
                MenhirLib.EngineTypes.endp = _endpos__1000_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _110;
                  MenhirLib.EngineTypes.startp = _startpos__110_;
                  MenhirLib.EngineTypes.endp = _endpos__110_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _10;
                    MenhirLib.EngineTypes.startp = _startpos__10_;
                    MenhirLib.EngineTypes.endp = _endpos__10_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _50 : unit = Obj.magic _50 in
        let _40 : unit = Obj.magic _40 in
        let _30 : (Parsetree.expression) = Obj.magic _30 in
        let _1000 : (Parsetree.attributes) = Obj.magic _1000 in
        let _110 : (string Location.loc option) = Obj.magic _110 in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__50_ in
        let _v : (Parsetree.expression) = let _1 =
          let _5 = _50 in
          let _4 = _40 in
          let _3 = _30 in
          let _100 = _1000 in
          let _11 = _110 in
          let _1 = _10 in
          let _2 =
            let _10 = _100 in
            let _1 = _11 in
            let _2 =
              let _1 = _10 in
              
# 3372 "parser_raw.mly"
    ( _1 )
# 9713 "parser_raw.ml"
              
            in
            
# 3383 "parser_raw.mly"
                 ( _1, _2 )
# 9719 "parser_raw.ml"
            
          in
          
# 1936 "parser_raw.mly"
      ( syntax_error() )
# 9725 "parser_raw.ml"
          
        in
        let _endpos__1_ = _endpos__50_ in
        let _startpos__1_ = _startpos__10_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1874 "parser_raw.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 9737 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _70;
          MenhirLib.EngineTypes.startp = _startpos__70_;
          MenhirLib.EngineTypes.endp = _endpos__70_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _60;
            MenhirLib.EngineTypes.startp = _startpos__60_;
            MenhirLib.EngineTypes.endp = _endpos__60_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _50;
              MenhirLib.EngineTypes.startp = _startpos__50_;
              MenhirLib.EngineTypes.endp = _endpos__50_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _40;
                MenhirLib.EngineTypes.startp = _startpos__40_;
                MenhirLib.EngineTypes.endp = _endpos__40_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _30;
                  MenhirLib.EngineTypes.startp = _startpos__30_;
                  MenhirLib.EngineTypes.endp = _endpos__30_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _1000;
                    MenhirLib.EngineTypes.startp = _startpos__1000_;
                    MenhirLib.EngineTypes.endp = _endpos__1000_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = _110;
                      MenhirLib.EngineTypes.startp = _startpos__110_;
                      MenhirLib.EngineTypes.endp = _endpos__110_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _10;
                        MenhirLib.EngineTypes.startp = _startpos__10_;
                        MenhirLib.EngineTypes.endp = _endpos__10_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _70 : (Parsetree.expression) = Obj.magic _70 in
        let _60 : unit = Obj.magic _60 in
        let _50 : (Parsetree.expression) = Obj.magic _50 in
        let _40 : unit = Obj.magic _40 in
        let _30 : (Parsetree.expression) = Obj.magic _30 in
        let _1000 : (Parsetree.attributes) = Obj.magic _1000 in
        let _110 : (string Location.loc option) = Obj.magic _110 in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__70_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__6_ = _endpos__60_ in
          let _endpos__4_ = _endpos__40_ in
          let _7 = _70 in
          let _6 = _60 in
          let _5 = _50 in
          let _4 = _40 in
          let _3 = _30 in
          let _100 = _1000 in
          let _11 = _110 in
          let _1 = _10 in
          let _2 =
            let _10 = _100 in
            let _1 = _11 in
            let _2 =
              let _1 = _10 in
              
# 3372 "parser_raw.mly"
    ( _1 )
# 9820 "parser_raw.ml"
              
            in
            
# 3383 "parser_raw.mly"
                 ( _1, _2 )
# 9826 "parser_raw.ml"
            
          in
          
# 1938 "parser_raw.mly"
      ( Pexp_ifthenelse(_3, (merloc _endpos__4_ _5), Some (merloc _endpos__6_ _7)), _2 )
# 9832 "parser_raw.ml"
          
        in
        let _endpos__1_ = _endpos__70_ in
        let _startpos__1_ = _startpos__10_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1874 "parser_raw.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 9844 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _50;
          MenhirLib.EngineTypes.startp = _startpos__50_;
          MenhirLib.EngineTypes.endp = _endpos__50_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _40;
            MenhirLib.EngineTypes.startp = _startpos__40_;
            MenhirLib.EngineTypes.endp = _endpos__40_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _30;
              MenhirLib.EngineTypes.startp = _startpos__30_;
              MenhirLib.EngineTypes.endp = _endpos__30_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _1000;
                MenhirLib.EngineTypes.startp = _startpos__1000_;
                MenhirLib.EngineTypes.endp = _endpos__1000_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _110;
                  MenhirLib.EngineTypes.startp = _startpos__110_;
                  MenhirLib.EngineTypes.endp = _endpos__110_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _10;
                    MenhirLib.EngineTypes.startp = _startpos__10_;
                    MenhirLib.EngineTypes.endp = _endpos__10_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _50 : (Parsetree.expression) = Obj.magic _50 in
        let _40 : unit = Obj.magic _40 in
        let _30 : (Parsetree.expression) = Obj.magic _30 in
        let _1000 : (Parsetree.attributes) = Obj.magic _1000 in
        let _110 : (string Location.loc option) = Obj.magic _110 in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__50_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__4_ = _endpos__40_ in
          let _5 = _50 in
          let _4 = _40 in
          let _3 = _30 in
          let _100 = _1000 in
          let _11 = _110 in
          let _1 = _10 in
          let _2 =
            let _10 = _100 in
            let _1 = _11 in
            let _2 =
              let _1 = _10 in
              
# 3372 "parser_raw.mly"
    ( _1 )
# 9912 "parser_raw.ml"
              
            in
            
# 3383 "parser_raw.mly"
                 ( _1, _2 )
# 9918 "parser_raw.ml"
            
          in
          
# 1940 "parser_raw.mly"
      ( Pexp_ifthenelse(_3, (merloc _endpos__4_ _5), None), _2 )
# 9924 "parser_raw.ml"
          
        in
        let _endpos__1_ = _endpos__50_ in
        let _startpos__1_ = _startpos__10_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1874 "parser_raw.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 9936 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _60;
          MenhirLib.EngineTypes.startp = _startpos__60_;
          MenhirLib.EngineTypes.endp = _endpos__60_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _50;
            MenhirLib.EngineTypes.startp = _startpos__50_;
            MenhirLib.EngineTypes.endp = _endpos__50_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _40;
              MenhirLib.EngineTypes.startp = _startpos__40_;
              MenhirLib.EngineTypes.endp = _endpos__40_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _30;
                MenhirLib.EngineTypes.startp = _startpos__30_;
                MenhirLib.EngineTypes.endp = _endpos__30_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _1000;
                  MenhirLib.EngineTypes.startp = _startpos__1000_;
                  MenhirLib.EngineTypes.endp = _endpos__1000_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _110;
                    MenhirLib.EngineTypes.startp = _startpos__110_;
                    MenhirLib.EngineTypes.endp = _endpos__110_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _10;
                      MenhirLib.EngineTypes.startp = _startpos__10_;
                      MenhirLib.EngineTypes.endp = _endpos__10_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _60 : unit = Obj.magic _60 in
        let _50 : (Parsetree.expression) = Obj.magic _50 in
        let _40 : unit = Obj.magic _40 in
        let _30 : (Parsetree.expression) = Obj.magic _30 in
        let _1000 : (Parsetree.attributes) = Obj.magic _1000 in
        let _110 : (string Location.loc option) = Obj.magic _110 in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__60_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__4_ = _endpos__40_ in
          let _6 = _60 in
          let _5 = _50 in
          let _4 = _40 in
          let _3 = _30 in
          let _100 = _1000 in
          let _11 = _110 in
          let _1 = _10 in
          let _2 =
            let _10 = _100 in
            let _1 = _11 in
            let _2 =
              let _1 = _10 in
              
# 3372 "parser_raw.mly"
    ( _1 )
# 10011 "parser_raw.ml"
              
            in
            
# 3383 "parser_raw.mly"
                 ( _1, _2 )
# 10017 "parser_raw.ml"
            
          in
          
# 1942 "parser_raw.mly"
      ( Pexp_while(_3, (merloc _endpos__4_ _5)), _2 )
# 10023 "parser_raw.ml"
          
        in
        let _endpos__1_ = _endpos__60_ in
        let _startpos__1_ = _startpos__10_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1874 "parser_raw.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 10035 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _101;
          MenhirLib.EngineTypes.startp = _startpos__101_;
          MenhirLib.EngineTypes.endp = _endpos__101_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _90;
            MenhirLib.EngineTypes.startp = _startpos__90_;
            MenhirLib.EngineTypes.endp = _endpos__90_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _80;
              MenhirLib.EngineTypes.startp = _startpos__80_;
              MenhirLib.EngineTypes.endp = _endpos__80_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _70;
                MenhirLib.EngineTypes.startp = _startpos__70_;
                MenhirLib.EngineTypes.endp = _endpos__70_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _60;
                  MenhirLib.EngineTypes.startp = _startpos__60_;
                  MenhirLib.EngineTypes.endp = _endpos__60_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _50;
                    MenhirLib.EngineTypes.startp = _startpos__50_;
                    MenhirLib.EngineTypes.endp = _endpos__50_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = _40;
                      MenhirLib.EngineTypes.startp = _startpos__40_;
                      MenhirLib.EngineTypes.endp = _endpos__40_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.semv = _30;
                        MenhirLib.EngineTypes.startp = _startpos__30_;
                        MenhirLib.EngineTypes.endp = _endpos__30_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.semv = _1000;
                          MenhirLib.EngineTypes.startp = _startpos__1000_;
                          MenhirLib.EngineTypes.endp = _endpos__1000_;
                          MenhirLib.EngineTypes.next = {
                            MenhirLib.EngineTypes.semv = _110;
                            MenhirLib.EngineTypes.startp = _startpos__110_;
                            MenhirLib.EngineTypes.endp = _endpos__110_;
                            MenhirLib.EngineTypes.next = {
                              MenhirLib.EngineTypes.state = _menhir_s;
                              MenhirLib.EngineTypes.semv = _12;
                              MenhirLib.EngineTypes.startp = _startpos__12_;
                              MenhirLib.EngineTypes.endp = _endpos__12_;
                              MenhirLib.EngineTypes.next = _menhir_stack;
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _101 : unit = Obj.magic _101 in
        let _90 : (Parsetree.expression) = Obj.magic _90 in
        let _80 : unit = Obj.magic _80 in
        let _70 : (Parsetree.expression) = Obj.magic _70 in
        let _60 : (Asttypes.direction_flag) = Obj.magic _60 in
        let _50 : (Parsetree.expression) = Obj.magic _50 in
        let _40 : unit = Obj.magic _40 in
        let _30 : (Parsetree.pattern) = Obj.magic _30 in
        let _1000 : (Parsetree.attributes) = Obj.magic _1000 in
        let _110 : (string Location.loc option) = Obj.magic _110 in
        let _12 : unit = Obj.magic _12 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__12_ in
        let _endpos = _endpos__101_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__8_ = _endpos__80_ in
          let _endpos__6_ = _endpos__60_ in
          let _endpos__4_ = _endpos__40_ in
          let _10 = _101 in
          let _9 = _90 in
          let _8 = _80 in
          let _7 = _70 in
          let _6 = _60 in
          let _5 = _50 in
          let _4 = _40 in
          let _3 = _30 in
          let _100 = _1000 in
          let _11 = _110 in
          let _1 = _12 in
          let _2 =
            let _10 = _100 in
            let _1 = _11 in
            let _2 =
              let _1 = _10 in
              
# 3372 "parser_raw.mly"
    ( _1 )
# 10140 "parser_raw.ml"
              
            in
            
# 3383 "parser_raw.mly"
                 ( _1, _2 )
# 10146 "parser_raw.ml"
            
          in
          
# 1945 "parser_raw.mly"
      ( Pexp_for(_3, (merloc _endpos__4_ _5), (merloc _endpos__6_ _7), _6, (merloc _endpos__8_ _9)), _2 )
# 10152 "parser_raw.ml"
          
        in
        let _endpos__1_ = _endpos__101_ in
        let _startpos__1_ = _startpos__12_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1874 "parser_raw.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 10164 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _30;
          MenhirLib.EngineTypes.startp = _startpos__30_;
          MenhirLib.EngineTypes.endp = _endpos__30_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _1000;
            MenhirLib.EngineTypes.startp = _startpos__1000_;
            MenhirLib.EngineTypes.endp = _endpos__1000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _110;
              MenhirLib.EngineTypes.startp = _startpos__110_;
              MenhirLib.EngineTypes.endp = _endpos__110_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _10;
                MenhirLib.EngineTypes.startp = _startpos__10_;
                MenhirLib.EngineTypes.endp = _endpos__10_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _30 : (Parsetree.expression) = Obj.magic _30 in
        let _1000 : (Parsetree.attributes) = Obj.magic _1000 in
        let _110 : (string Location.loc option) = Obj.magic _110 in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__30_ in
        let _v : (Parsetree.expression) = let _1 =
          let _3 = _30 in
          let _100 = _1000 in
          let _11 = _110 in
          let _1 = _10 in
          let _2 =
            let _10 = _100 in
            let _1 = _11 in
            let _2 =
              let _1 = _10 in
              
# 3372 "parser_raw.mly"
    ( _1 )
# 10217 "parser_raw.ml"
              
            in
            
# 3383 "parser_raw.mly"
                 ( _1, _2 )
# 10223 "parser_raw.ml"
            
          in
          
# 1947 "parser_raw.mly"
      ( Pexp_assert _3, _2 )
# 10229 "parser_raw.ml"
          
        in
        let _endpos__1_ = _endpos__30_ in
        let _startpos__1_ = _startpos__10_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1874 "parser_raw.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 10241 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _30;
          MenhirLib.EngineTypes.startp = _startpos__30_;
          MenhirLib.EngineTypes.endp = _endpos__30_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _1000;
            MenhirLib.EngineTypes.startp = _startpos__1000_;
            MenhirLib.EngineTypes.endp = _endpos__1000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _110;
              MenhirLib.EngineTypes.startp = _startpos__110_;
              MenhirLib.EngineTypes.endp = _endpos__110_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _10;
                MenhirLib.EngineTypes.startp = _startpos__10_;
                MenhirLib.EngineTypes.endp = _endpos__10_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _30 : (Parsetree.expression) = Obj.magic _30 in
        let _1000 : (Parsetree.attributes) = Obj.magic _1000 in
        let _110 : (string Location.loc option) = Obj.magic _110 in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__30_ in
        let _v : (Parsetree.expression) = let _1 =
          let _3 = _30 in
          let _100 = _1000 in
          let _11 = _110 in
          let _1 = _10 in
          let _2 =
            let _10 = _100 in
            let _1 = _11 in
            let _2 =
              let _1 = _10 in
              
# 3372 "parser_raw.mly"
    ( _1 )
# 10294 "parser_raw.ml"
              
            in
            
# 3383 "parser_raw.mly"
                 ( _1, _2 )
# 10300 "parser_raw.ml"
            
          in
          
# 1949 "parser_raw.mly"
      ( Pexp_lazy _3, _2 )
# 10306 "parser_raw.ml"
          
        in
        let _endpos__1_ = _endpos__30_ in
        let _startpos__1_ = _startpos__10_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1874 "parser_raw.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 10318 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _40;
          MenhirLib.EngineTypes.startp = _startpos__40_;
          MenhirLib.EngineTypes.endp = _endpos__40_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = xss00000;
            MenhirLib.EngineTypes.startp = _startpos_xss00000_;
            MenhirLib.EngineTypes.endp = _endpos_xss00000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _101;
              MenhirLib.EngineTypes.startp = _startpos__101_;
              MenhirLib.EngineTypes.endp = _endpos__101_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _1000;
                MenhirLib.EngineTypes.startp = _startpos__1000_;
                MenhirLib.EngineTypes.endp = _endpos__1000_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _110;
                  MenhirLib.EngineTypes.startp = _startpos__110_;
                  MenhirLib.EngineTypes.endp = _endpos__110_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _12;
                    MenhirLib.EngineTypes.startp = _startpos__12_;
                    MenhirLib.EngineTypes.endp = _endpos__12_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _40 : unit = Obj.magic _40 in
        let xss00000 : (Parsetree.class_field list list) = Obj.magic xss00000 in
        let _101 : (Parsetree.pattern) = Obj.magic _101 in
        let _1000 : (Parsetree.attributes) = Obj.magic _1000 in
        let _110 : (string Location.loc option) = Obj.magic _110 in
        let _12 : unit = Obj.magic _12 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__12_ in
        let _endpos = _endpos__40_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos_xss0000_ = _endpos_xss00000_ in
          let _startpos_xss0000_ = _startpos_xss00000_ in
          let _4 = _40 in
          let xss0000 = xss00000 in
          let _10 = _101 in
          let _100 = _1000 in
          let _11 = _110 in
          let _1 = _12 in
          let _3 =
            let _endpos_xss000_ = _endpos_xss0000_ in
            let _startpos_xss000_ = _startpos_xss0000_ in
            let xss000 = xss0000 in
            let _1 = _10 in
            let _2 =
              let _endpos_xss00_ = _endpos_xss000_ in
              let _startpos_xss00_ = _startpos_xss000_ in
              let xss00 = xss000 in
              let _1 =
                let xss0 = xss00 in
                let _1 =
                  let xss = xss0 in
                  
# 260 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( List.flatten xss )
# 10395 "parser_raw.ml"
                  
                in
                
# 1567 "parser_raw.mly"
    ( _1 )
# 10401 "parser_raw.ml"
                
              in
              let _endpos__1_ = _endpos_xss00_ in
              let _startpos__1_ = _startpos_xss00_ in
              let _endpos = _endpos__1_ in
              let _startpos = _startpos__1_ in
              
# 687 "parser_raw.mly"
                               ( extra_cstr _startpos _endpos _1 )
# 10411 "parser_raw.ml"
              
            in
            
# 1554 "parser_raw.mly"
       ( Cstr.mk _1 _2 )
# 10417 "parser_raw.ml"
            
          in
          let _2 =
            let _10 = _100 in
            let _1 = _11 in
            let _2 =
              let _1 = _10 in
              
# 3372 "parser_raw.mly"
    ( _1 )
# 10428 "parser_raw.ml"
              
            in
            
# 3383 "parser_raw.mly"
                 ( _1, _2 )
# 10434 "parser_raw.ml"
            
          in
          
# 1951 "parser_raw.mly"
      ( Pexp_object _3, _2 )
# 10440 "parser_raw.ml"
          
        in
        let _endpos__1_ = _endpos__40_ in
        let _startpos__1_ = _startpos__12_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1874 "parser_raw.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 10452 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _40;
          MenhirLib.EngineTypes.startp = _startpos__40_;
          MenhirLib.EngineTypes.endp = _endpos__40_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = xss00000;
            MenhirLib.EngineTypes.startp = _startpos_xss00000_;
            MenhirLib.EngineTypes.endp = _endpos_xss00000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _101;
              MenhirLib.EngineTypes.startp = _startpos__101_;
              MenhirLib.EngineTypes.endp = _endpos__101_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _1000;
                MenhirLib.EngineTypes.startp = _startpos__1000_;
                MenhirLib.EngineTypes.endp = _endpos__1000_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _110;
                  MenhirLib.EngineTypes.startp = _startpos__110_;
                  MenhirLib.EngineTypes.endp = _endpos__110_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _12;
                    MenhirLib.EngineTypes.startp = _startpos__12_;
                    MenhirLib.EngineTypes.endp = _endpos__12_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _40 : unit = Obj.magic _40 in
        let xss00000 : (Parsetree.class_field list list) = Obj.magic xss00000 in
        let _101 : (Parsetree.pattern) = Obj.magic _101 in
        let _1000 : (Parsetree.attributes) = Obj.magic _1000 in
        let _110 : (string Location.loc option) = Obj.magic _110 in
        let _12 : unit = Obj.magic _12 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__12_ in
        let _endpos = _endpos__40_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos_xss0000_ = _endpos_xss00000_ in
          let _startpos_xss0000_ = _startpos_xss00000_ in
          let _endpos__4_ = _endpos__40_ in
          let _startpos__4_ = _startpos__40_ in
          let _endpos__1_ = _endpos__12_ in
          let _startpos__1_ = _startpos__12_ in
          let _4 = _40 in
          let xss0000 = xss00000 in
          let _10 = _101 in
          let _100 = _1000 in
          let _11 = _110 in
          let _1 = _12 in
          let _3 =
            let _endpos_xss000_ = _endpos_xss0000_ in
            let _startpos_xss000_ = _startpos_xss0000_ in
            let xss000 = xss0000 in
            let _1 = _10 in
            let _2 =
              let _endpos_xss00_ = _endpos_xss000_ in
              let _startpos_xss00_ = _startpos_xss000_ in
              let xss00 = xss000 in
              let _1 =
                let xss0 = xss00 in
                let _1 =
                  let xss = xss0 in
                  
# 260 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( List.flatten xss )
# 10533 "parser_raw.ml"
                  
                in
                
# 1567 "parser_raw.mly"
    ( _1 )
# 10539 "parser_raw.ml"
                
              in
              let _endpos__1_ = _endpos_xss00_ in
              let _startpos__1_ = _startpos_xss00_ in
              let _endpos = _endpos__1_ in
              let _startpos = _startpos__1_ in
              
# 687 "parser_raw.mly"
                               ( extra_cstr _startpos _endpos _1 )
# 10549 "parser_raw.ml"
              
            in
            
# 1554 "parser_raw.mly"
       ( Cstr.mk _1 _2 )
# 10555 "parser_raw.ml"
            
          in
          let _2 =
            let _10 = _100 in
            let _1 = _11 in
            let _2 =
              let _1 = _10 in
              
# 3372 "parser_raw.mly"
    ( _1 )
# 10566 "parser_raw.ml"
              
            in
            
# 3383 "parser_raw.mly"
                 ( _1, _2 )
# 10572 "parser_raw.ml"
            
          in
          let _loc__4_ = (_startpos__4_, _endpos__4_) in
          let _loc__1_ = (_startpos__1_, _endpos__1_) in
          
# 1953 "parser_raw.mly"
      ( unclosed "object" _loc__1_ "end" _loc__4_ )
# 10580 "parser_raw.ml"
          
        in
        let _endpos__1_ = _endpos__40_ in
        let _startpos__1_ = _startpos__12_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1874 "parser_raw.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 10592 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs0000;
          MenhirLib.EngineTypes.startp = _startpos_xs0000_;
          MenhirLib.EngineTypes.endp = _endpos_xs0000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _100;
            MenhirLib.EngineTypes.startp = _startpos__100_;
            MenhirLib.EngineTypes.endp = _endpos__100_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs0000 : ((Asttypes.arg_label * Parsetree.expression) list) = Obj.magic xs0000 in
        let _100 : (Parsetree.expression) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos_xs0000_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos_xs000_ = _endpos_xs0000_ in
          let _startpos__10_ = _startpos__100_ in
          let xs000 = xs0000 in
          let _10 = _100 in
          let _1 =
            let xs00 = xs000 in
            let _1 = _10 in
            let _2 =
              let xs0 = xs00 in
              let xs =
                let xs = xs0 in
                
# 253 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( List.rev xs )
# 10635 "parser_raw.ml"
                
              in
              
# 775 "parser_raw.mly"
    ( xs )
# 10641 "parser_raw.ml"
              
            in
            
# 1957 "parser_raw.mly"
      ( Pexp_apply(_1, _2) )
# 10647 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_xs000_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 721 "parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 10658 "parser_raw.ml"
          
        in
        
# 1877 "parser_raw.mly"
      ( _1 )
# 10664 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = xs00000;
          MenhirLib.EngineTypes.startp = _startpos_xs00000_;
          MenhirLib.EngineTypes.endp = _endpos_xs00000_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let xs00000 : (Parsetree.expression list) = Obj.magic xs00000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs00000_ in
        let _endpos = _endpos_xs00000_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos_xs0000_ = _endpos_xs00000_ in
          let _startpos_xs0000_ = _startpos_xs00000_ in
          let xs0000 = xs00000 in
          let _1 =
            let xs000 = xs0000 in
            let _1 =
              let xs00 = xs000 in
              let es =
                let xs0 = xs00 in
                let xs =
                  let xs = xs0 in
                  
# 253 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( List.rev xs )
# 10701 "parser_raw.ml"
                  
                in
                
# 824 "parser_raw.mly"
    ( xs )
# 10707 "parser_raw.ml"
                
              in
              
# 2280 "parser_raw.mly"
    ( es )
# 10713 "parser_raw.ml"
              
            in
            
# 1959 "parser_raw.mly"
      ( Pexp_tuple(_1) )
# 10719 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_xs0000_ in
          let _startpos__1_ = _startpos_xs0000_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 721 "parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 10730 "parser_raw.ml"
          
        in
        
# 1877 "parser_raw.mly"
      ( _1 )
# 10736 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _200;
          MenhirLib.EngineTypes.startp = _startpos__200_;
          MenhirLib.EngineTypes.endp = _endpos__200_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1000;
            MenhirLib.EngineTypes.startp = _startpos__1000_;
            MenhirLib.EngineTypes.endp = _endpos__1000_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _200 : (Parsetree.expression) = Obj.magic _200 in
        let _1000 : (Longident.t) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos__200_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__20_ = _endpos__200_ in
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _20 = _200 in
          let _100 = _1000 in
          let _1 =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _2 = _20 in
            let _10 = _100 in
            let _1 =
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _1 = _10 in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 10785 "parser_raw.ml"
              
            in
            
# 1961 "parser_raw.mly"
      ( Pexp_construct(_1, Some _2) )
# 10791 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__20_ in
          let _startpos__1_ = _startpos__100_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 721 "parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 10802 "parser_raw.ml"
          
        in
        
# 1877 "parser_raw.mly"
      ( _1 )
# 10808 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _200;
          MenhirLib.EngineTypes.startp = _startpos__200_;
          MenhirLib.EngineTypes.endp = _endpos__200_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _100;
            MenhirLib.EngineTypes.startp = _startpos__100_;
            MenhirLib.EngineTypes.endp = _endpos__100_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _200 : (Parsetree.expression) = Obj.magic _200 in
        let _100 : (string) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__200_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__20_ = _endpos__200_ in
          let _startpos__10_ = _startpos__100_ in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _2 = _20 in
            let _1 = _10 in
            
# 1963 "parser_raw.mly"
      ( Pexp_variant(_1, Some _2) )
# 10847 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__20_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 721 "parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 10858 "parser_raw.ml"
          
        in
        
# 1877 "parser_raw.mly"
      ( _1 )
# 10864 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = e200;
          MenhirLib.EngineTypes.startp = _startpos_e200_;
          MenhirLib.EngineTypes.endp = _endpos_e200_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = op0000;
            MenhirLib.EngineTypes.startp = _startpos_op0000_;
            MenhirLib.EngineTypes.endp = _endpos_op0000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e100;
              MenhirLib.EngineTypes.startp = _startpos_e100_;
              MenhirLib.EngineTypes.endp = _endpos_e100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e200 : (Parsetree.expression) = Obj.magic e200 in
        let op0000 : (
# 539 "parser_raw.mly"
       (string)
# 10896 "parser_raw.ml"
        ) = Obj.magic op0000 in
        let e100 : (Parsetree.expression) = Obj.magic e100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e100_ in
        let _endpos = _endpos_e200_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos_op000_ = _endpos_op0000_ in
          let _startpos_op000_ = _startpos_op0000_ in
          let _endpos_e20_ = _endpos_e200_ in
          let _startpos_e10_ = _startpos_e100_ in
          let e20 = e200 in
          let op000 = op0000 in
          let e10 = e100 in
          let _1 =
            let _endpos_op00_ = _endpos_op000_ in
            let _startpos_op00_ = _startpos_op000_ in
            let e2 = e20 in
            let op00 = op000 in
            let e1 = e10 in
            let op =
              let _endpos_op0_ = _endpos_op00_ in
              let _startpos_op0_ = _startpos_op00_ in
              let op0 = op00 in
              let _1 =
                let op = op0 in
                
# 3114 "parser_raw.mly"
                  ( op )
# 10925 "parser_raw.ml"
                
              in
              let _endpos__1_ = _endpos_op0_ in
              let _startpos__1_ = _startpos_op0_ in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 717 "parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 10936 "parser_raw.ml"
              
            in
            
# 1965 "parser_raw.mly"
      ( mkinfix e1 op e2 )
# 10942 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_e20_ in
          let _startpos__1_ = _startpos_e10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 721 "parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 10953 "parser_raw.ml"
          
        in
        
# 1877 "parser_raw.mly"
      ( _1 )
# 10959 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = e200;
          MenhirLib.EngineTypes.startp = _startpos_e200_;
          MenhirLib.EngineTypes.endp = _endpos_e200_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = op0000;
            MenhirLib.EngineTypes.startp = _startpos_op0000_;
            MenhirLib.EngineTypes.endp = _endpos_op0000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e100;
              MenhirLib.EngineTypes.startp = _startpos_e100_;
              MenhirLib.EngineTypes.endp = _endpos_e100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e200 : (Parsetree.expression) = Obj.magic e200 in
        let op0000 : (
# 540 "parser_raw.mly"
       (string)
# 10991 "parser_raw.ml"
        ) = Obj.magic op0000 in
        let e100 : (Parsetree.expression) = Obj.magic e100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e100_ in
        let _endpos = _endpos_e200_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos_op000_ = _endpos_op0000_ in
          let _startpos_op000_ = _startpos_op0000_ in
          let _endpos_e20_ = _endpos_e200_ in
          let _startpos_e10_ = _startpos_e100_ in
          let e20 = e200 in
          let op000 = op0000 in
          let e10 = e100 in
          let _1 =
            let _endpos_op00_ = _endpos_op000_ in
            let _startpos_op00_ = _startpos_op000_ in
            let e2 = e20 in
            let op00 = op000 in
            let e1 = e10 in
            let op =
              let _endpos_op0_ = _endpos_op00_ in
              let _startpos_op0_ = _startpos_op00_ in
              let op0 = op00 in
              let _1 =
                let op = op0 in
                
# 3115 "parser_raw.mly"
                  ( op )
# 11020 "parser_raw.ml"
                
              in
              let _endpos__1_ = _endpos_op0_ in
              let _startpos__1_ = _startpos_op0_ in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 717 "parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 11031 "parser_raw.ml"
              
            in
            
# 1965 "parser_raw.mly"
      ( mkinfix e1 op e2 )
# 11037 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_e20_ in
          let _startpos__1_ = _startpos_e10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 721 "parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 11048 "parser_raw.ml"
          
        in
        
# 1877 "parser_raw.mly"
      ( _1 )
# 11054 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = e200;
          MenhirLib.EngineTypes.startp = _startpos_e200_;
          MenhirLib.EngineTypes.endp = _endpos_e200_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = op0000;
            MenhirLib.EngineTypes.startp = _startpos_op0000_;
            MenhirLib.EngineTypes.endp = _endpos_op0000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e100;
              MenhirLib.EngineTypes.startp = _startpos_e100_;
              MenhirLib.EngineTypes.endp = _endpos_e100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e200 : (Parsetree.expression) = Obj.magic e200 in
        let op0000 : (
# 541 "parser_raw.mly"
       (string)
# 11086 "parser_raw.ml"
        ) = Obj.magic op0000 in
        let e100 : (Parsetree.expression) = Obj.magic e100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e100_ in
        let _endpos = _endpos_e200_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos_op000_ = _endpos_op0000_ in
          let _startpos_op000_ = _startpos_op0000_ in
          let _endpos_e20_ = _endpos_e200_ in
          let _startpos_e10_ = _startpos_e100_ in
          let e20 = e200 in
          let op000 = op0000 in
          let e10 = e100 in
          let _1 =
            let _endpos_op00_ = _endpos_op000_ in
            let _startpos_op00_ = _startpos_op000_ in
            let e2 = e20 in
            let op00 = op000 in
            let e1 = e10 in
            let op =
              let _endpos_op0_ = _endpos_op00_ in
              let _startpos_op0_ = _startpos_op00_ in
              let op0 = op00 in
              let _1 =
                let op = op0 in
                
# 3116 "parser_raw.mly"
                  ( op )
# 11115 "parser_raw.ml"
                
              in
              let _endpos__1_ = _endpos_op0_ in
              let _startpos__1_ = _startpos_op0_ in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 717 "parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 11126 "parser_raw.ml"
              
            in
            
# 1965 "parser_raw.mly"
      ( mkinfix e1 op e2 )
# 11132 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_e20_ in
          let _startpos__1_ = _startpos_e10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 721 "parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 11143 "parser_raw.ml"
          
        in
        
# 1877 "parser_raw.mly"
      ( _1 )
# 11149 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = e200;
          MenhirLib.EngineTypes.startp = _startpos_e200_;
          MenhirLib.EngineTypes.endp = _endpos_e200_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = op0000;
            MenhirLib.EngineTypes.startp = _startpos_op0000_;
            MenhirLib.EngineTypes.endp = _endpos_op0000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e100;
              MenhirLib.EngineTypes.startp = _startpos_e100_;
              MenhirLib.EngineTypes.endp = _endpos_e100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e200 : (Parsetree.expression) = Obj.magic e200 in
        let op0000 : (
# 542 "parser_raw.mly"
       (string)
# 11181 "parser_raw.ml"
        ) = Obj.magic op0000 in
        let e100 : (Parsetree.expression) = Obj.magic e100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e100_ in
        let _endpos = _endpos_e200_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos_op000_ = _endpos_op0000_ in
          let _startpos_op000_ = _startpos_op0000_ in
          let _endpos_e20_ = _endpos_e200_ in
          let _startpos_e10_ = _startpos_e100_ in
          let e20 = e200 in
          let op000 = op0000 in
          let e10 = e100 in
          let _1 =
            let _endpos_op00_ = _endpos_op000_ in
            let _startpos_op00_ = _startpos_op000_ in
            let e2 = e20 in
            let op00 = op000 in
            let e1 = e10 in
            let op =
              let _endpos_op0_ = _endpos_op00_ in
              let _startpos_op0_ = _startpos_op00_ in
              let op0 = op00 in
              let _1 =
                let op = op0 in
                
# 3117 "parser_raw.mly"
                  ( op )
# 11210 "parser_raw.ml"
                
              in
              let _endpos__1_ = _endpos_op0_ in
              let _startpos__1_ = _startpos_op0_ in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 717 "parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 11221 "parser_raw.ml"
              
            in
            
# 1965 "parser_raw.mly"
      ( mkinfix e1 op e2 )
# 11227 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_e20_ in
          let _startpos__1_ = _startpos_e10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 721 "parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 11238 "parser_raw.ml"
          
        in
        
# 1877 "parser_raw.mly"
      ( _1 )
# 11244 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = e200;
          MenhirLib.EngineTypes.startp = _startpos_e200_;
          MenhirLib.EngineTypes.endp = _endpos_e200_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = op0000;
            MenhirLib.EngineTypes.startp = _startpos_op0000_;
            MenhirLib.EngineTypes.endp = _endpos_op0000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e100;
              MenhirLib.EngineTypes.startp = _startpos_e100_;
              MenhirLib.EngineTypes.endp = _endpos_e100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e200 : (Parsetree.expression) = Obj.magic e200 in
        let op0000 : (
# 543 "parser_raw.mly"
       (string)
# 11276 "parser_raw.ml"
        ) = Obj.magic op0000 in
        let e100 : (Parsetree.expression) = Obj.magic e100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e100_ in
        let _endpos = _endpos_e200_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos_op000_ = _endpos_op0000_ in
          let _startpos_op000_ = _startpos_op0000_ in
          let _endpos_e20_ = _endpos_e200_ in
          let _startpos_e10_ = _startpos_e100_ in
          let e20 = e200 in
          let op000 = op0000 in
          let e10 = e100 in
          let _1 =
            let _endpos_op00_ = _endpos_op000_ in
            let _startpos_op00_ = _startpos_op000_ in
            let e2 = e20 in
            let op00 = op000 in
            let e1 = e10 in
            let op =
              let _endpos_op0_ = _endpos_op00_ in
              let _startpos_op0_ = _startpos_op00_ in
              let op0 = op00 in
              let _1 =
                let op = op0 in
                
# 3118 "parser_raw.mly"
                  ( op )
# 11305 "parser_raw.ml"
                
              in
              let _endpos__1_ = _endpos_op0_ in
              let _startpos__1_ = _startpos_op0_ in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 717 "parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 11316 "parser_raw.ml"
              
            in
            
# 1965 "parser_raw.mly"
      ( mkinfix e1 op e2 )
# 11322 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_e20_ in
          let _startpos__1_ = _startpos_e10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 721 "parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 11333 "parser_raw.ml"
          
        in
        
# 1877 "parser_raw.mly"
      ( _1 )
# 11339 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = e200;
          MenhirLib.EngineTypes.startp = _startpos_e200_;
          MenhirLib.EngineTypes.endp = _endpos_e200_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _10000;
            MenhirLib.EngineTypes.startp = _startpos__10000_;
            MenhirLib.EngineTypes.endp = _endpos__10000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e100;
              MenhirLib.EngineTypes.startp = _startpos_e100_;
              MenhirLib.EngineTypes.endp = _endpos_e100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e200 : (Parsetree.expression) = Obj.magic e200 in
        let _10000 : unit = Obj.magic _10000 in
        let e100 : (Parsetree.expression) = Obj.magic e100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e100_ in
        let _endpos = _endpos_e200_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos_e20_ = _endpos_e200_ in
          let _startpos_e10_ = _startpos_e100_ in
          let _endpos__1000_ = _endpos__10000_ in
          let _startpos__1000_ = _startpos__10000_ in
          let e20 = e200 in
          let _1000 = _10000 in
          let e10 = e100 in
          let _1 =
            let _endpos__100_ = _endpos__1000_ in
            let _startpos__100_ = _startpos__1000_ in
            let e2 = e20 in
            let _100 = _1000 in
            let e1 = e10 in
            let op =
              let _endpos__10_ = _endpos__100_ in
              let _startpos__10_ = _startpos__100_ in
              let _10 = _100 in
              let _1 =
                let _1 = _10 in
                
# 3119 "parser_raw.mly"
         ("+")
# 11396 "parser_raw.ml"
                
              in
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 717 "parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 11407 "parser_raw.ml"
              
            in
            
# 1965 "parser_raw.mly"
      ( mkinfix e1 op e2 )
# 11413 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_e20_ in
          let _startpos__1_ = _startpos_e10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 721 "parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 11424 "parser_raw.ml"
          
        in
        
# 1877 "parser_raw.mly"
      ( _1 )
# 11430 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = e200;
          MenhirLib.EngineTypes.startp = _startpos_e200_;
          MenhirLib.EngineTypes.endp = _endpos_e200_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _10000;
            MenhirLib.EngineTypes.startp = _startpos__10000_;
            MenhirLib.EngineTypes.endp = _endpos__10000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e100;
              MenhirLib.EngineTypes.startp = _startpos_e100_;
              MenhirLib.EngineTypes.endp = _endpos_e100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e200 : (Parsetree.expression) = Obj.magic e200 in
        let _10000 : unit = Obj.magic _10000 in
        let e100 : (Parsetree.expression) = Obj.magic e100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e100_ in
        let _endpos = _endpos_e200_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos_e20_ = _endpos_e200_ in
          let _startpos_e10_ = _startpos_e100_ in
          let _endpos__1000_ = _endpos__10000_ in
          let _startpos__1000_ = _startpos__10000_ in
          let e20 = e200 in
          let _1000 = _10000 in
          let e10 = e100 in
          let _1 =
            let _endpos__100_ = _endpos__1000_ in
            let _startpos__100_ = _startpos__1000_ in
            let e2 = e20 in
            let _100 = _1000 in
            let e1 = e10 in
            let op =
              let _endpos__10_ = _endpos__100_ in
              let _startpos__10_ = _startpos__100_ in
              let _10 = _100 in
              let _1 =
                let _1 = _10 in
                
# 3120 "parser_raw.mly"
            ("+.")
# 11487 "parser_raw.ml"
                
              in
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 717 "parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 11498 "parser_raw.ml"
              
            in
            
# 1965 "parser_raw.mly"
      ( mkinfix e1 op e2 )
# 11504 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_e20_ in
          let _startpos__1_ = _startpos_e10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 721 "parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 11515 "parser_raw.ml"
          
        in
        
# 1877 "parser_raw.mly"
      ( _1 )
# 11521 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = e200;
          MenhirLib.EngineTypes.startp = _startpos_e200_;
          MenhirLib.EngineTypes.endp = _endpos_e200_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _10000;
            MenhirLib.EngineTypes.startp = _startpos__10000_;
            MenhirLib.EngineTypes.endp = _endpos__10000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e100;
              MenhirLib.EngineTypes.startp = _startpos_e100_;
              MenhirLib.EngineTypes.endp = _endpos_e100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e200 : (Parsetree.expression) = Obj.magic e200 in
        let _10000 : unit = Obj.magic _10000 in
        let e100 : (Parsetree.expression) = Obj.magic e100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e100_ in
        let _endpos = _endpos_e200_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos_e20_ = _endpos_e200_ in
          let _startpos_e10_ = _startpos_e100_ in
          let _endpos__1000_ = _endpos__10000_ in
          let _startpos__1000_ = _startpos__10000_ in
          let e20 = e200 in
          let _1000 = _10000 in
          let e10 = e100 in
          let _1 =
            let _endpos__100_ = _endpos__1000_ in
            let _startpos__100_ = _startpos__1000_ in
            let e2 = e20 in
            let _100 = _1000 in
            let e1 = e10 in
            let op =
              let _endpos__10_ = _endpos__100_ in
              let _startpos__10_ = _startpos__100_ in
              let _10 = _100 in
              let _1 =
                let _1 = _10 in
                
# 3121 "parser_raw.mly"
           ("+=")
# 11578 "parser_raw.ml"
                
              in
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 717 "parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 11589 "parser_raw.ml"
              
            in
            
# 1965 "parser_raw.mly"
      ( mkinfix e1 op e2 )
# 11595 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_e20_ in
          let _startpos__1_ = _startpos_e10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 721 "parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 11606 "parser_raw.ml"
          
        in
        
# 1877 "parser_raw.mly"
      ( _1 )
# 11612 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = e200;
          MenhirLib.EngineTypes.startp = _startpos_e200_;
          MenhirLib.EngineTypes.endp = _endpos_e200_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _10000;
            MenhirLib.EngineTypes.startp = _startpos__10000_;
            MenhirLib.EngineTypes.endp = _endpos__10000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e100;
              MenhirLib.EngineTypes.startp = _startpos_e100_;
              MenhirLib.EngineTypes.endp = _endpos_e100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e200 : (Parsetree.expression) = Obj.magic e200 in
        let _10000 : unit = Obj.magic _10000 in
        let e100 : (Parsetree.expression) = Obj.magic e100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e100_ in
        let _endpos = _endpos_e200_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos_e20_ = _endpos_e200_ in
          let _startpos_e10_ = _startpos_e100_ in
          let _endpos__1000_ = _endpos__10000_ in
          let _startpos__1000_ = _startpos__10000_ in
          let e20 = e200 in
          let _1000 = _10000 in
          let e10 = e100 in
          let _1 =
            let _endpos__100_ = _endpos__1000_ in
            let _startpos__100_ = _startpos__1000_ in
            let e2 = e20 in
            let _100 = _1000 in
            let e1 = e10 in
            let op =
              let _endpos__10_ = _endpos__100_ in
              let _startpos__10_ = _startpos__100_ in
              let _10 = _100 in
              let _1 =
                let _1 = _10 in
                
# 3122 "parser_raw.mly"
          ("-")
# 11669 "parser_raw.ml"
                
              in
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 717 "parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 11680 "parser_raw.ml"
              
            in
            
# 1965 "parser_raw.mly"
      ( mkinfix e1 op e2 )
# 11686 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_e20_ in
          let _startpos__1_ = _startpos_e10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 721 "parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 11697 "parser_raw.ml"
          
        in
        
# 1877 "parser_raw.mly"
      ( _1 )
# 11703 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = e200;
          MenhirLib.EngineTypes.startp = _startpos_e200_;
          MenhirLib.EngineTypes.endp = _endpos_e200_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _10000;
            MenhirLib.EngineTypes.startp = _startpos__10000_;
            MenhirLib.EngineTypes.endp = _endpos__10000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e100;
              MenhirLib.EngineTypes.startp = _startpos_e100_;
              MenhirLib.EngineTypes.endp = _endpos_e100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e200 : (Parsetree.expression) = Obj.magic e200 in
        let _10000 : unit = Obj.magic _10000 in
        let e100 : (Parsetree.expression) = Obj.magic e100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e100_ in
        let _endpos = _endpos_e200_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos_e20_ = _endpos_e200_ in
          let _startpos_e10_ = _startpos_e100_ in
          let _endpos__1000_ = _endpos__10000_ in
          let _startpos__1000_ = _startpos__10000_ in
          let e20 = e200 in
          let _1000 = _10000 in
          let e10 = e100 in
          let _1 =
            let _endpos__100_ = _endpos__1000_ in
            let _startpos__100_ = _startpos__1000_ in
            let e2 = e20 in
            let _100 = _1000 in
            let e1 = e10 in
            let op =
              let _endpos__10_ = _endpos__100_ in
              let _startpos__10_ = _startpos__100_ in
              let _10 = _100 in
              let _1 =
                let _1 = _10 in
                
# 3123 "parser_raw.mly"
             ("-.")
# 11760 "parser_raw.ml"
                
              in
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 717 "parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 11771 "parser_raw.ml"
              
            in
            
# 1965 "parser_raw.mly"
      ( mkinfix e1 op e2 )
# 11777 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_e20_ in
          let _startpos__1_ = _startpos_e10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 721 "parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 11788 "parser_raw.ml"
          
        in
        
# 1877 "parser_raw.mly"
      ( _1 )
# 11794 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = e200;
          MenhirLib.EngineTypes.startp = _startpos_e200_;
          MenhirLib.EngineTypes.endp = _endpos_e200_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _10000;
            MenhirLib.EngineTypes.startp = _startpos__10000_;
            MenhirLib.EngineTypes.endp = _endpos__10000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e100;
              MenhirLib.EngineTypes.startp = _startpos_e100_;
              MenhirLib.EngineTypes.endp = _endpos_e100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e200 : (Parsetree.expression) = Obj.magic e200 in
        let _10000 : unit = Obj.magic _10000 in
        let e100 : (Parsetree.expression) = Obj.magic e100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e100_ in
        let _endpos = _endpos_e200_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos_e20_ = _endpos_e200_ in
          let _startpos_e10_ = _startpos_e100_ in
          let _endpos__1000_ = _endpos__10000_ in
          let _startpos__1000_ = _startpos__10000_ in
          let e20 = e200 in
          let _1000 = _10000 in
          let e10 = e100 in
          let _1 =
            let _endpos__100_ = _endpos__1000_ in
            let _startpos__100_ = _startpos__1000_ in
            let e2 = e20 in
            let _100 = _1000 in
            let e1 = e10 in
            let op =
              let _endpos__10_ = _endpos__100_ in
              let _startpos__10_ = _startpos__100_ in
              let _10 = _100 in
              let _1 =
                let _1 = _10 in
                
# 3124 "parser_raw.mly"
         ("*")
# 11851 "parser_raw.ml"
                
              in
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 717 "parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 11862 "parser_raw.ml"
              
            in
            
# 1965 "parser_raw.mly"
      ( mkinfix e1 op e2 )
# 11868 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_e20_ in
          let _startpos__1_ = _startpos_e10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 721 "parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 11879 "parser_raw.ml"
          
        in
        
# 1877 "parser_raw.mly"
      ( _1 )
# 11885 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = e200;
          MenhirLib.EngineTypes.startp = _startpos_e200_;
          MenhirLib.EngineTypes.endp = _endpos_e200_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _10000;
            MenhirLib.EngineTypes.startp = _startpos__10000_;
            MenhirLib.EngineTypes.endp = _endpos__10000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e100;
              MenhirLib.EngineTypes.startp = _startpos_e100_;
              MenhirLib.EngineTypes.endp = _endpos_e100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e200 : (Parsetree.expression) = Obj.magic e200 in
        let _10000 : unit = Obj.magic _10000 in
        let e100 : (Parsetree.expression) = Obj.magic e100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e100_ in
        let _endpos = _endpos_e200_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos_e20_ = _endpos_e200_ in
          let _startpos_e10_ = _startpos_e100_ in
          let _endpos__1000_ = _endpos__10000_ in
          let _startpos__1000_ = _startpos__10000_ in
          let e20 = e200 in
          let _1000 = _10000 in
          let e10 = e100 in
          let _1 =
            let _endpos__100_ = _endpos__1000_ in
            let _startpos__100_ = _startpos__1000_ in
            let e2 = e20 in
            let _100 = _1000 in
            let e1 = e10 in
            let op =
              let _endpos__10_ = _endpos__100_ in
              let _startpos__10_ = _startpos__100_ in
              let _10 = _100 in
              let _1 =
                let _1 = _10 in
                
# 3125 "parser_raw.mly"
            ("%")
# 11942 "parser_raw.ml"
                
              in
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 717 "parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 11953 "parser_raw.ml"
              
            in
            
# 1965 "parser_raw.mly"
      ( mkinfix e1 op e2 )
# 11959 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_e20_ in
          let _startpos__1_ = _startpos_e10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 721 "parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 11970 "parser_raw.ml"
          
        in
        
# 1877 "parser_raw.mly"
      ( _1 )
# 11976 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = e200;
          MenhirLib.EngineTypes.startp = _startpos_e200_;
          MenhirLib.EngineTypes.endp = _endpos_e200_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _10000;
            MenhirLib.EngineTypes.startp = _startpos__10000_;
            MenhirLib.EngineTypes.endp = _endpos__10000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e100;
              MenhirLib.EngineTypes.startp = _startpos_e100_;
              MenhirLib.EngineTypes.endp = _endpos_e100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e200 : (Parsetree.expression) = Obj.magic e200 in
        let _10000 : unit = Obj.magic _10000 in
        let e100 : (Parsetree.expression) = Obj.magic e100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e100_ in
        let _endpos = _endpos_e200_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos_e20_ = _endpos_e200_ in
          let _startpos_e10_ = _startpos_e100_ in
          let _endpos__1000_ = _endpos__10000_ in
          let _startpos__1000_ = _startpos__10000_ in
          let e20 = e200 in
          let _1000 = _10000 in
          let e10 = e100 in
          let _1 =
            let _endpos__100_ = _endpos__1000_ in
            let _startpos__100_ = _startpos__1000_ in
            let e2 = e20 in
            let _100 = _1000 in
            let e1 = e10 in
            let op =
              let _endpos__10_ = _endpos__100_ in
              let _startpos__10_ = _startpos__100_ in
              let _10 = _100 in
              let _1 =
                let _1 = _10 in
                
# 3126 "parser_raw.mly"
          ("=")
# 12033 "parser_raw.ml"
                
              in
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 717 "parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 12044 "parser_raw.ml"
              
            in
            
# 1965 "parser_raw.mly"
      ( mkinfix e1 op e2 )
# 12050 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_e20_ in
          let _startpos__1_ = _startpos_e10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 721 "parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 12061 "parser_raw.ml"
          
        in
        
# 1877 "parser_raw.mly"
      ( _1 )
# 12067 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = e200;
          MenhirLib.EngineTypes.startp = _startpos_e200_;
          MenhirLib.EngineTypes.endp = _endpos_e200_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _10000;
            MenhirLib.EngineTypes.startp = _startpos__10000_;
            MenhirLib.EngineTypes.endp = _endpos__10000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e100;
              MenhirLib.EngineTypes.startp = _startpos_e100_;
              MenhirLib.EngineTypes.endp = _endpos_e100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e200 : (Parsetree.expression) = Obj.magic e200 in
        let _10000 : unit = Obj.magic _10000 in
        let e100 : (Parsetree.expression) = Obj.magic e100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e100_ in
        let _endpos = _endpos_e200_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos_e20_ = _endpos_e200_ in
          let _startpos_e10_ = _startpos_e100_ in
          let _endpos__1000_ = _endpos__10000_ in
          let _startpos__1000_ = _startpos__10000_ in
          let e20 = e200 in
          let _1000 = _10000 in
          let e10 = e100 in
          let _1 =
            let _endpos__100_ = _endpos__1000_ in
            let _startpos__100_ = _startpos__1000_ in
            let e2 = e20 in
            let _100 = _1000 in
            let e1 = e10 in
            let op =
              let _endpos__10_ = _endpos__100_ in
              let _startpos__10_ = _startpos__100_ in
              let _10 = _100 in
              let _1 =
                let _1 = _10 in
                
# 3127 "parser_raw.mly"
         ("<")
# 12124 "parser_raw.ml"
                
              in
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 717 "parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 12135 "parser_raw.ml"
              
            in
            
# 1965 "parser_raw.mly"
      ( mkinfix e1 op e2 )
# 12141 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_e20_ in
          let _startpos__1_ = _startpos_e10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 721 "parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 12152 "parser_raw.ml"
          
        in
        
# 1877 "parser_raw.mly"
      ( _1 )
# 12158 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = e200;
          MenhirLib.EngineTypes.startp = _startpos_e200_;
          MenhirLib.EngineTypes.endp = _endpos_e200_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _10000;
            MenhirLib.EngineTypes.startp = _startpos__10000_;
            MenhirLib.EngineTypes.endp = _endpos__10000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e100;
              MenhirLib.EngineTypes.startp = _startpos_e100_;
              MenhirLib.EngineTypes.endp = _endpos_e100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e200 : (Parsetree.expression) = Obj.magic e200 in
        let _10000 : unit = Obj.magic _10000 in
        let e100 : (Parsetree.expression) = Obj.magic e100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e100_ in
        let _endpos = _endpos_e200_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos_e20_ = _endpos_e200_ in
          let _startpos_e10_ = _startpos_e100_ in
          let _endpos__1000_ = _endpos__10000_ in
          let _startpos__1000_ = _startpos__10000_ in
          let e20 = e200 in
          let _1000 = _10000 in
          let e10 = e100 in
          let _1 =
            let _endpos__100_ = _endpos__1000_ in
            let _startpos__100_ = _startpos__1000_ in
            let e2 = e20 in
            let _100 = _1000 in
            let e1 = e10 in
            let op =
              let _endpos__10_ = _endpos__100_ in
              let _startpos__10_ = _startpos__100_ in
              let _10 = _100 in
              let _1 =
                let _1 = _10 in
                
# 3128 "parser_raw.mly"
            (">")
# 12215 "parser_raw.ml"
                
              in
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 717 "parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 12226 "parser_raw.ml"
              
            in
            
# 1965 "parser_raw.mly"
      ( mkinfix e1 op e2 )
# 12232 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_e20_ in
          let _startpos__1_ = _startpos_e10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 721 "parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 12243 "parser_raw.ml"
          
        in
        
# 1877 "parser_raw.mly"
      ( _1 )
# 12249 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = e200;
          MenhirLib.EngineTypes.startp = _startpos_e200_;
          MenhirLib.EngineTypes.endp = _endpos_e200_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _10000;
            MenhirLib.EngineTypes.startp = _startpos__10000_;
            MenhirLib.EngineTypes.endp = _endpos__10000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e100;
              MenhirLib.EngineTypes.startp = _startpos_e100_;
              MenhirLib.EngineTypes.endp = _endpos_e100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e200 : (Parsetree.expression) = Obj.magic e200 in
        let _10000 : unit = Obj.magic _10000 in
        let e100 : (Parsetree.expression) = Obj.magic e100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e100_ in
        let _endpos = _endpos_e200_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos_e20_ = _endpos_e200_ in
          let _startpos_e10_ = _startpos_e100_ in
          let _endpos__1000_ = _endpos__10000_ in
          let _startpos__1000_ = _startpos__10000_ in
          let e20 = e200 in
          let _1000 = _10000 in
          let e10 = e100 in
          let _1 =
            let _endpos__100_ = _endpos__1000_ in
            let _startpos__100_ = _startpos__1000_ in
            let e2 = e20 in
            let _100 = _1000 in
            let e1 = e10 in
            let op =
              let _endpos__10_ = _endpos__100_ in
              let _startpos__10_ = _startpos__100_ in
              let _10 = _100 in
              let _1 =
                let _1 = _10 in
                
# 3129 "parser_raw.mly"
       ("or")
# 12306 "parser_raw.ml"
                
              in
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 717 "parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 12317 "parser_raw.ml"
              
            in
            
# 1965 "parser_raw.mly"
      ( mkinfix e1 op e2 )
# 12323 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_e20_ in
          let _startpos__1_ = _startpos_e10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 721 "parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 12334 "parser_raw.ml"
          
        in
        
# 1877 "parser_raw.mly"
      ( _1 )
# 12340 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = e200;
          MenhirLib.EngineTypes.startp = _startpos_e200_;
          MenhirLib.EngineTypes.endp = _endpos_e200_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _10000;
            MenhirLib.EngineTypes.startp = _startpos__10000_;
            MenhirLib.EngineTypes.endp = _endpos__10000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e100;
              MenhirLib.EngineTypes.startp = _startpos_e100_;
              MenhirLib.EngineTypes.endp = _endpos_e100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e200 : (Parsetree.expression) = Obj.magic e200 in
        let _10000 : unit = Obj.magic _10000 in
        let e100 : (Parsetree.expression) = Obj.magic e100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e100_ in
        let _endpos = _endpos_e200_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos_e20_ = _endpos_e200_ in
          let _startpos_e10_ = _startpos_e100_ in
          let _endpos__1000_ = _endpos__10000_ in
          let _startpos__1000_ = _startpos__10000_ in
          let e20 = e200 in
          let _1000 = _10000 in
          let e10 = e100 in
          let _1 =
            let _endpos__100_ = _endpos__1000_ in
            let _startpos__100_ = _startpos__1000_ in
            let e2 = e20 in
            let _100 = _1000 in
            let e1 = e10 in
            let op =
              let _endpos__10_ = _endpos__100_ in
              let _startpos__10_ = _startpos__100_ in
              let _10 = _100 in
              let _1 =
                let _1 = _10 in
                
# 3130 "parser_raw.mly"
           ("||")
# 12397 "parser_raw.ml"
                
              in
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 717 "parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 12408 "parser_raw.ml"
              
            in
            
# 1965 "parser_raw.mly"
      ( mkinfix e1 op e2 )
# 12414 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_e20_ in
          let _startpos__1_ = _startpos_e10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 721 "parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 12425 "parser_raw.ml"
          
        in
        
# 1877 "parser_raw.mly"
      ( _1 )
# 12431 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = e200;
          MenhirLib.EngineTypes.startp = _startpos_e200_;
          MenhirLib.EngineTypes.endp = _endpos_e200_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _10000;
            MenhirLib.EngineTypes.startp = _startpos__10000_;
            MenhirLib.EngineTypes.endp = _endpos__10000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e100;
              MenhirLib.EngineTypes.startp = _startpos_e100_;
              MenhirLib.EngineTypes.endp = _endpos_e100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e200 : (Parsetree.expression) = Obj.magic e200 in
        let _10000 : unit = Obj.magic _10000 in
        let e100 : (Parsetree.expression) = Obj.magic e100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e100_ in
        let _endpos = _endpos_e200_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos_e20_ = _endpos_e200_ in
          let _startpos_e10_ = _startpos_e100_ in
          let _endpos__1000_ = _endpos__10000_ in
          let _startpos__1000_ = _startpos__10000_ in
          let e20 = e200 in
          let _1000 = _10000 in
          let e10 = e100 in
          let _1 =
            let _endpos__100_ = _endpos__1000_ in
            let _startpos__100_ = _startpos__1000_ in
            let e2 = e20 in
            let _100 = _1000 in
            let e1 = e10 in
            let op =
              let _endpos__10_ = _endpos__100_ in
              let _startpos__10_ = _startpos__100_ in
              let _10 = _100 in
              let _1 =
                let _1 = _10 in
                
# 3131 "parser_raw.mly"
              ("&")
# 12488 "parser_raw.ml"
                
              in
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 717 "parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 12499 "parser_raw.ml"
              
            in
            
# 1965 "parser_raw.mly"
      ( mkinfix e1 op e2 )
# 12505 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_e20_ in
          let _startpos__1_ = _startpos_e10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 721 "parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 12516 "parser_raw.ml"
          
        in
        
# 1877 "parser_raw.mly"
      ( _1 )
# 12522 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = e200;
          MenhirLib.EngineTypes.startp = _startpos_e200_;
          MenhirLib.EngineTypes.endp = _endpos_e200_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _10000;
            MenhirLib.EngineTypes.startp = _startpos__10000_;
            MenhirLib.EngineTypes.endp = _endpos__10000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e100;
              MenhirLib.EngineTypes.startp = _startpos_e100_;
              MenhirLib.EngineTypes.endp = _endpos_e100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e200 : (Parsetree.expression) = Obj.magic e200 in
        let _10000 : unit = Obj.magic _10000 in
        let e100 : (Parsetree.expression) = Obj.magic e100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e100_ in
        let _endpos = _endpos_e200_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos_e20_ = _endpos_e200_ in
          let _startpos_e10_ = _startpos_e100_ in
          let _endpos__1000_ = _endpos__10000_ in
          let _startpos__1000_ = _startpos__10000_ in
          let e20 = e200 in
          let _1000 = _10000 in
          let e10 = e100 in
          let _1 =
            let _endpos__100_ = _endpos__1000_ in
            let _startpos__100_ = _startpos__1000_ in
            let e2 = e20 in
            let _100 = _1000 in
            let e1 = e10 in
            let op =
              let _endpos__10_ = _endpos__100_ in
              let _startpos__10_ = _startpos__100_ in
              let _10 = _100 in
              let _1 =
                let _1 = _10 in
                
# 3132 "parser_raw.mly"
               ("&&")
# 12579 "parser_raw.ml"
                
              in
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 717 "parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 12590 "parser_raw.ml"
              
            in
            
# 1965 "parser_raw.mly"
      ( mkinfix e1 op e2 )
# 12596 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_e20_ in
          let _startpos__1_ = _startpos_e10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 721 "parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 12607 "parser_raw.ml"
          
        in
        
# 1877 "parser_raw.mly"
      ( _1 )
# 12613 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = e200;
          MenhirLib.EngineTypes.startp = _startpos_e200_;
          MenhirLib.EngineTypes.endp = _endpos_e200_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _10000;
            MenhirLib.EngineTypes.startp = _startpos__10000_;
            MenhirLib.EngineTypes.endp = _endpos__10000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e100;
              MenhirLib.EngineTypes.startp = _startpos_e100_;
              MenhirLib.EngineTypes.endp = _endpos_e100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e200 : (Parsetree.expression) = Obj.magic e200 in
        let _10000 : unit = Obj.magic _10000 in
        let e100 : (Parsetree.expression) = Obj.magic e100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e100_ in
        let _endpos = _endpos_e200_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos_e20_ = _endpos_e200_ in
          let _startpos_e10_ = _startpos_e100_ in
          let _endpos__1000_ = _endpos__10000_ in
          let _startpos__1000_ = _startpos__10000_ in
          let e20 = e200 in
          let _1000 = _10000 in
          let e10 = e100 in
          let _1 =
            let _endpos__100_ = _endpos__1000_ in
            let _startpos__100_ = _startpos__1000_ in
            let e2 = e20 in
            let _100 = _1000 in
            let e1 = e10 in
            let op =
              let _endpos__10_ = _endpos__100_ in
              let _startpos__10_ = _startpos__100_ in
              let _10 = _100 in
              let _1 =
                let _1 = _10 in
                
# 3133 "parser_raw.mly"
               (":=")
# 12670 "parser_raw.ml"
                
              in
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 717 "parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 12681 "parser_raw.ml"
              
            in
            
# 1965 "parser_raw.mly"
      ( mkinfix e1 op e2 )
# 12687 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_e20_ in
          let _startpos__1_ = _startpos_e10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 721 "parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 12698 "parser_raw.ml"
          
        in
        
# 1877 "parser_raw.mly"
      ( _1 )
# 12704 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _200;
          MenhirLib.EngineTypes.startp = _startpos__200_;
          MenhirLib.EngineTypes.endp = _endpos__200_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _100;
            MenhirLib.EngineTypes.startp = _startpos__100_;
            MenhirLib.EngineTypes.endp = _endpos__100_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _200 : (Parsetree.expression) = Obj.magic _200 in
        let _100 : (string) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__200_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__20_ = _endpos__200_ in
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _2 = _20 in
            let _1 = _10 in
            let _loc__1_ = (_startpos__1_, _endpos__1_) in
            
# 1967 "parser_raw.mly"
      ( mkuminus ~oploc:_loc__1_ _1 _2 )
# 12747 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__20_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 721 "parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 12758 "parser_raw.ml"
          
        in
        
# 1877 "parser_raw.mly"
      ( _1 )
# 12764 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _200;
          MenhirLib.EngineTypes.startp = _startpos__200_;
          MenhirLib.EngineTypes.endp = _endpos__200_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _100;
            MenhirLib.EngineTypes.startp = _startpos__100_;
            MenhirLib.EngineTypes.endp = _endpos__100_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _200 : (Parsetree.expression) = Obj.magic _200 in
        let _100 : (string) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__200_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__20_ = _endpos__200_ in
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _2 = _20 in
            let _1 = _10 in
            let _loc__1_ = (_startpos__1_, _endpos__1_) in
            
# 1969 "parser_raw.mly"
      ( mkuplus ~oploc:_loc__1_ _1 _2 )
# 12807 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__20_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 721 "parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 12818 "parser_raw.ml"
          
        in
        
# 1877 "parser_raw.mly"
      ( _1 )
# 12824 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Ast_helper.let_bindings) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__3_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1879 "parser_raw.mly"
      ( expr_of_let_bindings ~loc:_sloc _1 (merloc _endpos__2_ _3) )
# 12864 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = body;
          MenhirLib.EngineTypes.startp = _startpos_body_;
          MenhirLib.EngineTypes.endp = _endpos_body_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = bindings;
              MenhirLib.EngineTypes.startp = _startpos_bindings_;
              MenhirLib.EngineTypes.endp = _endpos_bindings_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _10;
                MenhirLib.EngineTypes.startp = _startpos__10_;
                MenhirLib.EngineTypes.endp = _endpos__10_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let body : (Parsetree.expression) = Obj.magic body in
        let _3 : unit = Obj.magic _3 in
        let bindings : (Parsetree.pattern * Parsetree.expression * Parsetree.binding_op list) = Obj.magic bindings in
        let _10 : (
# 545 "parser_raw.mly"
       (string)
# 12903 "parser_raw.ml"
        ) = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos_body_ in
        let _v : (Parsetree.expression) = let pbop_op =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 12918 "parser_raw.ml"
          
        in
        let _startpos_pbop_op_ = _startpos__10_ in
        let _endpos = _endpos_body_ in
        let _symbolstartpos = _startpos_pbop_op_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1881 "parser_raw.mly"
      ( let (pbop_pat, pbop_exp, rev_ands) = bindings in
        let ands = List.rev rev_ands in
        let pbop_loc = make_loc _sloc in
        let let_ = {pbop_op; pbop_pat; pbop_exp; pbop_loc} in
        mkexp ~loc:_sloc (Pexp_letop{ let_; ands; body}) )
# 12932 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__3_ in
        let _symbolstartpos = _startpos__1_ in
        let _loc__2_ = (_startpos__2_, _endpos__2_) in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1887 "parser_raw.mly"
      ( mkexp_cons ~loc:_sloc _loc__2_ (ghexp ~loc:_sloc (Pexp_tuple[_1;(merloc _endpos__2_ _3)])) )
# 12973 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _100;
              MenhirLib.EngineTypes.startp = _startpos__100_;
              MenhirLib.EngineTypes.endp = _endpos__100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _100 : (
# 564 "parser_raw.mly"
       (string)
# 13006 "parser_raw.ml"
        ) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 3073 "parser_raw.mly"
           ( _1 )
# 13020 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 13031 "parser_raw.ml"
          
        in
        let _startpos__1_ = _startpos__100_ in
        let _endpos = _endpos__3_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1889 "parser_raw.mly"
      ( mkexp ~loc:_sloc (Pexp_setinstvar(_1, _3)) )
# 13041 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _10;
              MenhirLib.EngineTypes.startp = _startpos__10_;
              MenhirLib.EngineTypes.endp = _endpos__10_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _10 : (Longident.t) = Obj.magic _10 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.expression) = let _3 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 13097 "parser_raw.ml"
          
        in
        let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1891 "parser_raw.mly"
      ( mkexp ~loc:_sloc (Pexp_setfield(_1, _3, _5)) )
# 13106 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__7_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1893 "parser_raw.mly"
      ( array_set ~loc:_sloc _1 _4 _7 )
# 13170 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__7_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1895 "parser_raw.mly"
      ( string_set ~loc:_sloc _1 _4 _7 )
# 13234 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__7_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1897 "parser_raw.mly"
      ( bigarray_set ~loc:_sloc _1 _4 _7 )
# 13298 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : (
# 544 "parser_raw.mly"
       (string)
# 13354 "parser_raw.ml"
        ) = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__7_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1899 "parser_raw.mly"
      ( dotop_set ~loc:_sloc (Lident ("." ^ _2 ^ "[]<-")) _1 _4 _7 )
# 13366 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : (
# 544 "parser_raw.mly"
       (string)
# 13422 "parser_raw.ml"
        ) = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__7_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1901 "parser_raw.mly"
      ( dotop_set ~loc:_sloc (Lident ("." ^ _2 ^ "()<-")) _1 _4 _7 )
# 13434 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : (
# 544 "parser_raw.mly"
       (string)
# 13490 "parser_raw.ml"
        ) = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__7_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1903 "parser_raw.mly"
      ( dotop_set ~loc:_sloc (Lident ("." ^ _2 ^ "{}<-")) _1 _4 _7 )
# 13502 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _9;
          MenhirLib.EngineTypes.startp = _startpos__9_;
          MenhirLib.EngineTypes.endp = _endpos__9_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _8;
            MenhirLib.EngineTypes.startp = _startpos__8_;
            MenhirLib.EngineTypes.endp = _endpos__8_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _7;
              MenhirLib.EngineTypes.startp = _startpos__7_;
              MenhirLib.EngineTypes.endp = _endpos__7_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _6;
                MenhirLib.EngineTypes.startp = _startpos__6_;
                MenhirLib.EngineTypes.endp = _endpos__6_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _5;
                  MenhirLib.EngineTypes.startp = _startpos__5_;
                  MenhirLib.EngineTypes.endp = _endpos__5_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _4;
                    MenhirLib.EngineTypes.startp = _startpos__4_;
                    MenhirLib.EngineTypes.endp = _endpos__4_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = _3;
                      MenhirLib.EngineTypes.startp = _startpos__3_;
                      MenhirLib.EngineTypes.endp = _endpos__3_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.semv = _2;
                        MenhirLib.EngineTypes.startp = _startpos__2_;
                        MenhirLib.EngineTypes.endp = _endpos__2_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _9 : (Parsetree.expression) = Obj.magic _9 in
        let _8 : unit = Obj.magic _8 in
        let _7 : unit = Obj.magic _7 in
        let _6 : (Parsetree.expression) = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _4 : (
# 544 "parser_raw.mly"
       (string)
# 13568 "parser_raw.ml"
        ) = Obj.magic _4 in
        let _3 : (Longident.t) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__9_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__9_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1905 "parser_raw.mly"
      ( dotop_set ~loc:_sloc (Ldot(_3,"." ^ _4 ^ "[]<-")) _1 _6 _9 )
# 13582 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _9;
          MenhirLib.EngineTypes.startp = _startpos__9_;
          MenhirLib.EngineTypes.endp = _endpos__9_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _8;
            MenhirLib.EngineTypes.startp = _startpos__8_;
            MenhirLib.EngineTypes.endp = _endpos__8_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _7;
              MenhirLib.EngineTypes.startp = _startpos__7_;
              MenhirLib.EngineTypes.endp = _endpos__7_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _6;
                MenhirLib.EngineTypes.startp = _startpos__6_;
                MenhirLib.EngineTypes.endp = _endpos__6_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _5;
                  MenhirLib.EngineTypes.startp = _startpos__5_;
                  MenhirLib.EngineTypes.endp = _endpos__5_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _4;
                    MenhirLib.EngineTypes.startp = _startpos__4_;
                    MenhirLib.EngineTypes.endp = _endpos__4_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = _3;
                      MenhirLib.EngineTypes.startp = _startpos__3_;
                      MenhirLib.EngineTypes.endp = _endpos__3_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.semv = _2;
                        MenhirLib.EngineTypes.startp = _startpos__2_;
                        MenhirLib.EngineTypes.endp = _endpos__2_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _9 : (Parsetree.expression) = Obj.magic _9 in
        let _8 : unit = Obj.magic _8 in
        let _7 : unit = Obj.magic _7 in
        let _6 : (Parsetree.expression) = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _4 : (
# 544 "parser_raw.mly"
       (string)
# 13648 "parser_raw.ml"
        ) = Obj.magic _4 in
        let _3 : (Longident.t) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__9_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__9_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1907 "parser_raw.mly"
      ( dotop_set ~loc:_sloc (Ldot(_3, "." ^ _4 ^ "()<-")) _1 _6 _9 )
# 13662 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _9;
          MenhirLib.EngineTypes.startp = _startpos__9_;
          MenhirLib.EngineTypes.endp = _endpos__9_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _8;
            MenhirLib.EngineTypes.startp = _startpos__8_;
            MenhirLib.EngineTypes.endp = _endpos__8_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _7;
              MenhirLib.EngineTypes.startp = _startpos__7_;
              MenhirLib.EngineTypes.endp = _endpos__7_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _6;
                MenhirLib.EngineTypes.startp = _startpos__6_;
                MenhirLib.EngineTypes.endp = _endpos__6_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _5;
                  MenhirLib.EngineTypes.startp = _startpos__5_;
                  MenhirLib.EngineTypes.endp = _endpos__5_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _4;
                    MenhirLib.EngineTypes.startp = _startpos__4_;
                    MenhirLib.EngineTypes.endp = _endpos__4_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = _3;
                      MenhirLib.EngineTypes.startp = _startpos__3_;
                      MenhirLib.EngineTypes.endp = _endpos__3_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.semv = _2;
                        MenhirLib.EngineTypes.startp = _startpos__2_;
                        MenhirLib.EngineTypes.endp = _endpos__2_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _9 : (Parsetree.expression) = Obj.magic _9 in
        let _8 : unit = Obj.magic _8 in
        let _7 : unit = Obj.magic _7 in
        let _6 : (Parsetree.expression) = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _4 : (
# 544 "parser_raw.mly"
       (string)
# 13728 "parser_raw.ml"
        ) = Obj.magic _4 in
        let _3 : (Longident.t) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__9_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__9_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1909 "parser_raw.mly"
      ( dotop_set ~loc:_sloc (Ldot(_3, "." ^ _4 ^ "{}<-")) _1 _6 _9 )
# 13742 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.attribute) = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.expression) = 
# 1911 "parser_raw.mly"
      ( Exp.attr _1 _2 )
# 13773 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.expression) = let _loc__1_ = (_startpos__1_, _endpos__1_) in
        
# 1913 "parser_raw.mly"
     ( not_expecting _loc__1_ "wildcard \"_\"" )
# 13799 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (string Location.loc option) = 
# 3375 "parser_raw.mly"
    ( None )
# 13817 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (string Location.loc) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (string Location.loc option) = 
# 3376 "parser_raw.mly"
                    ( Some _2 )
# 13848 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.payload) = Obj.magic _3 in
        let _2 : (string Location.loc) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.extension) = 
# 3386 "parser_raw.mly"
                                           ( (_2, _3) )
# 13891 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _12;
          MenhirLib.EngineTypes.startp = _startpos__12_;
          MenhirLib.EngineTypes.endp = _endpos__12_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _11;
            MenhirLib.EngineTypes.startp = _startpos__11_;
            MenhirLib.EngineTypes.endp = _endpos__11_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _10;
                MenhirLib.EngineTypes.startp = _startpos__10_;
                MenhirLib.EngineTypes.endp = _endpos__10_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _12 : (Parsetree.attributes) = Obj.magic _12 in
        let _11 : (Longident.t) = Obj.magic _11 in
        let _3 : unit = Obj.magic _3 in
        let _10 : (string) = Obj.magic _10 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__12_ in
        let _v : (Parsetree.extension_constructor) = let attrs =
          let _1 = _12 in
          
# 3372 "parser_raw.mly"
    ( _1 )
# 13942 "parser_raw.ml"
          
        in
        let _endpos_attrs_ = _endpos__12_ in
        let lid =
          let _endpos__1_ = _endpos__11_ in
          let _startpos__1_ = _startpos__11_ in
          let _1 = _11 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 13956 "parser_raw.ml"
          
        in
        let cid =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 13969 "parser_raw.ml"
          
        in
        let _endpos = _endpos_attrs_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2803 "parser_raw.mly"
      ( let info = symbol_info _endpos in
        Te.rebind cid lid ~attrs ~loc:(make_loc _sloc) ~info )
# 13979 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _12;
          MenhirLib.EngineTypes.startp = _startpos__12_;
          MenhirLib.EngineTypes.endp = _endpos__12_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _11;
            MenhirLib.EngineTypes.startp = _startpos__11_;
            MenhirLib.EngineTypes.endp = _endpos__11_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _10;
                MenhirLib.EngineTypes.startp = _startpos__10_;
                MenhirLib.EngineTypes.endp = _endpos__10_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _12 : (Parsetree.attributes) = Obj.magic _12 in
        let _11 : (Longident.t) = Obj.magic _11 in
        let _3 : unit = Obj.magic _3 in
        let _10 : (string) = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__12_ in
        let _v : (Parsetree.extension_constructor) = let attrs =
          let _1 = _12 in
          
# 3372 "parser_raw.mly"
    ( _1 )
# 14024 "parser_raw.ml"
          
        in
        let _endpos_attrs_ = _endpos__12_ in
        let lid =
          let _endpos__1_ = _endpos__11_ in
          let _startpos__1_ = _startpos__11_ in
          let _1 = _11 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 14038 "parser_raw.ml"
          
        in
        let cid =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 14051 "parser_raw.ml"
          
        in
        let _startpos_cid_ = _startpos__10_ in
        let _1 =
          
# 3203 "parser_raw.mly"
    ( () )
# 14059 "parser_raw.ml"
          
        in
        let _endpos = _endpos_attrs_ in
        let _symbolstartpos = _startpos_cid_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2803 "parser_raw.mly"
      ( let info = symbol_info _endpos in
        Te.rebind cid lid ~attrs ~loc:(make_loc _sloc) ~info )
# 14069 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.payload) = Obj.magic _3 in
        let _2 : (string Location.loc) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.attribute) = let _endpos = _endpos__4_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3363 "parser_raw.mly"
    ( mark_symbol_docs _sloc;
      Attr.mk ~loc:(make_loc _sloc) _2 _3 )
# 14116 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : ((Parsetree.core_type * Asttypes.variance) list) = let params =
          
# 1671 "parser_raw.mly"
      ( [] )
# 14135 "parser_raw.ml"
          
        in
        
# 1503 "parser_raw.mly"
    ( params )
# 14141 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _30;
          MenhirLib.EngineTypes.startp = _startpos__30_;
          MenhirLib.EngineTypes.endp = _endpos__30_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = xs000;
            MenhirLib.EngineTypes.startp = _startpos_xs000_;
            MenhirLib.EngineTypes.endp = _endpos_xs000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _10;
              MenhirLib.EngineTypes.startp = _startpos__10_;
              MenhirLib.EngineTypes.endp = _endpos__10_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _30 : unit = Obj.magic _30 in
        let xs000 : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic xs000 in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__30_ in
        let _v : ((Parsetree.core_type * Asttypes.variance) list) = let params =
          let _3 = _30 in
          let xs00 = xs000 in
          let _1 = _10 in
          let params =
            let xs0 = xs00 in
            let xs =
              let xs = xs0 in
              
# 253 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( List.rev xs )
# 14186 "parser_raw.ml"
              
            in
            
# 801 "parser_raw.mly"
    ( xs )
# 14192 "parser_raw.ml"
            
          in
          
# 1673 "parser_raw.mly"
      ( params )
# 14198 "parser_raw.ml"
          
        in
        
# 1503 "parser_raw.mly"
    ( params )
# 14204 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.expression) = 
# 2238 "parser_raw.mly"
      ( _1 )
# 14229 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.core_type option * Parsetree.core_type option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__3_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2240 "parser_raw.mly"
      ( mkexp_constraint ~loc:_sloc _3 _1 )
# 14269 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.expression) = 
# 2266 "parser_raw.mly"
      ( (merloc _endpos__1_ _2) )
# 14300 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _400;
          MenhirLib.EngineTypes.startp = _startpos__400_;
          MenhirLib.EngineTypes.endp = _endpos__400_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _300;
            MenhirLib.EngineTypes.startp = _startpos__300_;
            MenhirLib.EngineTypes.endp = _endpos__300_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _200;
              MenhirLib.EngineTypes.startp = _startpos__200_;
              MenhirLib.EngineTypes.endp = _endpos__200_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _100;
                MenhirLib.EngineTypes.startp = _startpos__100_;
                MenhirLib.EngineTypes.endp = _endpos__100_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _400 : (Parsetree.expression) = Obj.magic _400 in
        let _300 : unit = Obj.magic _300 in
        let _200 : (Parsetree.core_type) = Obj.magic _200 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__400_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__40_ = _endpos__400_ in
          let _endpos__30_ = _endpos__300_ in
          let _startpos__10_ = _startpos__100_ in
          let _40 = _400 in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _endpos__3_ = _endpos__30_ in
            let _4 = _40 in
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            
# 2268 "parser_raw.mly"
      ( Pexp_constraint ((merloc _endpos__3_ _4), _2) )
# 14357 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__40_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 721 "parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 14368 "parser_raw.ml"
          
        in
        
# 2269 "parser_raw.mly"
      ( _1 )
# 14374 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__2_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2271 "parser_raw.mly"
      (
       let (l,o,p) = _1 in
       ghexp ~loc:_sloc (Pexp_fun(l, o, p, _2))
      )
# 14411 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = xs0;
              MenhirLib.EngineTypes.startp = _startpos_xs0_;
              MenhirLib.EngineTypes.endp = _endpos_xs0_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let xs0 : (string Location.loc list) = Obj.magic xs0 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.expression) = let _3 =
          let xs = xs0 in
          
# 2147 "parser_raw.mly"
    ( xs )
# 14462 "parser_raw.ml"
          
        in
        let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2276 "parser_raw.mly"
      ( mk_newtypes ~loc:_sloc _3 _5 )
# 14471 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = ty;
          MenhirLib.EngineTypes.startp = _startpos_ty_;
          MenhirLib.EngineTypes.endp = _endpos_ty_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let ty : (Parsetree.core_type) = Obj.magic ty in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ty_ in
        let _endpos = _endpos_ty_ in
        let _v : (Parsetree.core_type) = 
# 2901 "parser_raw.mly"
      ( ty )
# 14496 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = codomain00;
          MenhirLib.EngineTypes.startp = _startpos_codomain00_;
          MenhirLib.EngineTypes.endp = _endpos_codomain00_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _300;
            MenhirLib.EngineTypes.startp = _startpos__300_;
            MenhirLib.EngineTypes.endp = _endpos__300_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _1000;
              MenhirLib.EngineTypes.startp = _startpos__1000_;
              MenhirLib.EngineTypes.endp = _endpos__1000_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = label000;
                MenhirLib.EngineTypes.startp = _startpos_label000_;
                MenhirLib.EngineTypes.endp = _endpos_label000_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let codomain00 : (Parsetree.core_type) = Obj.magic codomain00 in
        let _300 : unit = Obj.magic _300 in
        let _1000 : (Parsetree.core_type) = Obj.magic _1000 in
        let label000 : (string) = Obj.magic label000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label000_ in
        let _endpos = _endpos_codomain00_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _startpos_label00_ = _startpos_label000_ in
          let _endpos_codomain0_ = _endpos_codomain00_ in
          let _endpos__100_ = _endpos__1000_ in
          let codomain0 = codomain00 in
          let _30 = _300 in
          let _100 = _1000 in
          let label00 = label000 in
          let _1 =
            let _endpos__10_ = _endpos__100_ in
            let codomain = codomain0 in
            let _3 = _30 in
            let _10 = _100 in
            let label0 = label00 in
            let domain =
              let _endpos__1_ = _endpos__10_ in
              let _1 = _10 in
              
# 691 "parser_raw.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 14556 "parser_raw.ml"
              
            in
            let label =
              let label = label0 in
              
# 2913 "parser_raw.mly"
      ( Optional label )
# 14564 "parser_raw.ml"
              
            in
            
# 2907 "parser_raw.mly"
        ( Ptyp_arrow(label, domain, codomain) )
# 14570 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_codomain0_ in
          let _startpos__1_ = _startpos_label00_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 725 "parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 14581 "parser_raw.ml"
          
        in
        
# 2909 "parser_raw.mly"
    ( _1 )
# 14587 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = codomain00;
          MenhirLib.EngineTypes.startp = _startpos_codomain00_;
          MenhirLib.EngineTypes.endp = _endpos_codomain00_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _300;
            MenhirLib.EngineTypes.startp = _startpos__300_;
            MenhirLib.EngineTypes.endp = _endpos__300_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _1000;
              MenhirLib.EngineTypes.startp = _startpos__1000_;
              MenhirLib.EngineTypes.endp = _endpos__1000_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2000;
                MenhirLib.EngineTypes.startp = _startpos__2000_;
                MenhirLib.EngineTypes.endp = _endpos__2000_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = label000;
                  MenhirLib.EngineTypes.startp = _startpos_label000_;
                  MenhirLib.EngineTypes.endp = _endpos_label000_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain00 : (Parsetree.core_type) = Obj.magic codomain00 in
        let _300 : unit = Obj.magic _300 in
        let _1000 : (Parsetree.core_type) = Obj.magic _1000 in
        let _2000 : unit = Obj.magic _2000 in
        let label000 : (
# 564 "parser_raw.mly"
       (string)
# 14632 "parser_raw.ml"
        ) = Obj.magic label000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label000_ in
        let _endpos = _endpos_codomain00_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _startpos_label00_ = _startpos_label000_ in
          let _endpos_codomain0_ = _endpos_codomain00_ in
          let _endpos__100_ = _endpos__1000_ in
          let codomain0 = codomain00 in
          let _30 = _300 in
          let _100 = _1000 in
          let _200 = _2000 in
          let label00 = label000 in
          let _1 =
            let _endpos__10_ = _endpos__100_ in
            let codomain = codomain0 in
            let _3 = _30 in
            let _10 = _100 in
            let _20 = _200 in
            let label0 = label00 in
            let domain =
              let _endpos__1_ = _endpos__10_ in
              let _1 = _10 in
              
# 691 "parser_raw.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 14659 "parser_raw.ml"
              
            in
            let label =
              let _2 = _20 in
              let label = label0 in
              
# 2915 "parser_raw.mly"
      ( Labelled label )
# 14668 "parser_raw.ml"
              
            in
            
# 2907 "parser_raw.mly"
        ( Ptyp_arrow(label, domain, codomain) )
# 14674 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_codomain0_ in
          let _startpos__1_ = _startpos_label00_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 725 "parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 14685 "parser_raw.ml"
          
        in
        
# 2909 "parser_raw.mly"
    ( _1 )
# 14691 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = codomain00;
          MenhirLib.EngineTypes.startp = _startpos_codomain00_;
          MenhirLib.EngineTypes.endp = _endpos_codomain00_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _300;
            MenhirLib.EngineTypes.startp = _startpos__300_;
            MenhirLib.EngineTypes.endp = _endpos__300_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1000;
              MenhirLib.EngineTypes.startp = _startpos__1000_;
              MenhirLib.EngineTypes.endp = _endpos__1000_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let codomain00 : (Parsetree.core_type) = Obj.magic codomain00 in
        let _300 : unit = Obj.magic _300 in
        let _1000 : (Parsetree.core_type) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos_codomain00_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _endpos_codomain0_ = _endpos_codomain00_ in
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let codomain0 = codomain00 in
          let _30 = _300 in
          let _100 = _1000 in
          let _1 =
            let _endpos__10_ = _endpos__100_ in
            let codomain = codomain0 in
            let _3 = _30 in
            let _10 = _100 in
            let domain =
              let _endpos__1_ = _endpos__10_ in
              let _1 = _10 in
              
# 691 "parser_raw.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 14743 "parser_raw.ml"
              
            in
            let label =
              
# 2917 "parser_raw.mly"
      ( Nolabel )
# 14750 "parser_raw.ml"
              
            in
            
# 2907 "parser_raw.mly"
        ( Ptyp_arrow(label, domain, codomain) )
# 14756 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_codomain0_ in
          let _startpos__1_ = _startpos__100_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 725 "parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 14767 "parser_raw.ml"
          
        in
        
# 2909 "parser_raw.mly"
    ( _1 )
# 14773 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _200;
          MenhirLib.EngineTypes.startp = _startpos__200_;
          MenhirLib.EngineTypes.endp = _endpos__200_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _100;
            MenhirLib.EngineTypes.startp = _startpos__100_;
            MenhirLib.EngineTypes.endp = _endpos__100_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _200 : unit = Obj.magic _200 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__200_ in
        let _v : (string Location.loc * Parsetree.module_type option) = let x =
          let _endpos__20_ = _endpos__200_ in
          let _startpos__10_ = _startpos__100_ in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _2 = _20 in
            let _1 = _10 in
            
# 977 "parser_raw.mly"
                            ("*")
# 14812 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__20_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 14823 "parser_raw.ml"
          
        in
        
# 978 "parser_raw.mly"
      ( x, None )
# 14829 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = mty;
            MenhirLib.EngineTypes.startp = _startpos_mty_;
            MenhirLib.EngineTypes.endp = _endpos_mty_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _10;
                MenhirLib.EngineTypes.startp = _startpos__10_;
                MenhirLib.EngineTypes.endp = _endpos__10_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let mty : (Parsetree.module_type) = Obj.magic mty in
        let _3 : unit = Obj.magic _3 in
        let _10 : (string) = Obj.magic _10 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (string Location.loc * Parsetree.module_type option) = let x =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 14885 "parser_raw.ml"
          
        in
        
# 981 "parser_raw.mly"
      ( x, Some mty )
# 14891 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (
# 610 "parser_raw.mly"
       (string)
# 14912 "parser_raw.ml"
        ) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (string) = 
# 986 "parser_raw.mly"
      ( x )
# 14920 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 989 "parser_raw.mly"
      ( "_" )
# 14945 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : ((string Location.loc * Parsetree.module_type option) list) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : ((string Location.loc * Parsetree.module_type option) list) = 
# 971 "parser_raw.mly"
    ( _1 )
# 14970 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.constructor_arguments * Parsetree.core_type option) = 
# 2727 "parser_raw.mly"
                                  ( (Pcstr_tuple [],None) )
# 14988 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.constructor_arguments) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.constructor_arguments * Parsetree.core_type option) = 
# 2728 "parser_raw.mly"
                             ( (_2,None) )
# 15019 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (Parsetree.core_type) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.constructor_arguments) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.constructor_arguments * Parsetree.core_type option) = 
# 2730 "parser_raw.mly"
                                  ( (_2,Some _4) )
# 15062 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.core_type) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.constructor_arguments * Parsetree.core_type option) = 
# 2732 "parser_raw.mly"
                                  ( (Pcstr_tuple [],Some _2) )
# 15093 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _11;
          MenhirLib.EngineTypes.startp = _startpos__11_;
          MenhirLib.EngineTypes.endp = _endpos__11_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = args_res;
            MenhirLib.EngineTypes.startp = _startpos_args_res_;
            MenhirLib.EngineTypes.endp = _endpos_args_res_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _10;
              MenhirLib.EngineTypes.startp = _startpos__10_;
              MenhirLib.EngineTypes.endp = _endpos__10_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _11 : (Parsetree.attributes) = Obj.magic _11 in
        let args_res : (Parsetree.constructor_arguments * Parsetree.core_type option) = Obj.magic args_res in
        let _10 : (string) = Obj.magic _10 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__11_ in
        let _v : (Ast_helper.str * Parsetree.constructor_arguments *
  Parsetree.core_type option * Parsetree.attributes * Warnings.loc *
  Docstrings.info) = let attrs =
          let _1 = _11 in
          
# 3372 "parser_raw.mly"
    ( _1 )
# 15140 "parser_raw.ml"
          
        in
        let _endpos_attrs_ = _endpos__11_ in
        let cid =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 15154 "parser_raw.ml"
          
        in
        let _endpos = _endpos_attrs_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2675 "parser_raw.mly"
    (
      let args, res = args_res in
      let info = symbol_info _endpos in
      let loc = make_loc _sloc in
      cid, args, res, attrs, loc, info
    )
# 15168 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _11;
          MenhirLib.EngineTypes.startp = _startpos__11_;
          MenhirLib.EngineTypes.endp = _endpos__11_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = args_res;
            MenhirLib.EngineTypes.startp = _startpos_args_res_;
            MenhirLib.EngineTypes.endp = _endpos_args_res_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _10;
              MenhirLib.EngineTypes.startp = _startpos__10_;
              MenhirLib.EngineTypes.endp = _endpos__10_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _11 : (Parsetree.attributes) = Obj.magic _11 in
        let args_res : (Parsetree.constructor_arguments * Parsetree.core_type option) = Obj.magic args_res in
        let _10 : (string) = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__11_ in
        let _v : (Ast_helper.str * Parsetree.constructor_arguments *
  Parsetree.core_type option * Parsetree.attributes * Warnings.loc *
  Docstrings.info) = let attrs =
          let _1 = _11 in
          
# 3372 "parser_raw.mly"
    ( _1 )
# 15209 "parser_raw.ml"
          
        in
        let _endpos_attrs_ = _endpos__11_ in
        let cid =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 15223 "parser_raw.ml"
          
        in
        let _startpos_cid_ = _startpos__10_ in
        let _1 =
          
# 3203 "parser_raw.mly"
    ( () )
# 15231 "parser_raw.ml"
          
        in
        let _endpos = _endpos_attrs_ in
        let _symbolstartpos = _startpos_cid_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2675 "parser_raw.mly"
    (
      let args, res = args_res in
      let info = symbol_info _endpos in
      let loc = make_loc _sloc in
      cid, args, res, attrs, loc, info
    )
# 15245 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _13;
          MenhirLib.EngineTypes.startp = _startpos__13_;
          MenhirLib.EngineTypes.endp = _endpos__13_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = xs000;
            MenhirLib.EngineTypes.startp = _startpos_xs000_;
            MenhirLib.EngineTypes.endp = _endpos_xs000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _20;
              MenhirLib.EngineTypes.startp = _startpos__20_;
              MenhirLib.EngineTypes.endp = _endpos__20_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _12;
                MenhirLib.EngineTypes.startp = _startpos__12_;
                MenhirLib.EngineTypes.endp = _endpos__12_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _11;
                  MenhirLib.EngineTypes.startp = _startpos__11_;
                  MenhirLib.EngineTypes.endp = _endpos__11_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = params;
                    MenhirLib.EngineTypes.startp = _startpos_params_;
                    MenhirLib.EngineTypes.endp = _endpos_params_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = _10;
                      MenhirLib.EngineTypes.startp = _startpos__10_;
                      MenhirLib.EngineTypes.endp = _endpos__10_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.semv = ext;
                        MenhirLib.EngineTypes.startp = _startpos_ext_;
                        MenhirLib.EngineTypes.endp = _endpos_ext_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _13 : (Parsetree.attributes) = Obj.magic _13 in
        let xs000 : ((Parsetree.core_type * Parsetree.core_type * Warnings.loc) list) = Obj.magic xs000 in
        let _20 : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = Obj.magic _20 in
        let _12 : unit = Obj.magic _12 in
        let _11 : (
# 564 "parser_raw.mly"
       (string)
# 15310 "parser_raw.ml"
        ) = Obj.magic _11 in
        let params : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic params in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__13_ in
        let _v : ((Asttypes.rec_flag * string Location.loc option) *
  Parsetree.type_declaration) = let attrs2 =
          let _1 = _13 in
          
# 3368 "parser_raw.mly"
    ( _1 )
# 15325 "parser_raw.ml"
          
        in
        let _endpos_attrs2_ = _endpos__13_ in
        let cstrs =
          let xs00 = xs000 in
          let _1 =
            let xs0 = xs00 in
            let xs =
              let xs = xs0 in
              
# 253 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( List.rev xs )
# 15338 "parser_raw.ml"
              
            in
            
# 761 "parser_raw.mly"
    ( xs )
# 15344 "parser_raw.ml"
            
          in
          
# 2595 "parser_raw.mly"
    ( _1 )
# 15350 "parser_raw.ml"
          
        in
        let kind_priv_manifest =
          let _2 = _20 in
          let _1 = _12 in
          
# 2629 "parser_raw.mly"
      ( _2 )
# 15359 "parser_raw.ml"
          
        in
        let id =
          let _endpos__1_ = _endpos__11_ in
          let _startpos__1_ = _startpos__11_ in
          let _1 = _11 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 15372 "parser_raw.ml"
          
        in
        let flag =
          
# 3221 "parser_raw.mly"
                ( Recursive )
# 15379 "parser_raw.ml"
          
        in
        let attrs1 =
          let _1 = _10 in
          
# 3372 "parser_raw.mly"
    ( _1 )
# 15387 "parser_raw.ml"
          
        in
        let _endpos = _endpos_attrs2_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2567 "parser_raw.mly"
    (
      let (kind, priv, manifest) = kind_priv_manifest in
      let docs = symbol_docs _sloc in
      let attrs = attrs1 @ attrs2 in
      let loc = make_loc _sloc in
      (flag, ext),
      Type.mk id ~params ~cstrs ~kind ~priv ?manifest ~attrs ~loc ~docs
    )
# 15403 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _14;
          MenhirLib.EngineTypes.startp = _startpos__14_;
          MenhirLib.EngineTypes.endp = _endpos__14_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = xs000;
            MenhirLib.EngineTypes.startp = _startpos_xs000_;
            MenhirLib.EngineTypes.endp = _endpos_xs000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _20;
              MenhirLib.EngineTypes.startp = _startpos__20_;
              MenhirLib.EngineTypes.endp = _endpos__20_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _13;
                MenhirLib.EngineTypes.startp = _startpos__13_;
                MenhirLib.EngineTypes.endp = _endpos__13_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _12;
                  MenhirLib.EngineTypes.startp = _startpos__12_;
                  MenhirLib.EngineTypes.endp = _endpos__12_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = params;
                    MenhirLib.EngineTypes.startp = _startpos_params_;
                    MenhirLib.EngineTypes.endp = _endpos_params_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = _11;
                      MenhirLib.EngineTypes.startp = _startpos__11_;
                      MenhirLib.EngineTypes.endp = _endpos__11_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.semv = _10;
                        MenhirLib.EngineTypes.startp = _startpos__10_;
                        MenhirLib.EngineTypes.endp = _endpos__10_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.semv = ext;
                          MenhirLib.EngineTypes.startp = _startpos_ext_;
                          MenhirLib.EngineTypes.endp = _endpos_ext_;
                          MenhirLib.EngineTypes.next = {
                            MenhirLib.EngineTypes.state = _menhir_s;
                            MenhirLib.EngineTypes.semv = _1;
                            MenhirLib.EngineTypes.startp = _startpos__1_;
                            MenhirLib.EngineTypes.endp = _endpos__1_;
                            MenhirLib.EngineTypes.next = _menhir_stack;
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _14 : (Parsetree.attributes) = Obj.magic _14 in
        let xs000 : ((Parsetree.core_type * Parsetree.core_type * Warnings.loc) list) = Obj.magic xs000 in
        let _20 : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = Obj.magic _20 in
        let _13 : unit = Obj.magic _13 in
        let _12 : (
# 564 "parser_raw.mly"
       (string)
# 15473 "parser_raw.ml"
        ) = Obj.magic _12 in
        let params : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic params in
        let _11 : unit = Obj.magic _11 in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__14_ in
        let _v : ((Asttypes.rec_flag * string Location.loc option) *
  Parsetree.type_declaration) = let attrs2 =
          let _1 = _14 in
          
# 3368 "parser_raw.mly"
    ( _1 )
# 15489 "parser_raw.ml"
          
        in
        let _endpos_attrs2_ = _endpos__14_ in
        let cstrs =
          let xs00 = xs000 in
          let _1 =
            let xs0 = xs00 in
            let xs =
              let xs = xs0 in
              
# 253 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( List.rev xs )
# 15502 "parser_raw.ml"
              
            in
            
# 761 "parser_raw.mly"
    ( xs )
# 15508 "parser_raw.ml"
            
          in
          
# 2595 "parser_raw.mly"
    ( _1 )
# 15514 "parser_raw.ml"
          
        in
        let kind_priv_manifest =
          let _2 = _20 in
          let _1 = _13 in
          
# 2629 "parser_raw.mly"
      ( _2 )
# 15523 "parser_raw.ml"
          
        in
        let id =
          let _endpos__1_ = _endpos__12_ in
          let _startpos__1_ = _startpos__12_ in
          let _1 = _12 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 15536 "parser_raw.ml"
          
        in
        let flag =
          let _endpos__1_ = _endpos__11_ in
          let _startpos__1_ = _startpos__11_ in
          let _1 = _11 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 3222 "parser_raw.mly"
           ( not_expecting _loc "nonrec flag" )
# 15549 "parser_raw.ml"
          
        in
        let attrs1 =
          let _1 = _10 in
          
# 3372 "parser_raw.mly"
    ( _1 )
# 15557 "parser_raw.ml"
          
        in
        let _endpos = _endpos_attrs2_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2567 "parser_raw.mly"
    (
      let (kind, priv, manifest) = kind_priv_manifest in
      let docs = symbol_docs _sloc in
      let attrs = attrs1 @ attrs2 in
      let loc = make_loc _sloc in
      (flag, ext),
      Type.mk id ~params ~cstrs ~kind ~priv ?manifest ~attrs ~loc ~docs
    )
# 15573 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _12;
          MenhirLib.EngineTypes.startp = _startpos__12_;
          MenhirLib.EngineTypes.endp = _endpos__12_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = xs000;
            MenhirLib.EngineTypes.startp = _startpos_xs000_;
            MenhirLib.EngineTypes.endp = _endpos_xs000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = kind_priv_manifest;
              MenhirLib.EngineTypes.startp = _startpos_kind_priv_manifest_;
              MenhirLib.EngineTypes.endp = _endpos_kind_priv_manifest_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _11;
                MenhirLib.EngineTypes.startp = _startpos__11_;
                MenhirLib.EngineTypes.endp = _endpos__11_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = params;
                  MenhirLib.EngineTypes.startp = _startpos_params_;
                  MenhirLib.EngineTypes.endp = _endpos_params_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _10;
                    MenhirLib.EngineTypes.startp = _startpos__10_;
                    MenhirLib.EngineTypes.endp = _endpos__10_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = ext;
                      MenhirLib.EngineTypes.startp = _startpos_ext_;
                      MenhirLib.EngineTypes.endp = _endpos_ext_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _1;
                        MenhirLib.EngineTypes.startp = _startpos__1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _12 : (Parsetree.attributes) = Obj.magic _12 in
        let xs000 : ((Parsetree.core_type * Parsetree.core_type * Warnings.loc) list) = Obj.magic xs000 in
        let kind_priv_manifest : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = Obj.magic kind_priv_manifest in
        let _11 : (
# 564 "parser_raw.mly"
       (string)
# 15632 "parser_raw.ml"
        ) = Obj.magic _11 in
        let params : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic params in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__12_ in
        let _v : ((Asttypes.rec_flag * string Location.loc option) *
  Parsetree.type_declaration) = let attrs2 =
          let _1 = _12 in
          
# 3368 "parser_raw.mly"
    ( _1 )
# 15647 "parser_raw.ml"
          
        in
        let _endpos_attrs2_ = _endpos__12_ in
        let cstrs =
          let xs00 = xs000 in
          let _1 =
            let xs0 = xs00 in
            let xs =
              let xs = xs0 in
              
# 253 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( List.rev xs )
# 15660 "parser_raw.ml"
              
            in
            
# 761 "parser_raw.mly"
    ( xs )
# 15666 "parser_raw.ml"
            
          in
          
# 2595 "parser_raw.mly"
    ( _1 )
# 15672 "parser_raw.ml"
          
        in
        let id =
          let _endpos__1_ = _endpos__11_ in
          let _startpos__1_ = _startpos__11_ in
          let _1 = _11 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 15685 "parser_raw.ml"
          
        in
        let flag =
          
# 3217 "parser_raw.mly"
                                                ( Recursive )
# 15692 "parser_raw.ml"
          
        in
        let attrs1 =
          let _1 = _10 in
          
# 3372 "parser_raw.mly"
    ( _1 )
# 15700 "parser_raw.ml"
          
        in
        let _endpos = _endpos_attrs2_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2567 "parser_raw.mly"
    (
      let (kind, priv, manifest) = kind_priv_manifest in
      let docs = symbol_docs _sloc in
      let attrs = attrs1 @ attrs2 in
      let loc = make_loc _sloc in
      (flag, ext),
      Type.mk id ~params ~cstrs ~kind ~priv ?manifest ~attrs ~loc ~docs
    )
# 15716 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _13;
          MenhirLib.EngineTypes.startp = _startpos__13_;
          MenhirLib.EngineTypes.endp = _endpos__13_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = xs000;
            MenhirLib.EngineTypes.startp = _startpos_xs000_;
            MenhirLib.EngineTypes.endp = _endpos_xs000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = kind_priv_manifest;
              MenhirLib.EngineTypes.startp = _startpos_kind_priv_manifest_;
              MenhirLib.EngineTypes.endp = _endpos_kind_priv_manifest_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _12;
                MenhirLib.EngineTypes.startp = _startpos__12_;
                MenhirLib.EngineTypes.endp = _endpos__12_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = params;
                  MenhirLib.EngineTypes.startp = _startpos_params_;
                  MenhirLib.EngineTypes.endp = _endpos_params_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _11;
                    MenhirLib.EngineTypes.startp = _startpos__11_;
                    MenhirLib.EngineTypes.endp = _endpos__11_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = _10;
                      MenhirLib.EngineTypes.startp = _startpos__10_;
                      MenhirLib.EngineTypes.endp = _endpos__10_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.semv = ext;
                        MenhirLib.EngineTypes.startp = _startpos_ext_;
                        MenhirLib.EngineTypes.endp = _endpos_ext_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _13 : (Parsetree.attributes) = Obj.magic _13 in
        let xs000 : ((Parsetree.core_type * Parsetree.core_type * Warnings.loc) list) = Obj.magic xs000 in
        let kind_priv_manifest : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = Obj.magic kind_priv_manifest in
        let _12 : (
# 564 "parser_raw.mly"
       (string)
# 15780 "parser_raw.ml"
        ) = Obj.magic _12 in
        let params : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic params in
        let _11 : unit = Obj.magic _11 in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__13_ in
        let _v : ((Asttypes.rec_flag * string Location.loc option) *
  Parsetree.type_declaration) = let attrs2 =
          let _1 = _13 in
          
# 3368 "parser_raw.mly"
    ( _1 )
# 15796 "parser_raw.ml"
          
        in
        let _endpos_attrs2_ = _endpos__13_ in
        let cstrs =
          let xs00 = xs000 in
          let _1 =
            let xs0 = xs00 in
            let xs =
              let xs = xs0 in
              
# 253 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( List.rev xs )
# 15809 "parser_raw.ml"
              
            in
            
# 761 "parser_raw.mly"
    ( xs )
# 15815 "parser_raw.ml"
            
          in
          
# 2595 "parser_raw.mly"
    ( _1 )
# 15821 "parser_raw.ml"
          
        in
        let id =
          let _endpos__1_ = _endpos__12_ in
          let _startpos__1_ = _startpos__12_ in
          let _1 = _12 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 15834 "parser_raw.ml"
          
        in
        let flag =
          let _1 = _11 in
          
# 3218 "parser_raw.mly"
           ( Nonrecursive )
# 15842 "parser_raw.ml"
          
        in
        let attrs1 =
          let _1 = _10 in
          
# 3372 "parser_raw.mly"
    ( _1 )
# 15850 "parser_raw.ml"
          
        in
        let _endpos = _endpos_attrs2_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2567 "parser_raw.mly"
    (
      let (kind, priv, manifest) = kind_priv_manifest in
      let docs = symbol_docs _sloc in
      let attrs = attrs1 @ attrs2 in
      let loc = make_loc _sloc in
      (flag, ext),
      Type.mk id ~params ~cstrs ~kind ~priv ?manifest ~attrs ~loc ~docs
    )
# 15866 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 610 "parser_raw.mly"
       (string)
# 15887 "parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3089 "parser_raw.mly"
           ( _1 )
# 15895 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 564 "parser_raw.mly"
       (string)
# 15916 "parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3090 "parser_raw.mly"
           ( _1 )
# 15924 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.structure) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (
# 671 "parser_raw.mly"
      (Parsetree.structure)
# 15955 "parser_raw.ml"
        ) = 
# 900 "parser_raw.mly"
    ( _1 )
# 15959 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.signature) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (
# 673 "parser_raw.mly"
      (Parsetree.signature)
# 15990 "parser_raw.ml"
        ) = 
# 905 "parser_raw.mly"
    ( _1 )
# 15994 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.payload) = Obj.magic _3 in
        let _2 : (string Location.loc) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.extension) = 
# 3389 "parser_raw.mly"
                                                  ( (_2, _3) )
# 16037 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _11;
          MenhirLib.EngineTypes.startp = _startpos__11_;
          MenhirLib.EngineTypes.endp = _endpos__11_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _10;
            MenhirLib.EngineTypes.startp = _startpos__10_;
            MenhirLib.EngineTypes.endp = _endpos__10_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _100;
                MenhirLib.EngineTypes.startp = _startpos__100_;
                MenhirLib.EngineTypes.endp = _endpos__100_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _11 : (Parsetree.attributes) = Obj.magic _11 in
        let _10 : (Parsetree.core_type) = Obj.magic _10 in
        let _3 : unit = Obj.magic _3 in
        let _100 : (
# 564 "parser_raw.mly"
       (string)
# 16081 "parser_raw.ml"
        ) = Obj.magic _100 in
        let _1 : (Asttypes.mutable_flag) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__11_ in
        let _v : (Parsetree.label_declaration) = let _5 =
          let _1 = _11 in
          
# 3372 "parser_raw.mly"
    ( _1 )
# 16092 "parser_raw.ml"
          
        in
        let _endpos__5_ = _endpos__11_ in
        let _4 =
          let _1 = _10 in
          
# 2860 "parser_raw.mly"
    ( _1 )
# 16101 "parser_raw.ml"
          
        in
        let _2 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 3073 "parser_raw.mly"
           ( _1 )
# 16113 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 16124 "parser_raw.ml"
          
        in
        let _startpos__2_ = _startpos__100_ in
        let _endpos = _endpos__5_ in
        let _symbolstartpos = if _startpos__1_ != _endpos__1_ then
          _startpos__1_
        else
          _startpos__2_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2748 "parser_raw.mly"
      ( let info = symbol_info _endpos in
        Type.field _2 _4 ~mut:_1 ~attrs:_5 ~loc:(make_loc _sloc) ~info )
# 16138 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _12;
          MenhirLib.EngineTypes.startp = _startpos__12_;
          MenhirLib.EngineTypes.endp = _endpos__12_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _11;
              MenhirLib.EngineTypes.startp = _startpos__11_;
              MenhirLib.EngineTypes.endp = _endpos__11_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _10;
                MenhirLib.EngineTypes.startp = _startpos__10_;
                MenhirLib.EngineTypes.endp = _endpos__10_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _100;
                    MenhirLib.EngineTypes.startp = _startpos__100_;
                    MenhirLib.EngineTypes.endp = _endpos__100_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _12 : (Parsetree.attributes) = Obj.magic _12 in
        let _6 : unit = Obj.magic _6 in
        let _11 : (Parsetree.attributes) = Obj.magic _11 in
        let _10 : (Parsetree.core_type) = Obj.magic _10 in
        let _3 : unit = Obj.magic _3 in
        let _100 : (
# 564 "parser_raw.mly"
       (string)
# 16194 "parser_raw.ml"
        ) = Obj.magic _100 in
        let _1 : (Asttypes.mutable_flag) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__12_ in
        let _v : (Parsetree.label_declaration) = let _7 =
          let _1 = _12 in
          
# 3372 "parser_raw.mly"
    ( _1 )
# 16205 "parser_raw.ml"
          
        in
        let _endpos__7_ = _endpos__12_ in
        let _5 =
          let _1 = _11 in
          
# 3372 "parser_raw.mly"
    ( _1 )
# 16214 "parser_raw.ml"
          
        in
        let _endpos__5_ = _endpos__11_ in
        let _4 =
          let _1 = _10 in
          
# 2860 "parser_raw.mly"
    ( _1 )
# 16223 "parser_raw.ml"
          
        in
        let _2 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 3073 "parser_raw.mly"
           ( _1 )
# 16235 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 16246 "parser_raw.ml"
          
        in
        let _startpos__2_ = _startpos__100_ in
        let _endpos = _endpos__7_ in
        let _symbolstartpos = if _startpos__1_ != _endpos__1_ then
          _startpos__1_
        else
          _startpos__2_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2753 "parser_raw.mly"
      ( let info =
          match rhs_info _endpos__5_ with
          | Some _ as info_before_semi -> info_before_semi
          | None -> symbol_info _endpos
       in
       Type.field _2 _4 ~mut:_1 ~attrs:(_5 @ _7) ~loc:(make_loc _sloc) ~info )
# 16264 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.label_declaration) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.label_declaration list) = 
# 2742 "parser_raw.mly"
                      ( [_1] )
# 16289 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.label_declaration) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.label_declaration list) = 
# 2743 "parser_raw.mly"
                           ( [_1] )
# 16314 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.label_declaration list) = Obj.magic _2 in
        let _1 : (Parsetree.label_declaration) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.label_declaration list) = 
# 2744 "parser_raw.mly"
                                              ( _1 :: _2 )
# 16345 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _100 : (
# 564 "parser_raw.mly"
       (string)
# 16366 "parser_raw.ml"
        ) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__100_ in
        let _v : (string * Parsetree.pattern) = let x =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _1 = _10 in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 16385 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1861 "parser_raw.mly"
      ( (_1.Location.txt, mkpat ~loc:_sloc (Ppat_var _1)) )
# 16396 "parser_raw.ml"
          
        in
        
# 1853 "parser_raw.mly"
      ( x )
# 16402 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = cty;
          MenhirLib.EngineTypes.startp = _startpos_cty_;
          MenhirLib.EngineTypes.endp = _endpos_cty_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _100;
              MenhirLib.EngineTypes.startp = _startpos__100_;
              MenhirLib.EngineTypes.endp = _endpos__100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let cty : (Parsetree.core_type) = Obj.magic cty in
        let _2 : unit = Obj.magic _2 in
        let _100 : (
# 564 "parser_raw.mly"
       (string)
# 16435 "parser_raw.ml"
        ) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos_cty_ in
        let _v : (string * Parsetree.pattern) = let x =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _1 = _10 in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 16454 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1861 "parser_raw.mly"
      ( (_1.Location.txt, mkpat ~loc:_sloc (Ppat_var _1)) )
# 16465 "parser_raw.ml"
          
        in
        let _startpos_x_ = _startpos__100_ in
        let _endpos = _endpos_cty_ in
        let _symbolstartpos = _startpos_x_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1855 "parser_raw.mly"
      ( let lab, pat = x in
        lab,
        mkpat ~loc:_sloc (Ppat_constraint (pat, cty)) )
# 16477 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 564 "parser_raw.mly"
       (string)
# 16498 "parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 3157 "parser_raw.mly"
           ( Lident _1 )
# 16506 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (
# 564 "parser_raw.mly"
       (string)
# 16537 "parser_raw.ml"
        ) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Longident.t) = 
# 3158 "parser_raw.mly"
                             ( Ldot(_1, _3) )
# 16547 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.arg_label * Parsetree.expression) = 
# 2133 "parser_raw.mly"
      ( (Nolabel, _1) )
# 16572 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : (
# 551 "parser_raw.mly"
       (string)
# 16599 "parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.arg_label * Parsetree.expression) = 
# 2135 "parser_raw.mly"
      ( (Labelled _1, _2) )
# 16607 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = label;
          MenhirLib.EngineTypes.startp = _startpos_label_;
          MenhirLib.EngineTypes.endp = _endpos_label_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let label : (
# 564 "parser_raw.mly"
       (string)
# 16633 "parser_raw.ml"
        ) = Obj.magic label in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_label_ in
        let _v : (Asttypes.arg_label * Parsetree.expression) = let _loc_label_ = (_startpos_label_, _endpos_label_) in
        
# 2137 "parser_raw.mly"
      ( let loc = _loc_label_ in
        (Labelled label, mkexpvar ~loc label) )
# 16644 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = label;
          MenhirLib.EngineTypes.startp = _startpos_label_;
          MenhirLib.EngineTypes.endp = _endpos_label_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let label : (
# 564 "parser_raw.mly"
       (string)
# 16670 "parser_raw.ml"
        ) = Obj.magic label in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_label_ in
        let _v : (Asttypes.arg_label * Parsetree.expression) = let _loc_label_ = (_startpos_label_, _endpos_label_) in
        
# 2140 "parser_raw.mly"
      ( let loc = _loc_label_ in
        (Optional label, mkexpvar ~loc label) )
# 16681 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : (
# 581 "parser_raw.mly"
       (string)
# 16708 "parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.arg_label * Parsetree.expression) = 
# 2143 "parser_raw.mly"
      ( (Optional _1, _2) )
# 16716 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _10;
            MenhirLib.EngineTypes.startp = _startpos__10_;
            MenhirLib.EngineTypes.endp = _endpos__10_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _10 : (Parsetree.expression option) = Obj.magic _10 in
        let _3 : (string * Parsetree.pattern) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = let _4 =
          let _1 = _10 in
          
# 1849 "parser_raw.mly"
    ( _1 )
# 16767 "parser_raw.ml"
          
        in
        
# 1825 "parser_raw.mly"
      ( (Optional (fst _3), _4, snd _3) )
# 16773 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _100 : (
# 564 "parser_raw.mly"
       (string)
# 16799 "parser_raw.ml"
        ) = Obj.magic _100 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__100_ in
        let _v : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = let _2 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _1 = _10 in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 16819 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1861 "parser_raw.mly"
      ( (_1.Location.txt, mkpat ~loc:_sloc (Ppat_var _1)) )
# 16830 "parser_raw.ml"
          
        in
        
# 1827 "parser_raw.mly"
      ( (Optional (fst _2), None, snd _2) )
# 16836 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _10;
            MenhirLib.EngineTypes.startp = _startpos__10_;
            MenhirLib.EngineTypes.endp = _endpos__10_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _10 : (Parsetree.expression option) = Obj.magic _10 in
        let _3 : (Parsetree.pattern) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (
# 581 "parser_raw.mly"
       (string)
# 16881 "parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = let _4 =
          let _1 = _10 in
          
# 1849 "parser_raw.mly"
    ( _1 )
# 16891 "parser_raw.ml"
          
        in
        
# 1829 "parser_raw.mly"
      ( (Optional _1, _4, _3) )
# 16897 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.pattern) = Obj.magic _2 in
        let _1 : (
# 581 "parser_raw.mly"
       (string)
# 16924 "parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = 
# 1831 "parser_raw.mly"
      ( (Optional _1, None, _2) )
# 16932 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : (string * Parsetree.pattern) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = 
# 1833 "parser_raw.mly"
      ( (Labelled (fst _3), None, snd _3) )
# 16975 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _100 : (
# 564 "parser_raw.mly"
       (string)
# 17001 "parser_raw.ml"
        ) = Obj.magic _100 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__100_ in
        let _v : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = let _2 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _1 = _10 in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 17021 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1861 "parser_raw.mly"
      ( (_1.Location.txt, mkpat ~loc:_sloc (Ppat_var _1)) )
# 17032 "parser_raw.ml"
          
        in
        
# 1835 "parser_raw.mly"
      ( (Labelled (fst _2), None, snd _2) )
# 17038 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.pattern) = Obj.magic _2 in
        let _1 : (
# 551 "parser_raw.mly"
       (string)
# 17065 "parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = 
# 1837 "parser_raw.mly"
      ( (Labelled _1, None, _2) )
# 17073 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = 
# 1839 "parser_raw.mly"
      ( (Nolabel, None, _1) )
# 17098 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _10;
            MenhirLib.EngineTypes.startp = _startpos__10_;
            MenhirLib.EngineTypes.endp = _endpos__10_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _10 : (string) = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.pattern * Parsetree.expression) = let _1 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2150 "parser_raw.mly"
              ( mkpatvar ~loc:_sloc _1 )
# 17136 "parser_raw.ml"
          
        in
        
# 2154 "parser_raw.mly"
      ( (_1, _2) )
# 17142 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _10;
                MenhirLib.EngineTypes.startp = _startpos__10_;
                MenhirLib.EngineTypes.endp = _endpos__10_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.core_type option * Parsetree.core_type option) = Obj.magic _2 in
        let _10 : (string) = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.pattern * Parsetree.expression) = let _1 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2150 "parser_raw.mly"
              ( mkpatvar ~loc:_sloc _1 )
# 17192 "parser_raw.ml"
          
        in
        let _startpos__1_ = _startpos__10_ in
        let _endpos = _endpos__4_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2156 "parser_raw.mly"
      ( let v = _1 in (* PR#7344 *)
        let t =
          match _2 with
            Some t, None -> t
          | _, Some t -> t
          | _ -> assert false
        in
        let loc = Location.(t.ptyp_loc.loc_start, t.ptyp_loc.loc_end) in
        let typ = ghtyp ~loc (Ptyp_poly([],t)) in
        let patloc = (_startpos__1_, _endpos__2_) in
        (ghpat ~loc:patloc (Ppat_constraint(v, typ)),
         mkexp_constraint ~loc:_sloc _4 _2) )
# 17213 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = xs000;
                  MenhirLib.EngineTypes.startp = _startpos_xs000_;
                  MenhirLib.EngineTypes.endp = _endpos_xs000_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _10;
                      MenhirLib.EngineTypes.startp = _startpos__10_;
                      MenhirLib.EngineTypes.endp = _endpos__10_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _5 : (Parsetree.core_type) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let xs000 : (string Location.loc list) = Obj.magic xs000 in
        let _2 : unit = Obj.magic _2 in
        let _10 : (string) = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.pattern * Parsetree.expression) = let _3 =
          let xs00 = xs000 in
          let _1 =
            let xs0 = xs00 in
            let xs =
              let xs = xs0 in
              
# 253 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( List.rev xs )
# 17280 "parser_raw.ml"
              
            in
            
# 775 "parser_raw.mly"
    ( xs )
# 17286 "parser_raw.ml"
            
          in
          
# 2842 "parser_raw.mly"
    ( _1 )
# 17292 "parser_raw.ml"
          
        in
        let _startpos__3_ = _startpos_xs000_ in
        let _1 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2150 "parser_raw.mly"
              ( mkpatvar ~loc:_sloc _1 )
# 17306 "parser_raw.ml"
          
        in
        let _startpos__1_ = _startpos__10_ in
        
# 2172 "parser_raw.mly"
      ( let typloc = (_startpos__3_, _endpos__5_) in
        let patloc = (_startpos__1_, _endpos__5_) in
        (ghpat ~loc:patloc
           (Ppat_constraint(_1, ghtyp ~loc:typloc (Ptyp_poly(_3,_5)))),
         _7) )
# 17317 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _8;
          MenhirLib.EngineTypes.startp = _startpos__8_;
          MenhirLib.EngineTypes.endp = _endpos__8_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _7;
            MenhirLib.EngineTypes.startp = _startpos__7_;
            MenhirLib.EngineTypes.endp = _endpos__7_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _6;
              MenhirLib.EngineTypes.startp = _startpos__6_;
              MenhirLib.EngineTypes.endp = _endpos__6_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _5;
                MenhirLib.EngineTypes.startp = _startpos__5_;
                MenhirLib.EngineTypes.endp = _endpos__5_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = xs0;
                  MenhirLib.EngineTypes.startp = _startpos_xs0_;
                  MenhirLib.EngineTypes.endp = _endpos_xs0_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _3;
                    MenhirLib.EngineTypes.startp = _startpos__3_;
                    MenhirLib.EngineTypes.endp = _endpos__3_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _10;
                        MenhirLib.EngineTypes.startp = _startpos__10_;
                        MenhirLib.EngineTypes.endp = _endpos__10_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _8 : (Parsetree.expression) = Obj.magic _8 in
        let _7 : unit = Obj.magic _7 in
        let _6 : (Parsetree.core_type) = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let xs0 : (string Location.loc list) = Obj.magic xs0 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _10 : (string) = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__8_ in
        let _v : (Parsetree.pattern * Parsetree.expression) = let _4 =
          let xs = xs0 in
          
# 2147 "parser_raw.mly"
    ( xs )
# 17386 "parser_raw.ml"
          
        in
        let _1 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2150 "parser_raw.mly"
              ( mkpatvar ~loc:_sloc _1 )
# 17399 "parser_raw.ml"
          
        in
        let _startpos__1_ = _startpos__10_ in
        let _endpos = _endpos__8_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2178 "parser_raw.mly"
      ( let exp, poly =
          wrap_type_annotation ~loc:_sloc _4 _6 _8 in
        let loc = (_startpos__1_, _endpos__6_) in
        (ghpat ~loc (Ppat_constraint(_1, poly)), exp) )
# 17412 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.pattern * Parsetree.expression) = 
# 2183 "parser_raw.mly"
      ( (_1, _3) )
# 17449 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.core_type) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.pattern * Parsetree.expression) = 
# 2185 "parser_raw.mly"
      ( let loc = (_startpos__1_, _endpos__3_) in
        (ghpat ~loc (Ppat_constraint(_1, _3)), _5) )
# 17499 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _110;
          MenhirLib.EngineTypes.startp = _startpos__110_;
          MenhirLib.EngineTypes.endp = _endpos__110_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = body0;
            MenhirLib.EngineTypes.startp = _startpos_body0_;
            MenhirLib.EngineTypes.endp = _endpos_body0_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = rec_flag0;
              MenhirLib.EngineTypes.startp = _startpos_rec_flag0_;
              MenhirLib.EngineTypes.endp = _endpos_rec_flag0_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _100;
                MenhirLib.EngineTypes.startp = _startpos__100_;
                MenhirLib.EngineTypes.endp = _endpos__100_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = ext0;
                  MenhirLib.EngineTypes.startp = _startpos_ext0_;
                  MenhirLib.EngineTypes.endp = _endpos_ext0_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _12;
                    MenhirLib.EngineTypes.startp = _startpos__12_;
                    MenhirLib.EngineTypes.endp = _endpos__12_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _110 : (Parsetree.attributes) = Obj.magic _110 in
        let body0 : (Parsetree.pattern * Parsetree.expression) = Obj.magic body0 in
        let rec_flag0 : (Asttypes.rec_flag) = Obj.magic rec_flag0 in
        let _100 : (Parsetree.attributes) = Obj.magic _100 in
        let ext0 : (string Location.loc option) = Obj.magic ext0 in
        let _12 : unit = Obj.magic _12 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__12_ in
        let _endpos = _endpos__110_ in
        let _v : (Ast_helper.let_bindings) = let _1 =
          let _endpos__11_ = _endpos__110_ in
          let _startpos__1_ = _startpos__12_ in
          let _11 = _110 in
          let body = body0 in
          let rec_flag = rec_flag0 in
          let _10 = _100 in
          let ext = ext0 in
          let _1 = _12 in
          let attrs2 =
            let _1 = _11 in
            
# 3368 "parser_raw.mly"
    ( _1 )
# 17565 "parser_raw.ml"
            
          in
          let _endpos_attrs2_ = _endpos__11_ in
          let attrs1 =
            let _1 = _10 in
            
# 3372 "parser_raw.mly"
    ( _1 )
# 17574 "parser_raw.ml"
            
          in
          let _endpos = _endpos_attrs2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2201 "parser_raw.mly"
    (
      let attrs = attrs1 @ attrs2 in
      mklbs ~loc:_sloc ext rec_flag (mklb ~loc:_sloc true body attrs)
    )
# 17586 "parser_raw.ml"
          
        in
        
# 2191 "parser_raw.mly"
                     ( _1 )
# 17592 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Ast_helper.let_binding) = Obj.magic _2 in
        let _1 : (Ast_helper.let_bindings) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Ast_helper.let_bindings) = 
# 2192 "parser_raw.mly"
                                      ( addlb _1 _2 )
# 17623 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _110;
          MenhirLib.EngineTypes.startp = _startpos__110_;
          MenhirLib.EngineTypes.endp = _endpos__110_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = body0;
            MenhirLib.EngineTypes.startp = _startpos_body0_;
            MenhirLib.EngineTypes.endp = _endpos_body0_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = rec_flag0;
              MenhirLib.EngineTypes.startp = _startpos_rec_flag0_;
              MenhirLib.EngineTypes.endp = _endpos_rec_flag0_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _100;
                MenhirLib.EngineTypes.startp = _startpos__100_;
                MenhirLib.EngineTypes.endp = _endpos__100_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _12;
                  MenhirLib.EngineTypes.startp = _startpos__12_;
                  MenhirLib.EngineTypes.endp = _endpos__12_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _110 : (Parsetree.attributes) = Obj.magic _110 in
        let body0 : (Parsetree.pattern * Parsetree.expression) = Obj.magic body0 in
        let rec_flag0 : (Asttypes.rec_flag) = Obj.magic rec_flag0 in
        let _100 : (Parsetree.attributes) = Obj.magic _100 in
        let _12 : unit = Obj.magic _12 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__12_ in
        let _endpos = _endpos__110_ in
        let _v : (Ast_helper.let_bindings) = let _1 =
          let _endpos__11_ = _endpos__110_ in
          let _startpos__1_ = _startpos__12_ in
          let _11 = _110 in
          let body = body0 in
          let rec_flag = rec_flag0 in
          let _10 = _100 in
          let _1 = _12 in
          let attrs2 =
            let _1 = _11 in
            
# 3368 "parser_raw.mly"
    ( _1 )
# 17682 "parser_raw.ml"
            
          in
          let _endpos_attrs2_ = _endpos__11_ in
          let attrs1 =
            let _1 = _10 in
            
# 3372 "parser_raw.mly"
    ( _1 )
# 17691 "parser_raw.ml"
            
          in
          let ext =
            
# 3379 "parser_raw.mly"
    ( None )
# 17698 "parser_raw.ml"
            
          in
          let _endpos = _endpos_attrs2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2201 "parser_raw.mly"
    (
      let attrs = attrs1 @ attrs2 in
      mklbs ~loc:_sloc ext rec_flag (mklb ~loc:_sloc true body attrs)
    )
# 17710 "parser_raw.ml"
          
        in
        
# 2191 "parser_raw.mly"
                     ( _1 )
# 17716 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _120;
          MenhirLib.EngineTypes.startp = _startpos__120_;
          MenhirLib.EngineTypes.endp = _endpos__120_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = body0;
            MenhirLib.EngineTypes.startp = _startpos_body0_;
            MenhirLib.EngineTypes.endp = _endpos_body0_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = rec_flag0;
              MenhirLib.EngineTypes.startp = _startpos_rec_flag0_;
              MenhirLib.EngineTypes.endp = _endpos_rec_flag0_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _110;
                MenhirLib.EngineTypes.startp = _startpos__110_;
                MenhirLib.EngineTypes.endp = _endpos__110_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _200;
                  MenhirLib.EngineTypes.startp = _startpos__200_;
                  MenhirLib.EngineTypes.endp = _endpos__200_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _100;
                    MenhirLib.EngineTypes.startp = _startpos__100_;
                    MenhirLib.EngineTypes.endp = _endpos__100_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _13;
                      MenhirLib.EngineTypes.startp = _startpos__13_;
                      MenhirLib.EngineTypes.endp = _endpos__13_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _120 : (Parsetree.attributes) = Obj.magic _120 in
        let body0 : (Parsetree.pattern * Parsetree.expression) = Obj.magic body0 in
        let rec_flag0 : (Asttypes.rec_flag) = Obj.magic rec_flag0 in
        let _110 : (Parsetree.attributes) = Obj.magic _110 in
        let _200 : (string Location.loc) = Obj.magic _200 in
        let _100 : unit = Obj.magic _100 in
        let _13 : unit = Obj.magic _13 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__13_ in
        let _endpos = _endpos__120_ in
        let _v : (Ast_helper.let_bindings) = let _1 =
          let _endpos__20_ = _endpos__200_ in
          let _endpos__12_ = _endpos__120_ in
          let _startpos__10_ = _startpos__100_ in
          let _startpos__1_ = _startpos__13_ in
          let _12 = _120 in
          let body = body0 in
          let rec_flag = rec_flag0 in
          let _11 = _110 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 = _13 in
          let attrs2 =
            let _1 = _12 in
            
# 3368 "parser_raw.mly"
    ( _1 )
# 17791 "parser_raw.ml"
            
          in
          let _endpos_attrs2_ = _endpos__12_ in
          let attrs1 =
            let _1 = _11 in
            
# 3372 "parser_raw.mly"
    ( _1 )
# 17800 "parser_raw.ml"
            
          in
          let ext =
            let _endpos__2_ = _endpos__20_ in
            let _startpos__1_ = _startpos__10_ in
            let _2 = _20 in
            let _1 = _10 in
            let _endpos = _endpos__2_ in
            let _startpos = _startpos__1_ in
            let _loc = (_startpos, _endpos) in
            
# 3380 "parser_raw.mly"
                    ( not_expecting _loc "extension" )
# 17814 "parser_raw.ml"
            
          in
          let _endpos = _endpos_attrs2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2201 "parser_raw.mly"
    (
      let attrs = attrs1 @ attrs2 in
      mklbs ~loc:_sloc ext rec_flag (mklb ~loc:_sloc true body attrs)
    )
# 17826 "parser_raw.ml"
          
        in
        
# 2191 "parser_raw.mly"
                     ( _1 )
# 17832 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Ast_helper.let_binding) = Obj.magic _2 in
        let _1 : (Ast_helper.let_bindings) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Ast_helper.let_bindings) = 
# 2192 "parser_raw.mly"
                                      ( addlb _1 _2 )
# 17863 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.pattern) = 
# 1865 "parser_raw.mly"
      ( _1 )
# 17888 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _300;
          MenhirLib.EngineTypes.startp = _startpos__300_;
          MenhirLib.EngineTypes.endp = _endpos__300_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _200;
            MenhirLib.EngineTypes.startp = _startpos__200_;
            MenhirLib.EngineTypes.endp = _endpos__200_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _100;
              MenhirLib.EngineTypes.startp = _startpos__100_;
              MenhirLib.EngineTypes.endp = _endpos__100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _300 : (Parsetree.core_type) = Obj.magic _300 in
        let _200 : unit = Obj.magic _200 in
        let _100 : (Parsetree.pattern) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__300_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__30_ = _endpos__300_ in
          let _startpos__10_ = _startpos__100_ in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            
# 1867 "parser_raw.mly"
      ( Ppat_constraint(_1, _3) )
# 17935 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__30_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 723 "parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 17946 "parser_raw.ml"
          
        in
        
# 1868 "parser_raw.mly"
      ( _1 )
# 17952 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = exp;
          MenhirLib.EngineTypes.startp = _startpos_exp_;
          MenhirLib.EngineTypes.endp = _endpos_exp_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _10;
            MenhirLib.EngineTypes.startp = _startpos__10_;
            MenhirLib.EngineTypes.endp = _endpos__10_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let exp : (Parsetree.expression) = Obj.magic exp in
        let _10 : (string) = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos_exp_ in
        let _v : (Parsetree.pattern * Parsetree.expression) = let pat =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2150 "parser_raw.mly"
              ( mkpatvar ~loc:_sloc _1 )
# 17990 "parser_raw.ml"
          
        in
        
# 2218 "parser_raw.mly"
      ( (pat, exp) )
# 17996 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = exp;
          MenhirLib.EngineTypes.startp = _startpos_exp_;
          MenhirLib.EngineTypes.endp = _endpos_exp_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = typ;
              MenhirLib.EngineTypes.startp = _startpos_typ_;
              MenhirLib.EngineTypes.endp = _endpos_typ_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = pat;
                  MenhirLib.EngineTypes.startp = _startpos_pat_;
                  MenhirLib.EngineTypes.endp = _endpos_pat_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let exp : (Parsetree.expression) = Obj.magic exp in
        let _4 : unit = Obj.magic _4 in
        let typ : (Parsetree.core_type) = Obj.magic typ in
        let _2 : unit = Obj.magic _2 in
        let pat : (Parsetree.pattern) = Obj.magic pat in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_pat_ in
        let _endpos = _endpos_exp_ in
        let _v : (Parsetree.pattern * Parsetree.expression) = 
# 2220 "parser_raw.mly"
      ( let loc = (_startpos_pat_, _endpos_typ_) in
        (ghpat ~loc (Ppat_constraint(pat, typ)), exp) )
# 18046 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = exp;
          MenhirLib.EngineTypes.startp = _startpos_exp_;
          MenhirLib.EngineTypes.endp = _endpos_exp_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = pat;
              MenhirLib.EngineTypes.startp = _startpos_pat_;
              MenhirLib.EngineTypes.endp = _endpos_pat_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let exp : (Parsetree.expression) = Obj.magic exp in
        let _2 : unit = Obj.magic _2 in
        let pat : (Parsetree.pattern) = Obj.magic pat in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_pat_ in
        let _endpos = _endpos_exp_ in
        let _v : (Parsetree.pattern * Parsetree.expression) = 
# 2223 "parser_raw.mly"
      ( (pat, exp) )
# 18083 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = body;
          MenhirLib.EngineTypes.startp = _startpos_body_;
          MenhirLib.EngineTypes.endp = _endpos_body_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let body : (Parsetree.pattern * Parsetree.expression) = Obj.magic body in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_body_ in
        let _endpos = _endpos_body_ in
        let _v : (Parsetree.pattern * Parsetree.expression * Parsetree.binding_op list) = 
# 2227 "parser_raw.mly"
      ( let let_pat, let_exp = body in
        let_pat, let_exp, [] )
# 18109 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = body;
          MenhirLib.EngineTypes.startp = _startpos_body_;
          MenhirLib.EngineTypes.endp = _endpos_body_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _10;
            MenhirLib.EngineTypes.startp = _startpos__10_;
            MenhirLib.EngineTypes.endp = _endpos__10_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = bindings;
              MenhirLib.EngineTypes.startp = _startpos_bindings_;
              MenhirLib.EngineTypes.endp = _endpos_bindings_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let body : (Parsetree.pattern * Parsetree.expression) = Obj.magic body in
        let _10 : (
# 546 "parser_raw.mly"
       (string)
# 18141 "parser_raw.ml"
        ) = Obj.magic _10 in
        let bindings : (Parsetree.pattern * Parsetree.expression * Parsetree.binding_op list) = Obj.magic bindings in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_bindings_ in
        let _endpos = _endpos_body_ in
        let _v : (Parsetree.pattern * Parsetree.expression * Parsetree.binding_op list) = let pbop_op =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 18157 "parser_raw.ml"
          
        in
        let _endpos = _endpos_body_ in
        let _symbolstartpos = _startpos_bindings_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2230 "parser_raw.mly"
      ( let let_pat, let_exp, rev_ands = bindings in
        let pbop_pat, pbop_exp = body in
        let pbop_loc = make_loc _sloc in
        let and_ = {pbop_op; pbop_pat; pbop_exp; pbop_loc} in
        let_pat, let_exp, and_ :: rev_ands )
# 18170 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.class_declaration list) = 
# 211 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( [] )
# 18188 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _120;
            MenhirLib.EngineTypes.startp = _startpos__120_;
            MenhirLib.EngineTypes.endp = _endpos__120_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = body0;
              MenhirLib.EngineTypes.startp = _startpos_body0_;
              MenhirLib.EngineTypes.endp = _endpos_body0_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _110;
                MenhirLib.EngineTypes.startp = _startpos__110_;
                MenhirLib.EngineTypes.endp = _endpos__110_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = params0;
                  MenhirLib.EngineTypes.startp = _startpos_params0_;
                  MenhirLib.EngineTypes.endp = _endpos_params0_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = virt0;
                    MenhirLib.EngineTypes.startp = _startpos_virt0_;
                    MenhirLib.EngineTypes.endp = _endpos_virt0_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = _100;
                      MenhirLib.EngineTypes.startp = _startpos__100_;
                      MenhirLib.EngineTypes.endp = _endpos__100_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _13;
                        MenhirLib.EngineTypes.startp = _startpos__13_;
                        MenhirLib.EngineTypes.endp = _endpos__13_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let xs : (Parsetree.class_declaration list) = Obj.magic xs in
        let _120 : (Parsetree.attributes) = Obj.magic _120 in
        let body0 : (Parsetree.class_expr) = Obj.magic body0 in
        let _110 : (
# 564 "parser_raw.mly"
       (string)
# 18247 "parser_raw.ml"
        ) = Obj.magic _110 in
        let params0 : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic params0 in
        let virt0 : (Asttypes.virtual_flag) = Obj.magic virt0 in
        let _100 : (Parsetree.attributes) = Obj.magic _100 in
        let _13 : unit = Obj.magic _13 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__13_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.class_declaration list) = let x =
          let _endpos__12_ = _endpos__120_ in
          let _endpos__11_ = _endpos__110_ in
          let _startpos__11_ = _startpos__110_ in
          let _startpos__1_ = _startpos__13_ in
          let _12 = _120 in
          let body = body0 in
          let _11 = _110 in
          let params = params0 in
          let virt = virt0 in
          let _10 = _100 in
          let _1 = _13 in
          let attrs2 =
            let _1 = _12 in
            
# 3368 "parser_raw.mly"
    ( _1 )
# 18273 "parser_raw.ml"
            
          in
          let _endpos_attrs2_ = _endpos__12_ in
          let id =
            let _endpos__1_ = _endpos__11_ in
            let _startpos__1_ = _startpos__11_ in
            let _1 = _11 in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 18287 "parser_raw.ml"
            
          in
          let attrs1 =
            let _1 = _10 in
            
# 3372 "parser_raw.mly"
    ( _1 )
# 18295 "parser_raw.ml"
            
          in
          let _endpos = _endpos_attrs2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1483 "parser_raw.mly"
  (
    let attrs = attrs1 @ attrs2 in
    let loc = make_loc _sloc in
    let docs = symbol_docs _sloc in
    let text = symbol_text _symbolstartpos in
    Ci.mk id body ~virt ~params ~attrs ~loc ~text ~docs
  )
# 18310 "parser_raw.ml"
          
        in
        
# 213 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( x :: xs )
# 18316 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.class_description list) = 
# 211 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( [] )
# 18334 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _120;
            MenhirLib.EngineTypes.startp = _startpos__120_;
            MenhirLib.EngineTypes.endp = _endpos__120_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = cty0;
              MenhirLib.EngineTypes.startp = _startpos_cty0_;
              MenhirLib.EngineTypes.endp = _endpos_cty0_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _60;
                MenhirLib.EngineTypes.startp = _startpos__60_;
                MenhirLib.EngineTypes.endp = _endpos__60_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _110;
                  MenhirLib.EngineTypes.startp = _startpos__110_;
                  MenhirLib.EngineTypes.endp = _endpos__110_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = params0;
                    MenhirLib.EngineTypes.startp = _startpos_params0_;
                    MenhirLib.EngineTypes.endp = _endpos_params0_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = virt0;
                      MenhirLib.EngineTypes.startp = _startpos_virt0_;
                      MenhirLib.EngineTypes.endp = _endpos_virt0_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.semv = _100;
                        MenhirLib.EngineTypes.startp = _startpos__100_;
                        MenhirLib.EngineTypes.endp = _endpos__100_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _13;
                          MenhirLib.EngineTypes.startp = _startpos__13_;
                          MenhirLib.EngineTypes.endp = _endpos__13_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let xs : (Parsetree.class_description list) = Obj.magic xs in
        let _120 : (Parsetree.attributes) = Obj.magic _120 in
        let cty0 : (Parsetree.class_type) = Obj.magic cty0 in
        let _60 : unit = Obj.magic _60 in
        let _110 : (
# 564 "parser_raw.mly"
       (string)
# 18399 "parser_raw.ml"
        ) = Obj.magic _110 in
        let params0 : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic params0 in
        let virt0 : (Asttypes.virtual_flag) = Obj.magic virt0 in
        let _100 : (Parsetree.attributes) = Obj.magic _100 in
        let _13 : unit = Obj.magic _13 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__13_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.class_description list) = let x =
          let _endpos__12_ = _endpos__120_ in
          let _endpos__11_ = _endpos__110_ in
          let _startpos__11_ = _startpos__110_ in
          let _startpos__1_ = _startpos__13_ in
          let _12 = _120 in
          let cty = cty0 in
          let _6 = _60 in
          let _11 = _110 in
          let params = params0 in
          let virt = virt0 in
          let _10 = _100 in
          let _1 = _13 in
          let attrs2 =
            let _1 = _12 in
            
# 3368 "parser_raw.mly"
    ( _1 )
# 18426 "parser_raw.ml"
            
          in
          let _endpos_attrs2_ = _endpos__12_ in
          let id =
            let _endpos__1_ = _endpos__11_ in
            let _startpos__1_ = _startpos__11_ in
            let _1 = _11 in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 18440 "parser_raw.ml"
            
          in
          let attrs1 =
            let _1 = _10 in
            
# 3372 "parser_raw.mly"
    ( _1 )
# 18448 "parser_raw.ml"
            
          in
          let _endpos = _endpos_attrs2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1765 "parser_raw.mly"
    (
      let attrs = attrs1 @ attrs2 in
      let loc = make_loc _sloc in
      let docs = symbol_docs _sloc in
      let text = symbol_text _symbolstartpos in
      Ci.mk id cty ~virt ~params ~attrs ~loc ~text ~docs
    )
# 18463 "parser_raw.ml"
          
        in
        
# 213 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( x :: xs )
# 18469 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.class_type_declaration list) = 
# 211 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( [] )
# 18487 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _120;
            MenhirLib.EngineTypes.startp = _startpos__120_;
            MenhirLib.EngineTypes.endp = _endpos__120_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = csig0;
              MenhirLib.EngineTypes.startp = _startpos_csig0_;
              MenhirLib.EngineTypes.endp = _endpos_csig0_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _60;
                MenhirLib.EngineTypes.startp = _startpos__60_;
                MenhirLib.EngineTypes.endp = _endpos__60_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _110;
                  MenhirLib.EngineTypes.startp = _startpos__110_;
                  MenhirLib.EngineTypes.endp = _endpos__110_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = params0;
                    MenhirLib.EngineTypes.startp = _startpos_params0_;
                    MenhirLib.EngineTypes.endp = _endpos_params0_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = virt0;
                      MenhirLib.EngineTypes.startp = _startpos_virt0_;
                      MenhirLib.EngineTypes.endp = _endpos_virt0_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.semv = _100;
                        MenhirLib.EngineTypes.startp = _startpos__100_;
                        MenhirLib.EngineTypes.endp = _endpos__100_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _13;
                          MenhirLib.EngineTypes.startp = _startpos__13_;
                          MenhirLib.EngineTypes.endp = _endpos__13_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let xs : (Parsetree.class_type_declaration list) = Obj.magic xs in
        let _120 : (Parsetree.attributes) = Obj.magic _120 in
        let csig0 : (Parsetree.class_type) = Obj.magic csig0 in
        let _60 : unit = Obj.magic _60 in
        let _110 : (
# 564 "parser_raw.mly"
       (string)
# 18552 "parser_raw.ml"
        ) = Obj.magic _110 in
        let params0 : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic params0 in
        let virt0 : (Asttypes.virtual_flag) = Obj.magic virt0 in
        let _100 : (Parsetree.attributes) = Obj.magic _100 in
        let _13 : unit = Obj.magic _13 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__13_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.class_type_declaration list) = let x =
          let _endpos__12_ = _endpos__120_ in
          let _endpos__11_ = _endpos__110_ in
          let _startpos__11_ = _startpos__110_ in
          let _startpos__1_ = _startpos__13_ in
          let _12 = _120 in
          let csig = csig0 in
          let _6 = _60 in
          let _11 = _110 in
          let params = params0 in
          let virt = virt0 in
          let _10 = _100 in
          let _1 = _13 in
          let attrs2 =
            let _1 = _12 in
            
# 3368 "parser_raw.mly"
    ( _1 )
# 18579 "parser_raw.ml"
            
          in
          let _endpos_attrs2_ = _endpos__12_ in
          let id =
            let _endpos__1_ = _endpos__11_ in
            let _startpos__1_ = _startpos__11_ in
            let _1 = _11 in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 18593 "parser_raw.ml"
            
          in
          let attrs1 =
            let _1 = _10 in
            
# 3372 "parser_raw.mly"
    ( _1 )
# 18601 "parser_raw.ml"
            
          in
          let _endpos = _endpos_attrs2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1804 "parser_raw.mly"
    (
      let attrs = attrs1 @ attrs2 in
      let loc = make_loc _sloc in
      let docs = symbol_docs _sloc in
      let text = symbol_text _symbolstartpos in
      Ci.mk id csig ~virt ~params ~attrs ~loc ~text ~docs
    )
# 18616 "parser_raw.ml"
          
        in
        
# 213 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( x :: xs )
# 18622 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.module_binding list) = 
# 211 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( [] )
# 18640 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _120;
            MenhirLib.EngineTypes.startp = _startpos__120_;
            MenhirLib.EngineTypes.endp = _endpos__120_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = body0;
              MenhirLib.EngineTypes.startp = _startpos_body0_;
              MenhirLib.EngineTypes.endp = _endpos_body0_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _110;
                MenhirLib.EngineTypes.startp = _startpos__110_;
                MenhirLib.EngineTypes.endp = _endpos__110_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _100;
                  MenhirLib.EngineTypes.startp = _startpos__100_;
                  MenhirLib.EngineTypes.endp = _endpos__100_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _13;
                    MenhirLib.EngineTypes.startp = _startpos__13_;
                    MenhirLib.EngineTypes.endp = _endpos__13_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let xs : (Parsetree.module_binding list) = Obj.magic xs in
        let _120 : (Parsetree.attributes) = Obj.magic _120 in
        let body0 : (Parsetree.module_expr) = Obj.magic body0 in
        let _110 : (
# 610 "parser_raw.mly"
       (string)
# 18689 "parser_raw.ml"
        ) = Obj.magic _110 in
        let _100 : (Parsetree.attributes) = Obj.magic _100 in
        let _13 : unit = Obj.magic _13 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__13_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.module_binding list) = let x =
          let _endpos__12_ = _endpos__120_ in
          let _endpos__11_ = _endpos__110_ in
          let _startpos__11_ = _startpos__110_ in
          let _startpos__1_ = _startpos__13_ in
          let _12 = _120 in
          let body = body0 in
          let _11 = _110 in
          let _10 = _100 in
          let _1 = _13 in
          let attrs2 =
            let _1 = _12 in
            
# 3368 "parser_raw.mly"
    ( _1 )
# 18711 "parser_raw.ml"
            
          in
          let _endpos_attrs2_ = _endpos__12_ in
          let uid =
            let _endpos__1_ = _endpos__11_ in
            let _startpos__1_ = _startpos__11_ in
            let _1 = _11 in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 18725 "parser_raw.ml"
            
          in
          let attrs1 =
            let _1 = _10 in
            
# 3372 "parser_raw.mly"
    ( _1 )
# 18733 "parser_raw.ml"
            
          in
          let _endpos = _endpos_attrs2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1188 "parser_raw.mly"
  (
    let loc = make_loc _sloc in
    let attrs = attrs1 @ attrs2 in
    let docs = symbol_docs _sloc in
    let text = symbol_text _symbolstartpos in
    Mb.mk uid body ~attrs ~loc ~text ~docs
  )
# 18748 "parser_raw.ml"
          
        in
        
# 213 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( x :: xs )
# 18754 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.module_declaration list) = 
# 211 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( [] )
# 18772 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _120;
            MenhirLib.EngineTypes.startp = _startpos__120_;
            MenhirLib.EngineTypes.endp = _endpos__120_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = mty0;
              MenhirLib.EngineTypes.startp = _startpos_mty0_;
              MenhirLib.EngineTypes.endp = _endpos_mty0_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _40;
                MenhirLib.EngineTypes.startp = _startpos__40_;
                MenhirLib.EngineTypes.endp = _endpos__40_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _110;
                  MenhirLib.EngineTypes.startp = _startpos__110_;
                  MenhirLib.EngineTypes.endp = _endpos__110_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _100;
                    MenhirLib.EngineTypes.startp = _startpos__100_;
                    MenhirLib.EngineTypes.endp = _endpos__100_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _13;
                      MenhirLib.EngineTypes.startp = _startpos__13_;
                      MenhirLib.EngineTypes.endp = _endpos__13_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let xs : (Parsetree.module_declaration list) = Obj.magic xs in
        let _120 : (Parsetree.attributes) = Obj.magic _120 in
        let mty0 : (Parsetree.module_type) = Obj.magic mty0 in
        let _40 : unit = Obj.magic _40 in
        let _110 : (
# 610 "parser_raw.mly"
       (string)
# 18827 "parser_raw.ml"
        ) = Obj.magic _110 in
        let _100 : (Parsetree.attributes) = Obj.magic _100 in
        let _13 : unit = Obj.magic _13 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__13_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.module_declaration list) = let x =
          let _endpos__12_ = _endpos__120_ in
          let _endpos__11_ = _endpos__110_ in
          let _startpos__11_ = _startpos__110_ in
          let _startpos__1_ = _startpos__13_ in
          let _12 = _120 in
          let mty = mty0 in
          let _4 = _40 in
          let _11 = _110 in
          let _10 = _100 in
          let _1 = _13 in
          let attrs2 =
            let _1 = _12 in
            
# 3368 "parser_raw.mly"
    ( _1 )
# 18850 "parser_raw.ml"
            
          in
          let _endpos_attrs2_ = _endpos__12_ in
          let uid =
            let _endpos__1_ = _endpos__11_ in
            let _startpos__1_ = _startpos__11_ in
            let _1 = _11 in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 18864 "parser_raw.ml"
            
          in
          let attrs1 =
            let _1 = _10 in
            
# 3372 "parser_raw.mly"
    ( _1 )
# 18872 "parser_raw.ml"
            
          in
          let _endpos = _endpos_attrs2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1444 "parser_raw.mly"
  (
    let attrs = attrs1 @ attrs2 in
    let docs = symbol_docs _sloc in
    let loc = make_loc _sloc in
    let text = symbol_text _symbolstartpos in
    Md.mk uid mty ~attrs ~loc ~text ~docs
  )
# 18887 "parser_raw.ml"
          
        in
        
# 213 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( x :: xs )
# 18893 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.attributes) = 
# 211 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( [] )
# 18911 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Parsetree.attributes) = Obj.magic xs in
        let x : (Parsetree.attribute) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.attributes) = 
# 213 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( x :: xs )
# 18942 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.type_declaration list) = 
# 211 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( [] )
# 18960 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _120;
            MenhirLib.EngineTypes.startp = _startpos__120_;
            MenhirLib.EngineTypes.endp = _endpos__120_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = xs0000;
              MenhirLib.EngineTypes.startp = _startpos_xs0000_;
              MenhirLib.EngineTypes.endp = _endpos_xs0000_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = kind_priv_manifest0;
                MenhirLib.EngineTypes.startp = _startpos_kind_priv_manifest0_;
                MenhirLib.EngineTypes.endp = _endpos_kind_priv_manifest0_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _110;
                  MenhirLib.EngineTypes.startp = _startpos__110_;
                  MenhirLib.EngineTypes.endp = _endpos__110_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = params0;
                    MenhirLib.EngineTypes.startp = _startpos_params0_;
                    MenhirLib.EngineTypes.endp = _endpos_params0_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = _100;
                      MenhirLib.EngineTypes.startp = _startpos__100_;
                      MenhirLib.EngineTypes.endp = _endpos__100_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _13;
                        MenhirLib.EngineTypes.startp = _startpos__13_;
                        MenhirLib.EngineTypes.endp = _endpos__13_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let xs : (Parsetree.type_declaration list) = Obj.magic xs in
        let _120 : (Parsetree.attributes) = Obj.magic _120 in
        let xs0000 : ((Parsetree.core_type * Parsetree.core_type * Warnings.loc) list) = Obj.magic xs0000 in
        let kind_priv_manifest0 : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = Obj.magic kind_priv_manifest0 in
        let _110 : (
# 564 "parser_raw.mly"
       (string)
# 19020 "parser_raw.ml"
        ) = Obj.magic _110 in
        let params0 : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic params0 in
        let _100 : (Parsetree.attributes) = Obj.magic _100 in
        let _13 : unit = Obj.magic _13 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__13_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.type_declaration list) = let x =
          let _endpos__12_ = _endpos__120_ in
          let _endpos__11_ = _endpos__110_ in
          let _startpos__11_ = _startpos__110_ in
          let _startpos__1_ = _startpos__13_ in
          let _12 = _120 in
          let xs000 = xs0000 in
          let kind_priv_manifest = kind_priv_manifest0 in
          let _11 = _110 in
          let params = params0 in
          let _10 = _100 in
          let _1 = _13 in
          let attrs2 =
            let _1 = _12 in
            
# 3368 "parser_raw.mly"
    ( _1 )
# 19045 "parser_raw.ml"
            
          in
          let _endpos_attrs2_ = _endpos__12_ in
          let cstrs =
            let xs00 = xs000 in
            let _1 =
              let xs0 = xs00 in
              let xs =
                let xs = xs0 in
                
# 253 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( List.rev xs )
# 19058 "parser_raw.ml"
                
              in
              
# 761 "parser_raw.mly"
    ( xs )
# 19064 "parser_raw.ml"
              
            in
            
# 2595 "parser_raw.mly"
    ( _1 )
# 19070 "parser_raw.ml"
            
          in
          let id =
            let _endpos__1_ = _endpos__11_ in
            let _startpos__1_ = _startpos__11_ in
            let _1 = _11 in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 19083 "parser_raw.ml"
            
          in
          let attrs1 =
            let _1 = _10 in
            
# 3372 "parser_raw.mly"
    ( _1 )
# 19091 "parser_raw.ml"
            
          in
          let _endpos = _endpos_attrs2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2584 "parser_raw.mly"
    (
      let (kind, priv, manifest) = kind_priv_manifest in
      let docs = symbol_docs _sloc in
      let attrs = attrs1 @ attrs2 in
      let loc = make_loc _sloc in
      let text = symbol_text _symbolstartpos in
      Type.mk id ~params ~cstrs ~kind ~priv ?manifest ~attrs ~loc ~docs ~text
    )
# 19107 "parser_raw.ml"
          
        in
        
# 213 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( x :: xs )
# 19113 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.type_declaration list) = 
# 211 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( [] )
# 19131 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _130;
            MenhirLib.EngineTypes.startp = _startpos__130_;
            MenhirLib.EngineTypes.endp = _endpos__130_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = xs0000;
              MenhirLib.EngineTypes.startp = _startpos_xs0000_;
              MenhirLib.EngineTypes.endp = _endpos_xs0000_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _200;
                MenhirLib.EngineTypes.startp = _startpos__200_;
                MenhirLib.EngineTypes.endp = _endpos__200_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _120;
                  MenhirLib.EngineTypes.startp = _startpos__120_;
                  MenhirLib.EngineTypes.endp = _endpos__120_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _110;
                    MenhirLib.EngineTypes.startp = _startpos__110_;
                    MenhirLib.EngineTypes.endp = _endpos__110_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = params0;
                      MenhirLib.EngineTypes.startp = _startpos_params0_;
                      MenhirLib.EngineTypes.endp = _endpos_params0_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.semv = _100;
                        MenhirLib.EngineTypes.startp = _startpos__100_;
                        MenhirLib.EngineTypes.endp = _endpos__100_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _14;
                          MenhirLib.EngineTypes.startp = _startpos__14_;
                          MenhirLib.EngineTypes.endp = _endpos__14_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let xs : (Parsetree.type_declaration list) = Obj.magic xs in
        let _130 : (Parsetree.attributes) = Obj.magic _130 in
        let xs0000 : ((Parsetree.core_type * Parsetree.core_type * Warnings.loc) list) = Obj.magic xs0000 in
        let _200 : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = Obj.magic _200 in
        let _120 : unit = Obj.magic _120 in
        let _110 : (
# 564 "parser_raw.mly"
       (string)
# 19197 "parser_raw.ml"
        ) = Obj.magic _110 in
        let params0 : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic params0 in
        let _100 : (Parsetree.attributes) = Obj.magic _100 in
        let _14 : unit = Obj.magic _14 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__14_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.type_declaration list) = let x =
          let _endpos__13_ = _endpos__130_ in
          let _endpos__11_ = _endpos__110_ in
          let _startpos__11_ = _startpos__110_ in
          let _startpos__1_ = _startpos__14_ in
          let _13 = _130 in
          let xs000 = xs0000 in
          let _20 = _200 in
          let _12 = _120 in
          let _11 = _110 in
          let params = params0 in
          let _10 = _100 in
          let _1 = _14 in
          let attrs2 =
            let _1 = _13 in
            
# 3368 "parser_raw.mly"
    ( _1 )
# 19223 "parser_raw.ml"
            
          in
          let _endpos_attrs2_ = _endpos__13_ in
          let cstrs =
            let xs00 = xs000 in
            let _1 =
              let xs0 = xs00 in
              let xs =
                let xs = xs0 in
                
# 253 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( List.rev xs )
# 19236 "parser_raw.ml"
                
              in
              
# 761 "parser_raw.mly"
    ( xs )
# 19242 "parser_raw.ml"
              
            in
            
# 2595 "parser_raw.mly"
    ( _1 )
# 19248 "parser_raw.ml"
            
          in
          let kind_priv_manifest =
            let _2 = _20 in
            let _1 = _12 in
            
# 2629 "parser_raw.mly"
      ( _2 )
# 19257 "parser_raw.ml"
            
          in
          let id =
            let _endpos__1_ = _endpos__11_ in
            let _startpos__1_ = _startpos__11_ in
            let _1 = _11 in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 19270 "parser_raw.ml"
            
          in
          let attrs1 =
            let _1 = _10 in
            
# 3372 "parser_raw.mly"
    ( _1 )
# 19278 "parser_raw.ml"
            
          in
          let _endpos = _endpos_attrs2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2584 "parser_raw.mly"
    (
      let (kind, priv, manifest) = kind_priv_manifest in
      let docs = symbol_docs _sloc in
      let attrs = attrs1 @ attrs2 in
      let loc = make_loc _sloc in
      let text = symbol_text _symbolstartpos in
      Type.mk id ~params ~cstrs ~kind ~priv ?manifest ~attrs ~loc ~docs ~text
    )
# 19294 "parser_raw.ml"
          
        in
        
# 213 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( x :: xs )
# 19300 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.attributes) = 
# 211 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( [] )
# 19318 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Parsetree.attributes) = Obj.magic xs in
        let x : (Parsetree.attribute) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.attributes) = 
# 213 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( x :: xs )
# 19349 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.signature_item list list) = 
# 211 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( [] )
# 19367 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _100;
            MenhirLib.EngineTypes.startp = _startpos__100_;
            MenhirLib.EngineTypes.endp = _endpos__100_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Parsetree.signature_item list list) = Obj.magic xs in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.signature_item list list) = let x =
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _startpos__1_ = _startpos__10_ in
            let _1 = _10 in
            let _startpos = _startpos__1_ in
            
# 702 "parser_raw.mly"
  ( text_sig _startpos )
# 19405 "parser_raw.ml"
            
          in
          
# 1310 "parser_raw.mly"
      ( _1 )
# 19411 "parser_raw.ml"
          
        in
        
# 213 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( x :: xs )
# 19417 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _100;
            MenhirLib.EngineTypes.startp = _startpos__100_;
            MenhirLib.EngineTypes.endp = _endpos__100_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Parsetree.signature_item list list) = Obj.magic xs in
        let _100 : (Parsetree.signature_item) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.signature_item list list) = let x =
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _startpos__1_ = _startpos__10_ in
            let _1 = _10 in
            let _startpos = _startpos__1_ in
            
# 700 "parser_raw.mly"
  ( text_sig _startpos @ [_1] )
# 19455 "parser_raw.ml"
            
          in
          
# 1310 "parser_raw.mly"
      ( _1 )
# 19461 "parser_raw.ml"
          
        in
        
# 213 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( x :: xs )
# 19467 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.structure_item list list) = 
# 211 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( [] )
# 19485 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1000;
            MenhirLib.EngineTypes.startp = _startpos__1000_;
            MenhirLib.EngineTypes.endp = _endpos__1000_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Parsetree.structure_item list list) = Obj.magic xs in
        let _1000 : unit = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.structure_item list list) = let x =
          let _startpos__100_ = _startpos__1000_ in
          let _100 = _1000 in
          let _1 =
            let _startpos__10_ = _startpos__100_ in
            let _10 = _100 in
            let ys =
              let items =
                
# 751 "parser_raw.mly"
    ( [] )
# 19524 "parser_raw.ml"
                
              in
              
# 1079 "parser_raw.mly"
    ( items )
# 19530 "parser_raw.ml"
              
            in
            let xs =
              let _startpos__1_ = _startpos__10_ in
              let _1 = _10 in
              let _startpos = _startpos__1_ in
              
# 698 "parser_raw.mly"
  ( text_str _startpos )
# 19540 "parser_raw.ml"
              
            in
            
# 267 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( xs @ ys )
# 19546 "parser_raw.ml"
            
          in
          
# 1093 "parser_raw.mly"
      ( _1 )
# 19552 "parser_raw.ml"
          
        in
        
# 213 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( x :: xs )
# 19558 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _100000000;
            MenhirLib.EngineTypes.startp = _startpos__100000000_;
            MenhirLib.EngineTypes.endp = _endpos__100000000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = e0000000;
              MenhirLib.EngineTypes.startp = _startpos_e0000000_;
              MenhirLib.EngineTypes.endp = _endpos_e0000000_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1000;
                MenhirLib.EngineTypes.startp = _startpos__1000_;
                MenhirLib.EngineTypes.endp = _endpos__1000_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let xs : (Parsetree.structure_item list list) = Obj.magic xs in
        let _100000000 : (Parsetree.attributes) = Obj.magic _100000000 in
        let e0000000 : (Parsetree.expression) = Obj.magic e0000000 in
        let _1000 : unit = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.structure_item list list) = let x =
          let _startpos_e000000_ = _startpos_e0000000_ in
          let _endpos__10000000_ = _endpos__100000000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _10000000 = _100000000 in
          let e000000 = e0000000 in
          let _100 = _1000 in
          let _1 =
            let _startpos_e00000_ = _startpos_e000000_ in
            let _endpos__1000000_ = _endpos__10000000_ in
            let _startpos__10_ = _startpos__100_ in
            let _1000000 = _10000000 in
            let e00000 = e000000 in
            let _10 = _100 in
            let ys =
              let _startpos_e0000_ = _startpos_e00000_ in
              let _endpos__100000_ = _endpos__1000000_ in
              let _100000 = _1000000 in
              let e0000 = e00000 in
              let items =
                let _startpos_e000_ = _startpos_e0000_ in
                let _endpos__10000_ = _endpos__100000_ in
                let _10000 = _100000 in
                let e000 = e0000 in
                let x =
                  let _startpos_e00_ = _startpos_e000_ in
                  let _endpos__1000_ = _endpos__10000_ in
                  let _1000 = _10000 in
                  let e00 = e000 in
                  let _1 =
                    let _startpos_e0_ = _startpos_e00_ in
                    let _100 = _1000 in
                    let e0 = e00 in
                    let _1 =
                      let _10 = _100 in
                      let e = e0 in
                      let attrs =
                        let _1 = _10 in
                        
# 3368 "parser_raw.mly"
    ( _1 )
# 19639 "parser_raw.ml"
                        
                      in
                      
# 1085 "parser_raw.mly"
    ( mkstrexp e attrs )
# 19645 "parser_raw.ml"
                      
                    in
                    let _startpos__1_ = _startpos_e0_ in
                    let _startpos = _startpos__1_ in
                    
# 696 "parser_raw.mly"
  ( text_str _startpos @ [_1] )
# 19653 "parser_raw.ml"
                    
                  in
                  let _endpos__1_ = _endpos__1000_ in
                  let _startpos__1_ = _startpos_e00_ in
                  let _endpos = _endpos__1_ in
                  let _startpos = _startpos__1_ in
                  
# 714 "parser_raw.mly"
  ( mark_rhs_docs _startpos _endpos;
    _1 )
# 19664 "parser_raw.ml"
                  
                in
                
# 753 "parser_raw.mly"
    ( x )
# 19670 "parser_raw.ml"
                
              in
              
# 1079 "parser_raw.mly"
    ( items )
# 19676 "parser_raw.ml"
              
            in
            let xs =
              let _startpos__1_ = _startpos__10_ in
              let _1 = _10 in
              let _startpos = _startpos__1_ in
              
# 698 "parser_raw.mly"
  ( text_str _startpos )
# 19686 "parser_raw.ml"
              
            in
            
# 267 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( xs @ ys )
# 19692 "parser_raw.ml"
            
          in
          
# 1093 "parser_raw.mly"
      ( _1 )
# 19698 "parser_raw.ml"
          
        in
        
# 213 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( x :: xs )
# 19704 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _100;
            MenhirLib.EngineTypes.startp = _startpos__100_;
            MenhirLib.EngineTypes.endp = _endpos__100_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Parsetree.structure_item list list) = Obj.magic xs in
        let _100 : (Parsetree.structure_item) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.structure_item list list) = let x =
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _startpos__1_ = _startpos__10_ in
            let _1 = _10 in
            let _startpos = _startpos__1_ in
            
# 696 "parser_raw.mly"
  ( text_str _startpos @ [_1] )
# 19742 "parser_raw.ml"
            
          in
          
# 1093 "parser_raw.mly"
      ( _1 )
# 19748 "parser_raw.ml"
          
        in
        
# 213 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( x :: xs )
# 19754 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.class_type_field list list) = 
# 211 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( [] )
# 19772 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _10;
            MenhirLib.EngineTypes.startp = _startpos__10_;
            MenhirLib.EngineTypes.endp = _endpos__10_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Parsetree.class_type_field list list) = Obj.magic xs in
        let _10 : (Parsetree.class_type_field) = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.class_type_field list list) = let x =
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _startpos = _startpos__1_ in
          
# 710 "parser_raw.mly"
  ( text_csig _startpos @ [_1] )
# 19807 "parser_raw.ml"
          
        in
        
# 213 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( x :: xs )
# 19813 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.class_field list list) = 
# 211 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( [] )
# 19831 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _10;
            MenhirLib.EngineTypes.startp = _startpos__10_;
            MenhirLib.EngineTypes.endp = _endpos__10_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Parsetree.class_field list list) = Obj.magic xs in
        let _10 : (Parsetree.class_field) = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.class_field list list) = let x =
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _startpos = _startpos__1_ in
          
# 708 "parser_raw.mly"
  ( text_cstr _startpos @ [_1] )
# 19866 "parser_raw.ml"
          
        in
        
# 213 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( x :: xs )
# 19872 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.structure_item list list) = 
# 211 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( [] )
# 19890 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _10;
            MenhirLib.EngineTypes.startp = _startpos__10_;
            MenhirLib.EngineTypes.endp = _endpos__10_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Parsetree.structure_item list list) = Obj.magic xs in
        let _10 : (Parsetree.structure_item) = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.structure_item list list) = let x =
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _startpos = _startpos__1_ in
          
# 696 "parser_raw.mly"
  ( text_str _startpos @ [_1] )
# 19925 "parser_raw.ml"
          
        in
        
# 213 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( x :: xs )
# 19931 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.toplevel_phrase list list) = 
# 211 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( [] )
# 19949 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _100;
            MenhirLib.EngineTypes.startp = _startpos__100_;
            MenhirLib.EngineTypes.endp = _endpos__100_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Parsetree.toplevel_phrase list list) = Obj.magic xs in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.toplevel_phrase list list) = let x =
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            let x =
              let _1 =
                
# 751 "parser_raw.mly"
    ( [] )
# 19986 "parser_raw.ml"
                
              in
              
# 941 "parser_raw.mly"
    ( _1 )
# 19992 "parser_raw.ml"
              
            in
            
# 183 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( x )
# 19998 "parser_raw.ml"
            
          in
          
# 952 "parser_raw.mly"
      ( _1 )
# 20004 "parser_raw.ml"
          
        in
        
# 213 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( x :: xs )
# 20010 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _100000000;
            MenhirLib.EngineTypes.startp = _startpos__100000000_;
            MenhirLib.EngineTypes.endp = _endpos__100000000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = e0000000;
              MenhirLib.EngineTypes.startp = _startpos_e0000000_;
              MenhirLib.EngineTypes.endp = _endpos_e0000000_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _100;
                MenhirLib.EngineTypes.startp = _startpos__100_;
                MenhirLib.EngineTypes.endp = _endpos__100_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let xs : (Parsetree.toplevel_phrase list list) = Obj.magic xs in
        let _100000000 : (Parsetree.attributes) = Obj.magic _100000000 in
        let e0000000 : (Parsetree.expression) = Obj.magic e0000000 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.toplevel_phrase list list) = let x =
          let _startpos_e000000_ = _startpos_e0000000_ in
          let _10000000 = _100000000 in
          let e000000 = e0000000 in
          let _10 = _100 in
          let _1 =
            let _startpos_e00000_ = _startpos_e000000_ in
            let _1000000 = _10000000 in
            let e00000 = e000000 in
            let _1 = _10 in
            let x =
              let _startpos_e0000_ = _startpos_e00000_ in
              let _100000 = _1000000 in
              let e0000 = e00000 in
              let _1 =
                let _startpos_e000_ = _startpos_e0000_ in
                let _10000 = _100000 in
                let e000 = e0000 in
                let x =
                  let _startpos_e00_ = _startpos_e000_ in
                  let _1000 = _10000 in
                  let e00 = e000 in
                  let _1 =
                    let _100 = _1000 in
                    let e0 = e00 in
                    let _1 =
                      let _10 = _100 in
                      let e = e0 in
                      let attrs =
                        let _1 = _10 in
                        
# 3368 "parser_raw.mly"
    ( _1 )
# 20083 "parser_raw.ml"
                        
                      in
                      
# 1085 "parser_raw.mly"
    ( mkstrexp e attrs )
# 20089 "parser_raw.ml"
                      
                    in
                    
# 706 "parser_raw.mly"
  ( Ptop_def [_1] )
# 20095 "parser_raw.ml"
                    
                  in
                  let _startpos__1_ = _startpos_e00_ in
                  let _startpos = _startpos__1_ in
                  
# 704 "parser_raw.mly"
  ( text_def _startpos @ [_1] )
# 20103 "parser_raw.ml"
                  
                in
                
# 753 "parser_raw.mly"
    ( x )
# 20109 "parser_raw.ml"
                
              in
              
# 941 "parser_raw.mly"
    ( _1 )
# 20115 "parser_raw.ml"
              
            in
            
# 183 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( x )
# 20121 "parser_raw.ml"
            
          in
          
# 952 "parser_raw.mly"
      ( _1 )
# 20127 "parser_raw.ml"
          
        in
        
# 213 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( x :: xs )
# 20133 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1000;
            MenhirLib.EngineTypes.startp = _startpos__1000_;
            MenhirLib.EngineTypes.endp = _endpos__1000_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Parsetree.toplevel_phrase list list) = Obj.magic xs in
        let _1000 : (Parsetree.structure_item) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.toplevel_phrase list list) = let x =
          let _startpos__100_ = _startpos__1000_ in
          let _100 = _1000 in
          let _1 =
            let _startpos__10_ = _startpos__100_ in
            let _10 = _100 in
            let _1 =
              let _1 = _10 in
              
# 706 "parser_raw.mly"
  ( Ptop_def [_1] )
# 20172 "parser_raw.ml"
              
            in
            let _startpos__1_ = _startpos__10_ in
            let _startpos = _startpos__1_ in
            
# 704 "parser_raw.mly"
  ( text_def _startpos @ [_1] )
# 20180 "parser_raw.ml"
            
          in
          
# 952 "parser_raw.mly"
      ( _1 )
# 20186 "parser_raw.ml"
          
        in
        
# 213 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( x :: xs )
# 20192 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1000;
            MenhirLib.EngineTypes.startp = _startpos__1000_;
            MenhirLib.EngineTypes.endp = _endpos__1000_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Parsetree.toplevel_phrase list list) = Obj.magic xs in
        let _1000 : (Parsetree.toplevel_phrase) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.toplevel_phrase list list) = let x =
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _100 = _1000 in
          let _1 =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _10 = _100 in
            let _1 =
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _1 = _10 in
              let _endpos = _endpos__1_ in
              let _startpos = _startpos__1_ in
              
# 714 "parser_raw.mly"
  ( mark_rhs_docs _startpos _endpos;
    _1 )
# 20238 "parser_raw.ml"
              
            in
            let _startpos__1_ = _startpos__10_ in
            let _startpos = _startpos__1_ in
            
# 704 "parser_raw.mly"
  ( text_def _startpos @ [_1] )
# 20246 "parser_raw.ml"
            
          in
          
# 952 "parser_raw.mly"
      ( _1 )
# 20252 "parser_raw.ml"
          
        in
        
# 213 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( x :: xs )
# 20258 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = opat0;
          MenhirLib.EngineTypes.startp = _startpos_opat0_;
          MenhirLib.EngineTypes.endp = _endpos_opat0_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = octy0;
            MenhirLib.EngineTypes.startp = _startpos_octy0_;
            MenhirLib.EngineTypes.endp = _endpos_octy0_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _100;
              MenhirLib.EngineTypes.startp = _startpos__100_;
              MenhirLib.EngineTypes.endp = _endpos__100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let opat0 : (Parsetree.pattern option) = Obj.magic opat0 in
        let octy0 : (Parsetree.core_type option) = Obj.magic octy0 in
        let _100 : (Longident.t) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos_opat0_ in
        let _v : ((Longident.t Location.loc * Parsetree.pattern) list * unit option) = let _2 =
          
# 124 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( None )
# 20296 "parser_raw.ml"
          
        in
        let x =
          let _endpos_opat_ = _endpos_opat0_ in
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let opat = opat0 in
          let octy = octy0 in
          let _10 = _100 in
          let label =
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _1 = _10 in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 20316 "parser_raw.ml"
            
          in
          let _startpos_label_ = _startpos__10_ in
          let _endpos = _endpos_opat_ in
          let _symbolstartpos = _startpos_label_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2487 "parser_raw.mly"
    ( let pat =
        match opat with
        | None ->
            (* No pattern; this is a pun. Desugar it. *)
            pat_of_label ~loc:_sloc label
        | Some pat ->
            pat
      in
      label, mkpat_opt_constraint ~loc:_sloc pat octy
    )
# 20335 "parser_raw.ml"
          
        in
        
# 887 "parser_raw.mly"
    ( [x], None )
# 20341 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = x0;
          MenhirLib.EngineTypes.startp = _startpos_x0_;
          MenhirLib.EngineTypes.endp = _endpos_x0_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = opat0;
            MenhirLib.EngineTypes.startp = _startpos_opat0_;
            MenhirLib.EngineTypes.endp = _endpos_opat0_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = octy0;
              MenhirLib.EngineTypes.startp = _startpos_octy0_;
              MenhirLib.EngineTypes.endp = _endpos_octy0_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _100;
                MenhirLib.EngineTypes.startp = _startpos__100_;
                MenhirLib.EngineTypes.endp = _endpos__100_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let x0 : unit = Obj.magic x0 in
        let opat0 : (Parsetree.pattern option) = Obj.magic opat0 in
        let octy0 : (Parsetree.core_type option) = Obj.magic octy0 in
        let _100 : (Longident.t) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos_x0_ in
        let _v : ((Longident.t Location.loc * Parsetree.pattern) list * unit option) = let _2 =
          let x = x0 in
          
# 126 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( Some x )
# 20386 "parser_raw.ml"
          
        in
        let x =
          let _endpos_opat_ = _endpos_opat0_ in
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let opat = opat0 in
          let octy = octy0 in
          let _10 = _100 in
          let label =
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _1 = _10 in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 20406 "parser_raw.ml"
            
          in
          let _startpos_label_ = _startpos__10_ in
          let _endpos = _endpos_opat_ in
          let _symbolstartpos = _startpos_label_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2487 "parser_raw.mly"
    ( let pat =
        match opat with
        | None ->
            (* No pattern; this is a pun. Desugar it. *)
            pat_of_label ~loc:_sloc label
        | Some pat ->
            pat
      in
      label, mkpat_opt_constraint ~loc:_sloc pat octy
    )
# 20425 "parser_raw.ml"
          
        in
        
# 887 "parser_raw.mly"
    ( [x], None )
# 20431 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = y;
            MenhirLib.EngineTypes.startp = _startpos_y_;
            MenhirLib.EngineTypes.endp = _endpos_y_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = opat0;
                MenhirLib.EngineTypes.startp = _startpos_opat0_;
                MenhirLib.EngineTypes.endp = _endpos_opat0_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = octy0;
                  MenhirLib.EngineTypes.startp = _startpos_octy0_;
                  MenhirLib.EngineTypes.endp = _endpos_octy0_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _100;
                    MenhirLib.EngineTypes.startp = _startpos__100_;
                    MenhirLib.EngineTypes.endp = _endpos__100_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _4 : (unit option) = Obj.magic _4 in
        let y : unit = Obj.magic y in
        let _2 : unit = Obj.magic _2 in
        let opat0 : (Parsetree.pattern option) = Obj.magic opat0 in
        let octy0 : (Parsetree.core_type option) = Obj.magic octy0 in
        let _100 : (Longident.t) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__4_ in
        let _v : ((Longident.t Location.loc * Parsetree.pattern) list * unit option) = let x =
          let _endpos_opat_ = _endpos_opat0_ in
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let opat = opat0 in
          let octy = octy0 in
          let _10 = _100 in
          let label =
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _1 = _10 in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 20500 "parser_raw.ml"
            
          in
          let _startpos_label_ = _startpos__10_ in
          let _endpos = _endpos_opat_ in
          let _symbolstartpos = _startpos_label_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2487 "parser_raw.mly"
    ( let pat =
        match opat with
        | None ->
            (* No pattern; this is a pun. Desugar it. *)
            pat_of_label ~loc:_sloc label
        | Some pat ->
            pat
      in
      label, mkpat_opt_constraint ~loc:_sloc pat octy
    )
# 20519 "parser_raw.ml"
          
        in
        
# 889 "parser_raw.mly"
    ( [x], Some y )
# 20525 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = tail;
          MenhirLib.EngineTypes.startp = _startpos_tail_;
          MenhirLib.EngineTypes.endp = _endpos_tail_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = opat0;
              MenhirLib.EngineTypes.startp = _startpos_opat0_;
              MenhirLib.EngineTypes.endp = _endpos_opat0_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = octy0;
                MenhirLib.EngineTypes.startp = _startpos_octy0_;
                MenhirLib.EngineTypes.endp = _endpos_octy0_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _100;
                  MenhirLib.EngineTypes.startp = _startpos__100_;
                  MenhirLib.EngineTypes.endp = _endpos__100_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let tail : ((Longident.t Location.loc * Parsetree.pattern) list * unit option) = Obj.magic tail in
        let _2 : unit = Obj.magic _2 in
        let opat0 : (Parsetree.pattern option) = Obj.magic opat0 in
        let octy0 : (Parsetree.core_type option) = Obj.magic octy0 in
        let _100 : (Longident.t) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos_tail_ in
        let _v : ((Longident.t Location.loc * Parsetree.pattern) list * unit option) = let x =
          let _endpos_opat_ = _endpos_opat0_ in
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let opat = opat0 in
          let octy = octy0 in
          let _10 = _100 in
          let label =
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _1 = _10 in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 20588 "parser_raw.ml"
            
          in
          let _startpos_label_ = _startpos__10_ in
          let _endpos = _endpos_opat_ in
          let _symbolstartpos = _startpos_label_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2487 "parser_raw.mly"
    ( let pat =
        match opat with
        | None ->
            (* No pattern; this is a pun. Desugar it. *)
            pat_of_label ~loc:_sloc label
        | Some pat ->
            pat
      in
      label, mkpat_opt_constraint ~loc:_sloc pat octy
    )
# 20607 "parser_raw.ml"
          
        in
        
# 893 "parser_raw.mly"
    ( let xs, y = tail in
      x :: xs, y )
# 20614 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _100;
                MenhirLib.EngineTypes.startp = _startpos__100_;
                MenhirLib.EngineTypes.endp = _endpos__100_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _11;
                  MenhirLib.EngineTypes.startp = _startpos__11_;
                  MenhirLib.EngineTypes.endp = _endpos__11_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let _4 : (Parsetree.pattern * Parsetree.expression) = Obj.magic _4 in
        let _3 : (Asttypes.rec_flag) = Obj.magic _3 in
        let _100 : (Parsetree.attributes) = Obj.magic _100 in
        let _11 : (string Location.loc option) = Obj.magic _11 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__10_ in
        let _v : (Ast_helper.let_bindings) = let _5 =
          let _1 = _10 in
          
# 3368 "parser_raw.mly"
    ( _1 )
# 20671 "parser_raw.ml"
          
        in
        let _endpos__5_ = _endpos__10_ in
        let _2 =
          let _10 = _100 in
          let _1 = _11 in
          let _2 =
            let _1 = _10 in
            
# 3372 "parser_raw.mly"
    ( _1 )
# 20683 "parser_raw.ml"
            
          in
          
# 3383 "parser_raw.mly"
                 ( _1, _2 )
# 20689 "parser_raw.ml"
          
        in
        let _endpos = _endpos__5_ in
        let _startpos = _startpos__1_ in
        let _loc__4_ = (_startpos__4_, _endpos__4_) in
        let _loc = (_startpos, _endpos) in
        
# 3410 "parser_raw.mly"
      ( let (ext, attr) = _2 in
        mklbs ~loc:_loc ext _3 (mklb ~loc:_loc__4_ true _4 (attr@_5)) )
# 20700 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Ast_helper.let_bindings) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Ast_helper.let_bindings) = 
# 3414 "parser_raw.mly"
                ( _1 )
# 20725 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Ast_helper.let_binding) = Obj.magic _2 in
        let _1 : (Ast_helper.let_bindings) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Ast_helper.let_bindings) = 
# 3415 "parser_raw.mly"
                                 ( addlb _1 _2 )
# 20756 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.case) = 
# 2257 "parser_raw.mly"
      ( Exp.case _1 (merloc _endpos__2_ _3) )
# 20793 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.case) = 
# 2259 "parser_raw.mly"
      ( Exp.case _1 ~guard:(merloc _endpos__2_ _3) (merloc _endpos__4_ _5) )
# 20842 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.case) = let _loc__3_ = (_startpos__3_, _endpos__3_) in
        
# 2261 "parser_raw.mly"
      ( Exp.case _1 (merloc _endpos__2_
                       (Exp.unreachable ~loc:(make_loc _loc__3_) ())) )
# 20881 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = xs00;
          MenhirLib.EngineTypes.startp = _startpos_xs00_;
          MenhirLib.EngineTypes.endp = _endpos_xs00_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let xs00 : (Parsetree.case list) = Obj.magic xs00 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs00_ in
        let _endpos = _endpos_xs00_ in
        let _v : (Parsetree.case list) = let xs =
          let xs0 = xs00 in
          let xs =
            let xs = xs0 in
            
# 253 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( List.rev xs )
# 20910 "parser_raw.ml"
            
          in
          
# 851 "parser_raw.mly"
    ( xs )
# 20916 "parser_raw.ml"
          
        in
        
# 2253 "parser_raw.mly"
    ( xs )
# 20922 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = tail;
          MenhirLib.EngineTypes.startp = _startpos_tail_;
          MenhirLib.EngineTypes.endp = _endpos_tail_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _120;
            MenhirLib.EngineTypes.startp = _startpos__120_;
            MenhirLib.EngineTypes.endp = _endpos__120_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _50;
              MenhirLib.EngineTypes.startp = _startpos__50_;
              MenhirLib.EngineTypes.endp = _endpos__50_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _110;
                MenhirLib.EngineTypes.startp = _startpos__110_;
                MenhirLib.EngineTypes.endp = _endpos__110_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _101;
                  MenhirLib.EngineTypes.startp = _startpos__101_;
                  MenhirLib.EngineTypes.endp = _endpos__101_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _20;
                    MenhirLib.EngineTypes.startp = _startpos__20_;
                    MenhirLib.EngineTypes.endp = _endpos__20_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1000;
                      MenhirLib.EngineTypes.startp = _startpos__1000_;
                      MenhirLib.EngineTypes.endp = _endpos__1000_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let tail : (Parsetree.object_field list * Asttypes.closed_flag) = Obj.magic tail in
        let _120 : (Parsetree.attributes) = Obj.magic _120 in
        let _50 : unit = Obj.magic _50 in
        let _110 : (Parsetree.attributes) = Obj.magic _110 in
        let _101 : (Parsetree.core_type) = Obj.magic _101 in
        let _20 : unit = Obj.magic _20 in
        let _1000 : (
# 564 "parser_raw.mly"
       (string)
# 20979 "parser_raw.ml"
        ) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos_tail_ in
        let _v : (Parsetree.object_field list * Asttypes.closed_flag) = let head =
          let _endpos__12_ = _endpos__120_ in
          let _endpos__11_ = _endpos__110_ in
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _12 = _120 in
          let _5 = _50 in
          let _11 = _110 in
          let _10 = _101 in
          let _2 = _20 in
          let _100 = _1000 in
          let _6 =
            let _1 = _12 in
            
# 3372 "parser_raw.mly"
    ( _1 )
# 21000 "parser_raw.ml"
            
          in
          let _endpos__6_ = _endpos__12_ in
          let _4 =
            let _1 = _11 in
            
# 3372 "parser_raw.mly"
    ( _1 )
# 21009 "parser_raw.ml"
            
          in
          let _endpos__4_ = _endpos__11_ in
          let _3 =
            let _1 = _10 in
            
# 2860 "parser_raw.mly"
    ( _1 )
# 21018 "parser_raw.ml"
            
          in
          let _1 =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _10 = _100 in
            let _1 =
              let _1 = _10 in
              
# 3073 "parser_raw.mly"
           ( _1 )
# 21030 "parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 21041 "parser_raw.ml"
            
          in
          let _startpos__1_ = _startpos__100_ in
          let _endpos = _endpos__6_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 3060 "parser_raw.mly"
    ( let info =
        match rhs_info _endpos__4_ with
        | Some _ as info_before_semi -> info_before_semi
        | None -> symbol_info _endpos
      in
      let attrs = add_info_attrs info (_4 @ _6) in
      Of.tag ~loc:(make_loc _sloc) ~attrs _1 _3 )
# 21057 "parser_raw.ml"
          
        in
        
# 3042 "parser_raw.mly"
      ( let (f, c) = tail in (head :: f, c) )
# 21063 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = tail;
          MenhirLib.EngineTypes.startp = _startpos_tail_;
          MenhirLib.EngineTypes.endp = _endpos_tail_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = ty0;
              MenhirLib.EngineTypes.startp = _startpos_ty0_;
              MenhirLib.EngineTypes.endp = _endpos_ty0_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let tail : (Parsetree.object_field list * Asttypes.closed_flag) = Obj.magic tail in
        let _2 : unit = Obj.magic _2 in
        let ty0 : (Parsetree.core_type) = Obj.magic ty0 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ty0_ in
        let _endpos = _endpos_tail_ in
        let _v : (Parsetree.object_field list * Asttypes.closed_flag) = let head =
          let _endpos_ty_ = _endpos_ty0_ in
          let _startpos_ty_ = _startpos_ty0_ in
          let ty = ty0 in
          let _endpos = _endpos_ty_ in
          let _symbolstartpos = _startpos_ty_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 3070 "parser_raw.mly"
    ( Of.inherit_ ~loc:(make_loc _sloc) ty )
# 21107 "parser_raw.ml"
          
        in
        
# 3042 "parser_raw.mly"
      ( let (f, c) = tail in (head :: f, c) )
# 21113 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _120;
          MenhirLib.EngineTypes.startp = _startpos__120_;
          MenhirLib.EngineTypes.endp = _endpos__120_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _50;
            MenhirLib.EngineTypes.startp = _startpos__50_;
            MenhirLib.EngineTypes.endp = _endpos__50_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _110;
              MenhirLib.EngineTypes.startp = _startpos__110_;
              MenhirLib.EngineTypes.endp = _endpos__110_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _101;
                MenhirLib.EngineTypes.startp = _startpos__101_;
                MenhirLib.EngineTypes.endp = _endpos__101_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _20;
                  MenhirLib.EngineTypes.startp = _startpos__20_;
                  MenhirLib.EngineTypes.endp = _endpos__20_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1000;
                    MenhirLib.EngineTypes.startp = _startpos__1000_;
                    MenhirLib.EngineTypes.endp = _endpos__1000_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _120 : (Parsetree.attributes) = Obj.magic _120 in
        let _50 : unit = Obj.magic _50 in
        let _110 : (Parsetree.attributes) = Obj.magic _110 in
        let _101 : (Parsetree.core_type) = Obj.magic _101 in
        let _20 : unit = Obj.magic _20 in
        let _1000 : (
# 564 "parser_raw.mly"
       (string)
# 21164 "parser_raw.ml"
        ) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos__120_ in
        let _v : (Parsetree.object_field list * Asttypes.closed_flag) = let head =
          let _endpos__12_ = _endpos__120_ in
          let _endpos__11_ = _endpos__110_ in
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _12 = _120 in
          let _5 = _50 in
          let _11 = _110 in
          let _10 = _101 in
          let _2 = _20 in
          let _100 = _1000 in
          let _6 =
            let _1 = _12 in
            
# 3372 "parser_raw.mly"
    ( _1 )
# 21185 "parser_raw.ml"
            
          in
          let _endpos__6_ = _endpos__12_ in
          let _4 =
            let _1 = _11 in
            
# 3372 "parser_raw.mly"
    ( _1 )
# 21194 "parser_raw.ml"
            
          in
          let _endpos__4_ = _endpos__11_ in
          let _3 =
            let _1 = _10 in
            
# 2860 "parser_raw.mly"
    ( _1 )
# 21203 "parser_raw.ml"
            
          in
          let _1 =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _10 = _100 in
            let _1 =
              let _1 = _10 in
              
# 3073 "parser_raw.mly"
           ( _1 )
# 21215 "parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 21226 "parser_raw.ml"
            
          in
          let _startpos__1_ = _startpos__100_ in
          let _endpos = _endpos__6_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 3060 "parser_raw.mly"
    ( let info =
        match rhs_info _endpos__4_ with
        | Some _ as info_before_semi -> info_before_semi
        | None -> symbol_info _endpos
      in
      let attrs = add_info_attrs info (_4 @ _6) in
      Of.tag ~loc:(make_loc _sloc) ~attrs _1 _3 )
# 21242 "parser_raw.ml"
          
        in
        
# 3045 "parser_raw.mly"
      ( [head], Closed )
# 21248 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = ty0;
            MenhirLib.EngineTypes.startp = _startpos_ty0_;
            MenhirLib.EngineTypes.endp = _endpos_ty0_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let ty0 : (Parsetree.core_type) = Obj.magic ty0 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ty0_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.object_field list * Asttypes.closed_flag) = let head =
          let _endpos_ty_ = _endpos_ty0_ in
          let _startpos_ty_ = _startpos_ty0_ in
          let ty = ty0 in
          let _endpos = _endpos_ty_ in
          let _symbolstartpos = _startpos_ty_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 3070 "parser_raw.mly"
    ( Of.inherit_ ~loc:(make_loc _sloc) ty )
# 21286 "parser_raw.ml"
          
        in
        
# 3045 "parser_raw.mly"
      ( [head], Closed )
# 21292 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _110;
          MenhirLib.EngineTypes.startp = _startpos__110_;
          MenhirLib.EngineTypes.endp = _endpos__110_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _101;
            MenhirLib.EngineTypes.startp = _startpos__101_;
            MenhirLib.EngineTypes.endp = _endpos__101_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _20;
              MenhirLib.EngineTypes.startp = _startpos__20_;
              MenhirLib.EngineTypes.endp = _endpos__20_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1000;
                MenhirLib.EngineTypes.startp = _startpos__1000_;
                MenhirLib.EngineTypes.endp = _endpos__1000_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _110 : (Parsetree.attributes) = Obj.magic _110 in
        let _101 : (Parsetree.core_type) = Obj.magic _101 in
        let _20 : unit = Obj.magic _20 in
        let _1000 : (
# 564 "parser_raw.mly"
       (string)
# 21331 "parser_raw.ml"
        ) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos__110_ in
        let _v : (Parsetree.object_field list * Asttypes.closed_flag) = let head =
          let _endpos__11_ = _endpos__110_ in
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _11 = _110 in
          let _10 = _101 in
          let _2 = _20 in
          let _100 = _1000 in
          let _4 =
            let _1 = _11 in
            
# 3372 "parser_raw.mly"
    ( _1 )
# 21349 "parser_raw.ml"
            
          in
          let _endpos__4_ = _endpos__11_ in
          let _3 =
            let _1 = _10 in
            
# 2860 "parser_raw.mly"
    ( _1 )
# 21358 "parser_raw.ml"
            
          in
          let _1 =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _10 = _100 in
            let _1 =
              let _1 = _10 in
              
# 3073 "parser_raw.mly"
           ( _1 )
# 21370 "parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 21381 "parser_raw.ml"
            
          in
          let _startpos__1_ = _startpos__100_ in
          let _endpos = _endpos__4_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 3054 "parser_raw.mly"
    ( let info = symbol_info _endpos in
      let attrs = add_info_attrs info _4 in
      Of.tag ~loc:(make_loc _sloc) ~attrs _1 _3 )
# 21393 "parser_raw.ml"
          
        in
        
# 3048 "parser_raw.mly"
      ( [head], Closed )
# 21399 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = ty0;
          MenhirLib.EngineTypes.startp = _startpos_ty0_;
          MenhirLib.EngineTypes.endp = _endpos_ty0_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let ty0 : (Parsetree.core_type) = Obj.magic ty0 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ty0_ in
        let _endpos = _endpos_ty0_ in
        let _v : (Parsetree.object_field list * Asttypes.closed_flag) = let head =
          let _endpos_ty_ = _endpos_ty0_ in
          let _startpos_ty_ = _startpos_ty0_ in
          let ty = ty0 in
          let _endpos = _endpos_ty_ in
          let _symbolstartpos = _startpos_ty_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 3070 "parser_raw.mly"
    ( Of.inherit_ ~loc:(make_loc _sloc) ty )
# 21431 "parser_raw.ml"
          
        in
        
# 3048 "parser_raw.mly"
      ( [head], Closed )
# 21437 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.object_field list * Asttypes.closed_flag) = 
# 3050 "parser_raw.mly"
      ( [], Open )
# 21462 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _11;
          MenhirLib.EngineTypes.startp = _startpos__11_;
          MenhirLib.EngineTypes.endp = _endpos__11_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _100;
              MenhirLib.EngineTypes.startp = _startpos__100_;
              MenhirLib.EngineTypes.endp = _endpos__100_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = private_;
                MenhirLib.EngineTypes.startp = _startpos_private__;
                MenhirLib.EngineTypes.endp = _endpos_private__;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _10;
                  MenhirLib.EngineTypes.startp = _startpos__10_;
                  MenhirLib.EngineTypes.endp = _endpos__10_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _11 : (Parsetree.core_type) = Obj.magic _11 in
        let _5 : unit = Obj.magic _5 in
        let _100 : (
# 564 "parser_raw.mly"
       (string)
# 21505 "parser_raw.ml"
        ) = Obj.magic _100 in
        let private_ : (Asttypes.private_flag) = Obj.magic private_ in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__11_ in
        let _v : ((string Location.loc * Asttypes.private_flag * Parsetree.class_field_kind) *
  Parsetree.attributes) = let ty =
          let _1 = _11 in
          
# 2856 "parser_raw.mly"
    ( _1 )
# 21518 "parser_raw.ml"
          
        in
        let label =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 3073 "parser_raw.mly"
           ( _1 )
# 21530 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 21541 "parser_raw.ml"
          
        in
        let attrs =
          let _1 = _10 in
          
# 3372 "parser_raw.mly"
    ( _1 )
# 21549 "parser_raw.ml"
          
        in
        let _1 =
          
# 3276 "parser_raw.mly"
                                                ( Fresh )
# 21556 "parser_raw.ml"
          
        in
        
# 1615 "parser_raw.mly"
      ( (label, private_, Cfk_virtual ty), attrs )
# 21562 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _100;
            MenhirLib.EngineTypes.startp = _startpos__100_;
            MenhirLib.EngineTypes.endp = _endpos__100_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _10;
                MenhirLib.EngineTypes.startp = _startpos__10_;
                MenhirLib.EngineTypes.endp = _endpos__10_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _100 : (
# 564 "parser_raw.mly"
       (string)
# 21599 "parser_raw.ml"
        ) = Obj.magic _100 in
        let _3 : (Asttypes.private_flag) = Obj.magic _3 in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__5_ in
        let _v : ((string Location.loc * Asttypes.private_flag * Parsetree.class_field_kind) *
  Parsetree.attributes) = let _4 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 3073 "parser_raw.mly"
           ( _1 )
# 21616 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 21627 "parser_raw.ml"
          
        in
        let _2 =
          let _1 = _10 in
          
# 3372 "parser_raw.mly"
    ( _1 )
# 21635 "parser_raw.ml"
          
        in
        let _1 =
          
# 3279 "parser_raw.mly"
                                                ( Fresh )
# 21642 "parser_raw.ml"
          
        in
        
# 1617 "parser_raw.mly"
      ( let e = _5 in
        let loc = Location.(e.pexp_loc.loc_start, e.pexp_loc.loc_end) in
        (_4, _3,
        Cfk_concrete (_1, ghexp ~loc (Pexp_poly (e, None)))), _2 )
# 21651 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _100;
            MenhirLib.EngineTypes.startp = _startpos__100_;
            MenhirLib.EngineTypes.endp = _endpos__100_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _11;
                MenhirLib.EngineTypes.startp = _startpos__11_;
                MenhirLib.EngineTypes.endp = _endpos__11_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _10;
                  MenhirLib.EngineTypes.startp = _startpos__10_;
                  MenhirLib.EngineTypes.endp = _endpos__10_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _100 : (
# 564 "parser_raw.mly"
       (string)
# 21693 "parser_raw.ml"
        ) = Obj.magic _100 in
        let _3 : (Asttypes.private_flag) = Obj.magic _3 in
        let _11 : (Parsetree.attributes) = Obj.magic _11 in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__5_ in
        let _v : ((string Location.loc * Asttypes.private_flag * Parsetree.class_field_kind) *
  Parsetree.attributes) = let _4 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 3073 "parser_raw.mly"
           ( _1 )
# 21711 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 21722 "parser_raw.ml"
          
        in
        let _2 =
          let _1 = _11 in
          
# 3372 "parser_raw.mly"
    ( _1 )
# 21730 "parser_raw.ml"
          
        in
        let _1 =
          let _1 = _10 in
          
# 3280 "parser_raw.mly"
         ( Override )
# 21738 "parser_raw.ml"
          
        in
        
# 1617 "parser_raw.mly"
      ( let e = _5 in
        let loc = Location.(e.pexp_loc.loc_start, e.pexp_loc.loc_end) in
        (_4, _3,
        Cfk_concrete (_1, ghexp ~loc (Pexp_poly (e, None)))), _2 )
# 21747 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _8;
          MenhirLib.EngineTypes.startp = _startpos__8_;
          MenhirLib.EngineTypes.endp = _endpos__8_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _7;
            MenhirLib.EngineTypes.startp = _startpos__7_;
            MenhirLib.EngineTypes.endp = _endpos__7_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _11;
              MenhirLib.EngineTypes.startp = _startpos__11_;
              MenhirLib.EngineTypes.endp = _endpos__11_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _5;
                MenhirLib.EngineTypes.startp = _startpos__5_;
                MenhirLib.EngineTypes.endp = _endpos__5_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _100;
                  MenhirLib.EngineTypes.startp = _startpos__100_;
                  MenhirLib.EngineTypes.endp = _endpos__100_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _3;
                    MenhirLib.EngineTypes.startp = _startpos__3_;
                    MenhirLib.EngineTypes.endp = _endpos__3_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _10;
                      MenhirLib.EngineTypes.startp = _startpos__10_;
                      MenhirLib.EngineTypes.endp = _endpos__10_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _8 : (Parsetree.expression) = Obj.magic _8 in
        let _7 : unit = Obj.magic _7 in
        let _11 : (Parsetree.core_type) = Obj.magic _11 in
        let _5 : unit = Obj.magic _5 in
        let _100 : (
# 564 "parser_raw.mly"
       (string)
# 21802 "parser_raw.ml"
        ) = Obj.magic _100 in
        let _3 : (Asttypes.private_flag) = Obj.magic _3 in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__8_ in
        let _v : ((string Location.loc * Asttypes.private_flag * Parsetree.class_field_kind) *
  Parsetree.attributes) = let _6 =
          let _1 = _11 in
          
# 2856 "parser_raw.mly"
    ( _1 )
# 21815 "parser_raw.ml"
          
        in
        let _startpos__6_ = _startpos__11_ in
        let _4 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 3073 "parser_raw.mly"
           ( _1 )
# 21828 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 21839 "parser_raw.ml"
          
        in
        let _2 =
          let _1 = _10 in
          
# 3372 "parser_raw.mly"
    ( _1 )
# 21847 "parser_raw.ml"
          
        in
        let _1 =
          
# 3279 "parser_raw.mly"
                                                ( Fresh )
# 21854 "parser_raw.ml"
          
        in
        
# 1623 "parser_raw.mly"
      ( let poly_exp =
          let loc = (_startpos__6_, _endpos__8_) in
          ghexp ~loc (Pexp_poly(_8, Some _6)) in
        (_4, _3, Cfk_concrete (_1, poly_exp)), _2 )
# 21863 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _8;
          MenhirLib.EngineTypes.startp = _startpos__8_;
          MenhirLib.EngineTypes.endp = _endpos__8_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _7;
            MenhirLib.EngineTypes.startp = _startpos__7_;
            MenhirLib.EngineTypes.endp = _endpos__7_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _12;
              MenhirLib.EngineTypes.startp = _startpos__12_;
              MenhirLib.EngineTypes.endp = _endpos__12_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _5;
                MenhirLib.EngineTypes.startp = _startpos__5_;
                MenhirLib.EngineTypes.endp = _endpos__5_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _100;
                  MenhirLib.EngineTypes.startp = _startpos__100_;
                  MenhirLib.EngineTypes.endp = _endpos__100_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _3;
                    MenhirLib.EngineTypes.startp = _startpos__3_;
                    MenhirLib.EngineTypes.endp = _endpos__3_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = _11;
                      MenhirLib.EngineTypes.startp = _startpos__11_;
                      MenhirLib.EngineTypes.endp = _endpos__11_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _10;
                        MenhirLib.EngineTypes.startp = _startpos__10_;
                        MenhirLib.EngineTypes.endp = _endpos__10_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _8 : (Parsetree.expression) = Obj.magic _8 in
        let _7 : unit = Obj.magic _7 in
        let _12 : (Parsetree.core_type) = Obj.magic _12 in
        let _5 : unit = Obj.magic _5 in
        let _100 : (
# 564 "parser_raw.mly"
       (string)
# 21923 "parser_raw.ml"
        ) = Obj.magic _100 in
        let _3 : (Asttypes.private_flag) = Obj.magic _3 in
        let _11 : (Parsetree.attributes) = Obj.magic _11 in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__8_ in
        let _v : ((string Location.loc * Asttypes.private_flag * Parsetree.class_field_kind) *
  Parsetree.attributes) = let _6 =
          let _1 = _12 in
          
# 2856 "parser_raw.mly"
    ( _1 )
# 21937 "parser_raw.ml"
          
        in
        let _startpos__6_ = _startpos__12_ in
        let _4 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 3073 "parser_raw.mly"
           ( _1 )
# 21950 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 21961 "parser_raw.ml"
          
        in
        let _2 =
          let _1 = _11 in
          
# 3372 "parser_raw.mly"
    ( _1 )
# 21969 "parser_raw.ml"
          
        in
        let _1 =
          let _1 = _10 in
          
# 3280 "parser_raw.mly"
         ( Override )
# 21977 "parser_raw.ml"
          
        in
        
# 1623 "parser_raw.mly"
      ( let poly_exp =
          let loc = (_startpos__6_, _endpos__8_) in
          ghexp ~loc (Pexp_poly(_8, Some _6)) in
        (_4, _3, Cfk_concrete (_1, poly_exp)), _2 )
# 21986 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _11;
          MenhirLib.EngineTypes.startp = _startpos__11_;
          MenhirLib.EngineTypes.endp = _endpos__11_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _10;
            MenhirLib.EngineTypes.startp = _startpos__10_;
            MenhirLib.EngineTypes.endp = _endpos__10_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _9;
              MenhirLib.EngineTypes.startp = _startpos__9_;
              MenhirLib.EngineTypes.endp = _endpos__9_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _8;
                MenhirLib.EngineTypes.startp = _startpos__8_;
                MenhirLib.EngineTypes.endp = _endpos__8_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = xs0;
                  MenhirLib.EngineTypes.startp = _startpos_xs0_;
                  MenhirLib.EngineTypes.endp = _endpos_xs0_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _6;
                    MenhirLib.EngineTypes.startp = _startpos__6_;
                    MenhirLib.EngineTypes.endp = _endpos__6_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = _5;
                      MenhirLib.EngineTypes.startp = _startpos__5_;
                      MenhirLib.EngineTypes.endp = _endpos__5_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.semv = _100;
                        MenhirLib.EngineTypes.startp = _startpos__100_;
                        MenhirLib.EngineTypes.endp = _endpos__100_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.semv = _3;
                          MenhirLib.EngineTypes.startp = _startpos__3_;
                          MenhirLib.EngineTypes.endp = _endpos__3_;
                          MenhirLib.EngineTypes.next = {
                            MenhirLib.EngineTypes.state = _menhir_s;
                            MenhirLib.EngineTypes.semv = _12;
                            MenhirLib.EngineTypes.startp = _startpos__12_;
                            MenhirLib.EngineTypes.endp = _endpos__12_;
                            MenhirLib.EngineTypes.next = _menhir_stack;
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _11 : (Parsetree.expression) = Obj.magic _11 in
        let _10 : unit = Obj.magic _10 in
        let _9 : (Parsetree.core_type) = Obj.magic _9 in
        let _8 : unit = Obj.magic _8 in
        let xs0 : (string Location.loc list) = Obj.magic xs0 in
        let _6 : unit = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _100 : (
# 564 "parser_raw.mly"
       (string)
# 22059 "parser_raw.ml"
        ) = Obj.magic _100 in
        let _3 : (Asttypes.private_flag) = Obj.magic _3 in
        let _12 : (Parsetree.attributes) = Obj.magic _12 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__12_ in
        let _endpos = _endpos__11_ in
        let _v : ((string Location.loc * Asttypes.private_flag * Parsetree.class_field_kind) *
  Parsetree.attributes) = let _7 =
          let xs = xs0 in
          
# 2147 "parser_raw.mly"
    ( xs )
# 22072 "parser_raw.ml"
          
        in
        let _startpos__7_ = _startpos_xs0_ in
        let _4 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 3073 "parser_raw.mly"
           ( _1 )
# 22085 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 22096 "parser_raw.ml"
          
        in
        let _startpos__4_ = _startpos__100_ in
        let _2 =
          let _1 = _12 in
          
# 3372 "parser_raw.mly"
    ( _1 )
# 22105 "parser_raw.ml"
          
        in
        let _endpos__2_ = _endpos__12_ in
        let _startpos__2_ = _startpos__12_ in
        let _1 =
          
# 3279 "parser_raw.mly"
                                                ( Fresh )
# 22114 "parser_raw.ml"
          
        in
        let _endpos__1_ = _endpos__0_ in
        let _startpos__1_ = _endpos__0_ in
        let _endpos = _endpos__11_ in
        let _symbolstartpos = if _startpos__1_ != _endpos__1_ then
          _startpos__1_
        else
          if _startpos__2_ != _endpos__2_ then
            _startpos__2_
          else
            if _startpos__3_ != _endpos__3_ then
              _startpos__3_
            else
              _startpos__4_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1629 "parser_raw.mly"
      ( let poly_exp_loc = (_startpos__7_, _endpos__11_) in
        let poly_exp =
          let exp, poly =
            (* it seems odd to use the global ~loc here while poly_exp_loc
               is tighter, but this is what ocamlyacc does;
               TODO improve parser.mly *)
            wrap_type_annotation ~loc:_sloc _7 _9 _11 in
          ghexp ~loc:poly_exp_loc (Pexp_poly(exp, Some poly)) in
        (_4, _3,
        Cfk_concrete (_1, poly_exp)), _2 )
# 22143 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _11;
          MenhirLib.EngineTypes.startp = _startpos__11_;
          MenhirLib.EngineTypes.endp = _endpos__11_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _10;
            MenhirLib.EngineTypes.startp = _startpos__10_;
            MenhirLib.EngineTypes.endp = _endpos__10_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _9;
              MenhirLib.EngineTypes.startp = _startpos__9_;
              MenhirLib.EngineTypes.endp = _endpos__9_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _8;
                MenhirLib.EngineTypes.startp = _startpos__8_;
                MenhirLib.EngineTypes.endp = _endpos__8_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = xs0;
                  MenhirLib.EngineTypes.startp = _startpos_xs0_;
                  MenhirLib.EngineTypes.endp = _endpos_xs0_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _6;
                    MenhirLib.EngineTypes.startp = _startpos__6_;
                    MenhirLib.EngineTypes.endp = _endpos__6_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = _5;
                      MenhirLib.EngineTypes.startp = _startpos__5_;
                      MenhirLib.EngineTypes.endp = _endpos__5_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.semv = _100;
                        MenhirLib.EngineTypes.startp = _startpos__100_;
                        MenhirLib.EngineTypes.endp = _endpos__100_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.semv = _3;
                          MenhirLib.EngineTypes.startp = _startpos__3_;
                          MenhirLib.EngineTypes.endp = _endpos__3_;
                          MenhirLib.EngineTypes.next = {
                            MenhirLib.EngineTypes.semv = _13;
                            MenhirLib.EngineTypes.startp = _startpos__13_;
                            MenhirLib.EngineTypes.endp = _endpos__13_;
                            MenhirLib.EngineTypes.next = {
                              MenhirLib.EngineTypes.state = _menhir_s;
                              MenhirLib.EngineTypes.semv = _12;
                              MenhirLib.EngineTypes.startp = _startpos__12_;
                              MenhirLib.EngineTypes.endp = _endpos__12_;
                              MenhirLib.EngineTypes.next = _menhir_stack;
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _11 : (Parsetree.expression) = Obj.magic _11 in
        let _10 : unit = Obj.magic _10 in
        let _9 : (Parsetree.core_type) = Obj.magic _9 in
        let _8 : unit = Obj.magic _8 in
        let xs0 : (string Location.loc list) = Obj.magic xs0 in
        let _6 : unit = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _100 : (
# 564 "parser_raw.mly"
       (string)
# 22221 "parser_raw.ml"
        ) = Obj.magic _100 in
        let _3 : (Asttypes.private_flag) = Obj.magic _3 in
        let _13 : (Parsetree.attributes) = Obj.magic _13 in
        let _12 : unit = Obj.magic _12 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__12_ in
        let _endpos = _endpos__11_ in
        let _v : ((string Location.loc * Asttypes.private_flag * Parsetree.class_field_kind) *
  Parsetree.attributes) = let _7 =
          let xs = xs0 in
          
# 2147 "parser_raw.mly"
    ( xs )
# 22235 "parser_raw.ml"
          
        in
        let _startpos__7_ = _startpos_xs0_ in
        let _4 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 3073 "parser_raw.mly"
           ( _1 )
# 22248 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 22259 "parser_raw.ml"
          
        in
        let _startpos__4_ = _startpos__100_ in
        let _2 =
          let _1 = _13 in
          
# 3372 "parser_raw.mly"
    ( _1 )
# 22268 "parser_raw.ml"
          
        in
        let _endpos__2_ = _endpos__13_ in
        let _startpos__2_ = _startpos__13_ in
        let _1 =
          let _1 = _12 in
          
# 3280 "parser_raw.mly"
         ( Override )
# 22278 "parser_raw.ml"
          
        in
        let _endpos__1_ = _endpos__12_ in
        let _startpos__1_ = _startpos__12_ in
        let _endpos = _endpos__11_ in
        let _symbolstartpos = if _startpos__1_ != _endpos__1_ then
          _startpos__1_
        else
          if _startpos__2_ != _endpos__2_ then
            _startpos__2_
          else
            if _startpos__3_ != _endpos__3_ then
              _startpos__3_
            else
              _startpos__4_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1629 "parser_raw.mly"
      ( let poly_exp_loc = (_startpos__7_, _endpos__11_) in
        let poly_exp =
          let exp, poly =
            (* it seems odd to use the global ~loc here while poly_exp_loc
               is tighter, but this is what ocamlyacc does;
               TODO improve parser.mly *)
            wrap_type_annotation ~loc:_sloc _7 _9 _11 in
          ghexp ~loc:poly_exp_loc (Pexp_poly(exp, Some poly)) in
        (_4, _3,
        Cfk_concrete (_1, poly_exp)), _2 )
# 22307 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 610 "parser_raw.mly"
       (string)
# 22328 "parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 3169 "parser_raw.mly"
           ( Lident _1 )
# 22336 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (
# 610 "parser_raw.mly"
       (string)
# 22367 "parser_raw.ml"
        ) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Longident.t) = 
# 3170 "parser_raw.mly"
                                 ( Ldot(_1, _3) )
# 22377 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Longident.t) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Longident.t) = let _endpos = _endpos__4_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3172 "parser_raw.mly"
      ( lapply ~loc:_sloc _1 _3 )
# 22423 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Longident.t) = let _loc__3_ = (_startpos__3_, _endpos__3_) in
        
# 3174 "parser_raw.mly"
      ( expecting _loc__3_ "module path" )
# 22461 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 610 "parser_raw.mly"
       (string)
# 22482 "parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 3165 "parser_raw.mly"
           ( Lident _1 )
# 22490 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (
# 610 "parser_raw.mly"
       (string)
# 22521 "parser_raw.ml"
        ) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Longident.t) = 
# 3166 "parser_raw.mly"
                             ( Ldot(_1, _3) )
# 22531 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = me;
          MenhirLib.EngineTypes.startp = _startpos_me_;
          MenhirLib.EngineTypes.endp = _endpos_me_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let me : (Parsetree.module_expr) = Obj.magic me in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_me_ in
        let _v : (Parsetree.module_expr) = 
# 1150 "parser_raw.mly"
      ( me )
# 22562 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = me00;
          MenhirLib.EngineTypes.startp = _startpos_me00_;
          MenhirLib.EngineTypes.endp = _endpos_me00_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _300;
            MenhirLib.EngineTypes.startp = _startpos__300_;
            MenhirLib.EngineTypes.endp = _endpos__300_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = mty00;
              MenhirLib.EngineTypes.startp = _startpos_mty00_;
              MenhirLib.EngineTypes.endp = _endpos_mty00_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _100;
                MenhirLib.EngineTypes.startp = _startpos__100_;
                MenhirLib.EngineTypes.endp = _endpos__100_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let me00 : (Parsetree.module_expr) = Obj.magic me00 in
        let _300 : unit = Obj.magic _300 in
        let mty00 : (Parsetree.module_type) = Obj.magic mty00 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos_me00_ in
        let _v : (Parsetree.module_expr) = let _1 =
          let _endpos_me0_ = _endpos_me00_ in
          let _startpos__10_ = _startpos__100_ in
          let me0 = me00 in
          let _30 = _300 in
          let mty0 = mty00 in
          let _10 = _100 in
          let _1 =
            let me = me0 in
            let _3 = _30 in
            let mty = mty0 in
            let _1 = _10 in
            
# 1153 "parser_raw.mly"
        ( Pmod_constraint(me, mty) )
# 22617 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_me0_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 731 "parser_raw.mly"
    ( mkmod ~loc:_sloc _1 )
# 22628 "parser_raw.ml"
          
        in
        
# 1157 "parser_raw.mly"
    ( _1 )
# 22634 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = body00;
          MenhirLib.EngineTypes.startp = _startpos_body00_;
          MenhirLib.EngineTypes.endp = _endpos_body00_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = arg00;
            MenhirLib.EngineTypes.startp = _startpos_arg00_;
            MenhirLib.EngineTypes.endp = _endpos_arg00_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let body00 : (Parsetree.module_expr) = Obj.magic body00 in
        let arg00 : (string Location.loc * Parsetree.module_type option) = Obj.magic arg00 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_arg00_ in
        let _endpos = _endpos_body00_ in
        let _v : (Parsetree.module_expr) = let _1 =
          let _endpos_body0_ = _endpos_body00_ in
          let _startpos_arg0_ = _startpos_arg00_ in
          let body0 = body00 in
          let arg0 = arg00 in
          let _1 =
            let body = body0 in
            let arg = arg0 in
            
# 1155 "parser_raw.mly"
        ( let (x, mty) = arg in
          Pmod_functor(x, mty, body) )
# 22674 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_body0_ in
          let _startpos__1_ = _startpos_arg0_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 731 "parser_raw.mly"
    ( mkmod ~loc:_sloc _1 )
# 22685 "parser_raw.ml"
          
        in
        
# 1157 "parser_raw.mly"
    ( _1 )
# 22691 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = mty;
          MenhirLib.EngineTypes.startp = _startpos_mty_;
          MenhirLib.EngineTypes.endp = _endpos_mty_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let mty : (Parsetree.module_type) = Obj.magic mty in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_mty_ in
        let _v : (Parsetree.module_type) = 
# 1372 "parser_raw.mly"
      ( mty )
# 22722 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = body00;
          MenhirLib.EngineTypes.startp = _startpos_body00_;
          MenhirLib.EngineTypes.endp = _endpos_body00_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = arg00;
            MenhirLib.EngineTypes.startp = _startpos_arg00_;
            MenhirLib.EngineTypes.endp = _endpos_arg00_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let body00 : (Parsetree.module_type) = Obj.magic body00 in
        let arg00 : (string Location.loc * Parsetree.module_type option) = Obj.magic arg00 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_arg00_ in
        let _endpos = _endpos_body00_ in
        let _v : (Parsetree.module_type) = let _1 =
          let _endpos_body0_ = _endpos_body00_ in
          let _startpos_arg0_ = _startpos_arg00_ in
          let body0 = body00 in
          let arg0 = arg00 in
          let _1 =
            let body = body0 in
            let arg = arg0 in
            
# 1375 "parser_raw.mly"
        ( let (x, mty) = arg in
          Pmty_functor(x, mty, body) )
# 22762 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_body0_ in
          let _startpos__1_ = _startpos_arg0_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 733 "parser_raw.mly"
    ( mkmty ~loc:_sloc _1 )
# 22773 "parser_raw.ml"
          
        in
        
# 1378 "parser_raw.mly"
    ( _1 )
# 22779 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = s;
            MenhirLib.EngineTypes.startp = _startpos_s_;
            MenhirLib.EngineTypes.endp = _endpos_s_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _10;
              MenhirLib.EngineTypes.startp = _startpos__10_;
              MenhirLib.EngineTypes.endp = _endpos__10_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let s : (Parsetree.structure) = Obj.magic s in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.module_expr) = let attrs =
          let _1 = _10 in
          
# 3372 "parser_raw.mly"
    ( _1 )
# 22824 "parser_raw.ml"
          
        in
        let _endpos = _endpos__4_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 999 "parser_raw.mly"
      ( mkmod ~loc:_sloc ~attrs (Pmod_structure s) )
# 22833 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _10;
              MenhirLib.EngineTypes.startp = _startpos__10_;
              MenhirLib.EngineTypes.endp = _endpos__10_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.structure) = Obj.magic _3 in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.module_expr) = let _2 =
          let _1 = _10 in
          
# 3372 "parser_raw.mly"
    ( _1 )
# 22878 "parser_raw.ml"
          
        in
        let _loc__4_ = (_startpos__4_, _endpos__4_) in
        let _loc__1_ = (_startpos__1_, _endpos__1_) in
        
# 1001 "parser_raw.mly"
      ( unclosed "struct" _loc__1_ "end" _loc__4_ )
# 22886 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = me;
          MenhirLib.EngineTypes.startp = _startpos_me_;
          MenhirLib.EngineTypes.endp = _endpos_me_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = args;
              MenhirLib.EngineTypes.startp = _startpos_args_;
              MenhirLib.EngineTypes.endp = _endpos_args_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _10;
                MenhirLib.EngineTypes.startp = _startpos__10_;
                MenhirLib.EngineTypes.endp = _endpos__10_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let me : (Parsetree.module_expr) = Obj.magic me in
        let _4 : unit = Obj.magic _4 in
        let args : ((string Location.loc * Parsetree.module_type option) list) = Obj.magic args in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_me_ in
        let _v : (Parsetree.module_expr) = let attrs =
          let _1 = _10 in
          
# 3372 "parser_raw.mly"
    ( _1 )
# 22937 "parser_raw.ml"
          
        in
        let _endpos = _endpos_me_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1003 "parser_raw.mly"
      ( wrap_mod_attrs ~loc:_sloc attrs (
          List.fold_left (fun acc (x, mty) ->
            mkmod ~loc:_sloc (Pmod_functor (x, mty, acc))
          ) me args
        ) )
# 22950 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = me;
          MenhirLib.EngineTypes.startp = _startpos_me_;
          MenhirLib.EngineTypes.endp = _endpos_me_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let me : (Parsetree.module_expr) = Obj.magic me in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_me_ in
        let _endpos = _endpos_me_ in
        let _v : (Parsetree.module_expr) = 
# 1009 "parser_raw.mly"
      ( me )
# 22975 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = attr;
          MenhirLib.EngineTypes.startp = _startpos_attr_;
          MenhirLib.EngineTypes.endp = _endpos_attr_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = me;
            MenhirLib.EngineTypes.startp = _startpos_me_;
            MenhirLib.EngineTypes.endp = _endpos_me_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let attr : (Parsetree.attribute) = Obj.magic attr in
        let me : (Parsetree.module_expr) = Obj.magic me in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_me_ in
        let _endpos = _endpos_attr_ in
        let _v : (Parsetree.module_expr) = 
# 1011 "parser_raw.mly"
      ( Mod.attr me attr )
# 23006 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1000;
          MenhirLib.EngineTypes.startp = _startpos__1000_;
          MenhirLib.EngineTypes.endp = _endpos__1000_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1000 : (Longident.t) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos__1000_ in
        let _v : (Parsetree.module_expr) = let _1 =
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _100 = _1000 in
          let _1 =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _10 = _100 in
            let x =
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _1 = _10 in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 23046 "parser_raw.ml"
              
            in
            
# 1015 "parser_raw.mly"
        ( Pmod_ident x )
# 23052 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__100_ in
          let _startpos__1_ = _startpos__100_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 731 "parser_raw.mly"
    ( mkmod ~loc:_sloc _1 )
# 23063 "parser_raw.ml"
          
        in
        
# 1027 "parser_raw.mly"
    ( _1 )
# 23069 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = me200;
          MenhirLib.EngineTypes.startp = _startpos_me200_;
          MenhirLib.EngineTypes.endp = _endpos_me200_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = me100;
            MenhirLib.EngineTypes.startp = _startpos_me100_;
            MenhirLib.EngineTypes.endp = _endpos_me100_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let me200 : (Parsetree.module_expr) = Obj.magic me200 in
        let me100 : (Parsetree.module_expr) = Obj.magic me100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_me100_ in
        let _endpos = _endpos_me200_ in
        let _v : (Parsetree.module_expr) = let _1 =
          let _endpos_me20_ = _endpos_me200_ in
          let _startpos_me10_ = _startpos_me100_ in
          let me20 = me200 in
          let me10 = me100 in
          let _1 =
            let me2 = me20 in
            let me1 = me10 in
            
# 1018 "parser_raw.mly"
        ( Pmod_apply(me1, me2) )
# 23108 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_me20_ in
          let _startpos__1_ = _startpos_me10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 731 "parser_raw.mly"
    ( mkmod ~loc:_sloc _1 )
# 23119 "parser_raw.ml"
          
        in
        
# 1027 "parser_raw.mly"
    ( _1 )
# 23125 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _300;
          MenhirLib.EngineTypes.startp = _startpos__300_;
          MenhirLib.EngineTypes.endp = _endpos__300_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _200;
            MenhirLib.EngineTypes.startp = _startpos__200_;
            MenhirLib.EngineTypes.endp = _endpos__200_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = me100;
              MenhirLib.EngineTypes.startp = _startpos_me100_;
              MenhirLib.EngineTypes.endp = _endpos_me100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _300 : unit = Obj.magic _300 in
        let _200 : unit = Obj.magic _200 in
        let me100 : (Parsetree.module_expr) = Obj.magic me100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_me100_ in
        let _endpos = _endpos__300_ in
        let _v : (Parsetree.module_expr) = let _1 =
          let _startpos_me10_ = _startpos_me100_ in
          let _endpos__30_ = _endpos__300_ in
          let _30 = _300 in
          let _20 = _200 in
          let me10 = me100 in
          let _1 =
            let _startpos_me1_ = _startpos_me10_ in
            let _endpos__3_ = _endpos__30_ in
            let _3 = _30 in
            let _2 = _20 in
            let me1 = me10 in
            let _endpos = _endpos__3_ in
            let _symbolstartpos = _startpos_me1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1021 "parser_raw.mly"
        ( (* TODO review mkmod location *)
          Pmod_apply(me1, mkmod ~loc:_sloc (Pmod_structure [])) )
# 23178 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__30_ in
          let _startpos__1_ = _startpos_me10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 731 "parser_raw.mly"
    ( mkmod ~loc:_sloc _1 )
# 23189 "parser_raw.ml"
          
        in
        
# 1027 "parser_raw.mly"
    ( _1 )
# 23195 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = ex00;
          MenhirLib.EngineTypes.startp = _startpos_ex00_;
          MenhirLib.EngineTypes.endp = _endpos_ex00_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let ex00 : (Parsetree.extension) = Obj.magic ex00 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ex00_ in
        let _endpos = _endpos_ex00_ in
        let _v : (Parsetree.module_expr) = let _1 =
          let _endpos_ex0_ = _endpos_ex00_ in
          let _startpos_ex0_ = _startpos_ex00_ in
          let ex0 = ex00 in
          let _1 =
            let ex = ex0 in
            
# 1025 "parser_raw.mly"
        ( Pmod_extension ex )
# 23226 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_ex0_ in
          let _startpos__1_ = _startpos_ex0_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 731 "parser_raw.mly"
    ( mkmod ~loc:_sloc _1 )
# 23237 "parser_raw.ml"
          
        in
        
# 1027 "parser_raw.mly"
    ( _1 )
# 23243 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _13;
          MenhirLib.EngineTypes.startp = _startpos__13_;
          MenhirLib.EngineTypes.endp = _endpos__13_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _12;
            MenhirLib.EngineTypes.startp = _startpos__12_;
            MenhirLib.EngineTypes.endp = _endpos__12_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _11;
                MenhirLib.EngineTypes.startp = _startpos__11_;
                MenhirLib.EngineTypes.endp = _endpos__11_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _10;
                  MenhirLib.EngineTypes.startp = _startpos__10_;
                  MenhirLib.EngineTypes.endp = _endpos__10_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = ext;
                    MenhirLib.EngineTypes.startp = _startpos_ext_;
                    MenhirLib.EngineTypes.endp = _endpos_ext_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _13 : (Parsetree.attributes) = Obj.magic _13 in
        let _12 : (Longident.t) = Obj.magic _12 in
        let _5 : unit = Obj.magic _5 in
        let _11 : (
# 610 "parser_raw.mly"
       (string)
# 23297 "parser_raw.ml"
        ) = Obj.magic _11 in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__13_ in
        let _v : (Parsetree.module_substitution * string Location.loc option) = let attrs2 =
          let _1 = _13 in
          
# 3368 "parser_raw.mly"
    ( _1 )
# 23310 "parser_raw.ml"
          
        in
        let _endpos_attrs2_ = _endpos__13_ in
        let body =
          let _endpos__1_ = _endpos__12_ in
          let _startpos__1_ = _startpos__12_ in
          let _1 = _12 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 23324 "parser_raw.ml"
          
        in
        let uid =
          let _endpos__1_ = _endpos__11_ in
          let _startpos__1_ = _startpos__11_ in
          let _1 = _11 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 23337 "parser_raw.ml"
          
        in
        let attrs1 =
          let _1 = _10 in
          
# 3372 "parser_raw.mly"
    ( _1 )
# 23345 "parser_raw.ml"
          
        in
        let _endpos = _endpos_attrs2_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1407 "parser_raw.mly"
  (
    let attrs = attrs1 @ attrs2 in
    let loc = make_loc _sloc in
    let docs = symbol_docs _sloc in
    Ms.mk uid body ~attrs ~loc ~docs, ext
  )
# 23359 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _11;
              MenhirLib.EngineTypes.startp = _startpos__11_;
              MenhirLib.EngineTypes.endp = _endpos__11_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _10;
                MenhirLib.EngineTypes.startp = _startpos__10_;
                MenhirLib.EngineTypes.endp = _endpos__10_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : unit = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _11 : (
# 610 "parser_raw.mly"
       (string)
# 23407 "parser_raw.ml"
        ) = Obj.magic _11 in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let _2 : (string Location.loc option) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v : (Parsetree.module_substitution * string Location.loc option) = let _4 =
          let _endpos__1_ = _endpos__11_ in
          let _startpos__1_ = _startpos__11_ in
          let _1 = _11 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 23425 "parser_raw.ml"
          
        in
        let _3 =
          let _1 = _10 in
          
# 3372 "parser_raw.mly"
    ( _1 )
# 23433 "parser_raw.ml"
          
        in
        let _loc__6_ = (_startpos__6_, _endpos__6_) in
        
# 1414 "parser_raw.mly"
    ( expecting _loc__6_ "module path" )
# 23440 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = s;
            MenhirLib.EngineTypes.startp = _startpos_s_;
            MenhirLib.EngineTypes.endp = _endpos_s_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _10;
              MenhirLib.EngineTypes.startp = _startpos__10_;
              MenhirLib.EngineTypes.endp = _endpos__10_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let s : (Parsetree.signature) = Obj.magic s in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.module_type) = let attrs =
          let _1 = _10 in
          
# 3372 "parser_raw.mly"
    ( _1 )
# 23485 "parser_raw.ml"
          
        in
        let _endpos = _endpos__4_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1266 "parser_raw.mly"
      ( mkmty ~loc:_sloc ~attrs (Pmty_signature s) )
# 23494 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _10;
              MenhirLib.EngineTypes.startp = _startpos__10_;
              MenhirLib.EngineTypes.endp = _endpos__10_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.signature) = Obj.magic _3 in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.module_type) = let _2 =
          let _1 = _10 in
          
# 3372 "parser_raw.mly"
    ( _1 )
# 23539 "parser_raw.ml"
          
        in
        let _loc__4_ = (_startpos__4_, _endpos__4_) in
        let _loc__1_ = (_startpos__1_, _endpos__1_) in
        
# 1268 "parser_raw.mly"
      ( unclosed "sig" _loc__1_ "end" _loc__4_ )
# 23547 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = mty;
          MenhirLib.EngineTypes.startp = _startpos_mty_;
          MenhirLib.EngineTypes.endp = _endpos_mty_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = args;
              MenhirLib.EngineTypes.startp = _startpos_args_;
              MenhirLib.EngineTypes.endp = _endpos_args_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _10;
                MenhirLib.EngineTypes.startp = _startpos__10_;
                MenhirLib.EngineTypes.endp = _endpos__10_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let mty : (Parsetree.module_type) = Obj.magic mty in
        let _4 : unit = Obj.magic _4 in
        let args : ((string Location.loc * Parsetree.module_type option) list) = Obj.magic args in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_mty_ in
        let _v : (Parsetree.module_type) = let attrs =
          let _1 = _10 in
          
# 3372 "parser_raw.mly"
    ( _1 )
# 23598 "parser_raw.ml"
          
        in
        let _endpos = _endpos_mty_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1272 "parser_raw.mly"
      ( wrap_mty_attrs ~loc:_sloc attrs (
          List.fold_left (fun acc (x, mty) ->
            mkmty ~loc:_sloc (Pmty_functor (x, mty, acc))
          ) mty args
        ) )
# 23611 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _10;
            MenhirLib.EngineTypes.startp = _startpos__10_;
            MenhirLib.EngineTypes.endp = _endpos__10_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.module_expr) = Obj.magic _5 in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.module_type) = let _4 =
          let _1 = _10 in
          
# 3372 "parser_raw.mly"
    ( _1 )
# 23662 "parser_raw.ml"
          
        in
        let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1278 "parser_raw.mly"
      ( mkmty ~loc:_sloc ~attrs:_4 (Pmty_typeof _5) )
# 23671 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.module_type) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.module_type) = 
# 1280 "parser_raw.mly"
      ( _2 )
# 23708 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.module_type) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.module_type) = let _loc__3_ = (_startpos__3_, _endpos__3_) in
        let _loc__1_ = (_startpos__1_, _endpos__1_) in
        
# 1282 "parser_raw.mly"
      ( unclosed "(" _loc__1_ ")" _loc__3_ )
# 23747 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.attribute) = Obj.magic _2 in
        let _1 : (Parsetree.module_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.module_type) = 
# 1284 "parser_raw.mly"
      ( Mty.attr _1 _2 )
# 23778 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1000;
          MenhirLib.EngineTypes.startp = _startpos__1000_;
          MenhirLib.EngineTypes.endp = _endpos__1000_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1000 : (Longident.t) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos__1000_ in
        let _v : (Parsetree.module_type) = let _1 =
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _100 = _1000 in
          let _1 =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _10 = _100 in
            let _1 =
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _1 = _10 in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 23818 "parser_raw.ml"
              
            in
            
# 1287 "parser_raw.mly"
        ( Pmty_ident _1 )
# 23824 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__100_ in
          let _startpos__1_ = _startpos__100_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 733 "parser_raw.mly"
    ( mkmty ~loc:_sloc _1 )
# 23835 "parser_raw.ml"
          
        in
        
# 1296 "parser_raw.mly"
    ( _1 )
# 23841 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _300;
          MenhirLib.EngineTypes.startp = _startpos__300_;
          MenhirLib.EngineTypes.endp = _endpos__300_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _200;
            MenhirLib.EngineTypes.startp = _startpos__200_;
            MenhirLib.EngineTypes.endp = _endpos__200_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _100;
              MenhirLib.EngineTypes.startp = _startpos__100_;
              MenhirLib.EngineTypes.endp = _endpos__100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _300 : (Parsetree.module_type) = Obj.magic _300 in
        let _200 : unit = Obj.magic _200 in
        let _100 : (Parsetree.module_type) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__300_ in
        let _v : (Parsetree.module_type) = let _1 =
          let _endpos__30_ = _endpos__300_ in
          let _startpos__10_ = _startpos__100_ in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            
# 1290 "parser_raw.mly"
        ( Pmty_functor(mknoloc "_", Some _1, _3) )
# 23888 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__30_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 733 "parser_raw.mly"
    ( mkmty ~loc:_sloc _1 )
# 23899 "parser_raw.ml"
          
        in
        
# 1296 "parser_raw.mly"
    ( _1 )
# 23905 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs0000;
          MenhirLib.EngineTypes.startp = _startpos_xs0000_;
          MenhirLib.EngineTypes.endp = _endpos_xs0000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _200;
            MenhirLib.EngineTypes.startp = _startpos__200_;
            MenhirLib.EngineTypes.endp = _endpos__200_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _100;
              MenhirLib.EngineTypes.startp = _startpos__100_;
              MenhirLib.EngineTypes.endp = _endpos__100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let xs0000 : (Parsetree.with_constraint list) = Obj.magic xs0000 in
        let _200 : unit = Obj.magic _200 in
        let _100 : (Parsetree.module_type) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos_xs0000_ in
        let _v : (Parsetree.module_type) = let _1 =
          let _endpos_xs000_ = _endpos_xs0000_ in
          let _startpos__10_ = _startpos__100_ in
          let xs000 = xs0000 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let xs00 = xs000 in
            let _2 = _20 in
            let _1 = _10 in
            let _3 =
              let xs0 = xs00 in
              let xs =
                let xs = xs0 in
                
# 253 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( List.rev xs )
# 23956 "parser_raw.ml"
                
              in
              
# 801 "parser_raw.mly"
    ( xs )
# 23962 "parser_raw.ml"
              
            in
            
# 1292 "parser_raw.mly"
        ( Pmty_with(_1, _3) )
# 23968 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_xs000_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 733 "parser_raw.mly"
    ( mkmty ~loc:_sloc _1 )
# 23979 "parser_raw.ml"
          
        in
        
# 1296 "parser_raw.mly"
    ( _1 )
# 23985 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _100 : (Parsetree.extension) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__100_ in
        let _v : (Parsetree.module_type) = let _1 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 1294 "parser_raw.mly"
        ( Pmty_extension _1 )
# 24016 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 733 "parser_raw.mly"
    ( mkmty ~loc:_sloc _1 )
# 24027 "parser_raw.ml"
          
        in
        
# 1296 "parser_raw.mly"
    ( _1 )
# 24033 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _12;
          MenhirLib.EngineTypes.startp = _startpos__12_;
          MenhirLib.EngineTypes.endp = _endpos__12_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = typ;
            MenhirLib.EngineTypes.startp = _startpos_typ_;
            MenhirLib.EngineTypes.endp = _endpos_typ_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _11;
              MenhirLib.EngineTypes.startp = _startpos__11_;
              MenhirLib.EngineTypes.endp = _endpos__11_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _10;
                MenhirLib.EngineTypes.startp = _startpos__10_;
                MenhirLib.EngineTypes.endp = _endpos__10_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = ext;
                  MenhirLib.EngineTypes.startp = _startpos_ext_;
                  MenhirLib.EngineTypes.endp = _endpos_ext_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _12 : (Parsetree.attributes) = Obj.magic _12 in
        let typ : (Parsetree.module_type option) = Obj.magic typ in
        let _11 : (string) = Obj.magic _11 in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__12_ in
        let _v : (Parsetree.module_type_declaration * string Location.loc option) = let attrs2 =
          let _1 = _12 in
          
# 3368 "parser_raw.mly"
    ( _1 )
# 24096 "parser_raw.ml"
          
        in
        let _endpos_attrs2_ = _endpos__12_ in
        let id =
          let _endpos__1_ = _endpos__11_ in
          let _startpos__1_ = _startpos__11_ in
          let _1 = _11 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 24110 "parser_raw.ml"
          
        in
        let attrs1 =
          let _1 = _10 in
          
# 3372 "parser_raw.mly"
    ( _1 )
# 24118 "parser_raw.ml"
          
        in
        let _endpos = _endpos_attrs2_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1221 "parser_raw.mly"
  (
    let attrs = attrs1 @ attrs2 in
    let loc = make_loc _sloc in
    let docs = symbol_docs _sloc in
    Mtd.mk id ?typ ~attrs ~loc ~docs, ext
  )
# 24132 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (string) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 3177 "parser_raw.mly"
          ( Lident _1 )
# 24157 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (string) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Longident.t) = 
# 3178 "parser_raw.mly"
                                ( Ldot(_1, _3) )
# 24194 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Asttypes.mutable_flag) = 
# 3237 "parser_raw.mly"
                                                ( Immutable )
# 24212 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.mutable_flag) = 
# 3238 "parser_raw.mly"
            ( Mutable )
# 24237 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Asttypes.mutable_flag * Asttypes.virtual_flag) = 
# 3245 "parser_raw.mly"
      ( Immutable, Concrete )
# 24255 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.mutable_flag * Asttypes.virtual_flag) = 
# 3247 "parser_raw.mly"
      ( Mutable, Concrete )
# 24280 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.mutable_flag * Asttypes.virtual_flag) = 
# 3249 "parser_raw.mly"
      ( Immutable, Virtual )
# 24305 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.mutable_flag * Asttypes.virtual_flag) = 
# 3252 "parser_raw.mly"
      ( Mutable, Virtual )
# 24336 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.mutable_flag * Asttypes.virtual_flag) = 
# 3252 "parser_raw.mly"
      ( Mutable, Virtual )
# 24367 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (string) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (string) = 
# 3210 "parser_raw.mly"
                    ( _2 )
# 24398 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _10 : (
# 564 "parser_raw.mly"
       (string)
# 24419 "parser_raw.ml"
        ) = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__10_ in
        let _v : (string Location.loc list) = let x =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 24434 "parser_raw.ml"
          
        in
        
# 221 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( [ x ] )
# 24440 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _10;
            MenhirLib.EngineTypes.startp = _startpos__10_;
            MenhirLib.EngineTypes.endp = _endpos__10_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (string Location.loc list) = Obj.magic xs in
        let _10 : (
# 564 "parser_raw.mly"
       (string)
# 24467 "parser_raw.ml"
        ) = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos_xs_ in
        let _v : (string Location.loc list) = let x =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 24482 "parser_raw.ml"
          
        in
        
# 223 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( x :: xs )
# 24488 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = s0;
          MenhirLib.EngineTypes.startp = _startpos_s0_;
          MenhirLib.EngineTypes.endp = _endpos_s0_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let s0 : (
# 602 "parser_raw.mly"
       (string * string option)
# 24509 "parser_raw.ml"
        ) = Obj.magic s0 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_s0_ in
        let _endpos = _endpos_s0_ in
        let _v : (string list) = let x =
          let s = s0 in
          
# 3207 "parser_raw.mly"
    ( fst s )
# 24519 "parser_raw.ml"
          
        in
        
# 221 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( [ x ] )
# 24525 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = s0;
            MenhirLib.EngineTypes.startp = _startpos_s0_;
            MenhirLib.EngineTypes.endp = _endpos_s0_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (string list) = Obj.magic xs in
        let s0 : (
# 602 "parser_raw.mly"
       (string * string option)
# 24552 "parser_raw.ml"
        ) = Obj.magic s0 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_s0_ in
        let _endpos = _endpos_xs_ in
        let _v : (string list) = let x =
          let s = s0 in
          
# 3207 "parser_raw.mly"
    ( fst s )
# 24562 "parser_raw.ml"
          
        in
        
# 223 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( x :: xs )
# 24568 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = ty;
          MenhirLib.EngineTypes.startp = _startpos_ty_;
          MenhirLib.EngineTypes.endp = _endpos_ty_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let ty : (Parsetree.core_type) = Obj.magic ty in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ty_ in
        let _endpos = _endpos_ty_ in
        let _v : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = let priv =
          
# 3233 "parser_raw.mly"
                                                ( Public )
# 24594 "parser_raw.ml"
          
        in
        
# 2604 "parser_raw.mly"
      ( (Ptype_abstract, priv, Some ty) )
# 24600 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = ty;
          MenhirLib.EngineTypes.startp = _startpos_ty_;
          MenhirLib.EngineTypes.endp = _endpos_ty_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _10;
            MenhirLib.EngineTypes.startp = _startpos__10_;
            MenhirLib.EngineTypes.endp = _endpos__10_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let ty : (Parsetree.core_type) = Obj.magic ty in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos_ty_ in
        let _v : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = let priv =
          let _1 = _10 in
          
# 3234 "parser_raw.mly"
            ( Private )
# 24633 "parser_raw.ml"
          
        in
        
# 2604 "parser_raw.mly"
      ( (Ptype_abstract, priv, Some ty) )
# 24639 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = cs;
          MenhirLib.EngineTypes.startp = _startpos_cs_;
          MenhirLib.EngineTypes.endp = _endpos_cs_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let cs : (Parsetree.constructor_declaration list) = Obj.magic cs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_cs_ in
        let _endpos = _endpos_cs_ in
        let _v : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = let priv =
          
# 3233 "parser_raw.mly"
                                                ( Public )
# 24665 "parser_raw.ml"
          
        in
        let oty =
          let _1 =
            
# 124 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( None )
# 24673 "parser_raw.ml"
            
          in
          
# 2620 "parser_raw.mly"
    ( _1 )
# 24679 "parser_raw.ml"
          
        in
        
# 2608 "parser_raw.mly"
      ( (Ptype_variant cs, priv, oty) )
# 24685 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = cs;
          MenhirLib.EngineTypes.startp = _startpos_cs_;
          MenhirLib.EngineTypes.endp = _endpos_cs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _10;
            MenhirLib.EngineTypes.startp = _startpos__10_;
            MenhirLib.EngineTypes.endp = _endpos__10_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let cs : (Parsetree.constructor_declaration list) = Obj.magic cs in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos_cs_ in
        let _v : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = let priv =
          let _1 = _10 in
          
# 3234 "parser_raw.mly"
            ( Private )
# 24718 "parser_raw.ml"
          
        in
        let oty =
          let _1 =
            
# 124 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( None )
# 24726 "parser_raw.ml"
            
          in
          
# 2620 "parser_raw.mly"
    ( _1 )
# 24732 "parser_raw.ml"
          
        in
        
# 2608 "parser_raw.mly"
      ( (Ptype_variant cs, priv, oty) )
# 24738 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = cs;
          MenhirLib.EngineTypes.startp = _startpos_cs_;
          MenhirLib.EngineTypes.endp = _endpos_cs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2000;
            MenhirLib.EngineTypes.startp = _startpos__2000_;
            MenhirLib.EngineTypes.endp = _endpos__2000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x000;
              MenhirLib.EngineTypes.startp = _startpos_x000_;
              MenhirLib.EngineTypes.endp = _endpos_x000_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let cs : (Parsetree.constructor_declaration list) = Obj.magic cs in
        let _2000 : unit = Obj.magic _2000 in
        let x000 : (Parsetree.core_type) = Obj.magic x000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x000_ in
        let _endpos = _endpos_cs_ in
        let _v : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = let priv =
          
# 3233 "parser_raw.mly"
                                                ( Public )
# 24776 "parser_raw.ml"
          
        in
        let oty =
          let _200 = _2000 in
          let x00 = x000 in
          let _1 =
            let _20 = _200 in
            let x0 = x00 in
            let x =
              let _2 = _20 in
              let x = x0 in
              
# 191 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( x )
# 24791 "parser_raw.ml"
              
            in
            
# 126 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( Some x )
# 24797 "parser_raw.ml"
            
          in
          
# 2620 "parser_raw.mly"
    ( _1 )
# 24803 "parser_raw.ml"
          
        in
        
# 2608 "parser_raw.mly"
      ( (Ptype_variant cs, priv, oty) )
# 24809 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = cs;
          MenhirLib.EngineTypes.startp = _startpos_cs_;
          MenhirLib.EngineTypes.endp = _endpos_cs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _10;
            MenhirLib.EngineTypes.startp = _startpos__10_;
            MenhirLib.EngineTypes.endp = _endpos__10_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2000;
              MenhirLib.EngineTypes.startp = _startpos__2000_;
              MenhirLib.EngineTypes.endp = _endpos__2000_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = x000;
                MenhirLib.EngineTypes.startp = _startpos_x000_;
                MenhirLib.EngineTypes.endp = _endpos_x000_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let cs : (Parsetree.constructor_declaration list) = Obj.magic cs in
        let _10 : unit = Obj.magic _10 in
        let _2000 : unit = Obj.magic _2000 in
        let x000 : (Parsetree.core_type) = Obj.magic x000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x000_ in
        let _endpos = _endpos_cs_ in
        let _v : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = let priv =
          let _1 = _10 in
          
# 3234 "parser_raw.mly"
            ( Private )
# 24854 "parser_raw.ml"
          
        in
        let oty =
          let _200 = _2000 in
          let x00 = x000 in
          let _1 =
            let _20 = _200 in
            let x0 = x00 in
            let x =
              let _2 = _20 in
              let x = x0 in
              
# 191 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( x )
# 24869 "parser_raw.ml"
              
            in
            
# 126 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( Some x )
# 24875 "parser_raw.ml"
            
          in
          
# 2620 "parser_raw.mly"
    ( _1 )
# 24881 "parser_raw.ml"
          
        in
        
# 2608 "parser_raw.mly"
      ( (Ptype_variant cs, priv, oty) )
# 24887 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__3_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = let priv =
          
# 3233 "parser_raw.mly"
                                                ( Public )
# 24913 "parser_raw.ml"
          
        in
        let oty =
          let _1 =
            
# 124 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( None )
# 24921 "parser_raw.ml"
            
          in
          
# 2620 "parser_raw.mly"
    ( _1 )
# 24927 "parser_raw.ml"
          
        in
        
# 2612 "parser_raw.mly"
      ( (Ptype_open, priv, oty) )
# 24933 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _10;
            MenhirLib.EngineTypes.startp = _startpos__10_;
            MenhirLib.EngineTypes.endp = _endpos__10_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = let priv =
          let _1 = _10 in
          
# 3234 "parser_raw.mly"
            ( Private )
# 24966 "parser_raw.ml"
          
        in
        let oty =
          let _1 =
            
# 124 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( None )
# 24974 "parser_raw.ml"
            
          in
          
# 2620 "parser_raw.mly"
    ( _1 )
# 24980 "parser_raw.ml"
          
        in
        
# 2612 "parser_raw.mly"
      ( (Ptype_open, priv, oty) )
# 24986 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2000;
            MenhirLib.EngineTypes.startp = _startpos__2000_;
            MenhirLib.EngineTypes.endp = _endpos__2000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x000;
              MenhirLib.EngineTypes.startp = _startpos_x000_;
              MenhirLib.EngineTypes.endp = _endpos_x000_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2000 : unit = Obj.magic _2000 in
        let x000 : (Parsetree.core_type) = Obj.magic x000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x000_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = let priv =
          
# 3233 "parser_raw.mly"
                                                ( Public )
# 25024 "parser_raw.ml"
          
        in
        let oty =
          let _200 = _2000 in
          let x00 = x000 in
          let _1 =
            let _20 = _200 in
            let x0 = x00 in
            let x =
              let _2 = _20 in
              let x = x0 in
              
# 191 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( x )
# 25039 "parser_raw.ml"
              
            in
            
# 126 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( Some x )
# 25045 "parser_raw.ml"
            
          in
          
# 2620 "parser_raw.mly"
    ( _1 )
# 25051 "parser_raw.ml"
          
        in
        
# 2612 "parser_raw.mly"
      ( (Ptype_open, priv, oty) )
# 25057 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _10;
            MenhirLib.EngineTypes.startp = _startpos__10_;
            MenhirLib.EngineTypes.endp = _endpos__10_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2000;
              MenhirLib.EngineTypes.startp = _startpos__2000_;
              MenhirLib.EngineTypes.endp = _endpos__2000_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = x000;
                MenhirLib.EngineTypes.startp = _startpos_x000_;
                MenhirLib.EngineTypes.endp = _endpos_x000_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _10 : unit = Obj.magic _10 in
        let _2000 : unit = Obj.magic _2000 in
        let x000 : (Parsetree.core_type) = Obj.magic x000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x000_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = let priv =
          let _1 = _10 in
          
# 3234 "parser_raw.mly"
            ( Private )
# 25102 "parser_raw.ml"
          
        in
        let oty =
          let _200 = _2000 in
          let x00 = x000 in
          let _1 =
            let _20 = _200 in
            let x0 = x00 in
            let x =
              let _2 = _20 in
              let x = x0 in
              
# 191 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( x )
# 25117 "parser_raw.ml"
              
            in
            
# 126 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( Some x )
# 25123 "parser_raw.ml"
            
          in
          
# 2620 "parser_raw.mly"
    ( _1 )
# 25129 "parser_raw.ml"
          
        in
        
# 2612 "parser_raw.mly"
      ( (Ptype_open, priv, oty) )
# 25135 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ls;
            MenhirLib.EngineTypes.startp = _startpos_ls_;
            MenhirLib.EngineTypes.endp = _endpos_ls_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let ls : (Parsetree.label_declaration list) = Obj.magic ls in
        let _3 : unit = Obj.magic _3 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__3_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = let priv =
          
# 3233 "parser_raw.mly"
                                                ( Public )
# 25173 "parser_raw.ml"
          
        in
        let oty =
          let _1 =
            
# 124 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( None )
# 25181 "parser_raw.ml"
            
          in
          
# 2620 "parser_raw.mly"
    ( _1 )
# 25187 "parser_raw.ml"
          
        in
        
# 2616 "parser_raw.mly"
      ( (Ptype_record ls, priv, oty) )
# 25193 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ls;
            MenhirLib.EngineTypes.startp = _startpos_ls_;
            MenhirLib.EngineTypes.endp = _endpos_ls_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _10;
                MenhirLib.EngineTypes.startp = _startpos__10_;
                MenhirLib.EngineTypes.endp = _endpos__10_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let ls : (Parsetree.label_declaration list) = Obj.magic ls in
        let _3 : unit = Obj.magic _3 in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = let priv =
          let _1 = _10 in
          
# 3234 "parser_raw.mly"
            ( Private )
# 25238 "parser_raw.ml"
          
        in
        let oty =
          let _1 =
            
# 124 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( None )
# 25246 "parser_raw.ml"
            
          in
          
# 2620 "parser_raw.mly"
    ( _1 )
# 25252 "parser_raw.ml"
          
        in
        
# 2616 "parser_raw.mly"
      ( (Ptype_record ls, priv, oty) )
# 25258 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ls;
            MenhirLib.EngineTypes.startp = _startpos_ls_;
            MenhirLib.EngineTypes.endp = _endpos_ls_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2000;
                MenhirLib.EngineTypes.startp = _startpos__2000_;
                MenhirLib.EngineTypes.endp = _endpos__2000_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = x000;
                  MenhirLib.EngineTypes.startp = _startpos_x000_;
                  MenhirLib.EngineTypes.endp = _endpos_x000_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let ls : (Parsetree.label_declaration list) = Obj.magic ls in
        let _3 : unit = Obj.magic _3 in
        let _2000 : unit = Obj.magic _2000 in
        let x000 : (Parsetree.core_type) = Obj.magic x000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x000_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = let priv =
          
# 3233 "parser_raw.mly"
                                                ( Public )
# 25308 "parser_raw.ml"
          
        in
        let oty =
          let _200 = _2000 in
          let x00 = x000 in
          let _1 =
            let _20 = _200 in
            let x0 = x00 in
            let x =
              let _2 = _20 in
              let x = x0 in
              
# 191 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( x )
# 25323 "parser_raw.ml"
              
            in
            
# 126 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( Some x )
# 25329 "parser_raw.ml"
            
          in
          
# 2620 "parser_raw.mly"
    ( _1 )
# 25335 "parser_raw.ml"
          
        in
        
# 2616 "parser_raw.mly"
      ( (Ptype_record ls, priv, oty) )
# 25341 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ls;
            MenhirLib.EngineTypes.startp = _startpos_ls_;
            MenhirLib.EngineTypes.endp = _endpos_ls_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _10;
                MenhirLib.EngineTypes.startp = _startpos__10_;
                MenhirLib.EngineTypes.endp = _endpos__10_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _2000;
                  MenhirLib.EngineTypes.startp = _startpos__2000_;
                  MenhirLib.EngineTypes.endp = _endpos__2000_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = x000;
                    MenhirLib.EngineTypes.startp = _startpos_x000_;
                    MenhirLib.EngineTypes.endp = _endpos_x000_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let ls : (Parsetree.label_declaration list) = Obj.magic ls in
        let _3 : unit = Obj.magic _3 in
        let _10 : unit = Obj.magic _10 in
        let _2000 : unit = Obj.magic _2000 in
        let x000 : (Parsetree.core_type) = Obj.magic x000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x000_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = let priv =
          let _1 = _10 in
          
# 3234 "parser_raw.mly"
            ( Private )
# 25398 "parser_raw.ml"
          
        in
        let oty =
          let _200 = _2000 in
          let x00 = x000 in
          let _1 =
            let _20 = _200 in
            let x0 = x00 in
            let x =
              let _2 = _20 in
              let x = x0 in
              
# 191 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( x )
# 25413 "parser_raw.ml"
              
            in
            
# 126 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( Some x )
# 25419 "parser_raw.ml"
            
          in
          
# 2620 "parser_raw.mly"
    ( _1 )
# 25425 "parser_raw.ml"
          
        in
        
# 2616 "parser_raw.mly"
      ( (Ptype_record ls, priv, oty) )
# 25431 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _11;
          MenhirLib.EngineTypes.startp = _startpos__11_;
          MenhirLib.EngineTypes.endp = _endpos__11_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = me;
            MenhirLib.EngineTypes.startp = _startpos_me_;
            MenhirLib.EngineTypes.endp = _endpos_me_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _10;
              MenhirLib.EngineTypes.startp = _startpos__10_;
              MenhirLib.EngineTypes.endp = _endpos__10_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = ext;
                MenhirLib.EngineTypes.startp = _startpos_ext_;
                MenhirLib.EngineTypes.endp = _endpos_ext_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _11 : (Parsetree.attributes) = Obj.magic _11 in
        let me : (Parsetree.module_expr) = Obj.magic me in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__11_ in
        let _v : (Parsetree.open_declaration * string Location.loc option) = let attrs2 =
          let _1 = _11 in
          
# 3368 "parser_raw.mly"
    ( _1 )
# 25482 "parser_raw.ml"
          
        in
        let _endpos_attrs2_ = _endpos__11_ in
        let attrs1 =
          let _1 = _10 in
          
# 3372 "parser_raw.mly"
    ( _1 )
# 25491 "parser_raw.ml"
          
        in
        let override =
          
# 3279 "parser_raw.mly"
                                                ( Fresh )
# 25498 "parser_raw.ml"
          
        in
        let _endpos = _endpos_attrs2_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1237 "parser_raw.mly"
  (
    let attrs = attrs1 @ attrs2 in
    let loc = make_loc _sloc in
    let docs = symbol_docs _sloc in
    Opn.mk me ~override ~attrs ~loc ~docs, ext
  )
# 25512 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _12;
          MenhirLib.EngineTypes.startp = _startpos__12_;
          MenhirLib.EngineTypes.endp = _endpos__12_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = me;
            MenhirLib.EngineTypes.startp = _startpos_me_;
            MenhirLib.EngineTypes.endp = _endpos_me_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _11;
              MenhirLib.EngineTypes.startp = _startpos__11_;
              MenhirLib.EngineTypes.endp = _endpos__11_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = ext;
                MenhirLib.EngineTypes.startp = _startpos_ext_;
                MenhirLib.EngineTypes.endp = _endpos_ext_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _10;
                  MenhirLib.EngineTypes.startp = _startpos__10_;
                  MenhirLib.EngineTypes.endp = _endpos__10_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _12 : (Parsetree.attributes) = Obj.magic _12 in
        let me : (Parsetree.module_expr) = Obj.magic me in
        let _11 : (Parsetree.attributes) = Obj.magic _11 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _10 : unit = Obj.magic _10 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__12_ in
        let _v : (Parsetree.open_declaration * string Location.loc option) = let attrs2 =
          let _1 = _12 in
          
# 3368 "parser_raw.mly"
    ( _1 )
# 25569 "parser_raw.ml"
          
        in
        let _endpos_attrs2_ = _endpos__12_ in
        let attrs1 =
          let _1 = _11 in
          
# 3372 "parser_raw.mly"
    ( _1 )
# 25578 "parser_raw.ml"
          
        in
        let override =
          let _1 = _10 in
          
# 3280 "parser_raw.mly"
         ( Override )
# 25586 "parser_raw.ml"
          
        in
        let _endpos = _endpos_attrs2_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1237 "parser_raw.mly"
  (
    let attrs = attrs1 @ attrs2 in
    let loc = make_loc _sloc in
    let docs = symbol_docs _sloc in
    Opn.mk me ~override ~attrs ~loc ~docs, ext
  )
# 25600 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _12;
          MenhirLib.EngineTypes.startp = _startpos__12_;
          MenhirLib.EngineTypes.endp = _endpos__12_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _11;
            MenhirLib.EngineTypes.startp = _startpos__11_;
            MenhirLib.EngineTypes.endp = _endpos__11_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _10;
              MenhirLib.EngineTypes.startp = _startpos__10_;
              MenhirLib.EngineTypes.endp = _endpos__10_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = ext;
                MenhirLib.EngineTypes.startp = _startpos_ext_;
                MenhirLib.EngineTypes.endp = _endpos_ext_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _12 : (Parsetree.attributes) = Obj.magic _12 in
        let _11 : (Longident.t) = Obj.magic _11 in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__12_ in
        let _v : (Parsetree.open_description * string Location.loc option) = let attrs2 =
          let _1 = _12 in
          
# 3368 "parser_raw.mly"
    ( _1 )
# 25651 "parser_raw.ml"
          
        in
        let _endpos_attrs2_ = _endpos__12_ in
        let id =
          let _endpos__1_ = _endpos__11_ in
          let _startpos__1_ = _startpos__11_ in
          let _1 = _11 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 25665 "parser_raw.ml"
          
        in
        let attrs1 =
          let _1 = _10 in
          
# 3372 "parser_raw.mly"
    ( _1 )
# 25673 "parser_raw.ml"
          
        in
        let override =
          
# 3279 "parser_raw.mly"
                                                ( Fresh )
# 25680 "parser_raw.ml"
          
        in
        let _endpos = _endpos_attrs2_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1251 "parser_raw.mly"
  (
    let attrs = attrs1 @ attrs2 in
    let loc = make_loc _sloc in
    let docs = symbol_docs _sloc in
    Opn.mk id ~override ~attrs ~loc ~docs, ext
  )
# 25694 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _13;
          MenhirLib.EngineTypes.startp = _startpos__13_;
          MenhirLib.EngineTypes.endp = _endpos__13_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _12;
            MenhirLib.EngineTypes.startp = _startpos__12_;
            MenhirLib.EngineTypes.endp = _endpos__12_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _11;
              MenhirLib.EngineTypes.startp = _startpos__11_;
              MenhirLib.EngineTypes.endp = _endpos__11_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = ext;
                MenhirLib.EngineTypes.startp = _startpos_ext_;
                MenhirLib.EngineTypes.endp = _endpos_ext_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _10;
                  MenhirLib.EngineTypes.startp = _startpos__10_;
                  MenhirLib.EngineTypes.endp = _endpos__10_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _13 : (Parsetree.attributes) = Obj.magic _13 in
        let _12 : (Longident.t) = Obj.magic _12 in
        let _11 : (Parsetree.attributes) = Obj.magic _11 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _10 : unit = Obj.magic _10 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__13_ in
        let _v : (Parsetree.open_description * string Location.loc option) = let attrs2 =
          let _1 = _13 in
          
# 3368 "parser_raw.mly"
    ( _1 )
# 25751 "parser_raw.ml"
          
        in
        let _endpos_attrs2_ = _endpos__13_ in
        let id =
          let _endpos__1_ = _endpos__12_ in
          let _startpos__1_ = _startpos__12_ in
          let _1 = _12 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 25765 "parser_raw.ml"
          
        in
        let attrs1 =
          let _1 = _11 in
          
# 3372 "parser_raw.mly"
    ( _1 )
# 25773 "parser_raw.ml"
          
        in
        let override =
          let _1 = _10 in
          
# 3280 "parser_raw.mly"
         ( Override )
# 25781 "parser_raw.ml"
          
        in
        let _endpos = _endpos_attrs2_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1251 "parser_raw.mly"
  (
    let attrs = attrs1 @ attrs2 in
    let loc = make_loc _sloc in
    let docs = symbol_docs _sloc in
    Opn.mk id ~override ~attrs ~loc ~docs, ext
  )
# 25795 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 587 "parser_raw.mly"
       (string)
# 25816 "parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3100 "parser_raw.mly"
             ( _1 )
# 25824 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 545 "parser_raw.mly"
       (string)
# 25845 "parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3101 "parser_raw.mly"
          ( _1 )
# 25853 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 546 "parser_raw.mly"
       (string)
# 25874 "parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3102 "parser_raw.mly"
          ( _1 )
# 25882 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (
# 544 "parser_raw.mly"
       (string)
# 25915 "parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (string) = 
# 3103 "parser_raw.mly"
                        ( "."^ _1 ^"()" )
# 25923 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (
# 544 "parser_raw.mly"
       (string)
# 25962 "parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (string) = 
# 3104 "parser_raw.mly"
                                  ( "."^ _1 ^ "()<-" )
# 25970 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (
# 544 "parser_raw.mly"
       (string)
# 26003 "parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (string) = 
# 3105 "parser_raw.mly"
                            ( "."^ _1 ^"[]" )
# 26011 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (
# 544 "parser_raw.mly"
       (string)
# 26050 "parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (string) = 
# 3106 "parser_raw.mly"
                                      ( "."^ _1 ^ "[]<-" )
# 26058 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (
# 544 "parser_raw.mly"
       (string)
# 26091 "parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (string) = 
# 3107 "parser_raw.mly"
                        ( "."^ _1 ^"{}" )
# 26099 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (
# 544 "parser_raw.mly"
       (string)
# 26138 "parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (string) = 
# 3108 "parser_raw.mly"
                                  ( "."^ _1 ^ "{}<-" )
# 26146 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 599 "parser_raw.mly"
       (string)
# 26167 "parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3109 "parser_raw.mly"
           ( _1 )
# 26175 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3110 "parser_raw.mly"
         ( "!" )
# 26200 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = op0;
          MenhirLib.EngineTypes.startp = _startpos_op0_;
          MenhirLib.EngineTypes.endp = _endpos_op0_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let op0 : (
# 539 "parser_raw.mly"
       (string)
# 26221 "parser_raw.ml"
        ) = Obj.magic op0 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_op0_ in
        let _endpos = _endpos_op0_ in
        let _v : (string) = let _1 =
          let op = op0 in
          
# 3114 "parser_raw.mly"
                  ( op )
# 26231 "parser_raw.ml"
          
        in
        
# 3111 "parser_raw.mly"
                   ( _1 )
# 26237 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = op0;
          MenhirLib.EngineTypes.startp = _startpos_op0_;
          MenhirLib.EngineTypes.endp = _endpos_op0_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let op0 : (
# 540 "parser_raw.mly"
       (string)
# 26258 "parser_raw.ml"
        ) = Obj.magic op0 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_op0_ in
        let _endpos = _endpos_op0_ in
        let _v : (string) = let _1 =
          let op = op0 in
          
# 3115 "parser_raw.mly"
                  ( op )
# 26268 "parser_raw.ml"
          
        in
        
# 3111 "parser_raw.mly"
                   ( _1 )
# 26274 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = op0;
          MenhirLib.EngineTypes.startp = _startpos_op0_;
          MenhirLib.EngineTypes.endp = _endpos_op0_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let op0 : (
# 541 "parser_raw.mly"
       (string)
# 26295 "parser_raw.ml"
        ) = Obj.magic op0 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_op0_ in
        let _endpos = _endpos_op0_ in
        let _v : (string) = let _1 =
          let op = op0 in
          
# 3116 "parser_raw.mly"
                  ( op )
# 26305 "parser_raw.ml"
          
        in
        
# 3111 "parser_raw.mly"
                   ( _1 )
# 26311 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = op0;
          MenhirLib.EngineTypes.startp = _startpos_op0_;
          MenhirLib.EngineTypes.endp = _endpos_op0_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let op0 : (
# 542 "parser_raw.mly"
       (string)
# 26332 "parser_raw.ml"
        ) = Obj.magic op0 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_op0_ in
        let _endpos = _endpos_op0_ in
        let _v : (string) = let _1 =
          let op = op0 in
          
# 3117 "parser_raw.mly"
                  ( op )
# 26342 "parser_raw.ml"
          
        in
        
# 3111 "parser_raw.mly"
                   ( _1 )
# 26348 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = op0;
          MenhirLib.EngineTypes.startp = _startpos_op0_;
          MenhirLib.EngineTypes.endp = _endpos_op0_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let op0 : (
# 543 "parser_raw.mly"
       (string)
# 26369 "parser_raw.ml"
        ) = Obj.magic op0 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_op0_ in
        let _endpos = _endpos_op0_ in
        let _v : (string) = let _1 =
          let op = op0 in
          
# 3118 "parser_raw.mly"
                  ( op )
# 26379 "parser_raw.ml"
          
        in
        
# 3111 "parser_raw.mly"
                   ( _1 )
# 26385 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__10_ in
        let _v : (string) = let _1 =
          let _1 = _10 in
          
# 3119 "parser_raw.mly"
         ("+")
# 26412 "parser_raw.ml"
          
        in
        
# 3111 "parser_raw.mly"
                   ( _1 )
# 26418 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__10_ in
        let _v : (string) = let _1 =
          let _1 = _10 in
          
# 3120 "parser_raw.mly"
            ("+.")
# 26445 "parser_raw.ml"
          
        in
        
# 3111 "parser_raw.mly"
                   ( _1 )
# 26451 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__10_ in
        let _v : (string) = let _1 =
          let _1 = _10 in
          
# 3121 "parser_raw.mly"
           ("+=")
# 26478 "parser_raw.ml"
          
        in
        
# 3111 "parser_raw.mly"
                   ( _1 )
# 26484 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__10_ in
        let _v : (string) = let _1 =
          let _1 = _10 in
          
# 3122 "parser_raw.mly"
          ("-")
# 26511 "parser_raw.ml"
          
        in
        
# 3111 "parser_raw.mly"
                   ( _1 )
# 26517 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__10_ in
        let _v : (string) = let _1 =
          let _1 = _10 in
          
# 3123 "parser_raw.mly"
             ("-.")
# 26544 "parser_raw.ml"
          
        in
        
# 3111 "parser_raw.mly"
                   ( _1 )
# 26550 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__10_ in
        let _v : (string) = let _1 =
          let _1 = _10 in
          
# 3124 "parser_raw.mly"
         ("*")
# 26577 "parser_raw.ml"
          
        in
        
# 3111 "parser_raw.mly"
                   ( _1 )
# 26583 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__10_ in
        let _v : (string) = let _1 =
          let _1 = _10 in
          
# 3125 "parser_raw.mly"
            ("%")
# 26610 "parser_raw.ml"
          
        in
        
# 3111 "parser_raw.mly"
                   ( _1 )
# 26616 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__10_ in
        let _v : (string) = let _1 =
          let _1 = _10 in
          
# 3126 "parser_raw.mly"
          ("=")
# 26643 "parser_raw.ml"
          
        in
        
# 3111 "parser_raw.mly"
                   ( _1 )
# 26649 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__10_ in
        let _v : (string) = let _1 =
          let _1 = _10 in
          
# 3127 "parser_raw.mly"
         ("<")
# 26676 "parser_raw.ml"
          
        in
        
# 3111 "parser_raw.mly"
                   ( _1 )
# 26682 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__10_ in
        let _v : (string) = let _1 =
          let _1 = _10 in
          
# 3128 "parser_raw.mly"
            (">")
# 26709 "parser_raw.ml"
          
        in
        
# 3111 "parser_raw.mly"
                   ( _1 )
# 26715 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__10_ in
        let _v : (string) = let _1 =
          let _1 = _10 in
          
# 3129 "parser_raw.mly"
       ("or")
# 26742 "parser_raw.ml"
          
        in
        
# 3111 "parser_raw.mly"
                   ( _1 )
# 26748 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__10_ in
        let _v : (string) = let _1 =
          let _1 = _10 in
          
# 3130 "parser_raw.mly"
           ("||")
# 26775 "parser_raw.ml"
          
        in
        
# 3111 "parser_raw.mly"
                   ( _1 )
# 26781 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__10_ in
        let _v : (string) = let _1 =
          let _1 = _10 in
          
# 3131 "parser_raw.mly"
              ("&")
# 26808 "parser_raw.ml"
          
        in
        
# 3111 "parser_raw.mly"
                   ( _1 )
# 26814 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__10_ in
        let _v : (string) = let _1 =
          let _1 = _10 in
          
# 3132 "parser_raw.mly"
               ("&&")
# 26841 "parser_raw.ml"
          
        in
        
# 3111 "parser_raw.mly"
                   ( _1 )
# 26847 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__10_ in
        let _v : (string) = let _1 =
          let _1 = _10 in
          
# 3133 "parser_raw.mly"
               (":=")
# 26874 "parser_raw.ml"
          
        in
        
# 3111 "parser_raw.mly"
                   ( _1 )
# 26880 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (bool) = 
# 3027 "parser_raw.mly"
              ( true )
# 26905 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (bool) = 
# 3028 "parser_raw.mly"
    ( false )
# 26923 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (unit option) = 
# 114 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( None )
# 26941 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : unit = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (unit option) = 
# 116 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( Some x )
# 26966 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (unit option) = 
# 114 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( None )
# 26984 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : unit = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (unit option) = 
# 116 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( Some x )
# 27009 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (string Location.loc option) = 
# 114 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( None )
# 27027 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _11;
            MenhirLib.EngineTypes.startp = _startpos__11_;
            MenhirLib.EngineTypes.endp = _endpos__11_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _100 : (
# 564 "parser_raw.mly"
       (string)
# 27053 "parser_raw.ml"
        ) = Obj.magic _100 in
        let _11 : unit = Obj.magic _11 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__11_ in
        let _endpos = _endpos__100_ in
        let _v : (string Location.loc option) = let x =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 = _11 in
          let x =
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _1 = _10 in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 27074 "parser_raw.ml"
            
          in
          
# 183 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( x )
# 27080 "parser_raw.ml"
          
        in
        
# 116 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( Some x )
# 27086 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.core_type option) = 
# 114 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( None )
# 27104 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = x0;
          MenhirLib.EngineTypes.startp = _startpos_x0_;
          MenhirLib.EngineTypes.endp = _endpos_x0_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _10;
            MenhirLib.EngineTypes.startp = _startpos__10_;
            MenhirLib.EngineTypes.endp = _endpos__10_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let x0 : (Parsetree.core_type) = Obj.magic x0 in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos_x0_ in
        let _v : (Parsetree.core_type option) = let x =
          let x = x0 in
          let _1 = _10 in
          
# 183 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( x )
# 27138 "parser_raw.ml"
          
        in
        
# 116 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( Some x )
# 27144 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.expression option) = 
# 114 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( None )
# 27162 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = x0;
          MenhirLib.EngineTypes.startp = _startpos_x0_;
          MenhirLib.EngineTypes.endp = _endpos_x0_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _10;
            MenhirLib.EngineTypes.startp = _startpos__10_;
            MenhirLib.EngineTypes.endp = _endpos__10_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let x0 : (Parsetree.expression) = Obj.magic x0 in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos_x0_ in
        let _v : (Parsetree.expression option) = let x =
          let x = x0 in
          let _1 = _10 in
          
# 183 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( x )
# 27196 "parser_raw.ml"
          
        in
        
# 116 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( Some x )
# 27202 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.module_type option) = 
# 114 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( None )
# 27220 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = x0;
          MenhirLib.EngineTypes.startp = _startpos_x0_;
          MenhirLib.EngineTypes.endp = _endpos_x0_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _10;
            MenhirLib.EngineTypes.startp = _startpos__10_;
            MenhirLib.EngineTypes.endp = _endpos__10_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let x0 : (Parsetree.module_type) = Obj.magic x0 in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos_x0_ in
        let _v : (Parsetree.module_type option) = let x =
          let x = x0 in
          let _1 = _10 in
          
# 183 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( x )
# 27254 "parser_raw.ml"
          
        in
        
# 116 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( Some x )
# 27260 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.pattern option) = 
# 114 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( None )
# 27278 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = x0;
          MenhirLib.EngineTypes.startp = _startpos_x0_;
          MenhirLib.EngineTypes.endp = _endpos_x0_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _10;
            MenhirLib.EngineTypes.startp = _startpos__10_;
            MenhirLib.EngineTypes.endp = _endpos__10_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let x0 : (Parsetree.pattern) = Obj.magic x0 in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos_x0_ in
        let _v : (Parsetree.pattern option) = let x =
          let x = x0 in
          let _1 = _10 in
          
# 183 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( x )
# 27312 "parser_raw.ml"
          
        in
        
# 116 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( Some x )
# 27318 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.expression option) = 
# 114 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( None )
# 27336 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = x0;
          MenhirLib.EngineTypes.startp = _startpos_x0_;
          MenhirLib.EngineTypes.endp = _endpos_x0_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _10;
            MenhirLib.EngineTypes.startp = _startpos__10_;
            MenhirLib.EngineTypes.endp = _endpos__10_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let x0 : (Parsetree.expression) = Obj.magic x0 in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos_x0_ in
        let _v : (Parsetree.expression option) = let x =
          let x = x0 in
          let _1 = _10 in
          
# 183 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( x )
# 27370 "parser_raw.ml"
          
        in
        
# 116 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( Some x )
# 27376 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : ((Parsetree.core_type option * Parsetree.core_type option) option) = 
# 114 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( None )
# 27394 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Parsetree.core_type option * Parsetree.core_type option) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : ((Parsetree.core_type option * Parsetree.core_type option) option) = 
# 116 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( Some x )
# 27419 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 581 "parser_raw.mly"
       (string)
# 27440 "parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3291 "parser_raw.mly"
              ( _1 )
# 27448 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (
# 564 "parser_raw.mly"
       (string)
# 27480 "parser_raw.ml"
        ) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (string) = 
# 3292 "parser_raw.mly"
                           ( _2 )
# 27489 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = mty;
            MenhirLib.EngineTypes.startp = _startpos_mty_;
            MenhirLib.EngineTypes.endp = _endpos_mty_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = me;
                MenhirLib.EngineTypes.startp = _startpos_me_;
                MenhirLib.EngineTypes.endp = _endpos_me_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let mty : (Parsetree.module_type) = Obj.magic mty in
        let _3 : unit = Obj.magic _3 in
        let me : (Parsetree.module_expr) = Obj.magic me in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.module_expr) = let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1034 "parser_raw.mly"
      ( mkmod ~loc:_sloc (Pmod_constraint(me, mty)) )
# 27541 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.module_type) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.module_expr) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.module_expr) = let _loc__5_ = (_startpos__5_, _endpos__5_) in
        let _loc__1_ = (_startpos__1_, _endpos__1_) in
        
# 1036 "parser_raw.mly"
      ( unclosed "(" _loc__1_ ")" _loc__5_ )
# 27592 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = me;
            MenhirLib.EngineTypes.startp = _startpos_me_;
            MenhirLib.EngineTypes.endp = _endpos_me_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let me : (Parsetree.module_expr) = Obj.magic me in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.module_expr) = 
# 1039 "parser_raw.mly"
      ( me (* TODO consider reloc *) )
# 27629 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.module_expr) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.module_expr) = let _loc__3_ = (_startpos__3_, _endpos__3_) in
        let _loc__1_ = (_startpos__1_, _endpos__1_) in
        
# 1041 "parser_raw.mly"
      ( unclosed "(" _loc__1_ ")" _loc__3_ )
# 27668 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = e0;
            MenhirLib.EngineTypes.startp = _startpos_e0_;
            MenhirLib.EngineTypes.endp = _endpos_e0_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _10;
              MenhirLib.EngineTypes.startp = _startpos__10_;
              MenhirLib.EngineTypes.endp = _endpos__10_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let e0 : (Parsetree.expression) = Obj.magic e0 in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.module_expr) = let e =
          let e = e0 in
          
# 1057 "parser_raw.mly"
      ( e )
# 27719 "parser_raw.ml"
          
        in
        let attrs =
          let _1 = _10 in
          
# 3372 "parser_raw.mly"
    ( _1 )
# 27727 "parser_raw.ml"
          
        in
        let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1045 "parser_raw.mly"
      ( mkmod ~loc:_sloc ~attrs (Pmod_unpack e) )
# 27736 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _10000;
            MenhirLib.EngineTypes.startp = _startpos__10000_;
            MenhirLib.EngineTypes.endp = _endpos__10000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _20;
              MenhirLib.EngineTypes.startp = _startpos__20_;
              MenhirLib.EngineTypes.endp = _endpos__20_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = e0;
                MenhirLib.EngineTypes.startp = _startpos_e0_;
                MenhirLib.EngineTypes.endp = _endpos_e0_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _10;
                  MenhirLib.EngineTypes.startp = _startpos__10_;
                  MenhirLib.EngineTypes.endp = _endpos__10_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _10000 : (Parsetree.module_type) = Obj.magic _10000 in
        let _20 : unit = Obj.magic _20 in
        let e0 : (Parsetree.expression) = Obj.magic e0 in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.module_expr) = let e =
          let _startpos_e_ = _startpos_e0_ in
          let _endpos__1000_ = _endpos__10000_ in
          let _startpos__1000_ = _startpos__10000_ in
          let _1000 = _10000 in
          let _2 = _20 in
          let e = e0 in
          let ty =
            let _endpos__100_ = _endpos__1000_ in
            let _startpos__100_ = _startpos__1000_ in
            let _100 = _1000 in
            let _1 =
              let _endpos__10_ = _endpos__100_ in
              let _startpos__10_ = _startpos__100_ in
              let _10 = _100 in
              let _1 =
                let _1 = _10 in
                
# 3003 "parser_raw.mly"
      ( Ptyp_package (package_type_of_module_type _1) )
# 27814 "parser_raw.ml"
                
              in
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 725 "parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 27825 "parser_raw.ml"
              
            in
            
# 3004 "parser_raw.mly"
      ( _1 )
# 27831 "parser_raw.ml"
            
          in
          let _endpos_ty_ = _endpos__1000_ in
          let _endpos = _endpos_ty_ in
          let _startpos = _startpos_e_ in
          let _loc = (_startpos, _endpos) in
          
# 1059 "parser_raw.mly"
      ( ghexp ~loc:_loc (Pexp_constraint (e, ty)) )
# 27841 "parser_raw.ml"
          
        in
        let attrs =
          let _1 = _10 in
          
# 3372 "parser_raw.mly"
    ( _1 )
# 27849 "parser_raw.ml"
          
        in
        let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1045 "parser_raw.mly"
      ( mkmod ~loc:_sloc ~attrs (Pmod_unpack e) )
# 27858 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _10010;
            MenhirLib.EngineTypes.startp = _startpos__10010_;
            MenhirLib.EngineTypes.endp = _endpos__10010_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _40;
              MenhirLib.EngineTypes.startp = _startpos__40_;
              MenhirLib.EngineTypes.endp = _endpos__40_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _10000;
                MenhirLib.EngineTypes.startp = _startpos__10000_;
                MenhirLib.EngineTypes.endp = _endpos__10000_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _20;
                  MenhirLib.EngineTypes.startp = _startpos__20_;
                  MenhirLib.EngineTypes.endp = _endpos__20_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = e0;
                    MenhirLib.EngineTypes.startp = _startpos_e0_;
                    MenhirLib.EngineTypes.endp = _endpos_e0_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = _10;
                      MenhirLib.EngineTypes.startp = _startpos__10_;
                      MenhirLib.EngineTypes.endp = _endpos__10_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.semv = _2;
                        MenhirLib.EngineTypes.startp = _startpos__2_;
                        MenhirLib.EngineTypes.endp = _endpos__2_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _10010 : (Parsetree.module_type) = Obj.magic _10010 in
        let _40 : unit = Obj.magic _40 in
        let _10000 : (Parsetree.module_type) = Obj.magic _10000 in
        let _20 : unit = Obj.magic _20 in
        let e0 : (Parsetree.expression) = Obj.magic e0 in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.module_expr) = let e =
          let _startpos_e_ = _startpos_e0_ in
          let _endpos__1001_ = _endpos__10010_ in
          let _startpos__1001_ = _startpos__10010_ in
          let _endpos__1000_ = _endpos__10000_ in
          let _startpos__1000_ = _startpos__10000_ in
          let _1001 = _10010 in
          let _4 = _40 in
          let _1000 = _10000 in
          let _2 = _20 in
          let e = e0 in
          let ty2 =
            let _endpos__100_ = _endpos__1001_ in
            let _startpos__100_ = _startpos__1001_ in
            let _100 = _1001 in
            let _1 =
              let _endpos__10_ = _endpos__100_ in
              let _startpos__10_ = _startpos__100_ in
              let _10 = _100 in
              let _1 =
                let _1 = _10 in
                
# 3003 "parser_raw.mly"
      ( Ptyp_package (package_type_of_module_type _1) )
# 27952 "parser_raw.ml"
                
              in
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 725 "parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 27963 "parser_raw.ml"
              
            in
            
# 3004 "parser_raw.mly"
      ( _1 )
# 27969 "parser_raw.ml"
            
          in
          let _endpos_ty2_ = _endpos__1001_ in
          let ty1 =
            let _endpos__100_ = _endpos__1000_ in
            let _startpos__100_ = _startpos__1000_ in
            let _100 = _1000 in
            let _1 =
              let _endpos__10_ = _endpos__100_ in
              let _startpos__10_ = _startpos__100_ in
              let _10 = _100 in
              let _1 =
                let _1 = _10 in
                
# 3003 "parser_raw.mly"
      ( Ptyp_package (package_type_of_module_type _1) )
# 27986 "parser_raw.ml"
                
              in
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 725 "parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 27997 "parser_raw.ml"
              
            in
            
# 3004 "parser_raw.mly"
      ( _1 )
# 28003 "parser_raw.ml"
            
          in
          let _endpos = _endpos_ty2_ in
          let _startpos = _startpos_e_ in
          let _loc = (_startpos, _endpos) in
          
# 1061 "parser_raw.mly"
      ( ghexp ~loc:_loc (Pexp_coerce (e, Some ty1, ty2)) )
# 28012 "parser_raw.ml"
          
        in
        let attrs =
          let _1 = _10 in
          
# 3372 "parser_raw.mly"
    ( _1 )
# 28020 "parser_raw.ml"
          
        in
        let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1045 "parser_raw.mly"
      ( mkmod ~loc:_sloc ~attrs (Pmod_unpack e) )
# 28029 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _10000;
            MenhirLib.EngineTypes.startp = _startpos__10000_;
            MenhirLib.EngineTypes.endp = _endpos__10000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _20;
              MenhirLib.EngineTypes.startp = _startpos__20_;
              MenhirLib.EngineTypes.endp = _endpos__20_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = e0;
                MenhirLib.EngineTypes.startp = _startpos_e0_;
                MenhirLib.EngineTypes.endp = _endpos_e0_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _10;
                  MenhirLib.EngineTypes.startp = _startpos__10_;
                  MenhirLib.EngineTypes.endp = _endpos__10_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _10000 : (Parsetree.module_type) = Obj.magic _10000 in
        let _20 : unit = Obj.magic _20 in
        let e0 : (Parsetree.expression) = Obj.magic e0 in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.module_expr) = let e =
          let _startpos_e_ = _startpos_e0_ in
          let _endpos__1000_ = _endpos__10000_ in
          let _startpos__1000_ = _startpos__10000_ in
          let _1000 = _10000 in
          let _2 = _20 in
          let e = e0 in
          let ty2 =
            let _endpos__100_ = _endpos__1000_ in
            let _startpos__100_ = _startpos__1000_ in
            let _100 = _1000 in
            let _1 =
              let _endpos__10_ = _endpos__100_ in
              let _startpos__10_ = _startpos__100_ in
              let _10 = _100 in
              let _1 =
                let _1 = _10 in
                
# 3003 "parser_raw.mly"
      ( Ptyp_package (package_type_of_module_type _1) )
# 28107 "parser_raw.ml"
                
              in
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 725 "parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 28118 "parser_raw.ml"
              
            in
            
# 3004 "parser_raw.mly"
      ( _1 )
# 28124 "parser_raw.ml"
            
          in
          let _endpos_ty2_ = _endpos__1000_ in
          let _endpos = _endpos_ty2_ in
          let _startpos = _startpos_e_ in
          let _loc = (_startpos, _endpos) in
          
# 1063 "parser_raw.mly"
      ( ghexp ~loc:_loc (Pexp_coerce (e, None, ty2)) )
# 28134 "parser_raw.ml"
          
        in
        let attrs =
          let _1 = _10 in
          
# 3372 "parser_raw.mly"
    ( _1 )
# 28142 "parser_raw.ml"
          
        in
        let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1045 "parser_raw.mly"
      ( mkmod ~loc:_sloc ~attrs (Pmod_unpack e) )
# 28151 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _10;
                MenhirLib.EngineTypes.startp = _startpos__10_;
                MenhirLib.EngineTypes.endp = _endpos__10_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : unit = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v : (Parsetree.module_expr) = let _3 =
          let _1 = _10 in
          
# 3372 "parser_raw.mly"
    ( _1 )
# 28208 "parser_raw.ml"
          
        in
        let _loc__6_ = (_startpos__6_, _endpos__6_) in
        let _loc__1_ = (_startpos__1_, _endpos__1_) in
        
# 1047 "parser_raw.mly"
      ( unclosed "(" _loc__1_ ")" _loc__6_ )
# 28216 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _10;
                MenhirLib.EngineTypes.startp = _startpos__10_;
                MenhirLib.EngineTypes.endp = _endpos__10_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : unit = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v : (Parsetree.module_expr) = let _3 =
          let _1 = _10 in
          
# 3372 "parser_raw.mly"
    ( _1 )
# 28273 "parser_raw.ml"
          
        in
        let _loc__6_ = (_startpos__6_, _endpos__6_) in
        let _loc__1_ = (_startpos__1_, _endpos__1_) in
        
# 1049 "parser_raw.mly"
      ( unclosed "(" _loc__1_ ")" _loc__6_ )
# 28281 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _10;
              MenhirLib.EngineTypes.startp = _startpos__10_;
              MenhirLib.EngineTypes.endp = _endpos__10_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.module_expr) = let _3 =
          let _1 = _10 in
          
# 3372 "parser_raw.mly"
    ( _1 )
# 28332 "parser_raw.ml"
          
        in
        let _loc__5_ = (_startpos__5_, _endpos__5_) in
        let _loc__1_ = (_startpos__1_, _endpos__1_) in
        
# 1051 "parser_raw.mly"
      ( unclosed "(" _loc__1_ ")" _loc__5_ )
# 28340 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (
# 679 "parser_raw.mly"
      (Parsetree.core_type)
# 28371 "parser_raw.ml"
        ) = 
# 956 "parser_raw.mly"
    ( _1 )
# 28375 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (
# 681 "parser_raw.mly"
      (Parsetree.expression)
# 28406 "parser_raw.ml"
        ) = 
# 960 "parser_raw.mly"
    ( _1 )
# 28410 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (
# 683 "parser_raw.mly"
      (Parsetree.pattern)
# 28441 "parser_raw.ml"
        ) = 
# 964 "parser_raw.mly"
    ( _1 )
# 28445 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _30;
          MenhirLib.EngineTypes.startp = _startpos__30_;
          MenhirLib.EngineTypes.endp = _endpos__30_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _20;
            MenhirLib.EngineTypes.startp = _startpos__20_;
            MenhirLib.EngineTypes.endp = _endpos__20_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _10;
              MenhirLib.EngineTypes.startp = _startpos__10_;
              MenhirLib.EngineTypes.endp = _endpos__10_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _30 : (Parsetree.pattern) = Obj.magic _30 in
        let _20 : unit = Obj.magic _20 in
        let _10 : (Parsetree.pattern) = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__30_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__3_ = _endpos__30_ in
          let _endpos__2_ = _endpos__20_ in
          let _startpos__2_ = _startpos__20_ in
          let _startpos__1_ = _startpos__10_ in
          let _3 = _30 in
          let _2 = _20 in
          let _1 = _10 in
          let _endpos = _endpos__3_ in
          let _symbolstartpos = _startpos__1_ in
          let _loc__2_ = (_startpos__2_, _endpos__2_) in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2357 "parser_raw.mly"
      ( mkpat_cons ~loc:_sloc _loc__2_ (ghpat ~loc:_sloc (Ppat_tuple[_1;_3])) )
# 28494 "parser_raw.ml"
          
        in
        
# 2347 "parser_raw.mly"
      ( _1 )
# 28500 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _20;
          MenhirLib.EngineTypes.startp = _startpos__20_;
          MenhirLib.EngineTypes.endp = _endpos__20_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _10;
            MenhirLib.EngineTypes.startp = _startpos__10_;
            MenhirLib.EngineTypes.endp = _endpos__10_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _20 : (Parsetree.attribute) = Obj.magic _20 in
        let _10 : (Parsetree.pattern) = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__20_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _2 = _20 in
          let _1 = _10 in
          
# 2359 "parser_raw.mly"
      ( Pat.attr _1 _2 )
# 28534 "parser_raw.ml"
          
        in
        
# 2347 "parser_raw.mly"
      ( _1 )
# 28540 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _10 : (Parsetree.pattern) = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__10_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _1 = _10 in
          
# 2361 "parser_raw.mly"
      ( _1 )
# 28567 "parser_raw.ml"
          
        in
        
# 2347 "parser_raw.mly"
      ( _1 )
# 28573 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _10000;
          MenhirLib.EngineTypes.startp = _startpos__10000_;
          MenhirLib.EngineTypes.endp = _endpos__10000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2000;
            MenhirLib.EngineTypes.startp = _startpos__2000_;
            MenhirLib.EngineTypes.endp = _endpos__2000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1100;
              MenhirLib.EngineTypes.startp = _startpos__1100_;
              MenhirLib.EngineTypes.endp = _endpos__1100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _10000 : (string) = Obj.magic _10000 in
        let _2000 : unit = Obj.magic _2000 in
        let _1100 : (Parsetree.pattern) = Obj.magic _1100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1100_ in
        let _endpos = _endpos__10000_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _startpos__110_ = _startpos__1100_ in
          let _endpos__1000_ = _endpos__10000_ in
          let _startpos__1000_ = _startpos__10000_ in
          let _1000 = _10000 in
          let _200 = _2000 in
          let _110 = _1100 in
          let _1 =
            let _startpos__11_ = _startpos__110_ in
            let _endpos__100_ = _endpos__1000_ in
            let _startpos__100_ = _startpos__1000_ in
            let _100 = _1000 in
            let _20 = _200 in
            let _11 = _110 in
            let _1 =
              let _endpos__10_ = _endpos__100_ in
              let _startpos__10_ = _startpos__100_ in
              let _10 = _100 in
              let _2 = _20 in
              let _1 = _11 in
              let _3 =
                let _endpos__1_ = _endpos__10_ in
                let _startpos__1_ = _startpos__10_ in
                let _1 = _10 in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 28637 "parser_raw.ml"
                
              in
              
# 2364 "parser_raw.mly"
        ( Ppat_alias(_1, _3) )
# 28643 "parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__100_ in
            let _startpos__1_ = _startpos__11_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 723 "parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 28654 "parser_raw.ml"
            
          in
          
# 2375 "parser_raw.mly"
    ( _1 )
# 28660 "parser_raw.ml"
          
        in
        
# 2347 "parser_raw.mly"
      ( _1 )
# 28666 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3000;
          MenhirLib.EngineTypes.startp = _startpos__3000_;
          MenhirLib.EngineTypes.endp = _endpos__3000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2000;
            MenhirLib.EngineTypes.startp = _startpos__2000_;
            MenhirLib.EngineTypes.endp = _endpos__2000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1000;
              MenhirLib.EngineTypes.startp = _startpos__1000_;
              MenhirLib.EngineTypes.endp = _endpos__1000_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3000 : unit = Obj.magic _3000 in
        let _2000 : unit = Obj.magic _2000 in
        let _1000 : (Parsetree.pattern) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos__3000_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__300_ = _endpos__3000_ in
          let _startpos__300_ = _startpos__3000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _300 = _3000 in
          let _200 = _2000 in
          let _100 = _1000 in
          let _1 =
            let _endpos__30_ = _endpos__300_ in
            let _startpos__30_ = _startpos__300_ in
            let _startpos__10_ = _startpos__100_ in
            let _30 = _300 in
            let _20 = _200 in
            let _10 = _100 in
            let _1 =
              let _endpos__3_ = _endpos__30_ in
              let _startpos__3_ = _startpos__30_ in
              let _3 = _30 in
              let _2 = _20 in
              let _1 = _10 in
              let _loc__3_ = (_startpos__3_, _endpos__3_) in
              
# 2366 "parser_raw.mly"
        ( expecting _loc__3_ "identifier" )
# 28724 "parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__30_ in
            let _startpos__1_ = _startpos__10_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 723 "parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 28735 "parser_raw.ml"
            
          in
          
# 2375 "parser_raw.mly"
    ( _1 )
# 28741 "parser_raw.ml"
          
        in
        
# 2347 "parser_raw.mly"
      ( _1 )
# 28747 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1000;
          MenhirLib.EngineTypes.startp = _startpos__1000_;
          MenhirLib.EngineTypes.endp = _endpos__1000_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1000 : (Parsetree.pattern list) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos__1000_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _100 = _1000 in
          let _1 =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _10 = _100 in
            let _1 =
              let _1 = _10 in
              
# 2368 "parser_raw.mly"
        ( Ppat_tuple(List.rev _1) )
# 28782 "parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 723 "parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 28793 "parser_raw.ml"
            
          in
          
# 2375 "parser_raw.mly"
    ( _1 )
# 28799 "parser_raw.ml"
          
        in
        
# 2347 "parser_raw.mly"
      ( _1 )
# 28805 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3000;
          MenhirLib.EngineTypes.startp = _startpos__3000_;
          MenhirLib.EngineTypes.endp = _endpos__3000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2000;
            MenhirLib.EngineTypes.startp = _startpos__2000_;
            MenhirLib.EngineTypes.endp = _endpos__2000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1000;
              MenhirLib.EngineTypes.startp = _startpos__1000_;
              MenhirLib.EngineTypes.endp = _endpos__1000_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3000 : unit = Obj.magic _3000 in
        let _2000 : unit = Obj.magic _2000 in
        let _1000 : (Parsetree.pattern) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos__3000_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__300_ = _endpos__3000_ in
          let _startpos__300_ = _startpos__3000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _300 = _3000 in
          let _200 = _2000 in
          let _100 = _1000 in
          let _1 =
            let _endpos__30_ = _endpos__300_ in
            let _startpos__30_ = _startpos__300_ in
            let _startpos__10_ = _startpos__100_ in
            let _30 = _300 in
            let _20 = _200 in
            let _10 = _100 in
            let _1 =
              let _endpos__3_ = _endpos__30_ in
              let _startpos__3_ = _startpos__30_ in
              let _3 = _30 in
              let _2 = _20 in
              let _1 = _10 in
              let _loc__3_ = (_startpos__3_, _endpos__3_) in
              
# 2370 "parser_raw.mly"
        ( expecting _loc__3_ "pattern" )
# 28863 "parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__30_ in
            let _startpos__1_ = _startpos__10_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 723 "parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 28874 "parser_raw.ml"
            
          in
          
# 2375 "parser_raw.mly"
    ( _1 )
# 28880 "parser_raw.ml"
          
        in
        
# 2347 "parser_raw.mly"
      ( _1 )
# 28886 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3000;
          MenhirLib.EngineTypes.startp = _startpos__3000_;
          MenhirLib.EngineTypes.endp = _endpos__3000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2000;
            MenhirLib.EngineTypes.startp = _startpos__2000_;
            MenhirLib.EngineTypes.endp = _endpos__2000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1000;
              MenhirLib.EngineTypes.startp = _startpos__1000_;
              MenhirLib.EngineTypes.endp = _endpos__1000_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3000 : (Parsetree.pattern) = Obj.magic _3000 in
        let _2000 : unit = Obj.magic _2000 in
        let _1000 : (Parsetree.pattern) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos__3000_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__300_ = _endpos__3000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _300 = _3000 in
          let _200 = _2000 in
          let _100 = _1000 in
          let _1 =
            let _endpos__30_ = _endpos__300_ in
            let _startpos__10_ = _startpos__100_ in
            let _30 = _300 in
            let _20 = _200 in
            let _10 = _100 in
            let _1 =
              let _3 = _30 in
              let _2 = _20 in
              let _1 = _10 in
              
# 2372 "parser_raw.mly"
        ( Ppat_or(_1, _3) )
# 28939 "parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__30_ in
            let _startpos__1_ = _startpos__10_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 723 "parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 28950 "parser_raw.ml"
            
          in
          
# 2375 "parser_raw.mly"
    ( _1 )
# 28956 "parser_raw.ml"
          
        in
        
# 2347 "parser_raw.mly"
      ( _1 )
# 28962 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3000;
          MenhirLib.EngineTypes.startp = _startpos__3000_;
          MenhirLib.EngineTypes.endp = _endpos__3000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2000;
            MenhirLib.EngineTypes.startp = _startpos__2000_;
            MenhirLib.EngineTypes.endp = _endpos__2000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1000;
              MenhirLib.EngineTypes.startp = _startpos__1000_;
              MenhirLib.EngineTypes.endp = _endpos__1000_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3000 : unit = Obj.magic _3000 in
        let _2000 : unit = Obj.magic _2000 in
        let _1000 : (Parsetree.pattern) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos__3000_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__300_ = _endpos__3000_ in
          let _startpos__300_ = _startpos__3000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _300 = _3000 in
          let _200 = _2000 in
          let _100 = _1000 in
          let _1 =
            let _endpos__30_ = _endpos__300_ in
            let _startpos__30_ = _startpos__300_ in
            let _startpos__10_ = _startpos__100_ in
            let _30 = _300 in
            let _20 = _200 in
            let _10 = _100 in
            let _1 =
              let _endpos__3_ = _endpos__30_ in
              let _startpos__3_ = _startpos__30_ in
              let _3 = _30 in
              let _2 = _20 in
              let _1 = _10 in
              let _loc__3_ = (_startpos__3_, _endpos__3_) in
              
# 2374 "parser_raw.mly"
        ( expecting _loc__3_ "pattern" )
# 29020 "parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__30_ in
            let _startpos__1_ = _startpos__10_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 723 "parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 29031 "parser_raw.ml"
            
          in
          
# 2375 "parser_raw.mly"
    ( _1 )
# 29037 "parser_raw.ml"
          
        in
        
# 2347 "parser_raw.mly"
      ( _1 )
# 29043 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _100;
            MenhirLib.EngineTypes.startp = _startpos__100_;
            MenhirLib.EngineTypes.endp = _endpos__100_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _11;
              MenhirLib.EngineTypes.startp = _startpos__11_;
              MenhirLib.EngineTypes.endp = _endpos__11_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.pattern) = Obj.magic _3 in
        let _100 : (Parsetree.attributes) = Obj.magic _100 in
        let _11 : (string Location.loc option) = Obj.magic _11 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.pattern) = let _2 =
          let _10 = _100 in
          let _1 = _11 in
          let _2 =
            let _1 = _10 in
            
# 3372 "parser_raw.mly"
    ( _1 )
# 29091 "parser_raw.ml"
            
          in
          
# 3383 "parser_raw.mly"
                 ( _1, _2 )
# 29097 "parser_raw.ml"
          
        in
        let _endpos = _endpos__3_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2349 "parser_raw.mly"
      ( mkpat_attrs ~loc:_sloc (Ppat_exception _3) _2)
# 29106 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.pattern) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern list) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.pattern list) = 
# 2467 "parser_raw.mly"
                                           ( _3 :: _1 )
# 29143 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.pattern) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.pattern list) = 
# 2468 "parser_raw.mly"
                       ( [_3; _1] )
# 29180 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.pattern list) = let _loc__3_ = (_startpos__3_, _endpos__3_) in
        
# 2469 "parser_raw.mly"
                     ( expecting _loc__3_ "pattern" )
# 29218 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.pattern) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern list) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.pattern list) = 
# 2467 "parser_raw.mly"
                                           ( _3 :: _1 )
# 29255 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.pattern) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.pattern list) = 
# 2468 "parser_raw.mly"
                       ( [_3; _1] )
# 29292 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.pattern list) = let _loc__3_ = (_startpos__3_, _endpos__3_) in
        
# 2469 "parser_raw.mly"
                     ( expecting _loc__3_ "pattern" )
# 29330 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.pattern) = 
# 2379 "parser_raw.mly"
      ( _1 )
# 29355 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _200;
          MenhirLib.EngineTypes.startp = _startpos__200_;
          MenhirLib.EngineTypes.endp = _endpos__200_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1000;
            MenhirLib.EngineTypes.startp = _startpos__1000_;
            MenhirLib.EngineTypes.endp = _endpos__1000_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _200 : (Parsetree.pattern) = Obj.magic _200 in
        let _1000 : (Longident.t) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos__200_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__20_ = _endpos__200_ in
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _20 = _200 in
          let _100 = _1000 in
          let _1 =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _2 = _20 in
            let _10 = _100 in
            let _1 =
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _1 = _10 in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 29404 "parser_raw.ml"
              
            in
            
# 2382 "parser_raw.mly"
        ( Ppat_construct(_1, Some _2) )
# 29410 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__20_ in
          let _startpos__1_ = _startpos__100_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 723 "parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 29421 "parser_raw.ml"
          
        in
        
# 2385 "parser_raw.mly"
      ( _1 )
# 29427 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _200;
          MenhirLib.EngineTypes.startp = _startpos__200_;
          MenhirLib.EngineTypes.endp = _endpos__200_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _100;
            MenhirLib.EngineTypes.startp = _startpos__100_;
            MenhirLib.EngineTypes.endp = _endpos__100_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _200 : (Parsetree.pattern) = Obj.magic _200 in
        let _100 : (string) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__200_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__20_ = _endpos__200_ in
          let _startpos__10_ = _startpos__100_ in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _2 = _20 in
            let _1 = _10 in
            
# 2384 "parser_raw.mly"
        ( Ppat_variant(_1, Some _2) )
# 29466 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__20_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 723 "parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 29477 "parser_raw.ml"
          
        in
        
# 2385 "parser_raw.mly"
      ( _1 )
# 29483 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _100;
            MenhirLib.EngineTypes.startp = _startpos__100_;
            MenhirLib.EngineTypes.endp = _endpos__100_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _11;
              MenhirLib.EngineTypes.startp = _startpos__11_;
              MenhirLib.EngineTypes.endp = _endpos__11_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.pattern) = Obj.magic _3 in
        let _100 : (Parsetree.attributes) = Obj.magic _100 in
        let _11 : (string Location.loc option) = Obj.magic _11 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.pattern) = let _2 =
          let _10 = _100 in
          let _1 = _11 in
          let _2 =
            let _1 = _10 in
            
# 3372 "parser_raw.mly"
    ( _1 )
# 29531 "parser_raw.ml"
            
          in
          
# 3383 "parser_raw.mly"
                 ( _1, _2 )
# 29537 "parser_raw.ml"
          
        in
        let _endpos = _endpos__3_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2387 "parser_raw.mly"
      ( mkpat_attrs ~loc:_sloc (Ppat_lazy _3) _2)
# 29546 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _30;
          MenhirLib.EngineTypes.startp = _startpos__30_;
          MenhirLib.EngineTypes.endp = _endpos__30_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _20;
            MenhirLib.EngineTypes.startp = _startpos__20_;
            MenhirLib.EngineTypes.endp = _endpos__20_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _10;
              MenhirLib.EngineTypes.startp = _startpos__10_;
              MenhirLib.EngineTypes.endp = _endpos__10_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _30 : (Parsetree.pattern) = Obj.magic _30 in
        let _20 : unit = Obj.magic _20 in
        let _10 : (Parsetree.pattern) = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__30_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__3_ = _endpos__30_ in
          let _endpos__2_ = _endpos__20_ in
          let _startpos__2_ = _startpos__20_ in
          let _startpos__1_ = _startpos__10_ in
          let _3 = _30 in
          let _2 = _20 in
          let _1 = _10 in
          let _endpos = _endpos__3_ in
          let _symbolstartpos = _startpos__1_ in
          let _loc__2_ = (_startpos__2_, _endpos__2_) in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2357 "parser_raw.mly"
      ( mkpat_cons ~loc:_sloc _loc__2_ (ghpat ~loc:_sloc (Ppat_tuple[_1;_3])) )
# 29595 "parser_raw.ml"
          
        in
        
# 2353 "parser_raw.mly"
      ( _1 )
# 29601 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _20;
          MenhirLib.EngineTypes.startp = _startpos__20_;
          MenhirLib.EngineTypes.endp = _endpos__20_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _10;
            MenhirLib.EngineTypes.startp = _startpos__10_;
            MenhirLib.EngineTypes.endp = _endpos__10_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _20 : (Parsetree.attribute) = Obj.magic _20 in
        let _10 : (Parsetree.pattern) = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__20_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _2 = _20 in
          let _1 = _10 in
          
# 2359 "parser_raw.mly"
      ( Pat.attr _1 _2 )
# 29635 "parser_raw.ml"
          
        in
        
# 2353 "parser_raw.mly"
      ( _1 )
# 29641 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _10 : (Parsetree.pattern) = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__10_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _1 = _10 in
          
# 2361 "parser_raw.mly"
      ( _1 )
# 29668 "parser_raw.ml"
          
        in
        
# 2353 "parser_raw.mly"
      ( _1 )
# 29674 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _10000;
          MenhirLib.EngineTypes.startp = _startpos__10000_;
          MenhirLib.EngineTypes.endp = _endpos__10000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2000;
            MenhirLib.EngineTypes.startp = _startpos__2000_;
            MenhirLib.EngineTypes.endp = _endpos__2000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1100;
              MenhirLib.EngineTypes.startp = _startpos__1100_;
              MenhirLib.EngineTypes.endp = _endpos__1100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _10000 : (string) = Obj.magic _10000 in
        let _2000 : unit = Obj.magic _2000 in
        let _1100 : (Parsetree.pattern) = Obj.magic _1100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1100_ in
        let _endpos = _endpos__10000_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _startpos__110_ = _startpos__1100_ in
          let _endpos__1000_ = _endpos__10000_ in
          let _startpos__1000_ = _startpos__10000_ in
          let _1000 = _10000 in
          let _200 = _2000 in
          let _110 = _1100 in
          let _1 =
            let _startpos__11_ = _startpos__110_ in
            let _endpos__100_ = _endpos__1000_ in
            let _startpos__100_ = _startpos__1000_ in
            let _100 = _1000 in
            let _20 = _200 in
            let _11 = _110 in
            let _1 =
              let _endpos__10_ = _endpos__100_ in
              let _startpos__10_ = _startpos__100_ in
              let _10 = _100 in
              let _2 = _20 in
              let _1 = _11 in
              let _3 =
                let _endpos__1_ = _endpos__10_ in
                let _startpos__1_ = _startpos__10_ in
                let _1 = _10 in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 29738 "parser_raw.ml"
                
              in
              
# 2364 "parser_raw.mly"
        ( Ppat_alias(_1, _3) )
# 29744 "parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__100_ in
            let _startpos__1_ = _startpos__11_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 723 "parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 29755 "parser_raw.ml"
            
          in
          
# 2375 "parser_raw.mly"
    ( _1 )
# 29761 "parser_raw.ml"
          
        in
        
# 2353 "parser_raw.mly"
      ( _1 )
# 29767 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3000;
          MenhirLib.EngineTypes.startp = _startpos__3000_;
          MenhirLib.EngineTypes.endp = _endpos__3000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2000;
            MenhirLib.EngineTypes.startp = _startpos__2000_;
            MenhirLib.EngineTypes.endp = _endpos__2000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1000;
              MenhirLib.EngineTypes.startp = _startpos__1000_;
              MenhirLib.EngineTypes.endp = _endpos__1000_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3000 : unit = Obj.magic _3000 in
        let _2000 : unit = Obj.magic _2000 in
        let _1000 : (Parsetree.pattern) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos__3000_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__300_ = _endpos__3000_ in
          let _startpos__300_ = _startpos__3000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _300 = _3000 in
          let _200 = _2000 in
          let _100 = _1000 in
          let _1 =
            let _endpos__30_ = _endpos__300_ in
            let _startpos__30_ = _startpos__300_ in
            let _startpos__10_ = _startpos__100_ in
            let _30 = _300 in
            let _20 = _200 in
            let _10 = _100 in
            let _1 =
              let _endpos__3_ = _endpos__30_ in
              let _startpos__3_ = _startpos__30_ in
              let _3 = _30 in
              let _2 = _20 in
              let _1 = _10 in
              let _loc__3_ = (_startpos__3_, _endpos__3_) in
              
# 2366 "parser_raw.mly"
        ( expecting _loc__3_ "identifier" )
# 29825 "parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__30_ in
            let _startpos__1_ = _startpos__10_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 723 "parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 29836 "parser_raw.ml"
            
          in
          
# 2375 "parser_raw.mly"
    ( _1 )
# 29842 "parser_raw.ml"
          
        in
        
# 2353 "parser_raw.mly"
      ( _1 )
# 29848 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1000;
          MenhirLib.EngineTypes.startp = _startpos__1000_;
          MenhirLib.EngineTypes.endp = _endpos__1000_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1000 : (Parsetree.pattern list) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos__1000_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _100 = _1000 in
          let _1 =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _10 = _100 in
            let _1 =
              let _1 = _10 in
              
# 2368 "parser_raw.mly"
        ( Ppat_tuple(List.rev _1) )
# 29883 "parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 723 "parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 29894 "parser_raw.ml"
            
          in
          
# 2375 "parser_raw.mly"
    ( _1 )
# 29900 "parser_raw.ml"
          
        in
        
# 2353 "parser_raw.mly"
      ( _1 )
# 29906 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3000;
          MenhirLib.EngineTypes.startp = _startpos__3000_;
          MenhirLib.EngineTypes.endp = _endpos__3000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2000;
            MenhirLib.EngineTypes.startp = _startpos__2000_;
            MenhirLib.EngineTypes.endp = _endpos__2000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1000;
              MenhirLib.EngineTypes.startp = _startpos__1000_;
              MenhirLib.EngineTypes.endp = _endpos__1000_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3000 : unit = Obj.magic _3000 in
        let _2000 : unit = Obj.magic _2000 in
        let _1000 : (Parsetree.pattern) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos__3000_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__300_ = _endpos__3000_ in
          let _startpos__300_ = _startpos__3000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _300 = _3000 in
          let _200 = _2000 in
          let _100 = _1000 in
          let _1 =
            let _endpos__30_ = _endpos__300_ in
            let _startpos__30_ = _startpos__300_ in
            let _startpos__10_ = _startpos__100_ in
            let _30 = _300 in
            let _20 = _200 in
            let _10 = _100 in
            let _1 =
              let _endpos__3_ = _endpos__30_ in
              let _startpos__3_ = _startpos__30_ in
              let _3 = _30 in
              let _2 = _20 in
              let _1 = _10 in
              let _loc__3_ = (_startpos__3_, _endpos__3_) in
              
# 2370 "parser_raw.mly"
        ( expecting _loc__3_ "pattern" )
# 29964 "parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__30_ in
            let _startpos__1_ = _startpos__10_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 723 "parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 29975 "parser_raw.ml"
            
          in
          
# 2375 "parser_raw.mly"
    ( _1 )
# 29981 "parser_raw.ml"
          
        in
        
# 2353 "parser_raw.mly"
      ( _1 )
# 29987 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3000;
          MenhirLib.EngineTypes.startp = _startpos__3000_;
          MenhirLib.EngineTypes.endp = _endpos__3000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2000;
            MenhirLib.EngineTypes.startp = _startpos__2000_;
            MenhirLib.EngineTypes.endp = _endpos__2000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1000;
              MenhirLib.EngineTypes.startp = _startpos__1000_;
              MenhirLib.EngineTypes.endp = _endpos__1000_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3000 : (Parsetree.pattern) = Obj.magic _3000 in
        let _2000 : unit = Obj.magic _2000 in
        let _1000 : (Parsetree.pattern) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos__3000_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__300_ = _endpos__3000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _300 = _3000 in
          let _200 = _2000 in
          let _100 = _1000 in
          let _1 =
            let _endpos__30_ = _endpos__300_ in
            let _startpos__10_ = _startpos__100_ in
            let _30 = _300 in
            let _20 = _200 in
            let _10 = _100 in
            let _1 =
              let _3 = _30 in
              let _2 = _20 in
              let _1 = _10 in
              
# 2372 "parser_raw.mly"
        ( Ppat_or(_1, _3) )
# 30040 "parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__30_ in
            let _startpos__1_ = _startpos__10_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 723 "parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 30051 "parser_raw.ml"
            
          in
          
# 2375 "parser_raw.mly"
    ( _1 )
# 30057 "parser_raw.ml"
          
        in
        
# 2353 "parser_raw.mly"
      ( _1 )
# 30063 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3000;
          MenhirLib.EngineTypes.startp = _startpos__3000_;
          MenhirLib.EngineTypes.endp = _endpos__3000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2000;
            MenhirLib.EngineTypes.startp = _startpos__2000_;
            MenhirLib.EngineTypes.endp = _endpos__2000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1000;
              MenhirLib.EngineTypes.startp = _startpos__1000_;
              MenhirLib.EngineTypes.endp = _endpos__1000_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3000 : unit = Obj.magic _3000 in
        let _2000 : unit = Obj.magic _2000 in
        let _1000 : (Parsetree.pattern) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos__3000_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__300_ = _endpos__3000_ in
          let _startpos__300_ = _startpos__3000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _300 = _3000 in
          let _200 = _2000 in
          let _100 = _1000 in
          let _1 =
            let _endpos__30_ = _endpos__300_ in
            let _startpos__30_ = _startpos__300_ in
            let _startpos__10_ = _startpos__100_ in
            let _30 = _300 in
            let _20 = _200 in
            let _10 = _100 in
            let _1 =
              let _endpos__3_ = _endpos__30_ in
              let _startpos__3_ = _startpos__30_ in
              let _3 = _30 in
              let _2 = _20 in
              let _1 = _10 in
              let _loc__3_ = (_startpos__3_, _endpos__3_) in
              
# 2374 "parser_raw.mly"
        ( expecting _loc__3_ "pattern" )
# 30121 "parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__30_ in
            let _startpos__1_ = _startpos__10_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 723 "parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 30132 "parser_raw.ml"
            
          in
          
# 2375 "parser_raw.mly"
    ( _1 )
# 30138 "parser_raw.ml"
          
        in
        
# 2353 "parser_raw.mly"
      ( _1 )
# 30144 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1000;
          MenhirLib.EngineTypes.startp = _startpos__1000_;
          MenhirLib.EngineTypes.endp = _endpos__1000_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1000 : (
# 564 "parser_raw.mly"
       (string)
# 30165 "parser_raw.ml"
        ) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos__1000_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _100 = _1000 in
          let _1 =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _10 = _100 in
            let _1 =
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _1 = _10 in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 30188 "parser_raw.ml"
              
            in
            
# 1843 "parser_raw.mly"
                    ( Ppat_var _1 )
# 30194 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__100_ in
          let _startpos__1_ = _startpos__100_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 723 "parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 30205 "parser_raw.ml"
          
        in
        
# 1845 "parser_raw.mly"
    ( _1 )
# 30211 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__100_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 1844 "parser_raw.mly"
                 ( Ppat_any )
# 30242 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 723 "parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 30253 "parser_raw.ml"
          
        in
        
# 1845 "parser_raw.mly"
    ( _1 )
# 30259 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.structure) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.payload) = 
# 3392 "parser_raw.mly"
              ( PStr _1 )
# 30284 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.signature) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.payload) = 
# 3393 "parser_raw.mly"
                    ( PSig _2 )
# 30315 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.core_type) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.payload) = 
# 3394 "parser_raw.mly"
                    ( PTyp _2 )
# 30346 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.pattern) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.payload) = 
# 3395 "parser_raw.mly"
                     ( PPat (_2, None) )
# 30377 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.pattern) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.payload) = 
# 3396 "parser_raw.mly"
                                   ( PPat (_2, Some _4) )
# 30420 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.core_type) = 
# 2850 "parser_raw.mly"
    ( _1 )
# 30445 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _300;
          MenhirLib.EngineTypes.startp = _startpos__300_;
          MenhirLib.EngineTypes.endp = _endpos__300_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _200;
            MenhirLib.EngineTypes.startp = _startpos__200_;
            MenhirLib.EngineTypes.endp = _endpos__200_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs00000;
              MenhirLib.EngineTypes.startp = _startpos_xs00000_;
              MenhirLib.EngineTypes.endp = _endpos_xs00000_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _300 : (Parsetree.core_type) = Obj.magic _300 in
        let _200 : unit = Obj.magic _200 in
        let xs00000 : (string Location.loc list) = Obj.magic xs00000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs00000_ in
        let _endpos = _endpos__300_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _startpos_xs0000_ = _startpos_xs00000_ in
          let _endpos__30_ = _endpos__300_ in
          let _30 = _300 in
          let _20 = _200 in
          let xs0000 = xs00000 in
          let _1 =
            let _3 = _30 in
            let _2 = _20 in
            let xs000 = xs0000 in
            let _1 =
              let xs00 = xs000 in
              let _1 =
                let xs0 = xs00 in
                let xs =
                  let xs = xs0 in
                  
# 253 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( List.rev xs )
# 30498 "parser_raw.ml"
                  
                in
                
# 775 "parser_raw.mly"
    ( xs )
# 30504 "parser_raw.ml"
                
              in
              
# 2842 "parser_raw.mly"
    ( _1 )
# 30510 "parser_raw.ml"
              
            in
            
# 2846 "parser_raw.mly"
    ( Ptyp_poly(_1, _3) )
# 30516 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__30_ in
          let _startpos__1_ = _startpos_xs0000_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 725 "parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 30527 "parser_raw.ml"
          
        in
        
# 2852 "parser_raw.mly"
    ( _1 )
# 30533 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _10 : (Parsetree.core_type) = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__10_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _1 = _10 in
          
# 2877 "parser_raw.mly"
    ( _1 )
# 30560 "parser_raw.ml"
          
        in
        
# 2850 "parser_raw.mly"
    ( _1 )
# 30566 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _1000;
          MenhirLib.EngineTypes.startp = _startpos__1000_;
          MenhirLib.EngineTypes.endp = _endpos__1000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _200;
            MenhirLib.EngineTypes.startp = _startpos__200_;
            MenhirLib.EngineTypes.endp = _endpos__200_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs00000;
              MenhirLib.EngineTypes.startp = _startpos_xs00000_;
              MenhirLib.EngineTypes.endp = _endpos_xs00000_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1000 : (Parsetree.core_type) = Obj.magic _1000 in
        let _200 : unit = Obj.magic _200 in
        let xs00000 : (string Location.loc list) = Obj.magic xs00000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs00000_ in
        let _endpos = _endpos__1000_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _startpos_xs0000_ = _startpos_xs00000_ in
          let _endpos__100_ = _endpos__1000_ in
          let _100 = _1000 in
          let _20 = _200 in
          let xs0000 = xs00000 in
          let _1 =
            let _10 = _100 in
            let _2 = _20 in
            let xs000 = xs0000 in
            let _3 =
              let _1 = _10 in
              
# 2877 "parser_raw.mly"
    ( _1 )
# 30615 "parser_raw.ml"
              
            in
            let _1 =
              let xs00 = xs000 in
              let _1 =
                let xs0 = xs00 in
                let xs =
                  let xs = xs0 in
                  
# 253 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( List.rev xs )
# 30627 "parser_raw.ml"
                  
                in
                
# 775 "parser_raw.mly"
    ( xs )
# 30633 "parser_raw.ml"
                
              in
              
# 2842 "parser_raw.mly"
    ( _1 )
# 30639 "parser_raw.ml"
              
            in
            
# 2846 "parser_raw.mly"
    ( Ptyp_poly(_1, _3) )
# 30645 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__100_ in
          let _startpos__1_ = _startpos_xs0000_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 725 "parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 30656 "parser_raw.ml"
          
        in
        
# 2852 "parser_raw.mly"
    ( _1 )
# 30662 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.payload) = Obj.magic _3 in
        let _2 : (string Location.loc) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.attribute) = let _endpos = _endpos__4_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3359 "parser_raw.mly"
    ( Attr.mk ~loc:(make_loc _sloc) _2 _3 )
# 30708 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _12;
          MenhirLib.EngineTypes.startp = _startpos__12_;
          MenhirLib.EngineTypes.endp = _endpos__12_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = prim;
            MenhirLib.EngineTypes.startp = _startpos_prim_;
            MenhirLib.EngineTypes.endp = _endpos_prim_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _7;
              MenhirLib.EngineTypes.startp = _startpos__7_;
              MenhirLib.EngineTypes.endp = _endpos__7_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = ty;
                MenhirLib.EngineTypes.startp = _startpos_ty_;
                MenhirLib.EngineTypes.endp = _endpos_ty_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _5;
                  MenhirLib.EngineTypes.startp = _startpos__5_;
                  MenhirLib.EngineTypes.endp = _endpos__5_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _11;
                    MenhirLib.EngineTypes.startp = _startpos__11_;
                    MenhirLib.EngineTypes.endp = _endpos__11_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = _10;
                      MenhirLib.EngineTypes.startp = _startpos__10_;
                      MenhirLib.EngineTypes.endp = _endpos__10_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.semv = ext;
                        MenhirLib.EngineTypes.startp = _startpos_ext_;
                        MenhirLib.EngineTypes.endp = _endpos_ext_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _12 : (Parsetree.attributes) = Obj.magic _12 in
        let prim : (string list) = Obj.magic prim in
        let _7 : unit = Obj.magic _7 in
        let ty : (Parsetree.core_type) = Obj.magic ty in
        let _5 : unit = Obj.magic _5 in
        let _11 : (string) = Obj.magic _11 in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__12_ in
        let _v : (Parsetree.value_description * string Location.loc option) = let attrs2 =
          let _1 = _12 in
          
# 3368 "parser_raw.mly"
    ( _1 )
# 30783 "parser_raw.ml"
          
        in
        let _endpos_attrs2_ = _endpos__12_ in
        let id =
          let _endpos__1_ = _endpos__11_ in
          let _startpos__1_ = _startpos__11_ in
          let _1 = _11 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 30797 "parser_raw.ml"
          
        in
        let attrs1 =
          let _1 = _10 in
          
# 3372 "parser_raw.mly"
    ( _1 )
# 30805 "parser_raw.ml"
          
        in
        let _endpos = _endpos_attrs2_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2522 "parser_raw.mly"
    ( let attrs = attrs1 @ attrs2 in
      let loc = make_loc _sloc in
      let docs = symbol_docs _sloc in
      Val.mk id ty ~prim ~attrs ~loc ~docs,
      ext )
# 30818 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Asttypes.private_flag) = let _1 =
          
# 3233 "parser_raw.mly"
                                                ( Public )
# 30837 "parser_raw.ml"
          
        in
        
# 3230 "parser_raw.mly"
    ( _1 )
# 30843 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__10_ in
        let _v : (Asttypes.private_flag) = let _1 =
          let _1 = _10 in
          
# 3234 "parser_raw.mly"
            ( Private )
# 30870 "parser_raw.ml"
          
        in
        
# 3230 "parser_raw.mly"
    ( _1 )
# 30876 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Asttypes.private_flag * Asttypes.virtual_flag) = 
# 3255 "parser_raw.mly"
                 ( Public, Concrete )
# 30894 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.private_flag * Asttypes.virtual_flag) = 
# 3256 "parser_raw.mly"
            ( Private, Concrete )
# 30919 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.private_flag * Asttypes.virtual_flag) = 
# 3257 "parser_raw.mly"
            ( Public, Virtual )
# 30944 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.private_flag * Asttypes.virtual_flag) = 
# 3258 "parser_raw.mly"
                    ( Private, Virtual )
# 30975 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.private_flag * Asttypes.virtual_flag) = 
# 3259 "parser_raw.mly"
                    ( Private, Virtual )
# 31006 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Asttypes.rec_flag) = 
# 3213 "parser_raw.mly"
                                                ( Nonrecursive )
# 31024 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.rec_flag) = 
# 3214 "parser_raw.mly"
        ( Recursive )
# 31049 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = fields;
          MenhirLib.EngineTypes.startp = _startpos_fields_;
          MenhirLib.EngineTypes.endp = _endpos_fields_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let fields : ((Longident.t Location.loc * Parsetree.expression) list) = Obj.magic fields in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_fields_ in
        let _endpos = _endpos_fields_ in
        let _v : (Parsetree.expression option *
  (Longident.t Location.loc * Parsetree.expression) list) = let eo =
          
# 124 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( None )
# 31076 "parser_raw.ml"
          
        in
        
# 2285 "parser_raw.mly"
    ( eo, fields )
# 31082 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = fields;
          MenhirLib.EngineTypes.startp = _startpos_fields_;
          MenhirLib.EngineTypes.endp = _endpos_fields_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _200;
            MenhirLib.EngineTypes.startp = _startpos__200_;
            MenhirLib.EngineTypes.endp = _endpos__200_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x00;
              MenhirLib.EngineTypes.startp = _startpos_x00_;
              MenhirLib.EngineTypes.endp = _endpos_x00_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let fields : ((Longident.t Location.loc * Parsetree.expression) list) = Obj.magic fields in
        let _200 : unit = Obj.magic _200 in
        let x00 : (Parsetree.expression) = Obj.magic x00 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x00_ in
        let _endpos = _endpos_fields_ in
        let _v : (Parsetree.expression option *
  (Longident.t Location.loc * Parsetree.expression) list) = let eo =
          let _20 = _200 in
          let x0 = x00 in
          let x =
            let _2 = _20 in
            let x = x0 in
            
# 191 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( x )
# 31126 "parser_raw.ml"
            
          in
          
# 126 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( Some x )
# 31132 "parser_raw.ml"
          
        in
        
# 2285 "parser_raw.mly"
    ( eo, fields )
# 31138 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = d0;
          MenhirLib.EngineTypes.startp = _startpos_d0_;
          MenhirLib.EngineTypes.endp = _endpos_d0_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let d0 : (Ast_helper.str * Parsetree.constructor_arguments *
  Parsetree.core_type option * Parsetree.attributes * Warnings.loc *
  Docstrings.info) = Obj.magic d0 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_d0_ in
        let _endpos = _endpos_d0_ in
        let _v : (Parsetree.constructor_declaration list) = let x =
          let d = d0 in
          
# 2684 "parser_raw.mly"
    (
      let cid, args, res, attrs, loc, info = d in
      Type.constructor cid ~args ?res ~attrs ~loc ~info
    )
# 31170 "parser_raw.ml"
          
        in
        
# 865 "parser_raw.mly"
      ( [x] )
# 31176 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = d0;
          MenhirLib.EngineTypes.startp = _startpos_d0_;
          MenhirLib.EngineTypes.endp = _endpos_d0_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let d0 : (Ast_helper.str * Parsetree.constructor_arguments *
  Parsetree.core_type option * Parsetree.attributes * Warnings.loc *
  Docstrings.info) = Obj.magic d0 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_d0_ in
        let _endpos = _endpos_d0_ in
        let _v : (Parsetree.constructor_declaration list) = let x =
          let d = d0 in
          
# 2684 "parser_raw.mly"
    (
      let cid, args, res, attrs, loc, info = d in
      Type.constructor cid ~args ?res ~attrs ~loc ~info
    )
# 31208 "parser_raw.ml"
          
        in
        
# 868 "parser_raw.mly"
      ( [x] )
# 31214 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = d0;
          MenhirLib.EngineTypes.startp = _startpos_d0_;
          MenhirLib.EngineTypes.endp = _endpos_d0_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let d0 : (Ast_helper.str * Parsetree.constructor_arguments *
  Parsetree.core_type option * Parsetree.attributes * Warnings.loc *
  Docstrings.info) = Obj.magic d0 in
        let xs : (Parsetree.constructor_declaration list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_d0_ in
        let _v : (Parsetree.constructor_declaration list) = let x =
          let d = d0 in
          
# 2684 "parser_raw.mly"
    (
      let cid, args, res, attrs, loc, info = d in
      Type.constructor cid ~args ?res ~attrs ~loc ~info
    )
# 31252 "parser_raw.ml"
          
        in
        
# 872 "parser_raw.mly"
      ( x :: xs )
# 31258 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = d00;
          MenhirLib.EngineTypes.startp = _startpos_d00_;
          MenhirLib.EngineTypes.endp = _endpos_d00_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let d00 : (Ast_helper.str * Parsetree.constructor_arguments *
  Parsetree.core_type option * Parsetree.attributes * Warnings.loc *
  Docstrings.info) = Obj.magic d00 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_d00_ in
        let _endpos = _endpos_d00_ in
        let _v : (Parsetree.extension_constructor list) = let x =
          let d0 = d00 in
          let _1 =
            let d = d0 in
            
# 2792 "parser_raw.mly"
    (
      let cid, args, res, attrs, loc, info = d in
      Te.decl cid ~args ?res ~attrs ~loc ~info
    )
# 31292 "parser_raw.ml"
            
          in
          
# 2786 "parser_raw.mly"
      ( _1 )
# 31298 "parser_raw.ml"
          
        in
        
# 865 "parser_raw.mly"
      ( [x] )
# 31304 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _10 : (Parsetree.extension_constructor) = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__10_ in
        let _v : (Parsetree.extension_constructor list) = let x =
          let _1 = _10 in
          
# 2788 "parser_raw.mly"
      ( _1 )
# 31331 "parser_raw.ml"
          
        in
        
# 865 "parser_raw.mly"
      ( [x] )
# 31337 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = d00;
          MenhirLib.EngineTypes.startp = _startpos_d00_;
          MenhirLib.EngineTypes.endp = _endpos_d00_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let d00 : (Ast_helper.str * Parsetree.constructor_arguments *
  Parsetree.core_type option * Parsetree.attributes * Warnings.loc *
  Docstrings.info) = Obj.magic d00 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_d00_ in
        let _endpos = _endpos_d00_ in
        let _v : (Parsetree.extension_constructor list) = let x =
          let d0 = d00 in
          let _1 =
            let d = d0 in
            
# 2792 "parser_raw.mly"
    (
      let cid, args, res, attrs, loc, info = d in
      Te.decl cid ~args ?res ~attrs ~loc ~info
    )
# 31371 "parser_raw.ml"
            
          in
          
# 2786 "parser_raw.mly"
      ( _1 )
# 31377 "parser_raw.ml"
          
        in
        
# 868 "parser_raw.mly"
      ( [x] )
# 31383 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _10 : (Parsetree.extension_constructor) = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__10_ in
        let _v : (Parsetree.extension_constructor list) = let x =
          let _1 = _10 in
          
# 2788 "parser_raw.mly"
      ( _1 )
# 31410 "parser_raw.ml"
          
        in
        
# 868 "parser_raw.mly"
      ( [x] )
# 31416 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = d00;
          MenhirLib.EngineTypes.startp = _startpos_d00_;
          MenhirLib.EngineTypes.endp = _endpos_d00_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let d00 : (Ast_helper.str * Parsetree.constructor_arguments *
  Parsetree.core_type option * Parsetree.attributes * Warnings.loc *
  Docstrings.info) = Obj.magic d00 in
        let xs : (Parsetree.extension_constructor list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_d00_ in
        let _v : (Parsetree.extension_constructor list) = let x =
          let d0 = d00 in
          let _1 =
            let d = d0 in
            
# 2792 "parser_raw.mly"
    (
      let cid, args, res, attrs, loc, info = d in
      Te.decl cid ~args ?res ~attrs ~loc ~info
    )
# 31456 "parser_raw.ml"
            
          in
          
# 2786 "parser_raw.mly"
      ( _1 )
# 31462 "parser_raw.ml"
          
        in
        
# 872 "parser_raw.mly"
      ( x :: xs )
# 31468 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _10 : (Parsetree.extension_constructor) = Obj.magic _10 in
        let xs : (Parsetree.extension_constructor list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos__10_ in
        let _v : (Parsetree.extension_constructor list) = let x =
          let _1 = _10 in
          
# 2788 "parser_raw.mly"
      ( _1 )
# 31501 "parser_raw.ml"
          
        in
        
# 872 "parser_raw.mly"
      ( x :: xs )
# 31507 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = d0;
          MenhirLib.EngineTypes.startp = _startpos_d0_;
          MenhirLib.EngineTypes.endp = _endpos_d0_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let d0 : (Ast_helper.str * Parsetree.constructor_arguments *
  Parsetree.core_type option * Parsetree.attributes * Warnings.loc *
  Docstrings.info) = Obj.magic d0 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_d0_ in
        let _endpos = _endpos_d0_ in
        let _v : (Parsetree.extension_constructor list) = let x =
          let d = d0 in
          
# 2792 "parser_raw.mly"
    (
      let cid, args, res, attrs, loc, info = d in
      Te.decl cid ~args ?res ~attrs ~loc ~info
    )
# 31539 "parser_raw.ml"
          
        in
        
# 865 "parser_raw.mly"
      ( [x] )
# 31545 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = d0;
          MenhirLib.EngineTypes.startp = _startpos_d0_;
          MenhirLib.EngineTypes.endp = _endpos_d0_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let d0 : (Ast_helper.str * Parsetree.constructor_arguments *
  Parsetree.core_type option * Parsetree.attributes * Warnings.loc *
  Docstrings.info) = Obj.magic d0 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_d0_ in
        let _endpos = _endpos_d0_ in
        let _v : (Parsetree.extension_constructor list) = let x =
          let d = d0 in
          
# 2792 "parser_raw.mly"
    (
      let cid, args, res, attrs, loc, info = d in
      Te.decl cid ~args ?res ~attrs ~loc ~info
    )
# 31577 "parser_raw.ml"
          
        in
        
# 868 "parser_raw.mly"
      ( [x] )
# 31583 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = d0;
          MenhirLib.EngineTypes.startp = _startpos_d0_;
          MenhirLib.EngineTypes.endp = _endpos_d0_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let d0 : (Ast_helper.str * Parsetree.constructor_arguments *
  Parsetree.core_type option * Parsetree.attributes * Warnings.loc *
  Docstrings.info) = Obj.magic d0 in
        let xs : (Parsetree.extension_constructor list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_d0_ in
        let _v : (Parsetree.extension_constructor list) = let x =
          let d = d0 in
          
# 2792 "parser_raw.mly"
    (
      let cid, args, res, attrs, loc, info = d in
      Te.decl cid ~args ?res ~attrs ~loc ~info
    )
# 31621 "parser_raw.ml"
          
        in
        
# 872 "parser_raw.mly"
      ( x :: xs )
# 31627 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : ((Parsetree.core_type * Parsetree.core_type * Warnings.loc) list) = 
# 756 "parser_raw.mly"
    ( [] )
# 31645 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _300;
          MenhirLib.EngineTypes.startp = _startpos__300_;
          MenhirLib.EngineTypes.endp = _endpos__300_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _200;
            MenhirLib.EngineTypes.startp = _startpos__200_;
            MenhirLib.EngineTypes.endp = _endpos__200_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _100;
              MenhirLib.EngineTypes.startp = _startpos__100_;
              MenhirLib.EngineTypes.endp = _endpos__100_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _11;
                MenhirLib.EngineTypes.startp = _startpos__11_;
                MenhirLib.EngineTypes.endp = _endpos__11_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = xs;
                  MenhirLib.EngineTypes.startp = _startpos_xs_;
                  MenhirLib.EngineTypes.endp = _endpos_xs_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _300 : (Parsetree.core_type) = Obj.magic _300 in
        let _200 : unit = Obj.magic _200 in
        let _100 : (Parsetree.core_type) = Obj.magic _100 in
        let _11 : unit = Obj.magic _11 in
        let xs : ((Parsetree.core_type * Parsetree.core_type * Warnings.loc) list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos__300_ in
        let _v : ((Parsetree.core_type * Parsetree.core_type * Warnings.loc) list) = let x =
          let _endpos__30_ = _endpos__300_ in
          let _startpos__10_ = _startpos__100_ in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 = _11 in
          let x =
            let _endpos__3_ = _endpos__30_ in
            let _startpos__1_ = _startpos__10_ in
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            let _endpos = _endpos__3_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1727 "parser_raw.mly"
    ( _1, _3, make_loc _sloc )
# 31710 "parser_raw.ml"
            
          in
          
# 183 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( x )
# 31716 "parser_raw.ml"
          
        in
        
# 758 "parser_raw.mly"
    ( x :: xs )
# 31722 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (string Location.loc * Parsetree.module_type option) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : ((string Location.loc * Parsetree.module_type option) list) = 
# 767 "parser_raw.mly"
    ( [ x ] )
# 31747 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let x : (string Location.loc * Parsetree.module_type option) = Obj.magic x in
        let xs : ((string Location.loc * Parsetree.module_type option) list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_x_ in
        let _v : ((string Location.loc * Parsetree.module_type option) list) = 
# 769 "parser_raw.mly"
    ( x :: xs )
# 31778 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Asttypes.arg_label * Parsetree.expression) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : ((Asttypes.arg_label * Parsetree.expression) list) = 
# 767 "parser_raw.mly"
    ( [ x ] )
# 31803 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let x : (Asttypes.arg_label * Parsetree.expression) = Obj.magic x in
        let xs : ((Asttypes.arg_label * Parsetree.expression) list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_x_ in
        let _v : ((Asttypes.arg_label * Parsetree.expression) list) = 
# 769 "parser_raw.mly"
    ( x :: xs )
# 31834 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (string) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (string list) = 
# 767 "parser_raw.mly"
    ( [ x ] )
# 31859 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let x : (string) = Obj.magic x in
        let xs : (string list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_x_ in
        let _v : (string list) = 
# 769 "parser_raw.mly"
    ( x :: xs )
# 31890 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _11;
            MenhirLib.EngineTypes.startp = _startpos__11_;
            MenhirLib.EngineTypes.endp = _endpos__11_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _100 : (string) = Obj.magic _100 in
        let _11 : unit = Obj.magic _11 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__11_ in
        let _endpos = _endpos__100_ in
        let _v : (string Location.loc list) = let x =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 = _11 in
          let _2 =
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _1 = _10 in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 31933 "parser_raw.ml"
            
          in
          
# 2838 "parser_raw.mly"
    ( _2 )
# 31939 "parser_raw.ml"
          
        in
        
# 767 "parser_raw.mly"
    ( [ x ] )
# 31945 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _11;
            MenhirLib.EngineTypes.startp = _startpos__11_;
            MenhirLib.EngineTypes.endp = _endpos__11_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _100 : (string) = Obj.magic _100 in
        let _11 : unit = Obj.magic _11 in
        let xs : (string Location.loc list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos__100_ in
        let _v : (string Location.loc list) = let x =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 = _11 in
          let _2 =
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _1 = _10 in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 31994 "parser_raw.ml"
            
          in
          
# 2838 "parser_raw.mly"
    ( _2 )
# 32000 "parser_raw.ml"
          
        in
        
# 769 "parser_raw.mly"
    ( x :: xs )
# 32006 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Parsetree.case) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Parsetree.case list) = let _1 =
          
# 124 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( None )
# 32032 "parser_raw.ml"
          
        in
        
# 841 "parser_raw.mly"
    ( [x] )
# 32038 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x0;
            MenhirLib.EngineTypes.startp = _startpos_x0_;
            MenhirLib.EngineTypes.endp = _endpos_x0_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let x : (Parsetree.case) = Obj.magic x in
        let x0 : unit = Obj.magic x0 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_x_ in
        let _v : (Parsetree.case list) = let _1 =
          let x = x0 in
          
# 126 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( Some x )
# 32071 "parser_raw.ml"
          
        in
        
# 841 "parser_raw.mly"
    ( [x] )
# 32077 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let x : (Parsetree.case) = Obj.magic x in
        let _2 : unit = Obj.magic _2 in
        let xs : (Parsetree.case list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_x_ in
        let _v : (Parsetree.case list) = 
# 845 "parser_raw.mly"
    ( x :: xs )
# 32114 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _100 : (Parsetree.core_type) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__100_ in
        let _v : (Parsetree.core_type list) = let xs =
          let _10 = _100 in
          let x =
            let _1 = _10 in
            
# 2877 "parser_raw.mly"
    ( _1 )
# 32143 "parser_raw.ml"
            
          in
          
# 788 "parser_raw.mly"
    ( [ x ] )
# 32149 "parser_raw.ml"
          
        in
        
# 795 "parser_raw.mly"
    ( xs )
# 32155 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _20;
            MenhirLib.EngineTypes.startp = _startpos__20_;
            MenhirLib.EngineTypes.endp = _endpos__20_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs0;
              MenhirLib.EngineTypes.startp = _startpos_xs0_;
              MenhirLib.EngineTypes.endp = _endpos_xs0_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _100 : (Parsetree.core_type) = Obj.magic _100 in
        let _20 : unit = Obj.magic _20 in
        let xs0 : (Parsetree.core_type list) = Obj.magic xs0 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs0_ in
        let _endpos = _endpos__100_ in
        let _v : (Parsetree.core_type list) = let xs =
          let _10 = _100 in
          let _2 = _20 in
          let xs = xs0 in
          let x =
            let _1 = _10 in
            
# 2877 "parser_raw.mly"
    ( _1 )
# 32198 "parser_raw.ml"
            
          in
          
# 792 "parser_raw.mly"
    ( x :: xs )
# 32204 "parser_raw.ml"
          
        in
        
# 795 "parser_raw.mly"
    ( xs )
# 32210 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x0;
          MenhirLib.EngineTypes.startp = _startpos_x0_;
          MenhirLib.EngineTypes.endp = _endpos_x0_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x0 : (Parsetree.with_constraint) = Obj.magic x0 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_x0_ in
        let _v : (Parsetree.with_constraint list) = let xs =
          let x = x0 in
          
# 788 "parser_raw.mly"
    ( [ x ] )
# 32237 "parser_raw.ml"
          
        in
        
# 795 "parser_raw.mly"
    ( xs )
# 32243 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = x0;
          MenhirLib.EngineTypes.startp = _startpos_x0_;
          MenhirLib.EngineTypes.endp = _endpos_x0_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _20;
            MenhirLib.EngineTypes.startp = _startpos__20_;
            MenhirLib.EngineTypes.endp = _endpos__20_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs0;
              MenhirLib.EngineTypes.startp = _startpos_xs0_;
              MenhirLib.EngineTypes.endp = _endpos_xs0_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let x0 : (Parsetree.with_constraint) = Obj.magic x0 in
        let _20 : unit = Obj.magic _20 in
        let xs0 : (Parsetree.with_constraint list) = Obj.magic xs0 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs0_ in
        let _endpos = _endpos_x0_ in
        let _v : (Parsetree.with_constraint list) = let xs =
          let x = x0 in
          let _2 = _20 in
          let xs = xs0 in
          
# 792 "parser_raw.mly"
    ( x :: xs )
# 32284 "parser_raw.ml"
          
        in
        
# 795 "parser_raw.mly"
    ( xs )
# 32290 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x0;
          MenhirLib.EngineTypes.startp = _startpos_x0_;
          MenhirLib.EngineTypes.endp = _endpos_x0_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x0 : (Parsetree.row_field) = Obj.magic x0 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_x0_ in
        let _v : (Parsetree.row_field list) = let xs =
          let x = x0 in
          
# 788 "parser_raw.mly"
    ( [ x ] )
# 32317 "parser_raw.ml"
          
        in
        
# 795 "parser_raw.mly"
    ( xs )
# 32323 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = x0;
          MenhirLib.EngineTypes.startp = _startpos_x0_;
          MenhirLib.EngineTypes.endp = _endpos_x0_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _20;
            MenhirLib.EngineTypes.startp = _startpos__20_;
            MenhirLib.EngineTypes.endp = _endpos__20_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs0;
              MenhirLib.EngineTypes.startp = _startpos_xs0_;
              MenhirLib.EngineTypes.endp = _endpos_xs0_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let x0 : (Parsetree.row_field) = Obj.magic x0 in
        let _20 : unit = Obj.magic _20 in
        let xs0 : (Parsetree.row_field list) = Obj.magic xs0 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs0_ in
        let _endpos = _endpos_x0_ in
        let _v : (Parsetree.row_field list) = let xs =
          let x = x0 in
          let _2 = _20 in
          let xs = xs0 in
          
# 792 "parser_raw.mly"
    ( x :: xs )
# 32364 "parser_raw.ml"
          
        in
        
# 795 "parser_raw.mly"
    ( xs )
# 32370 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x0;
          MenhirLib.EngineTypes.startp = _startpos_x0_;
          MenhirLib.EngineTypes.endp = _endpos_x0_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x0 : (Parsetree.core_type) = Obj.magic x0 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_x0_ in
        let _v : (Parsetree.core_type list) = let xs =
          let x = x0 in
          
# 788 "parser_raw.mly"
    ( [ x ] )
# 32397 "parser_raw.ml"
          
        in
        
# 795 "parser_raw.mly"
    ( xs )
# 32403 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = x0;
          MenhirLib.EngineTypes.startp = _startpos_x0_;
          MenhirLib.EngineTypes.endp = _endpos_x0_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _20;
            MenhirLib.EngineTypes.startp = _startpos__20_;
            MenhirLib.EngineTypes.endp = _endpos__20_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs0;
              MenhirLib.EngineTypes.startp = _startpos_xs0_;
              MenhirLib.EngineTypes.endp = _endpos_xs0_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let x0 : (Parsetree.core_type) = Obj.magic x0 in
        let _20 : unit = Obj.magic _20 in
        let xs0 : (Parsetree.core_type list) = Obj.magic xs0 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs0_ in
        let _endpos = _endpos_x0_ in
        let _v : (Parsetree.core_type list) = let xs =
          let x = x0 in
          let _2 = _20 in
          let xs = xs0 in
          
# 792 "parser_raw.mly"
    ( x :: xs )
# 32444 "parser_raw.ml"
          
        in
        
# 795 "parser_raw.mly"
    ( xs )
# 32450 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x0;
          MenhirLib.EngineTypes.startp = _startpos_x0_;
          MenhirLib.EngineTypes.endp = _endpos_x0_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x0 : (Parsetree.core_type * Asttypes.variance) = Obj.magic x0 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_x0_ in
        let _v : ((Parsetree.core_type * Asttypes.variance) list) = let xs =
          let x = x0 in
          
# 788 "parser_raw.mly"
    ( [ x ] )
# 32477 "parser_raw.ml"
          
        in
        
# 795 "parser_raw.mly"
    ( xs )
# 32483 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = x0;
          MenhirLib.EngineTypes.startp = _startpos_x0_;
          MenhirLib.EngineTypes.endp = _endpos_x0_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _20;
            MenhirLib.EngineTypes.startp = _startpos__20_;
            MenhirLib.EngineTypes.endp = _endpos__20_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs0;
              MenhirLib.EngineTypes.startp = _startpos_xs0_;
              MenhirLib.EngineTypes.endp = _endpos_xs0_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let x0 : (Parsetree.core_type * Asttypes.variance) = Obj.magic x0 in
        let _20 : unit = Obj.magic _20 in
        let xs0 : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic xs0 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs0_ in
        let _endpos = _endpos_x0_ in
        let _v : ((Parsetree.core_type * Asttypes.variance) list) = let xs =
          let x = x0 in
          let _2 = _20 in
          let xs = xs0 in
          
# 792 "parser_raw.mly"
    ( x :: xs )
# 32524 "parser_raw.ml"
          
        in
        
# 795 "parser_raw.mly"
    ( xs )
# 32530 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x0;
          MenhirLib.EngineTypes.startp = _startpos_x0_;
          MenhirLib.EngineTypes.endp = _endpos_x0_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x0 : (Parsetree.core_type) = Obj.magic x0 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_x0_ in
        let _v : (Parsetree.core_type list) = let xs =
          let x = x0 in
          
# 788 "parser_raw.mly"
    ( [ x ] )
# 32557 "parser_raw.ml"
          
        in
        
# 795 "parser_raw.mly"
    ( xs )
# 32563 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = x0;
          MenhirLib.EngineTypes.startp = _startpos_x0_;
          MenhirLib.EngineTypes.endp = _endpos_x0_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _20;
            MenhirLib.EngineTypes.startp = _startpos__20_;
            MenhirLib.EngineTypes.endp = _endpos__20_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs0;
              MenhirLib.EngineTypes.startp = _startpos_xs0_;
              MenhirLib.EngineTypes.endp = _endpos_xs0_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let x0 : (Parsetree.core_type) = Obj.magic x0 in
        let _20 : unit = Obj.magic _20 in
        let xs0 : (Parsetree.core_type list) = Obj.magic xs0 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs0_ in
        let _endpos = _endpos_x0_ in
        let _v : (Parsetree.core_type list) = let xs =
          let x = x0 in
          let _2 = _20 in
          let xs = xs0 in
          
# 792 "parser_raw.mly"
    ( x :: xs )
# 32604 "parser_raw.ml"
          
        in
        
# 795 "parser_raw.mly"
    ( xs )
# 32610 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let x : (Parsetree.core_type) = Obj.magic x in
        let _2 : unit = Obj.magic _2 in
        let xs : (Parsetree.core_type list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_x_ in
        let _v : (Parsetree.core_type list) = 
# 813 "parser_raw.mly"
    ( x :: xs )
# 32647 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = x2;
          MenhirLib.EngineTypes.startp = _startpos_x2_;
          MenhirLib.EngineTypes.endp = _endpos_x2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x1;
              MenhirLib.EngineTypes.startp = _startpos_x1_;
              MenhirLib.EngineTypes.endp = _endpos_x1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let x2 : (Parsetree.core_type) = Obj.magic x2 in
        let _2 : unit = Obj.magic _2 in
        let x1 : (Parsetree.core_type) = Obj.magic x1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x1_ in
        let _endpos = _endpos_x2_ in
        let _v : (Parsetree.core_type list) = 
# 817 "parser_raw.mly"
    ( [ x2; x1 ] )
# 32684 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let x : (Parsetree.expression) = Obj.magic x in
        let _2 : unit = Obj.magic _2 in
        let xs : (Parsetree.expression list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_x_ in
        let _v : (Parsetree.expression list) = 
# 813 "parser_raw.mly"
    ( x :: xs )
# 32721 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = x2;
          MenhirLib.EngineTypes.startp = _startpos_x2_;
          MenhirLib.EngineTypes.endp = _endpos_x2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x1;
              MenhirLib.EngineTypes.startp = _startpos_x1_;
              MenhirLib.EngineTypes.endp = _endpos_x1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let x2 : (Parsetree.expression) = Obj.magic x2 in
        let _2 : unit = Obj.magic _2 in
        let x1 : (Parsetree.expression) = Obj.magic x1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x1_ in
        let _endpos = _endpos_x2_ in
        let _v : (Parsetree.expression list) = 
# 817 "parser_raw.mly"
    ( [ x2; x1 ] )
# 32758 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let x : (Parsetree.core_type) = Obj.magic x in
        let _2 : unit = Obj.magic _2 in
        let xs : (Parsetree.core_type list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_x_ in
        let _v : (Parsetree.core_type list) = 
# 813 "parser_raw.mly"
    ( x :: xs )
# 32795 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = x2;
          MenhirLib.EngineTypes.startp = _startpos_x2_;
          MenhirLib.EngineTypes.endp = _endpos_x2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x1;
              MenhirLib.EngineTypes.startp = _startpos_x1_;
              MenhirLib.EngineTypes.endp = _endpos_x1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let x2 : (Parsetree.core_type) = Obj.magic x2 in
        let _2 : unit = Obj.magic _2 in
        let x1 : (Parsetree.core_type) = Obj.magic x1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x1_ in
        let _endpos = _endpos_x2_ in
        let _v : (Parsetree.core_type list) = 
# 817 "parser_raw.mly"
    ( [ x2; x1 ] )
# 32832 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.row_field) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.row_field) = 
# 3012 "parser_raw.mly"
      ( _1 )
# 32857 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.row_field) = let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3014 "parser_raw.mly"
      ( Rf.inherit_ ~loc:(make_loc _sloc) _1 )
# 32885 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Parsetree.expression) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Parsetree.expression list) = let _2 =
          
# 124 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( None )
# 32911 "parser_raw.ml"
          
        in
        
# 830 "parser_raw.mly"
    ( [x] )
# 32917 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = x0;
          MenhirLib.EngineTypes.startp = _startpos_x0_;
          MenhirLib.EngineTypes.endp = _endpos_x0_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let x0 : unit = Obj.magic x0 in
        let x : (Parsetree.expression) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x0_ in
        let _v : (Parsetree.expression list) = let _2 =
          let x = x0 in
          
# 126 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( Some x )
# 32950 "parser_raw.ml"
          
        in
        
# 830 "parser_raw.mly"
    ( [x] )
# 32956 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let xs : (Parsetree.expression list) = Obj.magic xs in
        let _2 : unit = Obj.magic _2 in
        let x : (Parsetree.expression) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.expression list) = 
# 834 "parser_raw.mly"
    ( x :: xs )
# 32993 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = oe0;
          MenhirLib.EngineTypes.startp = _startpos_oe0_;
          MenhirLib.EngineTypes.endp = _endpos_oe0_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1000;
            MenhirLib.EngineTypes.startp = _startpos__1000_;
            MenhirLib.EngineTypes.endp = _endpos__1000_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let oe0 : (Parsetree.expression option) = Obj.magic oe0 in
        let _1000 : (
# 564 "parser_raw.mly"
       (string)
# 33020 "parser_raw.ml"
        ) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos_oe0_ in
        let _v : ((string Location.loc * Parsetree.expression) list) = let _2 =
          
# 124 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( None )
# 33029 "parser_raw.ml"
          
        in
        let x =
          let _endpos_oe_ = _endpos_oe0_ in
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let oe = oe0 in
          let _100 = _1000 in
          let label =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _10 = _100 in
            let _1 =
              let _1 = _10 in
              
# 3073 "parser_raw.mly"
           ( _1 )
# 33047 "parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 33058 "parser_raw.ml"
            
          in
          let _startpos_label_ = _startpos__100_ in
          let _endpos = _endpos_oe_ in
          let _symbolstartpos = _startpos_label_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2308 "parser_raw.mly"
      ( let e =
          match oe with
          | None ->
              (* No expression; this is a pun. Desugar it. *)
              exp_of_label ~loc:_sloc label
          | Some e ->
              e
        in
        label, e )
# 33076 "parser_raw.ml"
          
        in
        
# 830 "parser_raw.mly"
    ( [x] )
# 33082 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = x0;
          MenhirLib.EngineTypes.startp = _startpos_x0_;
          MenhirLib.EngineTypes.endp = _endpos_x0_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = oe0;
            MenhirLib.EngineTypes.startp = _startpos_oe0_;
            MenhirLib.EngineTypes.endp = _endpos_oe0_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1000;
              MenhirLib.EngineTypes.startp = _startpos__1000_;
              MenhirLib.EngineTypes.endp = _endpos__1000_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let x0 : unit = Obj.magic x0 in
        let oe0 : (Parsetree.expression option) = Obj.magic oe0 in
        let _1000 : (
# 564 "parser_raw.mly"
       (string)
# 33115 "parser_raw.ml"
        ) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos_x0_ in
        let _v : ((string Location.loc * Parsetree.expression) list) = let _2 =
          let x = x0 in
          
# 126 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( Some x )
# 33125 "parser_raw.ml"
          
        in
        let x =
          let _endpos_oe_ = _endpos_oe0_ in
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let oe = oe0 in
          let _100 = _1000 in
          let label =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _10 = _100 in
            let _1 =
              let _1 = _10 in
              
# 3073 "parser_raw.mly"
           ( _1 )
# 33143 "parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 33154 "parser_raw.ml"
            
          in
          let _startpos_label_ = _startpos__100_ in
          let _endpos = _endpos_oe_ in
          let _symbolstartpos = _startpos_label_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2308 "parser_raw.mly"
      ( let e =
          match oe with
          | None ->
              (* No expression; this is a pun. Desugar it. *)
              exp_of_label ~loc:_sloc label
          | Some e ->
              e
        in
        label, e )
# 33172 "parser_raw.ml"
          
        in
        
# 830 "parser_raw.mly"
    ( [x] )
# 33178 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = oe0;
              MenhirLib.EngineTypes.startp = _startpos_oe0_;
              MenhirLib.EngineTypes.endp = _endpos_oe0_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1000;
                MenhirLib.EngineTypes.startp = _startpos__1000_;
                MenhirLib.EngineTypes.endp = _endpos__1000_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let xs : ((string Location.loc * Parsetree.expression) list) = Obj.magic xs in
        let _2 : unit = Obj.magic _2 in
        let oe0 : (Parsetree.expression option) = Obj.magic oe0 in
        let _1000 : (
# 564 "parser_raw.mly"
       (string)
# 33217 "parser_raw.ml"
        ) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos_xs_ in
        let _v : ((string Location.loc * Parsetree.expression) list) = let x =
          let _endpos_oe_ = _endpos_oe0_ in
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let oe = oe0 in
          let _100 = _1000 in
          let label =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _10 = _100 in
            let _1 =
              let _1 = _10 in
              
# 3073 "parser_raw.mly"
           ( _1 )
# 33237 "parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 33248 "parser_raw.ml"
            
          in
          let _startpos_label_ = _startpos__100_ in
          let _endpos = _endpos_oe_ in
          let _symbolstartpos = _startpos_label_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2308 "parser_raw.mly"
      ( let e =
          match oe with
          | None ->
              (* No expression; this is a pun. Desugar it. *)
              exp_of_label ~loc:_sloc label
          | Some e ->
              e
        in
        label, e )
# 33266 "parser_raw.ml"
          
        in
        
# 834 "parser_raw.mly"
    ( x :: xs )
# 33272 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Parsetree.pattern) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Parsetree.pattern list) = let _2 =
          
# 124 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( None )
# 33298 "parser_raw.ml"
          
        in
        
# 830 "parser_raw.mly"
    ( [x] )
# 33304 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = x0;
          MenhirLib.EngineTypes.startp = _startpos_x0_;
          MenhirLib.EngineTypes.endp = _endpos_x0_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let x0 : unit = Obj.magic x0 in
        let x : (Parsetree.pattern) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x0_ in
        let _v : (Parsetree.pattern list) = let _2 =
          let x = x0 in
          
# 126 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( Some x )
# 33337 "parser_raw.ml"
          
        in
        
# 830 "parser_raw.mly"
    ( [x] )
# 33343 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let xs : (Parsetree.pattern list) = Obj.magic xs in
        let _2 : unit = Obj.magic _2 in
        let x : (Parsetree.pattern) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.pattern list) = 
# 834 "parser_raw.mly"
    ( x :: xs )
# 33380 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = eo0;
          MenhirLib.EngineTypes.startp = _startpos_eo0_;
          MenhirLib.EngineTypes.endp = _endpos_eo0_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = c0;
            MenhirLib.EngineTypes.startp = _startpos_c0_;
            MenhirLib.EngineTypes.endp = _endpos_c0_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _100;
              MenhirLib.EngineTypes.startp = _startpos__100_;
              MenhirLib.EngineTypes.endp = _endpos__100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let eo0 : (Parsetree.expression option) = Obj.magic eo0 in
        let c0 : ((Parsetree.core_type option * Parsetree.core_type option) option) = Obj.magic c0 in
        let _100 : (Longident.t) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos_eo0_ in
        let _v : ((Longident.t Location.loc * Parsetree.expression) list) = let _2 =
          
# 124 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( None )
# 33418 "parser_raw.ml"
          
        in
        let x =
          let _endpos_eo_ = _endpos_eo0_ in
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let eo = eo0 in
          let c = c0 in
          let _10 = _100 in
          let label =
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _1 = _10 in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 33438 "parser_raw.ml"
            
          in
          let _startpos_label_ = _startpos__10_ in
          let _endpos = _endpos_eo_ in
          let _symbolstartpos = _startpos_label_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2291 "parser_raw.mly"
      ( let e =
          match eo with
          | None ->
              (* No pattern; this is a pun. Desugar it. *)
              exp_of_longident ~loc:_sloc label
          | Some e ->
              e
        in
        label, mkexp_opt_constraint ~loc:_sloc e c )
# 33456 "parser_raw.ml"
          
        in
        
# 830 "parser_raw.mly"
    ( [x] )
# 33462 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = x0;
          MenhirLib.EngineTypes.startp = _startpos_x0_;
          MenhirLib.EngineTypes.endp = _endpos_x0_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = eo0;
            MenhirLib.EngineTypes.startp = _startpos_eo0_;
            MenhirLib.EngineTypes.endp = _endpos_eo0_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = c0;
              MenhirLib.EngineTypes.startp = _startpos_c0_;
              MenhirLib.EngineTypes.endp = _endpos_c0_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _100;
                MenhirLib.EngineTypes.startp = _startpos__100_;
                MenhirLib.EngineTypes.endp = _endpos__100_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let x0 : unit = Obj.magic x0 in
        let eo0 : (Parsetree.expression option) = Obj.magic eo0 in
        let c0 : ((Parsetree.core_type option * Parsetree.core_type option) option) = Obj.magic c0 in
        let _100 : (Longident.t) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos_x0_ in
        let _v : ((Longident.t Location.loc * Parsetree.expression) list) = let _2 =
          let x = x0 in
          
# 126 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( Some x )
# 33507 "parser_raw.ml"
          
        in
        let x =
          let _endpos_eo_ = _endpos_eo0_ in
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let eo = eo0 in
          let c = c0 in
          let _10 = _100 in
          let label =
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _1 = _10 in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 33527 "parser_raw.ml"
            
          in
          let _startpos_label_ = _startpos__10_ in
          let _endpos = _endpos_eo_ in
          let _symbolstartpos = _startpos_label_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2291 "parser_raw.mly"
      ( let e =
          match eo with
          | None ->
              (* No pattern; this is a pun. Desugar it. *)
              exp_of_longident ~loc:_sloc label
          | Some e ->
              e
        in
        label, mkexp_opt_constraint ~loc:_sloc e c )
# 33545 "parser_raw.ml"
          
        in
        
# 830 "parser_raw.mly"
    ( [x] )
# 33551 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = eo0;
              MenhirLib.EngineTypes.startp = _startpos_eo0_;
              MenhirLib.EngineTypes.endp = _endpos_eo0_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = c0;
                MenhirLib.EngineTypes.startp = _startpos_c0_;
                MenhirLib.EngineTypes.endp = _endpos_c0_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _100;
                  MenhirLib.EngineTypes.startp = _startpos__100_;
                  MenhirLib.EngineTypes.endp = _endpos__100_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let xs : ((Longident.t Location.loc * Parsetree.expression) list) = Obj.magic xs in
        let _2 : unit = Obj.magic _2 in
        let eo0 : (Parsetree.expression option) = Obj.magic eo0 in
        let c0 : ((Parsetree.core_type option * Parsetree.core_type option) option) = Obj.magic c0 in
        let _100 : (Longident.t) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos_xs_ in
        let _v : ((Longident.t Location.loc * Parsetree.expression) list) = let x =
          let _endpos_eo_ = _endpos_eo0_ in
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let eo = eo0 in
          let c = c0 in
          let _10 = _100 in
          let label =
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _1 = _10 in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 33614 "parser_raw.ml"
            
          in
          let _startpos_label_ = _startpos__10_ in
          let _endpos = _endpos_eo_ in
          let _symbolstartpos = _startpos_label_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2291 "parser_raw.mly"
      ( let e =
          match eo with
          | None ->
              (* No pattern; this is a pun. Desugar it. *)
              exp_of_longident ~loc:_sloc label
          | Some e ->
              e
        in
        label, mkexp_opt_constraint ~loc:_sloc e c )
# 33632 "parser_raw.ml"
          
        in
        
# 834 "parser_raw.mly"
    ( x :: xs )
# 33638 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.expression) = 
# 1813 "parser_raw.mly"
                          ( _1 )
# 33663 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.expression) = 
# 1814 "parser_raw.mly"
              ( _1 )
# 33694 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _300;
          MenhirLib.EngineTypes.startp = _startpos__300_;
          MenhirLib.EngineTypes.endp = _endpos__300_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _200;
            MenhirLib.EngineTypes.startp = _startpos__200_;
            MenhirLib.EngineTypes.endp = _endpos__200_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _100;
              MenhirLib.EngineTypes.startp = _startpos__100_;
              MenhirLib.EngineTypes.endp = _endpos__100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _300 : (Parsetree.expression) = Obj.magic _300 in
        let _200 : unit = Obj.magic _200 in
        let _100 : (Parsetree.expression) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__300_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__30_ = _endpos__300_ in
          let _startpos__10_ = _startpos__100_ in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            
# 1816 "parser_raw.mly"
    ( Pexp_sequence(_1, _3) )
# 33741 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__30_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 721 "parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 33752 "parser_raw.ml"
          
        in
        
# 1817 "parser_raw.mly"
    ( _1 )
# 33758 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _4 : (string Location.loc) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1819 "parser_raw.mly"
    ( let seq = mkexp ~loc:_sloc (Pexp_sequence (_1, _5)) in
      let payload = PStr [mkstrexp seq []] in
      mkexp ~loc:_sloc (Pexp_extension (_4, payload)) )
# 33812 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _13;
          MenhirLib.EngineTypes.startp = _startpos__13_;
          MenhirLib.EngineTypes.endp = _endpos__13_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _12;
            MenhirLib.EngineTypes.startp = _startpos__12_;
            MenhirLib.EngineTypes.endp = _endpos__12_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = args_res;
              MenhirLib.EngineTypes.startp = _startpos_args_res_;
              MenhirLib.EngineTypes.endp = _endpos_args_res_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _11;
                MenhirLib.EngineTypes.startp = _startpos__11_;
                MenhirLib.EngineTypes.endp = _endpos__11_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _10;
                  MenhirLib.EngineTypes.startp = _startpos__10_;
                  MenhirLib.EngineTypes.endp = _endpos__10_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = ext;
                    MenhirLib.EngineTypes.startp = _startpos_ext_;
                    MenhirLib.EngineTypes.endp = _endpos_ext_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _13 : (Parsetree.attributes) = Obj.magic _13 in
        let _12 : (Parsetree.attributes) = Obj.magic _12 in
        let args_res : (Parsetree.constructor_arguments * Parsetree.core_type option) = Obj.magic args_res in
        let _11 : (string) = Obj.magic _11 in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__13_ in
        let _v : (Parsetree.type_exception * string Location.loc option) = let attrs =
          let _1 = _13 in
          
# 3368 "parser_raw.mly"
    ( _1 )
# 33875 "parser_raw.ml"
          
        in
        let _endpos_attrs_ = _endpos__13_ in
        let attrs2 =
          let _1 = _12 in
          
# 3372 "parser_raw.mly"
    ( _1 )
# 33884 "parser_raw.ml"
          
        in
        let id =
          let _endpos__1_ = _endpos__11_ in
          let _startpos__1_ = _startpos__11_ in
          let _1 = _11 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 33897 "parser_raw.ml"
          
        in
        let attrs1 =
          let _1 = _10 in
          
# 3372 "parser_raw.mly"
    ( _1 )
# 33905 "parser_raw.ml"
          
        in
        let _endpos = _endpos_attrs_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2714 "parser_raw.mly"
    ( let args, res = args_res in
      let loc = make_loc _sloc in
      let docs = symbol_docs _sloc in
      Te.mk_exception ~attrs
        (Te.decl id ~args ?res ~attrs:(attrs1 @ attrs2) ~loc ~docs)
      , ext )
# 33919 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = xss00;
          MenhirLib.EngineTypes.startp = _startpos_xss00_;
          MenhirLib.EngineTypes.endp = _endpos_xss00_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let xss00 : (Parsetree.signature_item list list) = Obj.magic xss00 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xss00_ in
        let _endpos = _endpos_xss00_ in
        let _v : (Parsetree.signature) = let _1 =
          let _endpos_xss0_ = _endpos_xss00_ in
          let _startpos_xss0_ = _startpos_xss00_ in
          let xss0 = xss00 in
          let _1 =
            let xss = xss0 in
            
# 260 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( List.flatten xss )
# 33950 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_xss0_ in
          let _startpos__1_ = _startpos_xss0_ in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          
# 686 "parser_raw.mly"
                              ( extra_sig _startpos _endpos _1 )
# 33960 "parser_raw.ml"
          
        in
        
# 1302 "parser_raw.mly"
    ( _1 )
# 33966 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let _1 : (Parsetree.extension) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__10_ in
        let _v : (Parsetree.signature_item) = let _2 =
          let _1 = _10 in
          
# 3368 "parser_raw.mly"
    ( _1 )
# 33999 "parser_raw.ml"
          
        in
        let _endpos__2_ = _endpos__10_ in
        let _endpos = _endpos__2_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1315 "parser_raw.mly"
      ( let docs = symbol_docs _sloc in
        mksig ~loc:_sloc (Psig_extension (_1, (add_docs_attrs docs _2))) )
# 34010 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _100 : (Parsetree.attribute) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__100_ in
        let _v : (Parsetree.signature_item) = let _1 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 1319 "parser_raw.mly"
        ( Psig_attribute _1 )
# 34041 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 729 "parser_raw.mly"
    ( mksig ~loc:_sloc _1 )
# 34052 "parser_raw.ml"
          
        in
        
# 1321 "parser_raw.mly"
    ( _1 )
# 34058 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _100 : (Parsetree.value_description * string Location.loc option) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__100_ in
        let _v : (Parsetree.signature_item) = let _1 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 1324 "parser_raw.mly"
        ( psig_value _1 )
# 34089 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 745 "parser_raw.mly"
    ( wrap_mksig_ext ~loc:_sloc _1 )
# 34100 "parser_raw.ml"
          
        in
        
# 1354 "parser_raw.mly"
    ( _1 )
# 34106 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _100 : (Parsetree.value_description * string Location.loc option) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__100_ in
        let _v : (Parsetree.signature_item) = let _1 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 1326 "parser_raw.mly"
        ( psig_value _1 )
# 34137 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 745 "parser_raw.mly"
    ( wrap_mksig_ext ~loc:_sloc _1 )
# 34148 "parser_raw.ml"
          
        in
        
# 1354 "parser_raw.mly"
    ( _1 )
# 34154 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = bs00000;
          MenhirLib.EngineTypes.startp = _startpos_bs00000_;
          MenhirLib.EngineTypes.endp = _endpos_bs00000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = a00000;
            MenhirLib.EngineTypes.startp = _startpos_a00000_;
            MenhirLib.EngineTypes.endp = _endpos_a00000_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let bs00000 : (Parsetree.type_declaration list) = Obj.magic bs00000 in
        let a00000 : ((Asttypes.rec_flag * string Location.loc option) *
  Parsetree.type_declaration) = Obj.magic a00000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_a00000_ in
        let _endpos = _endpos_bs00000_ in
        let _v : (Parsetree.signature_item) = let _1 =
          let _endpos_bs0000_ = _endpos_bs00000_ in
          let _startpos_a0000_ = _startpos_a00000_ in
          let bs0000 = bs00000 in
          let a0000 = a00000 in
          let _1 =
            let bs000 = bs0000 in
            let a000 = a0000 in
            let _1 =
              let bs00 = bs000 in
              let a00 = a000 in
              let _1 =
                let bs0 = bs00 in
                let a0 = a00 in
                let _1 =
                  let bs = bs0 in
                  let a = a0 in
                  
# 881 "parser_raw.mly"
    ( let (x, b) = a in x, b :: bs )
# 34203 "parser_raw.ml"
                  
                in
                
# 2552 "parser_raw.mly"
  ( _1 )
# 34209 "parser_raw.ml"
                
              in
              
# 2538 "parser_raw.mly"
    ( _1 )
# 34215 "parser_raw.ml"
              
            in
            
# 1328 "parser_raw.mly"
        ( psig_type _1 )
# 34221 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_bs0000_ in
          let _startpos__1_ = _startpos_a0000_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 745 "parser_raw.mly"
    ( wrap_mksig_ext ~loc:_sloc _1 )
# 34232 "parser_raw.ml"
          
        in
        
# 1354 "parser_raw.mly"
    ( _1 )
# 34238 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = bs00000;
          MenhirLib.EngineTypes.startp = _startpos_bs00000_;
          MenhirLib.EngineTypes.endp = _endpos_bs00000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = a00000;
            MenhirLib.EngineTypes.startp = _startpos_a00000_;
            MenhirLib.EngineTypes.endp = _endpos_a00000_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let bs00000 : (Parsetree.type_declaration list) = Obj.magic bs00000 in
        let a00000 : ((Asttypes.rec_flag * string Location.loc option) *
  Parsetree.type_declaration) = Obj.magic a00000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_a00000_ in
        let _endpos = _endpos_bs00000_ in
        let _v : (Parsetree.signature_item) = let _1 =
          let _endpos_bs0000_ = _endpos_bs00000_ in
          let _startpos_a0000_ = _startpos_a00000_ in
          let bs0000 = bs00000 in
          let a0000 = a00000 in
          let _1 =
            let bs000 = bs0000 in
            let a000 = a0000 in
            let _1 =
              let bs00 = bs000 in
              let a00 = a000 in
              let _1 =
                let bs0 = bs00 in
                let a0 = a00 in
                let _1 =
                  let bs = bs0 in
                  let a = a0 in
                  
# 881 "parser_raw.mly"
    ( let (x, b) = a in x, b :: bs )
# 34287 "parser_raw.ml"
                  
                in
                
# 2552 "parser_raw.mly"
  ( _1 )
# 34293 "parser_raw.ml"
                
              in
              
# 2542 "parser_raw.mly"
    ( _1 )
# 34299 "parser_raw.ml"
              
            in
            
# 1330 "parser_raw.mly"
        ( psig_typesubst _1 )
# 34305 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_bs0000_ in
          let _startpos__1_ = _startpos_a0000_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 745 "parser_raw.mly"
    ( wrap_mksig_ext ~loc:_sloc _1 )
# 34316 "parser_raw.ml"
          
        in
        
# 1354 "parser_raw.mly"
    ( _1 )
# 34322 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _120000;
          MenhirLib.EngineTypes.startp = _startpos__120000_;
          MenhirLib.EngineTypes.endp = _endpos__120000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = xs00000;
            MenhirLib.EngineTypes.startp = _startpos_xs00000_;
            MenhirLib.EngineTypes.endp = _endpos_xs00000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = priv0000;
              MenhirLib.EngineTypes.startp = _startpos_priv0000_;
              MenhirLib.EngineTypes.endp = _endpos_priv0000_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _70000;
                MenhirLib.EngineTypes.startp = _startpos__70000_;
                MenhirLib.EngineTypes.endp = _endpos__70000_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _110000;
                  MenhirLib.EngineTypes.startp = _startpos__110000_;
                  MenhirLib.EngineTypes.endp = _endpos__110000_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = params0000;
                    MenhirLib.EngineTypes.startp = _startpos_params0000_;
                    MenhirLib.EngineTypes.endp = _endpos_params0000_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = _100000;
                      MenhirLib.EngineTypes.startp = _startpos__100000_;
                      MenhirLib.EngineTypes.endp = _endpos__100000_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.semv = ext0000;
                        MenhirLib.EngineTypes.startp = _startpos_ext0000_;
                        MenhirLib.EngineTypes.endp = _endpos_ext0000_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _13000;
                          MenhirLib.EngineTypes.startp = _startpos__13000_;
                          MenhirLib.EngineTypes.endp = _endpos__13000_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _120000 : (Parsetree.attributes) = Obj.magic _120000 in
        let xs00000 : (Parsetree.extension_constructor list) = Obj.magic xs00000 in
        let priv0000 : (Asttypes.private_flag) = Obj.magic priv0000 in
        let _70000 : unit = Obj.magic _70000 in
        let _110000 : (Longident.t) = Obj.magic _110000 in
        let params0000 : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic params0000 in
        let _100000 : (Parsetree.attributes) = Obj.magic _100000 in
        let ext0000 : (string Location.loc option) = Obj.magic ext0000 in
        let _13000 : unit = Obj.magic _13000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__13000_ in
        let _endpos = _endpos__120000_ in
        let _v : (Parsetree.signature_item) = let _1 =
          let _startpos__1300_ = _startpos__13000_ in
          let _endpos__12000_ = _endpos__120000_ in
          let _endpos__11000_ = _endpos__110000_ in
          let _startpos__11000_ = _startpos__110000_ in
          let _12000 = _120000 in
          let xs0000 = xs00000 in
          let priv000 = priv0000 in
          let _7000 = _70000 in
          let _11000 = _110000 in
          let params000 = params0000 in
          let _10000 = _100000 in
          let ext000 = ext0000 in
          let _1300 = _13000 in
          let _1 =
            let _startpos__130_ = _startpos__1300_ in
            let _endpos__1200_ = _endpos__12000_ in
            let _endpos__1100_ = _endpos__11000_ in
            let _startpos__1100_ = _startpos__11000_ in
            let _1200 = _12000 in
            let xs000 = xs0000 in
            let priv00 = priv000 in
            let _700 = _7000 in
            let _1100 = _11000 in
            let params00 = params000 in
            let _1000 = _10000 in
            let ext00 = ext000 in
            let _130 = _1300 in
            let _1 =
              let _startpos__13_ = _startpos__130_ in
              let _endpos__120_ = _endpos__1200_ in
              let _endpos__110_ = _endpos__1100_ in
              let _startpos__110_ = _startpos__1100_ in
              let _120 = _1200 in
              let xs00 = xs000 in
              let priv0 = priv00 in
              let _70 = _700 in
              let _110 = _1100 in
              let params0 = params00 in
              let _100 = _1000 in
              let ext0 = ext00 in
              let _13 = _130 in
              let _1 =
                let _endpos__12_ = _endpos__120_ in
                let _endpos__11_ = _endpos__110_ in
                let _startpos__11_ = _startpos__110_ in
                let _startpos__1_ = _startpos__13_ in
                let _12 = _120 in
                let xs0 = xs00 in
                let priv = priv0 in
                let _7 = _70 in
                let _11 = _110 in
                let params = params0 in
                let _10 = _100 in
                let ext = ext0 in
                let _1 = _13 in
                let attrs2 =
                  let _1 = _12 in
                  
# 3368 "parser_raw.mly"
    ( _1 )
# 34453 "parser_raw.ml"
                  
                in
                let _endpos_attrs2_ = _endpos__12_ in
                let cs =
                  let xs = xs0 in
                  
# 875 "parser_raw.mly"
    ( List.rev xs )
# 34462 "parser_raw.ml"
                  
                in
                let tid =
                  let _endpos__1_ = _endpos__11_ in
                  let _startpos__1_ = _startpos__11_ in
                  let _1 = _11 in
                  let _endpos = _endpos__1_ in
                  let _symbolstartpos = _startpos__1_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 34475 "parser_raw.ml"
                  
                in
                let _4 =
                  
# 3221 "parser_raw.mly"
                ( Recursive )
# 34482 "parser_raw.ml"
                  
                in
                let attrs1 =
                  let _1 = _10 in
                  
# 3372 "parser_raw.mly"
    ( _1 )
# 34490 "parser_raw.ml"
                  
                in
                let _endpos = _endpos_attrs2_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 2779 "parser_raw.mly"
    ( let docs = symbol_docs _sloc in
      let attrs = attrs1 @ attrs2 in
      Te.mk tid cs ~params ~priv ~attrs ~docs,
      ext )
# 34502 "parser_raw.ml"
                
              in
              
# 2766 "parser_raw.mly"
    ( _1 )
# 34508 "parser_raw.ml"
              
            in
            
# 1332 "parser_raw.mly"
        ( psig_typext _1 )
# 34514 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__12000_ in
          let _startpos__1_ = _startpos__1300_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 745 "parser_raw.mly"
    ( wrap_mksig_ext ~loc:_sloc _1 )
# 34525 "parser_raw.ml"
          
        in
        
# 1354 "parser_raw.mly"
    ( _1 )
# 34531 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _130000;
          MenhirLib.EngineTypes.startp = _startpos__130000_;
          MenhirLib.EngineTypes.endp = _endpos__130000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = xs00000;
            MenhirLib.EngineTypes.startp = _startpos_xs00000_;
            MenhirLib.EngineTypes.endp = _endpos_xs00000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = priv0000;
              MenhirLib.EngineTypes.startp = _startpos_priv0000_;
              MenhirLib.EngineTypes.endp = _endpos_priv0000_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _70000;
                MenhirLib.EngineTypes.startp = _startpos__70000_;
                MenhirLib.EngineTypes.endp = _endpos__70000_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _120000;
                  MenhirLib.EngineTypes.startp = _startpos__120000_;
                  MenhirLib.EngineTypes.endp = _endpos__120000_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = params0000;
                    MenhirLib.EngineTypes.startp = _startpos_params0000_;
                    MenhirLib.EngineTypes.endp = _endpos_params0000_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = _110000;
                      MenhirLib.EngineTypes.startp = _startpos__110000_;
                      MenhirLib.EngineTypes.endp = _endpos__110000_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.semv = _100000;
                        MenhirLib.EngineTypes.startp = _startpos__100000_;
                        MenhirLib.EngineTypes.endp = _endpos__100000_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.semv = ext0000;
                          MenhirLib.EngineTypes.startp = _startpos_ext0000_;
                          MenhirLib.EngineTypes.endp = _endpos_ext0000_;
                          MenhirLib.EngineTypes.next = {
                            MenhirLib.EngineTypes.state = _menhir_s;
                            MenhirLib.EngineTypes.semv = _14000;
                            MenhirLib.EngineTypes.startp = _startpos__14000_;
                            MenhirLib.EngineTypes.endp = _endpos__14000_;
                            MenhirLib.EngineTypes.next = _menhir_stack;
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _130000 : (Parsetree.attributes) = Obj.magic _130000 in
        let xs00000 : (Parsetree.extension_constructor list) = Obj.magic xs00000 in
        let priv0000 : (Asttypes.private_flag) = Obj.magic priv0000 in
        let _70000 : unit = Obj.magic _70000 in
        let _120000 : (Longident.t) = Obj.magic _120000 in
        let params0000 : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic params0000 in
        let _110000 : unit = Obj.magic _110000 in
        let _100000 : (Parsetree.attributes) = Obj.magic _100000 in
        let ext0000 : (string Location.loc option) = Obj.magic ext0000 in
        let _14000 : unit = Obj.magic _14000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__14000_ in
        let _endpos = _endpos__130000_ in
        let _v : (Parsetree.signature_item) = let _1 =
          let _startpos__1400_ = _startpos__14000_ in
          let _endpos__13000_ = _endpos__130000_ in
          let _endpos__12000_ = _endpos__120000_ in
          let _startpos__12000_ = _startpos__120000_ in
          let _endpos__11000_ = _endpos__110000_ in
          let _startpos__11000_ = _startpos__110000_ in
          let _13000 = _130000 in
          let xs0000 = xs00000 in
          let priv000 = priv0000 in
          let _7000 = _70000 in
          let _12000 = _120000 in
          let params000 = params0000 in
          let _11000 = _110000 in
          let _10000 = _100000 in
          let ext000 = ext0000 in
          let _1400 = _14000 in
          let _1 =
            let _startpos__140_ = _startpos__1400_ in
            let _endpos__1300_ = _endpos__13000_ in
            let _endpos__1200_ = _endpos__12000_ in
            let _startpos__1200_ = _startpos__12000_ in
            let _endpos__1100_ = _endpos__11000_ in
            let _startpos__1100_ = _startpos__11000_ in
            let _1300 = _13000 in
            let xs000 = xs0000 in
            let priv00 = priv000 in
            let _700 = _7000 in
            let _1200 = _12000 in
            let params00 = params000 in
            let _1100 = _11000 in
            let _1000 = _10000 in
            let ext00 = ext000 in
            let _140 = _1400 in
            let _1 =
              let _startpos__14_ = _startpos__140_ in
              let _endpos__130_ = _endpos__1300_ in
              let _endpos__120_ = _endpos__1200_ in
              let _startpos__120_ = _startpos__1200_ in
              let _endpos__110_ = _endpos__1100_ in
              let _startpos__110_ = _startpos__1100_ in
              let _130 = _1300 in
              let xs00 = xs000 in
              let priv0 = priv00 in
              let _70 = _700 in
              let _120 = _1200 in
              let params0 = params00 in
              let _110 = _1100 in
              let _100 = _1000 in
              let ext0 = ext00 in
              let _14 = _140 in
              let _1 =
                let _endpos__13_ = _endpos__130_ in
                let _endpos__12_ = _endpos__120_ in
                let _startpos__12_ = _startpos__120_ in
                let _endpos__11_ = _endpos__110_ in
                let _startpos__11_ = _startpos__110_ in
                let _startpos__1_ = _startpos__14_ in
                let _13 = _130 in
                let xs0 = xs00 in
                let priv = priv0 in
                let _7 = _70 in
                let _12 = _120 in
                let params = params0 in
                let _11 = _110 in
                let _10 = _100 in
                let ext = ext0 in
                let _1 = _14 in
                let attrs2 =
                  let _1 = _13 in
                  
# 3368 "parser_raw.mly"
    ( _1 )
# 34680 "parser_raw.ml"
                  
                in
                let _endpos_attrs2_ = _endpos__13_ in
                let cs =
                  let xs = xs0 in
                  
# 875 "parser_raw.mly"
    ( List.rev xs )
# 34689 "parser_raw.ml"
                  
                in
                let tid =
                  let _endpos__1_ = _endpos__12_ in
                  let _startpos__1_ = _startpos__12_ in
                  let _1 = _12 in
                  let _endpos = _endpos__1_ in
                  let _symbolstartpos = _startpos__1_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 34702 "parser_raw.ml"
                  
                in
                let _4 =
                  let _endpos__1_ = _endpos__11_ in
                  let _startpos__1_ = _startpos__11_ in
                  let _1 = _11 in
                  let _endpos = _endpos__1_ in
                  let _startpos = _startpos__1_ in
                  let _loc = (_startpos, _endpos) in
                  
# 3222 "parser_raw.mly"
           ( not_expecting _loc "nonrec flag" )
# 34715 "parser_raw.ml"
                  
                in
                let attrs1 =
                  let _1 = _10 in
                  
# 3372 "parser_raw.mly"
    ( _1 )
# 34723 "parser_raw.ml"
                  
                in
                let _endpos = _endpos_attrs2_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 2779 "parser_raw.mly"
    ( let docs = symbol_docs _sloc in
      let attrs = attrs1 @ attrs2 in
      Te.mk tid cs ~params ~priv ~attrs ~docs,
      ext )
# 34735 "parser_raw.ml"
                
              in
              
# 2766 "parser_raw.mly"
    ( _1 )
# 34741 "parser_raw.ml"
              
            in
            
# 1332 "parser_raw.mly"
        ( psig_typext _1 )
# 34747 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__13000_ in
          let _startpos__1_ = _startpos__1400_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 745 "parser_raw.mly"
    ( wrap_mksig_ext ~loc:_sloc _1 )
# 34758 "parser_raw.ml"
          
        in
        
# 1354 "parser_raw.mly"
    ( _1 )
# 34764 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _100 : (Parsetree.type_exception * string Location.loc option) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__100_ in
        let _v : (Parsetree.signature_item) = let _1 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 1334 "parser_raw.mly"
        ( psig_exception _1 )
# 34795 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 745 "parser_raw.mly"
    ( wrap_mksig_ext ~loc:_sloc _1 )
# 34806 "parser_raw.ml"
          
        in
        
# 1354 "parser_raw.mly"
    ( _1 )
# 34812 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _12000;
          MenhirLib.EngineTypes.startp = _startpos__12000_;
          MenhirLib.EngineTypes.endp = _endpos__12000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = body000;
            MenhirLib.EngineTypes.startp = _startpos_body000_;
            MenhirLib.EngineTypes.endp = _endpos_body000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _11000;
              MenhirLib.EngineTypes.startp = _startpos__11000_;
              MenhirLib.EngineTypes.endp = _endpos__11000_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _10000;
                MenhirLib.EngineTypes.startp = _startpos__10000_;
                MenhirLib.EngineTypes.endp = _endpos__10000_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = ext000;
                  MenhirLib.EngineTypes.startp = _startpos_ext000_;
                  MenhirLib.EngineTypes.endp = _endpos_ext000_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1300;
                    MenhirLib.EngineTypes.startp = _startpos__1300_;
                    MenhirLib.EngineTypes.endp = _endpos__1300_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _12000 : (Parsetree.attributes) = Obj.magic _12000 in
        let body000 : (Parsetree.module_type) = Obj.magic body000 in
        let _11000 : (
# 610 "parser_raw.mly"
       (string)
# 34860 "parser_raw.ml"
        ) = Obj.magic _11000 in
        let _10000 : (Parsetree.attributes) = Obj.magic _10000 in
        let ext000 : (string Location.loc option) = Obj.magic ext000 in
        let _1300 : unit = Obj.magic _1300 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1300_ in
        let _endpos = _endpos__12000_ in
        let _v : (Parsetree.signature_item) = let _1 =
          let _startpos__130_ = _startpos__1300_ in
          let _endpos__1200_ = _endpos__12000_ in
          let _endpos__1100_ = _endpos__11000_ in
          let _startpos__1100_ = _startpos__11000_ in
          let _1200 = _12000 in
          let body00 = body000 in
          let _1100 = _11000 in
          let _1000 = _10000 in
          let ext00 = ext000 in
          let _130 = _1300 in
          let _1 =
            let _startpos__13_ = _startpos__130_ in
            let _endpos__120_ = _endpos__1200_ in
            let _endpos__110_ = _endpos__1100_ in
            let _startpos__110_ = _startpos__1100_ in
            let _120 = _1200 in
            let body0 = body00 in
            let _110 = _1100 in
            let _100 = _1000 in
            let ext0 = ext00 in
            let _13 = _130 in
            let _1 =
              let _endpos__12_ = _endpos__120_ in
              let _endpos__11_ = _endpos__110_ in
              let _startpos__11_ = _startpos__110_ in
              let _startpos__1_ = _startpos__13_ in
              let _12 = _120 in
              let body = body0 in
              let _11 = _110 in
              let _10 = _100 in
              let ext = ext0 in
              let _1 = _13 in
              let attrs2 =
                let _1 = _12 in
                
# 3368 "parser_raw.mly"
    ( _1 )
# 34906 "parser_raw.ml"
                
              in
              let _endpos_attrs2_ = _endpos__12_ in
              let uid =
                let _endpos__1_ = _endpos__11_ in
                let _startpos__1_ = _startpos__11_ in
                let _1 = _11 in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 34920 "parser_raw.ml"
                
              in
              let attrs1 =
                let _1 = _10 in
                
# 3372 "parser_raw.mly"
    ( _1 )
# 34928 "parser_raw.ml"
                
              in
              let _endpos = _endpos_attrs2_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 1362 "parser_raw.mly"
  (
    let attrs = attrs1 @ attrs2 in
    let loc = make_loc _sloc in
    let docs = symbol_docs _sloc in
    Md.mk uid body ~attrs ~loc ~docs, ext
  )
# 34942 "parser_raw.ml"
              
            in
            
# 1336 "parser_raw.mly"
        ( let (body, ext) = _1 in (Psig_module body, ext) )
# 34948 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__1200_ in
          let _startpos__1_ = _startpos__130_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 745 "parser_raw.mly"
    ( wrap_mksig_ext ~loc:_sloc _1 )
# 34959 "parser_raw.ml"
          
        in
        
# 1354 "parser_raw.mly"
    ( _1 )
# 34965 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _12000;
          MenhirLib.EngineTypes.startp = _startpos__12000_;
          MenhirLib.EngineTypes.endp = _endpos__12000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _100000;
            MenhirLib.EngineTypes.startp = _startpos__100000_;
            MenhirLib.EngineTypes.endp = _endpos__100000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _5000;
              MenhirLib.EngineTypes.startp = _startpos__5000_;
              MenhirLib.EngineTypes.endp = _endpos__5000_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _11000;
                MenhirLib.EngineTypes.startp = _startpos__11000_;
                MenhirLib.EngineTypes.endp = _endpos__11000_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _10100;
                  MenhirLib.EngineTypes.startp = _startpos__10100_;
                  MenhirLib.EngineTypes.endp = _endpos__10100_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = ext000;
                    MenhirLib.EngineTypes.startp = _startpos_ext000_;
                    MenhirLib.EngineTypes.endp = _endpos_ext000_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1300;
                      MenhirLib.EngineTypes.startp = _startpos__1300_;
                      MenhirLib.EngineTypes.endp = _endpos__1300_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _12000 : (Parsetree.attributes) = Obj.magic _12000 in
        let _100000 : (Longident.t) = Obj.magic _100000 in
        let _5000 : unit = Obj.magic _5000 in
        let _11000 : (
# 610 "parser_raw.mly"
       (string)
# 35019 "parser_raw.ml"
        ) = Obj.magic _11000 in
        let _10100 : (Parsetree.attributes) = Obj.magic _10100 in
        let ext000 : (string Location.loc option) = Obj.magic ext000 in
        let _1300 : unit = Obj.magic _1300 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1300_ in
        let _endpos = _endpos__12000_ in
        let _v : (Parsetree.signature_item) = let _1 =
          let _startpos__130_ = _startpos__1300_ in
          let _endpos__1200_ = _endpos__12000_ in
          let _endpos__1100_ = _endpos__11000_ in
          let _startpos__1100_ = _startpos__11000_ in
          let _endpos__10000_ = _endpos__100000_ in
          let _startpos__10000_ = _startpos__100000_ in
          let _1200 = _12000 in
          let _10000 = _100000 in
          let _500 = _5000 in
          let _1100 = _11000 in
          let _1010 = _10100 in
          let ext00 = ext000 in
          let _130 = _1300 in
          let _1 =
            let _startpos__13_ = _startpos__130_ in
            let _endpos__120_ = _endpos__1200_ in
            let _endpos__110_ = _endpos__1100_ in
            let _startpos__110_ = _startpos__1100_ in
            let _endpos__1000_ = _endpos__10000_ in
            let _startpos__1000_ = _startpos__10000_ in
            let _120 = _1200 in
            let _1000 = _10000 in
            let _50 = _500 in
            let _110 = _1100 in
            let _101 = _1010 in
            let ext0 = ext00 in
            let _13 = _130 in
            let _1 =
              let _endpos__12_ = _endpos__120_ in
              let _endpos__11_ = _endpos__110_ in
              let _startpos__11_ = _startpos__110_ in
              let _endpos__100_ = _endpos__1000_ in
              let _startpos__100_ = _startpos__1000_ in
              let _startpos__1_ = _startpos__13_ in
              let _12 = _120 in
              let _100 = _1000 in
              let _5 = _50 in
              let _11 = _110 in
              let _10 = _101 in
              let ext = ext0 in
              let _1 = _13 in
              let attrs2 =
                let _1 = _12 in
                
# 3368 "parser_raw.mly"
    ( _1 )
# 35074 "parser_raw.ml"
                
              in
              let _endpos_attrs2_ = _endpos__12_ in
              let body =
                let _endpos__10_ = _endpos__100_ in
                let _startpos__10_ = _startpos__100_ in
                let _10 = _100 in
                let id =
                  let _endpos__1_ = _endpos__10_ in
                  let _startpos__1_ = _startpos__10_ in
                  let _1 = _10 in
                  let _endpos = _endpos__1_ in
                  let _symbolstartpos = _startpos__1_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 35092 "parser_raw.ml"
                  
                in
                let _endpos_id_ = _endpos__10_ in
                let _startpos_id_ = _startpos__10_ in
                let _endpos = _endpos_id_ in
                let _symbolstartpos = _startpos_id_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 1397 "parser_raw.mly"
    ( Mty.alias ~loc:(make_loc _sloc) id )
# 35103 "parser_raw.ml"
                
              in
              let uid =
                let _endpos__1_ = _endpos__11_ in
                let _startpos__1_ = _startpos__11_ in
                let _1 = _11 in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 35116 "parser_raw.ml"
                
              in
              let attrs1 =
                let _1 = _10 in
                
# 3372 "parser_raw.mly"
    ( _1 )
# 35124 "parser_raw.ml"
                
              in
              let _endpos = _endpos_attrs2_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 1388 "parser_raw.mly"
  (
    let attrs = attrs1 @ attrs2 in
    let loc = make_loc _sloc in
    let docs = symbol_docs _sloc in
    Md.mk uid body ~attrs ~loc ~docs, ext
  )
# 35138 "parser_raw.ml"
              
            in
            
# 1338 "parser_raw.mly"
        ( let (body, ext) = _1 in (Psig_module body, ext) )
# 35144 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__1200_ in
          let _startpos__1_ = _startpos__130_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 745 "parser_raw.mly"
    ( wrap_mksig_ext ~loc:_sloc _1 )
# 35155 "parser_raw.ml"
          
        in
        
# 1354 "parser_raw.mly"
    ( _1 )
# 35161 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _100 : (Parsetree.module_substitution * string Location.loc option) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__100_ in
        let _v : (Parsetree.signature_item) = let _1 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 1340 "parser_raw.mly"
        ( let (body, ext) = _1 in (Psig_modsubst body, ext) )
# 35192 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 745 "parser_raw.mly"
    ( wrap_mksig_ext ~loc:_sloc _1 )
# 35203 "parser_raw.ml"
          
        in
        
# 1354 "parser_raw.mly"
    ( _1 )
# 35209 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = bs0000;
          MenhirLib.EngineTypes.startp = _startpos_bs0000_;
          MenhirLib.EngineTypes.endp = _endpos_bs0000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _1200000;
            MenhirLib.EngineTypes.startp = _startpos__1200000_;
            MenhirLib.EngineTypes.endp = _endpos__1200000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = mty00000;
              MenhirLib.EngineTypes.startp = _startpos_mty00000_;
              MenhirLib.EngineTypes.endp = _endpos_mty00000_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _600000;
                MenhirLib.EngineTypes.startp = _startpos__600000_;
                MenhirLib.EngineTypes.endp = _endpos__600000_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _1100000;
                  MenhirLib.EngineTypes.startp = _startpos__1100000_;
                  MenhirLib.EngineTypes.endp = _endpos__1100000_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _400000;
                    MenhirLib.EngineTypes.startp = _startpos__400000_;
                    MenhirLib.EngineTypes.endp = _endpos__400000_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = _1000000;
                      MenhirLib.EngineTypes.startp = _startpos__1000000_;
                      MenhirLib.EngineTypes.endp = _endpos__1000000_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.semv = ext00000;
                        MenhirLib.EngineTypes.startp = _startpos_ext00000_;
                        MenhirLib.EngineTypes.endp = _endpos_ext00000_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _130000;
                          MenhirLib.EngineTypes.startp = _startpos__130000_;
                          MenhirLib.EngineTypes.endp = _endpos__130000_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let bs0000 : (Parsetree.module_declaration list) = Obj.magic bs0000 in
        let _1200000 : (Parsetree.attributes) = Obj.magic _1200000 in
        let mty00000 : (Parsetree.module_type) = Obj.magic mty00000 in
        let _600000 : unit = Obj.magic _600000 in
        let _1100000 : (
# 610 "parser_raw.mly"
       (string)
# 35274 "parser_raw.ml"
        ) = Obj.magic _1100000 in
        let _400000 : unit = Obj.magic _400000 in
        let _1000000 : (Parsetree.attributes) = Obj.magic _1000000 in
        let ext00000 : (string Location.loc option) = Obj.magic ext00000 in
        let _130000 : unit = Obj.magic _130000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__130000_ in
        let _endpos = _endpos_bs0000_ in
        let _v : (Parsetree.signature_item) = let _1 =
          let _endpos_bs000_ = _endpos_bs0000_ in
          let _startpos__13000_ = _startpos__130000_ in
          let _endpos__120000_ = _endpos__1200000_ in
          let _endpos__110000_ = _endpos__1100000_ in
          let _startpos__110000_ = _startpos__1100000_ in
          let bs000 = bs0000 in
          let _120000 = _1200000 in
          let mty0000 = mty00000 in
          let _60000 = _600000 in
          let _110000 = _1100000 in
          let _40000 = _400000 in
          let _100000 = _1000000 in
          let ext0000 = ext00000 in
          let _13000 = _130000 in
          let _1 =
            let _startpos__1300_ = _startpos__13000_ in
            let _endpos__12000_ = _endpos__120000_ in
            let _endpos__11000_ = _endpos__110000_ in
            let _startpos__11000_ = _startpos__110000_ in
            let bs00 = bs000 in
            let _12000 = _120000 in
            let mty000 = mty0000 in
            let _6000 = _60000 in
            let _11000 = _110000 in
            let _4000 = _40000 in
            let _10000 = _100000 in
            let ext000 = ext0000 in
            let _1300 = _13000 in
            let _1 =
              let _startpos__130_ = _startpos__1300_ in
              let _endpos__1200_ = _endpos__12000_ in
              let _endpos__1100_ = _endpos__11000_ in
              let _startpos__1100_ = _startpos__11000_ in
              let bs0 = bs00 in
              let _1200 = _12000 in
              let mty00 = mty000 in
              let _600 = _6000 in
              let _1100 = _11000 in
              let _400 = _4000 in
              let _1000 = _10000 in
              let ext00 = ext000 in
              let _130 = _1300 in
              let _1 =
                let _startpos__13_ = _startpos__130_ in
                let _endpos__120_ = _endpos__1200_ in
                let _endpos__110_ = _endpos__1100_ in
                let _startpos__110_ = _startpos__1100_ in
                let bs = bs0 in
                let _120 = _1200 in
                let mty0 = mty00 in
                let _60 = _600 in
                let _110 = _1100 in
                let _40 = _400 in
                let _100 = _1000 in
                let ext0 = ext00 in
                let _13 = _130 in
                let a =
                  let _endpos__12_ = _endpos__120_ in
                  let _endpos__11_ = _endpos__110_ in
                  let _startpos__11_ = _startpos__110_ in
                  let _startpos__1_ = _startpos__13_ in
                  let _12 = _120 in
                  let mty = mty0 in
                  let _6 = _60 in
                  let _11 = _110 in
                  let _4 = _40 in
                  let _10 = _100 in
                  let ext = ext0 in
                  let _1 = _13 in
                  let attrs2 =
                    let _1 = _12 in
                    
# 3368 "parser_raw.mly"
    ( _1 )
# 35358 "parser_raw.ml"
                    
                  in
                  let _endpos_attrs2_ = _endpos__12_ in
                  let uid =
                    let _endpos__1_ = _endpos__11_ in
                    let _startpos__1_ = _startpos__11_ in
                    let _1 = _11 in
                    let _endpos = _endpos__1_ in
                    let _symbolstartpos = _startpos__1_ in
                    let _sloc = (_symbolstartpos, _endpos) in
                    
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 35372 "parser_raw.ml"
                    
                  in
                  let attrs1 =
                    let _1 = _10 in
                    
# 3372 "parser_raw.mly"
    ( _1 )
# 35380 "parser_raw.ml"
                    
                  in
                  let _endpos = _endpos_attrs2_ in
                  let _symbolstartpos = _startpos__1_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  
# 1430 "parser_raw.mly"
  (
    let attrs = attrs1 @ attrs2 in
    let loc = make_loc _sloc in
    let docs = symbol_docs _sloc in
    ext, Md.mk uid mty ~attrs ~loc ~docs
  )
# 35394 "parser_raw.ml"
                  
                in
                
# 881 "parser_raw.mly"
    ( let (x, b) = a in x, b :: bs )
# 35400 "parser_raw.ml"
                
              in
              
# 1419 "parser_raw.mly"
    ( _1 )
# 35406 "parser_raw.ml"
              
            in
            
# 1342 "parser_raw.mly"
        ( let (ext, l) = _1 in (Psig_recmodule l, ext) )
# 35412 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_bs000_ in
          let _startpos__1_ = _startpos__13000_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 745 "parser_raw.mly"
    ( wrap_mksig_ext ~loc:_sloc _1 )
# 35423 "parser_raw.ml"
          
        in
        
# 1354 "parser_raw.mly"
    ( _1 )
# 35429 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _100 : (Parsetree.module_type_declaration * string Location.loc option) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__100_ in
        let _v : (Parsetree.signature_item) = let _1 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 1344 "parser_raw.mly"
        ( let (body, ext) = _1 in (Psig_modtype body, ext) )
# 35460 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 745 "parser_raw.mly"
    ( wrap_mksig_ext ~loc:_sloc _1 )
# 35471 "parser_raw.ml"
          
        in
        
# 1354 "parser_raw.mly"
    ( _1 )
# 35477 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _100 : (Parsetree.open_description * string Location.loc option) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__100_ in
        let _v : (Parsetree.signature_item) = let _1 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 1346 "parser_raw.mly"
        ( let (body, ext) = _1 in (Psig_open body, ext) )
# 35508 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 745 "parser_raw.mly"
    ( wrap_mksig_ext ~loc:_sloc _1 )
# 35519 "parser_raw.ml"
          
        in
        
# 1354 "parser_raw.mly"
    ( _1 )
# 35525 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _11000;
          MenhirLib.EngineTypes.startp = _startpos__11000_;
          MenhirLib.EngineTypes.endp = _endpos__11000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = thing000;
            MenhirLib.EngineTypes.startp = _startpos_thing000_;
            MenhirLib.EngineTypes.endp = _endpos_thing000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _10000;
              MenhirLib.EngineTypes.startp = _startpos__10000_;
              MenhirLib.EngineTypes.endp = _endpos__10000_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = ext000;
                MenhirLib.EngineTypes.startp = _startpos_ext000_;
                MenhirLib.EngineTypes.endp = _endpos_ext000_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1200;
                  MenhirLib.EngineTypes.startp = _startpos__1200_;
                  MenhirLib.EngineTypes.endp = _endpos__1200_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _11000 : (Parsetree.attributes) = Obj.magic _11000 in
        let thing000 : (Parsetree.module_type) = Obj.magic thing000 in
        let _10000 : (Parsetree.attributes) = Obj.magic _10000 in
        let ext000 : (string Location.loc option) = Obj.magic ext000 in
        let _1200 : unit = Obj.magic _1200 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1200_ in
        let _endpos = _endpos__11000_ in
        let _v : (Parsetree.signature_item) = let _1 =
          let _startpos__120_ = _startpos__1200_ in
          let _endpos__1100_ = _endpos__11000_ in
          let _1100 = _11000 in
          let thing00 = thing000 in
          let _1000 = _10000 in
          let ext00 = ext000 in
          let _120 = _1200 in
          let _1 =
            let _startpos__12_ = _startpos__120_ in
            let _endpos__110_ = _endpos__1100_ in
            let _110 = _1100 in
            let thing0 = thing00 in
            let _100 = _1000 in
            let ext0 = ext00 in
            let _12 = _120 in
            let _1 =
              let _endpos__11_ = _endpos__110_ in
              let _startpos__1_ = _startpos__12_ in
              let _11 = _110 in
              let thing = thing0 in
              let _10 = _100 in
              let ext = ext0 in
              let _1 = _12 in
              let attrs2 =
                let _1 = _11 in
                
# 3368 "parser_raw.mly"
    ( _1 )
# 35600 "parser_raw.ml"
                
              in
              let _endpos_attrs2_ = _endpos__11_ in
              let attrs1 =
                let _1 = _10 in
                
# 3372 "parser_raw.mly"
    ( _1 )
# 35609 "parser_raw.ml"
                
              in
              let _endpos = _endpos_attrs2_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 1206 "parser_raw.mly"
  (
    let attrs = attrs1 @ attrs2 in
    let loc = make_loc _sloc in
    let docs = symbol_docs _sloc in
    Incl.mk thing ~attrs ~loc ~docs, ext
  )
# 35623 "parser_raw.ml"
              
            in
            
# 1348 "parser_raw.mly"
        ( psig_include _1 )
# 35629 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__1100_ in
          let _startpos__1_ = _startpos__120_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 745 "parser_raw.mly"
    ( wrap_mksig_ext ~loc:_sloc _1 )
# 35640 "parser_raw.ml"
          
        in
        
# 1354 "parser_raw.mly"
    ( _1 )
# 35646 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = bs0000;
          MenhirLib.EngineTypes.startp = _startpos_bs0000_;
          MenhirLib.EngineTypes.endp = _endpos_bs0000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _1200000;
            MenhirLib.EngineTypes.startp = _startpos__1200000_;
            MenhirLib.EngineTypes.endp = _endpos__1200000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = cty00000;
              MenhirLib.EngineTypes.startp = _startpos_cty00000_;
              MenhirLib.EngineTypes.endp = _endpos_cty00000_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _700000;
                MenhirLib.EngineTypes.startp = _startpos__700000_;
                MenhirLib.EngineTypes.endp = _endpos__700000_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _1100000;
                  MenhirLib.EngineTypes.startp = _startpos__1100000_;
                  MenhirLib.EngineTypes.endp = _endpos__1100000_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = params00000;
                    MenhirLib.EngineTypes.startp = _startpos_params00000_;
                    MenhirLib.EngineTypes.endp = _endpos_params00000_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = virt00000;
                      MenhirLib.EngineTypes.startp = _startpos_virt00000_;
                      MenhirLib.EngineTypes.endp = _endpos_virt00000_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.semv = _1000000;
                        MenhirLib.EngineTypes.startp = _startpos__1000000_;
                        MenhirLib.EngineTypes.endp = _endpos__1000000_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.semv = ext00000;
                          MenhirLib.EngineTypes.startp = _startpos_ext00000_;
                          MenhirLib.EngineTypes.endp = _endpos_ext00000_;
                          MenhirLib.EngineTypes.next = {
                            MenhirLib.EngineTypes.state = _menhir_s;
                            MenhirLib.EngineTypes.semv = _130000;
                            MenhirLib.EngineTypes.startp = _startpos__130000_;
                            MenhirLib.EngineTypes.endp = _endpos__130000_;
                            MenhirLib.EngineTypes.next = _menhir_stack;
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let bs0000 : (Parsetree.class_description list) = Obj.magic bs0000 in
        let _1200000 : (Parsetree.attributes) = Obj.magic _1200000 in
        let cty00000 : (Parsetree.class_type) = Obj.magic cty00000 in
        let _700000 : unit = Obj.magic _700000 in
        let _1100000 : (
# 564 "parser_raw.mly"
       (string)
# 35716 "parser_raw.ml"
        ) = Obj.magic _1100000 in
        let params00000 : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic params00000 in
        let virt00000 : (Asttypes.virtual_flag) = Obj.magic virt00000 in
        let _1000000 : (Parsetree.attributes) = Obj.magic _1000000 in
        let ext00000 : (string Location.loc option) = Obj.magic ext00000 in
        let _130000 : unit = Obj.magic _130000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__130000_ in
        let _endpos = _endpos_bs0000_ in
        let _v : (Parsetree.signature_item) = let _1 =
          let _endpos_bs000_ = _endpos_bs0000_ in
          let _startpos__13000_ = _startpos__130000_ in
          let _endpos__120000_ = _endpos__1200000_ in
          let _endpos__110000_ = _endpos__1100000_ in
          let _startpos__110000_ = _startpos__1100000_ in
          let bs000 = bs0000 in
          let _120000 = _1200000 in
          let cty0000 = cty00000 in
          let _70000 = _700000 in
          let _110000 = _1100000 in
          let params0000 = params00000 in
          let virt0000 = virt00000 in
          let _100000 = _1000000 in
          let ext0000 = ext00000 in
          let _13000 = _130000 in
          let _1 =
            let _startpos__1300_ = _startpos__13000_ in
            let _endpos__12000_ = _endpos__120000_ in
            let _endpos__11000_ = _endpos__110000_ in
            let _startpos__11000_ = _startpos__110000_ in
            let bs00 = bs000 in
            let _12000 = _120000 in
            let cty000 = cty0000 in
            let _7000 = _70000 in
            let _11000 = _110000 in
            let params000 = params0000 in
            let virt000 = virt0000 in
            let _10000 = _100000 in
            let ext000 = ext0000 in
            let _1300 = _13000 in
            let _1 =
              let _startpos__130_ = _startpos__1300_ in
              let _endpos__1200_ = _endpos__12000_ in
              let _endpos__1100_ = _endpos__11000_ in
              let _startpos__1100_ = _startpos__11000_ in
              let bs0 = bs00 in
              let _1200 = _12000 in
              let cty00 = cty000 in
              let _700 = _7000 in
              let _1100 = _11000 in
              let params00 = params000 in
              let virt00 = virt000 in
              let _1000 = _10000 in
              let ext00 = ext000 in
              let _130 = _1300 in
              let _1 =
                let _startpos__13_ = _startpos__130_ in
                let _endpos__120_ = _endpos__1200_ in
                let _endpos__110_ = _endpos__1100_ in
                let _startpos__110_ = _startpos__1100_ in
                let bs = bs0 in
                let _120 = _1200 in
                let cty0 = cty00 in
                let _70 = _700 in
                let _110 = _1100 in
                let params0 = params00 in
                let virt0 = virt00 in
                let _100 = _1000 in
                let ext0 = ext00 in
                let _13 = _130 in
                let a =
                  let _endpos__12_ = _endpos__120_ in
                  let _endpos__11_ = _endpos__110_ in
                  let _startpos__11_ = _startpos__110_ in
                  let _startpos__1_ = _startpos__13_ in
                  let _12 = _120 in
                  let cty = cty0 in
                  let _7 = _70 in
                  let _11 = _110 in
                  let params = params0 in
                  let virt = virt0 in
                  let _10 = _100 in
                  let ext = ext0 in
                  let _1 = _13 in
                  let attrs2 =
                    let _1 = _12 in
                    
# 3368 "parser_raw.mly"
    ( _1 )
# 35806 "parser_raw.ml"
                    
                  in
                  let _endpos_attrs2_ = _endpos__12_ in
                  let id =
                    let _endpos__1_ = _endpos__11_ in
                    let _startpos__1_ = _startpos__11_ in
                    let _1 = _11 in
                    let _endpos = _endpos__1_ in
                    let _symbolstartpos = _startpos__1_ in
                    let _sloc = (_symbolstartpos, _endpos) in
                    
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 35820 "parser_raw.ml"
                    
                  in
                  let attrs1 =
                    let _1 = _10 in
                    
# 3372 "parser_raw.mly"
    ( _1 )
# 35828 "parser_raw.ml"
                    
                  in
                  let _endpos = _endpos_attrs2_ in
                  let _symbolstartpos = _startpos__1_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  
# 1748 "parser_raw.mly"
    (
      let attrs = attrs1 @ attrs2 in
      let loc = make_loc _sloc in
      let docs = symbol_docs _sloc in
      ext,
      Ci.mk id cty ~virt ~params ~attrs ~loc ~docs
    )
# 35843 "parser_raw.ml"
                  
                in
                
# 881 "parser_raw.mly"
    ( let (x, b) = a in x, b :: bs )
# 35849 "parser_raw.ml"
                
              in
              
# 1736 "parser_raw.mly"
    ( _1 )
# 35855 "parser_raw.ml"
              
            in
            
# 1350 "parser_raw.mly"
        ( let (ext, l) = _1 in (Psig_class l, ext) )
# 35861 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_bs000_ in
          let _startpos__1_ = _startpos__13000_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 745 "parser_raw.mly"
    ( wrap_mksig_ext ~loc:_sloc _1 )
# 35872 "parser_raw.ml"
          
        in
        
# 1354 "parser_raw.mly"
    ( _1 )
# 35878 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _100 : (string Location.loc option * Parsetree.class_type_declaration list) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__100_ in
        let _v : (Parsetree.signature_item) = let _1 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 1352 "parser_raw.mly"
        ( let (ext, l) = _1 in (Psig_class_type l, ext) )
# 35909 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 745 "parser_raw.mly"
    ( wrap_mksig_ext ~loc:_sloc _1 )
# 35920 "parser_raw.ml"
          
        in
        
# 1354 "parser_raw.mly"
    ( _1 )
# 35926 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.constant) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.constant) = 
# 3082 "parser_raw.mly"
             ( _1 )
# 35951 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (
# 549 "parser_raw.mly"
       (string * char option)
# 35977 "parser_raw.ml"
        ) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.constant) = 
# 3083 "parser_raw.mly"
              ( let (n, m) = _2 in Pconst_integer("-" ^ n, m) )
# 35986 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (
# 527 "parser_raw.mly"
       (string * char option)
# 36012 "parser_raw.ml"
        ) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.constant) = 
# 3084 "parser_raw.mly"
                ( let (f, m) = _2 in Pconst_float("-" ^ f, m) )
# 36021 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (
# 549 "parser_raw.mly"
       (string * char option)
# 36047 "parser_raw.ml"
        ) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.constant) = 
# 3085 "parser_raw.mly"
             ( let (n, m) = _2 in Pconst_integer (n, m) )
# 36056 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (
# 527 "parser_raw.mly"
       (string * char option)
# 36082 "parser_raw.ml"
        ) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.constant) = 
# 3086 "parser_raw.mly"
               ( let (f, m) = _2 in Pconst_float(f, m) )
# 36091 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _300;
          MenhirLib.EngineTypes.startp = _startpos__300_;
          MenhirLib.EngineTypes.endp = _endpos__300_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _1000;
            MenhirLib.EngineTypes.startp = _startpos__1000_;
            MenhirLib.EngineTypes.endp = _endpos__1000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _110;
              MenhirLib.EngineTypes.startp = _startpos__110_;
              MenhirLib.EngineTypes.endp = _endpos__110_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _300 : unit = Obj.magic _300 in
        let _1000 : ((Longident.t Location.loc * Parsetree.pattern) list * unit option) = Obj.magic _1000 in
        let _110 : unit = Obj.magic _110 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__110_ in
        let _endpos = _endpos__300_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__30_ = _endpos__300_ in
          let _startpos__11_ = _startpos__110_ in
          let _30 = _300 in
          let _100 = _1000 in
          let _11 = _110 in
          let _1 =
            let _3 = _30 in
            let _10 = _100 in
            let _1 = _11 in
            let _2 =
              let _1 = _10 in
              
# 2479 "parser_raw.mly"
    ( let fields, closed = _1 in
      let closed = match closed with Some () -> Open | None -> Closed in
      fields, closed )
# 36142 "parser_raw.ml"
              
            in
            
# 2451 "parser_raw.mly"
      ( let (fields, closed) = _2 in
        Ppat_record(fields, closed) )
# 36149 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__30_ in
          let _startpos__1_ = _startpos__11_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 723 "parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 36160 "parser_raw.ml"
          
        in
        
# 2465 "parser_raw.mly"
    ( _1 )
# 36166 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _300;
          MenhirLib.EngineTypes.startp = _startpos__300_;
          MenhirLib.EngineTypes.endp = _endpos__300_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _1000;
            MenhirLib.EngineTypes.startp = _startpos__1000_;
            MenhirLib.EngineTypes.endp = _endpos__1000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _110;
              MenhirLib.EngineTypes.startp = _startpos__110_;
              MenhirLib.EngineTypes.endp = _endpos__110_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _300 : unit = Obj.magic _300 in
        let _1000 : ((Longident.t Location.loc * Parsetree.pattern) list * unit option) = Obj.magic _1000 in
        let _110 : unit = Obj.magic _110 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__110_ in
        let _endpos = _endpos__300_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__30_ = _endpos__300_ in
          let _startpos__30_ = _startpos__300_ in
          let _endpos__11_ = _endpos__110_ in
          let _startpos__11_ = _startpos__110_ in
          let _30 = _300 in
          let _100 = _1000 in
          let _11 = _110 in
          let _1 =
            let _endpos__3_ = _endpos__30_ in
            let _startpos__3_ = _startpos__30_ in
            let _endpos__1_ = _endpos__11_ in
            let _startpos__1_ = _startpos__11_ in
            let _3 = _30 in
            let _10 = _100 in
            let _1 = _11 in
            let _2 =
              let _1 = _10 in
              
# 2479 "parser_raw.mly"
    ( let fields, closed = _1 in
      let closed = match closed with Some () -> Open | None -> Closed in
      fields, closed )
# 36223 "parser_raw.ml"
              
            in
            let _loc__3_ = (_startpos__3_, _endpos__3_) in
            let _loc__1_ = (_startpos__1_, _endpos__1_) in
            
# 2454 "parser_raw.mly"
      ( unclosed "{" _loc__1_ "}" _loc__3_ )
# 36231 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__30_ in
          let _startpos__1_ = _startpos__11_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 723 "parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 36242 "parser_raw.ml"
          
        in
        
# 2465 "parser_raw.mly"
    ( _1 )
# 36248 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _300;
          MenhirLib.EngineTypes.startp = _startpos__300_;
          MenhirLib.EngineTypes.endp = _endpos__300_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ps000;
            MenhirLib.EngineTypes.startp = _startpos_ps000_;
            MenhirLib.EngineTypes.endp = _endpos_ps000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _100;
              MenhirLib.EngineTypes.startp = _startpos__100_;
              MenhirLib.EngineTypes.endp = _endpos__100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _300 : unit = Obj.magic _300 in
        let ps000 : (Parsetree.pattern list) = Obj.magic ps000 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__300_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__30_ = _endpos__300_ in
          let _startpos__30_ = _startpos__300_ in
          let _startpos__10_ = _startpos__100_ in
          let _30 = _300 in
          let ps00 = ps000 in
          let _10 = _100 in
          let _1 =
            let _endpos__3_ = _endpos__30_ in
            let _startpos__3_ = _startpos__30_ in
            let _3 = _30 in
            let ps0 = ps00 in
            let _1 = _10 in
            let _2 =
              let ps = ps0 in
              
# 2473 "parser_raw.mly"
    ( ps )
# 36300 "parser_raw.ml"
              
            in
            let _loc__3_ = (_startpos__3_, _endpos__3_) in
            
# 2456 "parser_raw.mly"
      ( fst (mktailpat _loc__3_ _2) )
# 36307 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__30_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 723 "parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 36318 "parser_raw.ml"
          
        in
        
# 2465 "parser_raw.mly"
    ( _1 )
# 36324 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _300;
          MenhirLib.EngineTypes.startp = _startpos__300_;
          MenhirLib.EngineTypes.endp = _endpos__300_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ps000;
            MenhirLib.EngineTypes.startp = _startpos_ps000_;
            MenhirLib.EngineTypes.endp = _endpos_ps000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _100;
              MenhirLib.EngineTypes.startp = _startpos__100_;
              MenhirLib.EngineTypes.endp = _endpos__100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _300 : unit = Obj.magic _300 in
        let ps000 : (Parsetree.pattern list) = Obj.magic ps000 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__300_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__30_ = _endpos__300_ in
          let _startpos__30_ = _startpos__300_ in
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _30 = _300 in
          let ps00 = ps000 in
          let _10 = _100 in
          let _1 =
            let _endpos__3_ = _endpos__30_ in
            let _startpos__3_ = _startpos__30_ in
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _3 = _30 in
            let ps0 = ps00 in
            let _1 = _10 in
            let _2 =
              let ps = ps0 in
              
# 2473 "parser_raw.mly"
    ( ps )
# 36379 "parser_raw.ml"
              
            in
            let _loc__3_ = (_startpos__3_, _endpos__3_) in
            let _loc__1_ = (_startpos__1_, _endpos__1_) in
            
# 2458 "parser_raw.mly"
      ( unclosed "[" _loc__1_ "]" _loc__3_ )
# 36387 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__30_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 723 "parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 36398 "parser_raw.ml"
          
        in
        
# 2465 "parser_raw.mly"
    ( _1 )
# 36404 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _300;
          MenhirLib.EngineTypes.startp = _startpos__300_;
          MenhirLib.EngineTypes.endp = _endpos__300_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ps000;
            MenhirLib.EngineTypes.startp = _startpos_ps000_;
            MenhirLib.EngineTypes.endp = _endpos_ps000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _100;
              MenhirLib.EngineTypes.startp = _startpos__100_;
              MenhirLib.EngineTypes.endp = _endpos__100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _300 : unit = Obj.magic _300 in
        let ps000 : (Parsetree.pattern list) = Obj.magic ps000 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__300_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__30_ = _endpos__300_ in
          let _startpos__10_ = _startpos__100_ in
          let _30 = _300 in
          let ps00 = ps000 in
          let _10 = _100 in
          let _1 =
            let _3 = _30 in
            let ps0 = ps00 in
            let _1 = _10 in
            let _2 =
              let ps = ps0 in
              
# 2473 "parser_raw.mly"
    ( ps )
# 36453 "parser_raw.ml"
              
            in
            
# 2460 "parser_raw.mly"
      ( Ppat_array _2 )
# 36459 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__30_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 723 "parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 36470 "parser_raw.ml"
          
        in
        
# 2465 "parser_raw.mly"
    ( _1 )
# 36476 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _200;
          MenhirLib.EngineTypes.startp = _startpos__200_;
          MenhirLib.EngineTypes.endp = _endpos__200_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _100;
            MenhirLib.EngineTypes.startp = _startpos__100_;
            MenhirLib.EngineTypes.endp = _endpos__100_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _200 : unit = Obj.magic _200 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__200_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__20_ = _endpos__200_ in
          let _startpos__10_ = _startpos__100_ in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _2 = _20 in
            let _1 = _10 in
            
# 2462 "parser_raw.mly"
      ( Ppat_array [] )
# 36515 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__20_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 723 "parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 36526 "parser_raw.ml"
          
        in
        
# 2465 "parser_raw.mly"
    ( _1 )
# 36532 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _300;
          MenhirLib.EngineTypes.startp = _startpos__300_;
          MenhirLib.EngineTypes.endp = _endpos__300_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ps000;
            MenhirLib.EngineTypes.startp = _startpos_ps000_;
            MenhirLib.EngineTypes.endp = _endpos_ps000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _100;
              MenhirLib.EngineTypes.startp = _startpos__100_;
              MenhirLib.EngineTypes.endp = _endpos__100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _300 : unit = Obj.magic _300 in
        let ps000 : (Parsetree.pattern list) = Obj.magic ps000 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__300_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__30_ = _endpos__300_ in
          let _startpos__30_ = _startpos__300_ in
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _30 = _300 in
          let ps00 = ps000 in
          let _10 = _100 in
          let _1 =
            let _endpos__3_ = _endpos__30_ in
            let _startpos__3_ = _startpos__30_ in
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _3 = _30 in
            let ps0 = ps00 in
            let _1 = _10 in
            let _2 =
              let ps = ps0 in
              
# 2473 "parser_raw.mly"
    ( ps )
# 36587 "parser_raw.ml"
              
            in
            let _loc__3_ = (_startpos__3_, _endpos__3_) in
            let _loc__1_ = (_startpos__1_, _endpos__1_) in
            
# 2464 "parser_raw.mly"
      ( unclosed "[|" _loc__1_ "|]" _loc__3_ )
# 36595 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__30_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 723 "parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 36606 "parser_raw.ml"
          
        in
        
# 2465 "parser_raw.mly"
    ( _1 )
# 36612 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__3_ in
        let _startpos = _startpos__1_ in
        
# 3400 "parser_raw.mly"
    ( Fake.Meta.code _startpos _endpos _2 )
# 36651 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__2_ in
        let _startpos = _startpos__1_ in
        
# 3402 "parser_raw.mly"
    ( Fake.Meta.uncode _startpos _endpos _2 )
# 36684 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__3_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1973 "parser_raw.mly"
      ( reloc_exp ~loc:_sloc _2 )
# 36724 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.expression) = let _loc__3_ = (_startpos__3_, _endpos__3_) in
        let _loc__1_ = (_startpos__1_, _endpos__1_) in
        
# 1975 "parser_raw.mly"
      ( unclosed "(" _loc__1_ ")" _loc__3_ )
# 36763 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.core_type option * Parsetree.core_type option) = Obj.magic _3 in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__4_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1977 "parser_raw.mly"
      ( mkexp_constraint ~loc:_sloc _2 _3 )
# 36809 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1979 "parser_raw.mly"
      ( array_get ~loc:_sloc _1 _4 )
# 36861 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.expression) = let _loc__5_ = (_startpos__5_, _endpos__5_) in
        let _loc__3_ = (_startpos__3_, _endpos__3_) in
        
# 1981 "parser_raw.mly"
      ( unclosed "(" _loc__3_ ")" _loc__5_ )
# 36912 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1983 "parser_raw.mly"
      ( string_get ~loc:_sloc _1 _4 )
# 36964 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.expression) = let _loc__5_ = (_startpos__5_, _endpos__5_) in
        let _loc__3_ = (_startpos__3_, _endpos__3_) in
        
# 1985 "parser_raw.mly"
      ( unclosed "[" _loc__3_ "]" _loc__5_ )
# 37015 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : (
# 544 "parser_raw.mly"
       (string)
# 37059 "parser_raw.ml"
        ) = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1987 "parser_raw.mly"
      ( dotop_get ~loc:_sloc (Lident ("." ^ _2 ^ "[]")) _1 _4 )
# 37071 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : (
# 544 "parser_raw.mly"
       (string)
# 37115 "parser_raw.ml"
        ) = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.expression) = let _loc__5_ = (_startpos__5_, _endpos__5_) in
        let _loc__3_ = (_startpos__3_, _endpos__3_) in
        
# 1989 "parser_raw.mly"
      ( unclosed "[" _loc__3_ "]" _loc__5_ )
# 37126 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : (
# 544 "parser_raw.mly"
       (string)
# 37170 "parser_raw.ml"
        ) = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1991 "parser_raw.mly"
      ( dotop_get ~loc:_sloc (Lident ("." ^ _2 ^ "()")) _1 _4 )
# 37182 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : (
# 544 "parser_raw.mly"
       (string)
# 37226 "parser_raw.ml"
        ) = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.expression) = let _loc__5_ = (_startpos__5_, _endpos__5_) in
        let _loc__3_ = (_startpos__3_, _endpos__3_) in
        
# 1993 "parser_raw.mly"
      ( unclosed "(" _loc__3_ ")" _loc__5_ )
# 37237 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : (
# 544 "parser_raw.mly"
       (string)
# 37281 "parser_raw.ml"
        ) = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1995 "parser_raw.mly"
      ( dotop_get ~loc:_sloc (Lident ("." ^ _2 ^ "{}")) _1 _4 )
# 37293 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : (
# 544 "parser_raw.mly"
       (string)
# 37337 "parser_raw.ml"
        ) = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.expression) = let _loc__5_ = (_startpos__5_, _endpos__5_) in
        let _loc__3_ = (_startpos__3_, _endpos__3_) in
        
# 1997 "parser_raw.mly"
      ( unclosed "{" _loc__3_ "}" _loc__5_ )
# 37348 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : unit = Obj.magic _7 in
        let _6 : (Parsetree.expression) = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _4 : (
# 544 "parser_raw.mly"
       (string)
# 37402 "parser_raw.ml"
        ) = Obj.magic _4 in
        let _3 : (Longident.t) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__7_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1999 "parser_raw.mly"
      ( dotop_get ~loc:_sloc (Ldot(_3, "." ^ _4 ^ "[]")) _1 _6 )
# 37416 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : unit = Obj.magic _7 in
        let _6 : (Parsetree.expression) = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _4 : (
# 544 "parser_raw.mly"
       (string)
# 37470 "parser_raw.ml"
        ) = Obj.magic _4 in
        let _3 : (Longident.t) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.expression) = let _loc__7_ = (_startpos__7_, _endpos__7_) in
        let _loc__5_ = (_startpos__5_, _endpos__5_) in
        
# 2002 "parser_raw.mly"
      ( unclosed "[" _loc__5_ "]" _loc__7_ )
# 37483 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : unit = Obj.magic _7 in
        let _6 : (Parsetree.expression) = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _4 : (
# 544 "parser_raw.mly"
       (string)
# 37537 "parser_raw.ml"
        ) = Obj.magic _4 in
        let _3 : (Longident.t) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__7_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2004 "parser_raw.mly"
      ( dotop_get ~loc:_sloc (Ldot(_3, "." ^ _4 ^ "()")) _1 _6 )
# 37551 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : unit = Obj.magic _7 in
        let _6 : (Parsetree.expression) = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _4 : (
# 544 "parser_raw.mly"
       (string)
# 37605 "parser_raw.ml"
        ) = Obj.magic _4 in
        let _3 : (Longident.t) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.expression) = let _loc__7_ = (_startpos__7_, _endpos__7_) in
        let _loc__5_ = (_startpos__5_, _endpos__5_) in
        
# 2007 "parser_raw.mly"
      ( unclosed "(" _loc__5_ ")" _loc__7_ )
# 37618 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : unit = Obj.magic _7 in
        let _6 : (Parsetree.expression) = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _4 : (
# 544 "parser_raw.mly"
       (string)
# 37672 "parser_raw.ml"
        ) = Obj.magic _4 in
        let _3 : (Longident.t) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__7_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2009 "parser_raw.mly"
      ( dotop_get ~loc:_sloc (Ldot(_3, "." ^ _4 ^ "{}")) _1 _6 )
# 37686 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : unit = Obj.magic _7 in
        let _6 : (Parsetree.expression) = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _4 : (
# 544 "parser_raw.mly"
       (string)
# 37740 "parser_raw.ml"
        ) = Obj.magic _4 in
        let _3 : (Longident.t) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.expression) = let _loc__7_ = (_startpos__7_, _endpos__7_) in
        let _loc__5_ = (_startpos__5_, _endpos__5_) in
        
# 2012 "parser_raw.mly"
      ( unclosed "{" _loc__5_ "}" _loc__7_ )
# 37753 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2014 "parser_raw.mly"
      ( bigarray_get ~loc:_sloc _1 _4 )
# 37805 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.expression) = let _loc__5_ = (_startpos__5_, _endpos__5_) in
        let _loc__3_ = (_startpos__3_, _endpos__3_) in
        
# 2016 "parser_raw.mly"
      ( unclosed "{" _loc__3_ "}" _loc__5_ )
# 37856 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _50;
          MenhirLib.EngineTypes.startp = _startpos__50_;
          MenhirLib.EngineTypes.endp = _endpos__50_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = e0;
            MenhirLib.EngineTypes.startp = _startpos_e0_;
            MenhirLib.EngineTypes.endp = _endpos_e0_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _100;
              MenhirLib.EngineTypes.startp = _startpos__100_;
              MenhirLib.EngineTypes.endp = _endpos__100_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = ext0;
                MenhirLib.EngineTypes.startp = _startpos_ext0_;
                MenhirLib.EngineTypes.endp = _endpos_ext0_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _11;
                  MenhirLib.EngineTypes.startp = _startpos__11_;
                  MenhirLib.EngineTypes.endp = _endpos__11_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _50 : unit = Obj.magic _50 in
        let e0 : (Parsetree.expression) = Obj.magic e0 in
        let _100 : (Parsetree.attributes) = Obj.magic _100 in
        let ext0 : (string Location.loc option) = Obj.magic ext0 in
        let _11 : unit = Obj.magic _11 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__11_ in
        let _endpos = _endpos__50_ in
        let _v : (Parsetree.expression) = let _1 =
          let _5 = _50 in
          let e = e0 in
          let _10 = _100 in
          let ext = ext0 in
          let _1 = _11 in
          let attrs =
            let _1 = _10 in
            
# 3372 "parser_raw.mly"
    ( _1 )
# 37913 "parser_raw.ml"
            
          in
          
# 2025 "parser_raw.mly"
      ( e.pexp_desc, (ext, attrs @ e.pexp_attributes) )
# 37919 "parser_raw.ml"
          
        in
        let _endpos__1_ = _endpos__50_ in
        let _startpos__1_ = _startpos__11_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2018 "parser_raw.mly"
    ( let desc, attrs = _1 in
      mkexp_attrs ~loc:_sloc desc attrs )
# 37931 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _30;
          MenhirLib.EngineTypes.startp = _startpos__30_;
          MenhirLib.EngineTypes.endp = _endpos__30_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _1000;
            MenhirLib.EngineTypes.startp = _startpos__1000_;
            MenhirLib.EngineTypes.endp = _endpos__1000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _110;
              MenhirLib.EngineTypes.startp = _startpos__110_;
              MenhirLib.EngineTypes.endp = _endpos__110_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _10;
                MenhirLib.EngineTypes.startp = _startpos__10_;
                MenhirLib.EngineTypes.endp = _endpos__10_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _30 : unit = Obj.magic _30 in
        let _1000 : (Parsetree.attributes) = Obj.magic _1000 in
        let _110 : (string Location.loc option) = Obj.magic _110 in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__30_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__3_ = _endpos__30_ in
          let _startpos__1_ = _startpos__10_ in
          let _3 = _30 in
          let _100 = _1000 in
          let _11 = _110 in
          let _1 = _10 in
          let _2 =
            let _10 = _100 in
            let _1 = _11 in
            let _2 =
              let _1 = _10 in
              
# 3372 "parser_raw.mly"
    ( _1 )
# 37986 "parser_raw.ml"
              
            in
            
# 3383 "parser_raw.mly"
                 ( _1, _2 )
# 37992 "parser_raw.ml"
            
          in
          let _endpos = _endpos__3_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2027 "parser_raw.mly"
      ( Pexp_construct (mkloc (Lident "()") (make_loc _sloc), None), _2 )
# 38001 "parser_raw.ml"
          
        in
        let _endpos__1_ = _endpos__30_ in
        let _startpos__1_ = _startpos__10_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2018 "parser_raw.mly"
    ( let desc, attrs = _1 in
      mkexp_attrs ~loc:_sloc desc attrs )
# 38013 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _40;
          MenhirLib.EngineTypes.startp = _startpos__40_;
          MenhirLib.EngineTypes.endp = _endpos__40_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _30;
            MenhirLib.EngineTypes.startp = _startpos__30_;
            MenhirLib.EngineTypes.endp = _endpos__30_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _1000;
              MenhirLib.EngineTypes.startp = _startpos__1000_;
              MenhirLib.EngineTypes.endp = _endpos__1000_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _110;
                MenhirLib.EngineTypes.startp = _startpos__110_;
                MenhirLib.EngineTypes.endp = _endpos__110_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _10;
                  MenhirLib.EngineTypes.startp = _startpos__10_;
                  MenhirLib.EngineTypes.endp = _endpos__10_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _40 : unit = Obj.magic _40 in
        let _30 : (Parsetree.expression) = Obj.magic _30 in
        let _1000 : (Parsetree.attributes) = Obj.magic _1000 in
        let _110 : (string Location.loc option) = Obj.magic _110 in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__40_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__4_ = _endpos__40_ in
          let _startpos__4_ = _startpos__40_ in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _4 = _40 in
          let _3 = _30 in
          let _100 = _1000 in
          let _11 = _110 in
          let _1 = _10 in
          let _2 =
            let _10 = _100 in
            let _1 = _11 in
            let _2 =
              let _1 = _10 in
              
# 3372 "parser_raw.mly"
    ( _1 )
# 38077 "parser_raw.ml"
              
            in
            
# 3383 "parser_raw.mly"
                 ( _1, _2 )
# 38083 "parser_raw.ml"
            
          in
          let _loc__4_ = (_startpos__4_, _endpos__4_) in
          let _loc__1_ = (_startpos__1_, _endpos__1_) in
          
# 2029 "parser_raw.mly"
      ( unclosed "begin" _loc__1_ "end" _loc__4_ )
# 38091 "parser_raw.ml"
          
        in
        let _endpos__1_ = _endpos__40_ in
        let _startpos__1_ = _startpos__10_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2018 "parser_raw.mly"
    ( let desc, attrs = _1 in
      mkexp_attrs ~loc:_sloc desc attrs )
# 38103 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _101;
          MenhirLib.EngineTypes.startp = _startpos__101_;
          MenhirLib.EngineTypes.endp = _endpos__101_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _1000;
            MenhirLib.EngineTypes.startp = _startpos__1000_;
            MenhirLib.EngineTypes.endp = _endpos__1000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _110;
              MenhirLib.EngineTypes.startp = _startpos__110_;
              MenhirLib.EngineTypes.endp = _endpos__110_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _12;
                MenhirLib.EngineTypes.startp = _startpos__12_;
                MenhirLib.EngineTypes.endp = _endpos__12_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _101 : (Longident.t) = Obj.magic _101 in
        let _1000 : (Parsetree.attributes) = Obj.magic _1000 in
        let _110 : (string Location.loc option) = Obj.magic _110 in
        let _12 : unit = Obj.magic _12 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__12_ in
        let _endpos = _endpos__101_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__10_ = _endpos__101_ in
          let _startpos__10_ = _startpos__101_ in
          let _10 = _101 in
          let _100 = _1000 in
          let _11 = _110 in
          let _1 = _12 in
          let _3 =
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _1 = _10 in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 38160 "parser_raw.ml"
            
          in
          let _2 =
            let _10 = _100 in
            let _1 = _11 in
            let _2 =
              let _1 = _10 in
              
# 3372 "parser_raw.mly"
    ( _1 )
# 38171 "parser_raw.ml"
              
            in
            
# 3383 "parser_raw.mly"
                 ( _1, _2 )
# 38177 "parser_raw.ml"
            
          in
          
# 2031 "parser_raw.mly"
      ( Pexp_new(_3), _2 )
# 38183 "parser_raw.ml"
          
        in
        let _endpos__1_ = _endpos__101_ in
        let _startpos__1_ = _startpos__12_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2018 "parser_raw.mly"
    ( let desc, attrs = _1 in
      mkexp_attrs ~loc:_sloc desc attrs )
# 38195 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _50;
          MenhirLib.EngineTypes.startp = _startpos__50_;
          MenhirLib.EngineTypes.endp = _endpos__50_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _40;
            MenhirLib.EngineTypes.startp = _startpos__40_;
            MenhirLib.EngineTypes.endp = _endpos__40_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _1000;
              MenhirLib.EngineTypes.startp = _startpos__1000_;
              MenhirLib.EngineTypes.endp = _endpos__1000_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _110;
                MenhirLib.EngineTypes.startp = _startpos__110_;
                MenhirLib.EngineTypes.endp = _endpos__110_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _20;
                  MenhirLib.EngineTypes.startp = _startpos__20_;
                  MenhirLib.EngineTypes.endp = _endpos__20_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _10;
                    MenhirLib.EngineTypes.startp = _startpos__10_;
                    MenhirLib.EngineTypes.endp = _endpos__10_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _50 : unit = Obj.magic _50 in
        let _40 : (Parsetree.module_expr) = Obj.magic _40 in
        let _1000 : (Parsetree.attributes) = Obj.magic _1000 in
        let _110 : (string Location.loc option) = Obj.magic _110 in
        let _20 : unit = Obj.magic _20 in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__50_ in
        let _v : (Parsetree.expression) = let _1 =
          let _5 = _50 in
          let _4 = _40 in
          let _100 = _1000 in
          let _11 = _110 in
          let _2 = _20 in
          let _1 = _10 in
          let _3 =
            let _10 = _100 in
            let _1 = _11 in
            let _2 =
              let _1 = _10 in
              
# 3372 "parser_raw.mly"
    ( _1 )
# 38262 "parser_raw.ml"
              
            in
            
# 3383 "parser_raw.mly"
                 ( _1, _2 )
# 38268 "parser_raw.ml"
            
          in
          
# 2033 "parser_raw.mly"
      ( Pexp_pack _4, _3 )
# 38274 "parser_raw.ml"
          
        in
        let _endpos__1_ = _endpos__50_ in
        let _startpos__1_ = _startpos__10_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2018 "parser_raw.mly"
    ( let desc, attrs = _1 in
      mkexp_attrs ~loc:_sloc desc attrs )
# 38286 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _70;
          MenhirLib.EngineTypes.startp = _startpos__70_;
          MenhirLib.EngineTypes.endp = _endpos__70_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _10000;
            MenhirLib.EngineTypes.startp = _startpos__10000_;
            MenhirLib.EngineTypes.endp = _endpos__10000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _50;
              MenhirLib.EngineTypes.startp = _startpos__50_;
              MenhirLib.EngineTypes.endp = _endpos__50_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _40;
                MenhirLib.EngineTypes.startp = _startpos__40_;
                MenhirLib.EngineTypes.endp = _endpos__40_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _1001;
                  MenhirLib.EngineTypes.startp = _startpos__1001_;
                  MenhirLib.EngineTypes.endp = _endpos__1001_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _110;
                    MenhirLib.EngineTypes.startp = _startpos__110_;
                    MenhirLib.EngineTypes.endp = _endpos__110_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = _20;
                      MenhirLib.EngineTypes.startp = _startpos__20_;
                      MenhirLib.EngineTypes.endp = _endpos__20_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _10;
                        MenhirLib.EngineTypes.startp = _startpos__10_;
                        MenhirLib.EngineTypes.endp = _endpos__10_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _70 : unit = Obj.magic _70 in
        let _10000 : (Parsetree.module_type) = Obj.magic _10000 in
        let _50 : unit = Obj.magic _50 in
        let _40 : (Parsetree.module_expr) = Obj.magic _40 in
        let _1001 : (Parsetree.attributes) = Obj.magic _1001 in
        let _110 : (string Location.loc option) = Obj.magic _110 in
        let _20 : unit = Obj.magic _20 in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__70_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__7_ = _endpos__70_ in
          let _endpos__1000_ = _endpos__10000_ in
          let _startpos__1000_ = _startpos__10000_ in
          let _startpos__1_ = _startpos__10_ in
          let _7 = _70 in
          let _1000 = _10000 in
          let _5 = _50 in
          let _4 = _40 in
          let _100 = _1001 in
          let _11 = _110 in
          let _2 = _20 in
          let _1 = _10 in
          let _6 =
            let _endpos__100_ = _endpos__1000_ in
            let _startpos__100_ = _startpos__1000_ in
            let _100 = _1000 in
            let _1 =
              let _endpos__10_ = _endpos__100_ in
              let _startpos__10_ = _startpos__100_ in
              let _10 = _100 in
              let _1 =
                let _1 = _10 in
                
# 3003 "parser_raw.mly"
      ( Ptyp_package (package_type_of_module_type _1) )
# 38376 "parser_raw.ml"
                
              in
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 725 "parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 38387 "parser_raw.ml"
              
            in
            
# 3004 "parser_raw.mly"
      ( _1 )
# 38393 "parser_raw.ml"
            
          in
          let _3 =
            let _10 = _100 in
            let _1 = _11 in
            let _2 =
              let _1 = _10 in
              
# 3372 "parser_raw.mly"
    ( _1 )
# 38404 "parser_raw.ml"
              
            in
            
# 3383 "parser_raw.mly"
                 ( _1, _2 )
# 38410 "parser_raw.ml"
            
          in
          let _endpos = _endpos__7_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2035 "parser_raw.mly"
      ( Pexp_constraint (ghexp ~loc:_sloc (Pexp_pack _4), _6), _3 )
# 38419 "parser_raw.ml"
          
        in
        let _endpos__1_ = _endpos__70_ in
        let _startpos__1_ = _startpos__10_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2018 "parser_raw.mly"
    ( let desc, attrs = _1 in
      mkexp_attrs ~loc:_sloc desc attrs )
# 38431 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _60;
          MenhirLib.EngineTypes.startp = _startpos__60_;
          MenhirLib.EngineTypes.endp = _endpos__60_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _50;
            MenhirLib.EngineTypes.startp = _startpos__50_;
            MenhirLib.EngineTypes.endp = _endpos__50_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _40;
              MenhirLib.EngineTypes.startp = _startpos__40_;
              MenhirLib.EngineTypes.endp = _endpos__40_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _1000;
                MenhirLib.EngineTypes.startp = _startpos__1000_;
                MenhirLib.EngineTypes.endp = _endpos__1000_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _110;
                  MenhirLib.EngineTypes.startp = _startpos__110_;
                  MenhirLib.EngineTypes.endp = _endpos__110_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _20;
                    MenhirLib.EngineTypes.startp = _startpos__20_;
                    MenhirLib.EngineTypes.endp = _endpos__20_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _10;
                      MenhirLib.EngineTypes.startp = _startpos__10_;
                      MenhirLib.EngineTypes.endp = _endpos__10_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _60 : unit = Obj.magic _60 in
        let _50 : unit = Obj.magic _50 in
        let _40 : (Parsetree.module_expr) = Obj.magic _40 in
        let _1000 : (Parsetree.attributes) = Obj.magic _1000 in
        let _110 : (string Location.loc option) = Obj.magic _110 in
        let _20 : unit = Obj.magic _20 in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__60_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__6_ = _endpos__60_ in
          let _startpos__6_ = _startpos__60_ in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _6 = _60 in
          let _5 = _50 in
          let _4 = _40 in
          let _100 = _1000 in
          let _11 = _110 in
          let _2 = _20 in
          let _1 = _10 in
          let _3 =
            let _10 = _100 in
            let _1 = _11 in
            let _2 =
              let _1 = _10 in
              
# 3372 "parser_raw.mly"
    ( _1 )
# 38509 "parser_raw.ml"
              
            in
            
# 3383 "parser_raw.mly"
                 ( _1, _2 )
# 38515 "parser_raw.ml"
            
          in
          let _loc__6_ = (_startpos__6_, _endpos__6_) in
          let _loc__1_ = (_startpos__1_, _endpos__1_) in
          
# 2037 "parser_raw.mly"
      ( unclosed "(" _loc__1_ ")" _loc__6_ )
# 38523 "parser_raw.ml"
          
        in
        let _endpos__1_ = _endpos__60_ in
        let _startpos__1_ = _startpos__10_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2018 "parser_raw.mly"
    ( let desc, attrs = _1 in
      mkexp_attrs ~loc:_sloc desc attrs )
# 38535 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1000;
          MenhirLib.EngineTypes.startp = _startpos__1000_;
          MenhirLib.EngineTypes.endp = _endpos__1000_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1000 : (Longident.t) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos__1000_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _100 = _1000 in
          let _1 =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _10 = _100 in
            let _1 =
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _1 = _10 in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 38575 "parser_raw.ml"
              
            in
            
# 2041 "parser_raw.mly"
      ( Pexp_ident (_1) )
# 38581 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__100_ in
          let _startpos__1_ = _startpos__100_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 721 "parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 38592 "parser_raw.ml"
          
        in
        
# 2021 "parser_raw.mly"
      ( _1 )
# 38598 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _100 : (Parsetree.constant) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__100_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 2043 "parser_raw.mly"
      ( Pexp_constant _1 )
# 38629 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 721 "parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 38640 "parser_raw.ml"
          
        in
        
# 2021 "parser_raw.mly"
      ( _1 )
# 38646 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1000;
          MenhirLib.EngineTypes.startp = _startpos__1000_;
          MenhirLib.EngineTypes.endp = _endpos__1000_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1000 : (Longident.t) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos__1000_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _100 = _1000 in
          let _1 =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _10 = _100 in
            let _1 =
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _1 = _10 in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 38686 "parser_raw.ml"
              
            in
            
# 2045 "parser_raw.mly"
      ( Pexp_construct(_1, None) )
# 38692 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__100_ in
          let _startpos__1_ = _startpos__100_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 721 "parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 38703 "parser_raw.ml"
          
        in
        
# 2021 "parser_raw.mly"
      ( _1 )
# 38709 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _100 : (string) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__100_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 2047 "parser_raw.mly"
      ( Pexp_variant(_1, None) )
# 38740 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 721 "parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 38751 "parser_raw.ml"
          
        in
        
# 2021 "parser_raw.mly"
      ( _1 )
# 38757 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _200;
          MenhirLib.EngineTypes.startp = _startpos__200_;
          MenhirLib.EngineTypes.endp = _endpos__200_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1000;
            MenhirLib.EngineTypes.startp = _startpos__1000_;
            MenhirLib.EngineTypes.endp = _endpos__1000_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _200 : (Parsetree.expression) = Obj.magic _200 in
        let _1000 : (
# 587 "parser_raw.mly"
       (string)
# 38784 "parser_raw.ml"
        ) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos__200_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__20_ = _endpos__200_ in
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _20 = _200 in
          let _100 = _1000 in
          let _1 =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _2 = _20 in
            let _10 = _100 in
            let _1 =
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _1 = _10 in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 717 "parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 38810 "parser_raw.ml"
              
            in
            
# 2049 "parser_raw.mly"
      ( Pexp_apply(_1, [Nolabel,_2]) )
# 38816 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__20_ in
          let _startpos__1_ = _startpos__100_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 721 "parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 38827 "parser_raw.ml"
          
        in
        
# 2021 "parser_raw.mly"
      ( _1 )
# 38833 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _200;
          MenhirLib.EngineTypes.startp = _startpos__200_;
          MenhirLib.EngineTypes.endp = _endpos__200_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _10000;
            MenhirLib.EngineTypes.startp = _startpos__10000_;
            MenhirLib.EngineTypes.endp = _endpos__10000_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _200 : (Parsetree.expression) = Obj.magic _200 in
        let _10000 : unit = Obj.magic _10000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10000_ in
        let _endpos = _endpos__200_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__20_ = _endpos__200_ in
          let _endpos__1000_ = _endpos__10000_ in
          let _startpos__1000_ = _startpos__10000_ in
          let _20 = _200 in
          let _1000 = _10000 in
          let _1 =
            let _endpos__100_ = _endpos__1000_ in
            let _startpos__100_ = _startpos__1000_ in
            let _2 = _20 in
            let _100 = _1000 in
            let _1 =
              let _endpos__10_ = _endpos__100_ in
              let _startpos__10_ = _startpos__100_ in
              let _10 = _100 in
              let _1 =
                let _1 = _10 in
                
# 2050 "parser_raw.mly"
            ("!")
# 38881 "parser_raw.ml"
                
              in
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 717 "parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 38892 "parser_raw.ml"
              
            in
            
# 2051 "parser_raw.mly"
      ( Pexp_apply(_1, [Nolabel,_2]) )
# 38898 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__20_ in
          let _startpos__1_ = _startpos__1000_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 721 "parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 38909 "parser_raw.ml"
          
        in
        
# 2021 "parser_raw.mly"
      ( _1 )
# 38915 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _300;
          MenhirLib.EngineTypes.startp = _startpos__300_;
          MenhirLib.EngineTypes.endp = _endpos__300_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = xs000;
            MenhirLib.EngineTypes.startp = _startpos_xs000_;
            MenhirLib.EngineTypes.endp = _endpos_xs000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _100;
              MenhirLib.EngineTypes.startp = _startpos__100_;
              MenhirLib.EngineTypes.endp = _endpos__100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _300 : unit = Obj.magic _300 in
        let xs000 : ((string Location.loc * Parsetree.expression) list) = Obj.magic xs000 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__300_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__30_ = _endpos__300_ in
          let _startpos__10_ = _startpos__100_ in
          let _30 = _300 in
          let xs00 = xs000 in
          let _10 = _100 in
          let _1 =
            let _3 = _30 in
            let xs0 = xs00 in
            let _1 = _10 in
            let _2 =
              let xs = xs0 in
              
# 2303 "parser_raw.mly"
    ( xs )
# 38964 "parser_raw.ml"
              
            in
            
# 2053 "parser_raw.mly"
      ( Pexp_override _2 )
# 38970 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__30_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 721 "parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 38981 "parser_raw.ml"
          
        in
        
# 2021 "parser_raw.mly"
      ( _1 )
# 38987 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _300;
          MenhirLib.EngineTypes.startp = _startpos__300_;
          MenhirLib.EngineTypes.endp = _endpos__300_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = xs000;
            MenhirLib.EngineTypes.startp = _startpos_xs000_;
            MenhirLib.EngineTypes.endp = _endpos_xs000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _100;
              MenhirLib.EngineTypes.startp = _startpos__100_;
              MenhirLib.EngineTypes.endp = _endpos__100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _300 : unit = Obj.magic _300 in
        let xs000 : ((string Location.loc * Parsetree.expression) list) = Obj.magic xs000 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__300_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__30_ = _endpos__300_ in
          let _startpos__30_ = _startpos__300_ in
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _30 = _300 in
          let xs00 = xs000 in
          let _10 = _100 in
          let _1 =
            let _endpos__3_ = _endpos__30_ in
            let _startpos__3_ = _startpos__30_ in
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _3 = _30 in
            let xs0 = xs00 in
            let _1 = _10 in
            let _2 =
              let xs = xs0 in
              
# 2303 "parser_raw.mly"
    ( xs )
# 39042 "parser_raw.ml"
              
            in
            let _loc__3_ = (_startpos__3_, _endpos__3_) in
            let _loc__1_ = (_startpos__1_, _endpos__1_) in
            
# 2055 "parser_raw.mly"
      ( unclosed "{<" _loc__1_ ">}" _loc__3_ )
# 39050 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__30_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 721 "parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 39061 "parser_raw.ml"
          
        in
        
# 2021 "parser_raw.mly"
      ( _1 )
# 39067 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _200;
          MenhirLib.EngineTypes.startp = _startpos__200_;
          MenhirLib.EngineTypes.endp = _endpos__200_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _100;
            MenhirLib.EngineTypes.startp = _startpos__100_;
            MenhirLib.EngineTypes.endp = _endpos__100_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _200 : unit = Obj.magic _200 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__200_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__20_ = _endpos__200_ in
          let _startpos__10_ = _startpos__100_ in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _2 = _20 in
            let _1 = _10 in
            
# 2057 "parser_raw.mly"
      ( Pexp_override [] )
# 39106 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__20_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 721 "parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 39117 "parser_raw.ml"
          
        in
        
# 2021 "parser_raw.mly"
      ( _1 )
# 39123 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _1000;
          MenhirLib.EngineTypes.startp = _startpos__1000_;
          MenhirLib.EngineTypes.endp = _endpos__1000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _200;
            MenhirLib.EngineTypes.startp = _startpos__200_;
            MenhirLib.EngineTypes.endp = _endpos__200_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _110;
              MenhirLib.EngineTypes.startp = _startpos__110_;
              MenhirLib.EngineTypes.endp = _endpos__110_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1000 : (Longident.t) = Obj.magic _1000 in
        let _200 : unit = Obj.magic _200 in
        let _110 : (Parsetree.expression) = Obj.magic _110 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__110_ in
        let _endpos = _endpos__1000_ in
        let _v : (Parsetree.expression) = let _1 =
          let _startpos__11_ = _startpos__110_ in
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _100 = _1000 in
          let _20 = _200 in
          let _11 = _110 in
          let _1 =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _10 = _100 in
            let _2 = _20 in
            let _1 = _11 in
            let _3 =
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _1 = _10 in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 39180 "parser_raw.ml"
              
            in
            
# 2059 "parser_raw.mly"
      ( Pexp_field(_1, _3) )
# 39186 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__100_ in
          let _startpos__1_ = _startpos__11_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 721 "parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 39197 "parser_raw.ml"
          
        in
        
# 2021 "parser_raw.mly"
      ( _1 )
# 39203 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _500;
          MenhirLib.EngineTypes.startp = _startpos__500_;
          MenhirLib.EngineTypes.endp = _endpos__500_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _400;
            MenhirLib.EngineTypes.startp = _startpos__400_;
            MenhirLib.EngineTypes.endp = _endpos__400_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _300;
              MenhirLib.EngineTypes.startp = _startpos__300_;
              MenhirLib.EngineTypes.endp = _endpos__300_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _200;
                MenhirLib.EngineTypes.startp = _startpos__200_;
                MenhirLib.EngineTypes.endp = _endpos__200_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _10000;
                  MenhirLib.EngineTypes.startp = _startpos__10000_;
                  MenhirLib.EngineTypes.endp = _endpos__10000_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _500 : unit = Obj.magic _500 in
        let _400 : (Parsetree.expression) = Obj.magic _400 in
        let _300 : unit = Obj.magic _300 in
        let _200 : unit = Obj.magic _200 in
        let _10000 : (Longident.t) = Obj.magic _10000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10000_ in
        let _endpos = _endpos__500_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__50_ = _endpos__500_ in
          let _endpos__1000_ = _endpos__10000_ in
          let _startpos__1000_ = _startpos__10000_ in
          let _50 = _500 in
          let _40 = _400 in
          let _30 = _300 in
          let _20 = _200 in
          let _1000 = _10000 in
          let _1 =
            let _endpos__100_ = _endpos__1000_ in
            let _startpos__100_ = _startpos__1000_ in
            let _5 = _50 in
            let _4 = _40 in
            let _3 = _30 in
            let _2 = _20 in
            let _100 = _1000 in
            let od =
              let _endpos__10_ = _endpos__100_ in
              let _startpos__10_ = _startpos__100_ in
              let _10 = _100 in
              let _1 =
                let _endpos__1_ = _endpos__10_ in
                let _startpos__1_ = _startpos__10_ in
                let _1 = _10 in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 39280 "parser_raw.ml"
                
              in
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _loc__1_ = (_startpos__1_, _endpos__1_) in
              
# 1259 "parser_raw.mly"
  ( let loc = make_loc _loc__1_ in
    let me = Mod.ident ~loc _1 in
    Opn.mk ~loc me )
# 39291 "parser_raw.ml"
              
            in
            
# 2061 "parser_raw.mly"
      ( Pexp_open(od, _4) )
# 39297 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__50_ in
          let _startpos__1_ = _startpos__1000_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 721 "parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 39308 "parser_raw.ml"
          
        in
        
# 2021 "parser_raw.mly"
      ( _1 )
# 39314 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _500;
          MenhirLib.EngineTypes.startp = _startpos__500_;
          MenhirLib.EngineTypes.endp = _endpos__500_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = xs000;
            MenhirLib.EngineTypes.startp = _startpos_xs000_;
            MenhirLib.EngineTypes.endp = _endpos_xs000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _300;
              MenhirLib.EngineTypes.startp = _startpos__300_;
              MenhirLib.EngineTypes.endp = _endpos__300_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _200;
                MenhirLib.EngineTypes.startp = _startpos__200_;
                MenhirLib.EngineTypes.endp = _endpos__200_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _10000;
                  MenhirLib.EngineTypes.startp = _startpos__10000_;
                  MenhirLib.EngineTypes.endp = _endpos__10000_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _500 : unit = Obj.magic _500 in
        let xs000 : ((string Location.loc * Parsetree.expression) list) = Obj.magic xs000 in
        let _300 : unit = Obj.magic _300 in
        let _200 : unit = Obj.magic _200 in
        let _10000 : (Longident.t) = Obj.magic _10000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10000_ in
        let _endpos = _endpos__500_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__50_ = _endpos__500_ in
          let _endpos__1000_ = _endpos__10000_ in
          let _startpos__1000_ = _startpos__10000_ in
          let _50 = _500 in
          let xs00 = xs000 in
          let _30 = _300 in
          let _20 = _200 in
          let _1000 = _10000 in
          let _1 =
            let _endpos__5_ = _endpos__50_ in
            let _endpos__100_ = _endpos__1000_ in
            let _startpos__100_ = _startpos__1000_ in
            let _5 = _50 in
            let xs0 = xs00 in
            let _3 = _30 in
            let _2 = _20 in
            let _100 = _1000 in
            let _4 =
              let xs = xs0 in
              
# 2303 "parser_raw.mly"
    ( xs )
# 39383 "parser_raw.ml"
              
            in
            let od =
              let _endpos__10_ = _endpos__100_ in
              let _startpos__10_ = _startpos__100_ in
              let _10 = _100 in
              let _1 =
                let _endpos__1_ = _endpos__10_ in
                let _startpos__1_ = _startpos__10_ in
                let _1 = _10 in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 39400 "parser_raw.ml"
                
              in
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _loc__1_ = (_startpos__1_, _endpos__1_) in
              
# 1259 "parser_raw.mly"
  ( let loc = make_loc _loc__1_ in
    let me = Mod.ident ~loc _1 in
    Opn.mk ~loc me )
# 39411 "parser_raw.ml"
              
            in
            let _startpos_od_ = _startpos__100_ in
            let _endpos = _endpos__5_ in
            let _symbolstartpos = _startpos_od_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2063 "parser_raw.mly"
      ( (* TODO: review the location of Pexp_override *)
        Pexp_open(od, mkexp ~loc:_sloc (Pexp_override _4)) )
# 39422 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__50_ in
          let _startpos__1_ = _startpos__1000_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 721 "parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 39433 "parser_raw.ml"
          
        in
        
# 2021 "parser_raw.mly"
      ( _1 )
# 39439 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _500;
          MenhirLib.EngineTypes.startp = _startpos__500_;
          MenhirLib.EngineTypes.endp = _endpos__500_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = xs000;
            MenhirLib.EngineTypes.startp = _startpos_xs000_;
            MenhirLib.EngineTypes.endp = _endpos_xs000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _300;
              MenhirLib.EngineTypes.startp = _startpos__300_;
              MenhirLib.EngineTypes.endp = _endpos__300_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _200;
                MenhirLib.EngineTypes.startp = _startpos__200_;
                MenhirLib.EngineTypes.endp = _endpos__200_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _100;
                  MenhirLib.EngineTypes.startp = _startpos__100_;
                  MenhirLib.EngineTypes.endp = _endpos__100_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _500 : unit = Obj.magic _500 in
        let xs000 : ((string Location.loc * Parsetree.expression) list) = Obj.magic xs000 in
        let _300 : unit = Obj.magic _300 in
        let _200 : unit = Obj.magic _200 in
        let _100 : (Longident.t) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__500_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__50_ = _endpos__500_ in
          let _startpos__50_ = _startpos__500_ in
          let _endpos__30_ = _endpos__300_ in
          let _startpos__30_ = _startpos__300_ in
          let _startpos__10_ = _startpos__100_ in
          let _50 = _500 in
          let xs00 = xs000 in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _endpos__5_ = _endpos__50_ in
            let _startpos__5_ = _startpos__50_ in
            let _endpos__3_ = _endpos__30_ in
            let _startpos__3_ = _startpos__30_ in
            let _5 = _50 in
            let xs0 = xs00 in
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            let _4 =
              let xs = xs0 in
              
# 2303 "parser_raw.mly"
    ( xs )
# 39511 "parser_raw.ml"
              
            in
            let _loc__5_ = (_startpos__5_, _endpos__5_) in
            let _loc__3_ = (_startpos__3_, _endpos__3_) in
            
# 2066 "parser_raw.mly"
      ( unclosed "{<" _loc__3_ ">}" _loc__5_ )
# 39519 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__50_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 721 "parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 39530 "parser_raw.ml"
          
        in
        
# 2021 "parser_raw.mly"
      ( _1 )
# 39536 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _10000;
          MenhirLib.EngineTypes.startp = _startpos__10000_;
          MenhirLib.EngineTypes.endp = _endpos__10000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _200;
            MenhirLib.EngineTypes.startp = _startpos__200_;
            MenhirLib.EngineTypes.endp = _endpos__200_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _100;
              MenhirLib.EngineTypes.startp = _startpos__100_;
              MenhirLib.EngineTypes.endp = _endpos__100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _10000 : (
# 564 "parser_raw.mly"
       (string)
# 39567 "parser_raw.ml"
        ) = Obj.magic _10000 in
        let _200 : unit = Obj.magic _200 in
        let _100 : (Parsetree.expression) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__10000_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__1000_ = _endpos__10000_ in
          let _startpos__1000_ = _startpos__10000_ in
          let _startpos__10_ = _startpos__100_ in
          let _1000 = _10000 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _endpos__100_ = _endpos__1000_ in
            let _startpos__100_ = _startpos__1000_ in
            let _100 = _1000 in
            let _2 = _20 in
            let _1 = _10 in
            let _3 =
              let _endpos__10_ = _endpos__100_ in
              let _startpos__10_ = _startpos__100_ in
              let _10 = _100 in
              let _1 =
                let _1 = _10 in
                
# 3073 "parser_raw.mly"
           ( _1 )
# 39596 "parser_raw.ml"
                
              in
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 39607 "parser_raw.ml"
              
            in
            
# 2068 "parser_raw.mly"
      ( Pexp_send(_1, _3) )
# 39613 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__1000_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 721 "parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 39624 "parser_raw.ml"
          
        in
        
# 2021 "parser_raw.mly"
      ( _1 )
# 39630 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _300;
          MenhirLib.EngineTypes.startp = _startpos__300_;
          MenhirLib.EngineTypes.endp = _endpos__300_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _1000;
            MenhirLib.EngineTypes.startp = _startpos__1000_;
            MenhirLib.EngineTypes.endp = _endpos__1000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _110;
              MenhirLib.EngineTypes.startp = _startpos__110_;
              MenhirLib.EngineTypes.endp = _endpos__110_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _300 : (Parsetree.expression) = Obj.magic _300 in
        let _1000 : (
# 599 "parser_raw.mly"
       (string)
# 39662 "parser_raw.ml"
        ) = Obj.magic _1000 in
        let _110 : (Parsetree.expression) = Obj.magic _110 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__110_ in
        let _endpos = _endpos__300_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__30_ = _endpos__300_ in
          let _startpos__11_ = _startpos__110_ in
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _30 = _300 in
          let _100 = _1000 in
          let _11 = _110 in
          let _1 =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _3 = _30 in
            let _10 = _100 in
            let _1 = _11 in
            let _2 =
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _1 = _10 in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 717 "parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 39692 "parser_raw.ml"
              
            in
            
# 2070 "parser_raw.mly"
      ( mkinfix _1 _2 _3 )
# 39698 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__30_ in
          let _startpos__1_ = _startpos__11_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 721 "parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 39709 "parser_raw.ml"
          
        in
        
# 2021 "parser_raw.mly"
      ( _1 )
# 39715 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _100 : (Parsetree.extension) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__100_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 2072 "parser_raw.mly"
      ( Pexp_extension _1 )
# 39746 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 721 "parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 39757 "parser_raw.ml"
          
        in
        
# 2021 "parser_raw.mly"
      ( _1 )
# 39763 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _20000;
          MenhirLib.EngineTypes.startp = _startpos__20000_;
          MenhirLib.EngineTypes.endp = _endpos__20000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _10100;
            MenhirLib.EngineTypes.startp = _startpos__10100_;
            MenhirLib.EngineTypes.endp = _endpos__10100_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _200;
              MenhirLib.EngineTypes.startp = _startpos__200_;
              MenhirLib.EngineTypes.endp = _endpos__200_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _10000;
                MenhirLib.EngineTypes.startp = _startpos__10000_;
                MenhirLib.EngineTypes.endp = _endpos__10000_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _20000 : unit = Obj.magic _20000 in
        let _10100 : unit = Obj.magic _10100 in
        let _200 : unit = Obj.magic _200 in
        let _10000 : (Longident.t) = Obj.magic _10000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10000_ in
        let _endpos = _endpos__20000_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__2000_ = _endpos__20000_ in
          let _startpos__1010_ = _startpos__10100_ in
          let _endpos__1000_ = _endpos__10000_ in
          let _startpos__1000_ = _startpos__10000_ in
          let _2000 = _20000 in
          let _1010 = _10100 in
          let _20 = _200 in
          let _1000 = _10000 in
          let _1 =
            let _endpos__200_ = _endpos__2000_ in
            let _startpos__101_ = _startpos__1010_ in
            let _endpos__100_ = _endpos__1000_ in
            let _startpos__100_ = _startpos__1000_ in
            let _200 = _2000 in
            let _101 = _1010 in
            let _2 = _20 in
            let _100 = _1000 in
            let _3 =
              let _endpos__20_ = _endpos__200_ in
              let _startpos__10_ = _startpos__101_ in
              let _20 = _200 in
              let _10 = _101 in
              let _1 =
                let _2 = _20 in
                let _1 = _10 in
                
# 2073 "parser_raw.mly"
                                                    (Lident "()")
# 39832 "parser_raw.ml"
                
              in
              let _endpos__1_ = _endpos__20_ in
              let _startpos__1_ = _startpos__10_ in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 39843 "parser_raw.ml"
              
            in
            let _endpos__3_ = _endpos__200_ in
            let od =
              let _endpos__10_ = _endpos__100_ in
              let _startpos__10_ = _startpos__100_ in
              let _10 = _100 in
              let _1 =
                let _endpos__1_ = _endpos__10_ in
                let _startpos__1_ = _startpos__10_ in
                let _1 = _10 in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 39861 "parser_raw.ml"
                
              in
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _loc__1_ = (_startpos__1_, _endpos__1_) in
              
# 1259 "parser_raw.mly"
  ( let loc = make_loc _loc__1_ in
    let me = Mod.ident ~loc _1 in
    Opn.mk ~loc me )
# 39872 "parser_raw.ml"
              
            in
            let _startpos_od_ = _startpos__100_ in
            let _endpos = _endpos__3_ in
            let _symbolstartpos = _startpos_od_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2074 "parser_raw.mly"
      ( (* TODO: review the location of Pexp_construct *)
        Pexp_open(od, mkexp ~loc:_sloc (Pexp_construct(_3, None))) )
# 39883 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__2000_ in
          let _startpos__1_ = _startpos__1000_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 721 "parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 39894 "parser_raw.ml"
          
        in
        
# 2021 "parser_raw.mly"
      ( _1 )
# 39900 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _500;
          MenhirLib.EngineTypes.startp = _startpos__500_;
          MenhirLib.EngineTypes.endp = _endpos__500_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _400;
            MenhirLib.EngineTypes.startp = _startpos__400_;
            MenhirLib.EngineTypes.endp = _endpos__400_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _300;
              MenhirLib.EngineTypes.startp = _startpos__300_;
              MenhirLib.EngineTypes.endp = _endpos__300_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _200;
                MenhirLib.EngineTypes.startp = _startpos__200_;
                MenhirLib.EngineTypes.endp = _endpos__200_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _100;
                  MenhirLib.EngineTypes.startp = _startpos__100_;
                  MenhirLib.EngineTypes.endp = _endpos__100_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _500 : unit = Obj.magic _500 in
        let _400 : (Parsetree.expression) = Obj.magic _400 in
        let _300 : unit = Obj.magic _300 in
        let _200 : unit = Obj.magic _200 in
        let _100 : (Longident.t) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__500_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__50_ = _endpos__500_ in
          let _startpos__50_ = _startpos__500_ in
          let _endpos__30_ = _endpos__300_ in
          let _startpos__30_ = _startpos__300_ in
          let _startpos__10_ = _startpos__100_ in
          let _50 = _500 in
          let _40 = _400 in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _endpos__5_ = _endpos__50_ in
            let _startpos__5_ = _startpos__50_ in
            let _endpos__3_ = _endpos__30_ in
            let _startpos__3_ = _startpos__30_ in
            let _5 = _50 in
            let _4 = _40 in
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            let _loc__5_ = (_startpos__5_, _endpos__5_) in
            let _loc__3_ = (_startpos__3_, _endpos__3_) in
            
# 2077 "parser_raw.mly"
      ( unclosed "(" _loc__3_ ")" _loc__5_ )
# 39972 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__50_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 721 "parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 39983 "parser_raw.ml"
          
        in
        
# 2021 "parser_raw.mly"
      ( _1 )
# 39989 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _300;
          MenhirLib.EngineTypes.startp = _startpos__300_;
          MenhirLib.EngineTypes.endp = _endpos__300_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _200;
            MenhirLib.EngineTypes.startp = _startpos__200_;
            MenhirLib.EngineTypes.endp = _endpos__200_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _100;
              MenhirLib.EngineTypes.startp = _startpos__100_;
              MenhirLib.EngineTypes.endp = _endpos__100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _300 : unit = Obj.magic _300 in
        let _200 : (Parsetree.expression option *
  (Longident.t Location.loc * Parsetree.expression) list) = Obj.magic _200 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__300_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__30_ = _endpos__300_ in
          let _startpos__10_ = _startpos__100_ in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            
# 2079 "parser_raw.mly"
      ( let (exten, fields) = _2 in
        Pexp_record(fields, exten) )
# 40038 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__30_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 721 "parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 40049 "parser_raw.ml"
          
        in
        
# 2021 "parser_raw.mly"
      ( _1 )
# 40055 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _300;
          MenhirLib.EngineTypes.startp = _startpos__300_;
          MenhirLib.EngineTypes.endp = _endpos__300_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _200;
            MenhirLib.EngineTypes.startp = _startpos__200_;
            MenhirLib.EngineTypes.endp = _endpos__200_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _100;
              MenhirLib.EngineTypes.startp = _startpos__100_;
              MenhirLib.EngineTypes.endp = _endpos__100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _300 : unit = Obj.magic _300 in
        let _200 : (Parsetree.expression option *
  (Longident.t Location.loc * Parsetree.expression) list) = Obj.magic _200 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__300_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__30_ = _endpos__300_ in
          let _startpos__30_ = _startpos__300_ in
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _endpos__3_ = _endpos__30_ in
            let _startpos__3_ = _startpos__30_ in
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            let _loc__3_ = (_startpos__3_, _endpos__3_) in
            let _loc__1_ = (_startpos__1_, _endpos__1_) in
            
# 2082 "parser_raw.mly"
      ( unclosed "{" _loc__1_ "}" _loc__3_ )
# 40111 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__30_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 721 "parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 40122 "parser_raw.ml"
          
        in
        
# 2021 "parser_raw.mly"
      ( _1 )
# 40128 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _500;
          MenhirLib.EngineTypes.startp = _startpos__500_;
          MenhirLib.EngineTypes.endp = _endpos__500_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _400;
            MenhirLib.EngineTypes.startp = _startpos__400_;
            MenhirLib.EngineTypes.endp = _endpos__400_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _300;
              MenhirLib.EngineTypes.startp = _startpos__300_;
              MenhirLib.EngineTypes.endp = _endpos__300_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _200;
                MenhirLib.EngineTypes.startp = _startpos__200_;
                MenhirLib.EngineTypes.endp = _endpos__200_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _10000;
                  MenhirLib.EngineTypes.startp = _startpos__10000_;
                  MenhirLib.EngineTypes.endp = _endpos__10000_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _500 : unit = Obj.magic _500 in
        let _400 : (Parsetree.expression option *
  (Longident.t Location.loc * Parsetree.expression) list) = Obj.magic _400 in
        let _300 : unit = Obj.magic _300 in
        let _200 : unit = Obj.magic _200 in
        let _10000 : (Longident.t) = Obj.magic _10000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10000_ in
        let _endpos = _endpos__500_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__50_ = _endpos__500_ in
          let _endpos__1000_ = _endpos__10000_ in
          let _startpos__1000_ = _startpos__10000_ in
          let _50 = _500 in
          let _40 = _400 in
          let _30 = _300 in
          let _20 = _200 in
          let _1000 = _10000 in
          let _1 =
            let _endpos__5_ = _endpos__50_ in
            let _endpos__100_ = _endpos__1000_ in
            let _startpos__100_ = _startpos__1000_ in
            let _5 = _50 in
            let _4 = _40 in
            let _3 = _30 in
            let _2 = _20 in
            let _100 = _1000 in
            let od =
              let _endpos__10_ = _endpos__100_ in
              let _startpos__10_ = _startpos__100_ in
              let _10 = _100 in
              let _1 =
                let _endpos__1_ = _endpos__10_ in
                let _startpos__1_ = _startpos__10_ in
                let _1 = _10 in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 40207 "parser_raw.ml"
                
              in
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _loc__1_ = (_startpos__1_, _endpos__1_) in
              
# 1259 "parser_raw.mly"
  ( let loc = make_loc _loc__1_ in
    let me = Mod.ident ~loc _1 in
    Opn.mk ~loc me )
# 40218 "parser_raw.ml"
              
            in
            let _startpos_od_ = _startpos__100_ in
            let _endpos = _endpos__5_ in
            let _symbolstartpos = _startpos_od_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2084 "parser_raw.mly"
      ( let (exten, fields) = _4 in
        (* TODO: review the location of Pexp_construct *)
        Pexp_open(od, mkexp ~loc:_sloc (Pexp_record(fields, exten))) )
# 40230 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__50_ in
          let _startpos__1_ = _startpos__1000_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 721 "parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 40241 "parser_raw.ml"
          
        in
        
# 2021 "parser_raw.mly"
      ( _1 )
# 40247 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _500;
          MenhirLib.EngineTypes.startp = _startpos__500_;
          MenhirLib.EngineTypes.endp = _endpos__500_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _400;
            MenhirLib.EngineTypes.startp = _startpos__400_;
            MenhirLib.EngineTypes.endp = _endpos__400_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _300;
              MenhirLib.EngineTypes.startp = _startpos__300_;
              MenhirLib.EngineTypes.endp = _endpos__300_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _200;
                MenhirLib.EngineTypes.startp = _startpos__200_;
                MenhirLib.EngineTypes.endp = _endpos__200_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _100;
                  MenhirLib.EngineTypes.startp = _startpos__100_;
                  MenhirLib.EngineTypes.endp = _endpos__100_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _500 : unit = Obj.magic _500 in
        let _400 : (Parsetree.expression option *
  (Longident.t Location.loc * Parsetree.expression) list) = Obj.magic _400 in
        let _300 : unit = Obj.magic _300 in
        let _200 : unit = Obj.magic _200 in
        let _100 : (Longident.t) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__500_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__50_ = _endpos__500_ in
          let _startpos__50_ = _startpos__500_ in
          let _endpos__30_ = _endpos__300_ in
          let _startpos__30_ = _startpos__300_ in
          let _startpos__10_ = _startpos__100_ in
          let _50 = _500 in
          let _40 = _400 in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _endpos__5_ = _endpos__50_ in
            let _startpos__5_ = _startpos__50_ in
            let _endpos__3_ = _endpos__30_ in
            let _startpos__3_ = _startpos__30_ in
            let _5 = _50 in
            let _4 = _40 in
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            let _loc__5_ = (_startpos__5_, _endpos__5_) in
            let _loc__3_ = (_startpos__3_, _endpos__3_) in
            
# 2088 "parser_raw.mly"
      ( unclosed "{" _loc__3_ "}" _loc__5_ )
# 40320 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__50_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 721 "parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 40331 "parser_raw.ml"
          
        in
        
# 2021 "parser_raw.mly"
      ( _1 )
# 40337 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _300;
          MenhirLib.EngineTypes.startp = _startpos__300_;
          MenhirLib.EngineTypes.endp = _endpos__300_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = es000;
            MenhirLib.EngineTypes.startp = _startpos_es000_;
            MenhirLib.EngineTypes.endp = _endpos_es000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _100;
              MenhirLib.EngineTypes.startp = _startpos__100_;
              MenhirLib.EngineTypes.endp = _endpos__100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _300 : unit = Obj.magic _300 in
        let es000 : (Parsetree.expression list) = Obj.magic es000 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__300_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__30_ = _endpos__300_ in
          let _startpos__10_ = _startpos__100_ in
          let _30 = _300 in
          let es00 = es000 in
          let _10 = _100 in
          let _1 =
            let _3 = _30 in
            let es0 = es00 in
            let _1 = _10 in
            let _2 =
              let es = es0 in
              
# 2320 "parser_raw.mly"
    ( es )
# 40386 "parser_raw.ml"
              
            in
            
# 2090 "parser_raw.mly"
      ( Pexp_array(_2) )
# 40392 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__30_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 721 "parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 40403 "parser_raw.ml"
          
        in
        
# 2021 "parser_raw.mly"
      ( _1 )
# 40409 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _300;
          MenhirLib.EngineTypes.startp = _startpos__300_;
          MenhirLib.EngineTypes.endp = _endpos__300_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = es000;
            MenhirLib.EngineTypes.startp = _startpos_es000_;
            MenhirLib.EngineTypes.endp = _endpos_es000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _100;
              MenhirLib.EngineTypes.startp = _startpos__100_;
              MenhirLib.EngineTypes.endp = _endpos__100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _300 : unit = Obj.magic _300 in
        let es000 : (Parsetree.expression list) = Obj.magic es000 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__300_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__30_ = _endpos__300_ in
          let _startpos__30_ = _startpos__300_ in
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _30 = _300 in
          let es00 = es000 in
          let _10 = _100 in
          let _1 =
            let _endpos__3_ = _endpos__30_ in
            let _startpos__3_ = _startpos__30_ in
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _3 = _30 in
            let es0 = es00 in
            let _1 = _10 in
            let _2 =
              let es = es0 in
              
# 2320 "parser_raw.mly"
    ( es )
# 40464 "parser_raw.ml"
              
            in
            let _loc__3_ = (_startpos__3_, _endpos__3_) in
            let _loc__1_ = (_startpos__1_, _endpos__1_) in
            
# 2092 "parser_raw.mly"
      ( unclosed "[|" _loc__1_ "|]" _loc__3_ )
# 40472 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__30_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 721 "parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 40483 "parser_raw.ml"
          
        in
        
# 2021 "parser_raw.mly"
      ( _1 )
# 40489 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _200;
          MenhirLib.EngineTypes.startp = _startpos__200_;
          MenhirLib.EngineTypes.endp = _endpos__200_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _100;
            MenhirLib.EngineTypes.startp = _startpos__100_;
            MenhirLib.EngineTypes.endp = _endpos__100_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _200 : unit = Obj.magic _200 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__200_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__20_ = _endpos__200_ in
          let _startpos__10_ = _startpos__100_ in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _2 = _20 in
            let _1 = _10 in
            
# 2094 "parser_raw.mly"
      ( Pexp_array [] )
# 40528 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__20_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 721 "parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 40539 "parser_raw.ml"
          
        in
        
# 2021 "parser_raw.mly"
      ( _1 )
# 40545 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _500;
          MenhirLib.EngineTypes.startp = _startpos__500_;
          MenhirLib.EngineTypes.endp = _endpos__500_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = es000;
            MenhirLib.EngineTypes.startp = _startpos_es000_;
            MenhirLib.EngineTypes.endp = _endpos_es000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _300;
              MenhirLib.EngineTypes.startp = _startpos__300_;
              MenhirLib.EngineTypes.endp = _endpos__300_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _200;
                MenhirLib.EngineTypes.startp = _startpos__200_;
                MenhirLib.EngineTypes.endp = _endpos__200_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _10000;
                  MenhirLib.EngineTypes.startp = _startpos__10000_;
                  MenhirLib.EngineTypes.endp = _endpos__10000_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _500 : unit = Obj.magic _500 in
        let es000 : (Parsetree.expression list) = Obj.magic es000 in
        let _300 : unit = Obj.magic _300 in
        let _200 : unit = Obj.magic _200 in
        let _10000 : (Longident.t) = Obj.magic _10000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10000_ in
        let _endpos = _endpos__500_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__50_ = _endpos__500_ in
          let _endpos__1000_ = _endpos__10000_ in
          let _startpos__1000_ = _startpos__10000_ in
          let _50 = _500 in
          let es00 = es000 in
          let _30 = _300 in
          let _20 = _200 in
          let _1000 = _10000 in
          let _1 =
            let _endpos__5_ = _endpos__50_ in
            let _endpos__100_ = _endpos__1000_ in
            let _startpos__100_ = _startpos__1000_ in
            let _5 = _50 in
            let es0 = es00 in
            let _3 = _30 in
            let _2 = _20 in
            let _100 = _1000 in
            let _4 =
              let es = es0 in
              
# 2320 "parser_raw.mly"
    ( es )
# 40614 "parser_raw.ml"
              
            in
            let od =
              let _endpos__10_ = _endpos__100_ in
              let _startpos__10_ = _startpos__100_ in
              let _10 = _100 in
              let _1 =
                let _endpos__1_ = _endpos__10_ in
                let _startpos__1_ = _startpos__10_ in
                let _1 = _10 in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 40631 "parser_raw.ml"
                
              in
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _loc__1_ = (_startpos__1_, _endpos__1_) in
              
# 1259 "parser_raw.mly"
  ( let loc = make_loc _loc__1_ in
    let me = Mod.ident ~loc _1 in
    Opn.mk ~loc me )
# 40642 "parser_raw.ml"
              
            in
            let _startpos_od_ = _startpos__100_ in
            let _endpos = _endpos__5_ in
            let _symbolstartpos = _startpos_od_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2096 "parser_raw.mly"
      ( (* TODO: review the location of Pexp_array *)
        Pexp_open(od, mkexp ~loc:_sloc (Pexp_array(_4))) )
# 40653 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__50_ in
          let _startpos__1_ = _startpos__1000_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 721 "parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 40664 "parser_raw.ml"
          
        in
        
# 2021 "parser_raw.mly"
      ( _1 )
# 40670 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _400;
          MenhirLib.EngineTypes.startp = _startpos__400_;
          MenhirLib.EngineTypes.endp = _endpos__400_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _300;
            MenhirLib.EngineTypes.startp = _startpos__300_;
            MenhirLib.EngineTypes.endp = _endpos__300_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _200;
              MenhirLib.EngineTypes.startp = _startpos__200_;
              MenhirLib.EngineTypes.endp = _endpos__200_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _10000;
                MenhirLib.EngineTypes.startp = _startpos__10000_;
                MenhirLib.EngineTypes.endp = _endpos__10000_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _400 : unit = Obj.magic _400 in
        let _300 : unit = Obj.magic _300 in
        let _200 : unit = Obj.magic _200 in
        let _10000 : (Longident.t) = Obj.magic _10000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10000_ in
        let _endpos = _endpos__400_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__40_ = _endpos__400_ in
          let _endpos__1000_ = _endpos__10000_ in
          let _startpos__1000_ = _startpos__10000_ in
          let _40 = _400 in
          let _30 = _300 in
          let _20 = _200 in
          let _1000 = _10000 in
          let _1 =
            let _endpos__4_ = _endpos__40_ in
            let _endpos__100_ = _endpos__1000_ in
            let _startpos__100_ = _startpos__1000_ in
            let _4 = _40 in
            let _3 = _30 in
            let _2 = _20 in
            let _100 = _1000 in
            let od =
              let _endpos__10_ = _endpos__100_ in
              let _startpos__10_ = _startpos__100_ in
              let _10 = _100 in
              let _1 =
                let _endpos__1_ = _endpos__10_ in
                let _startpos__1_ = _startpos__10_ in
                let _1 = _10 in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 40740 "parser_raw.ml"
                
              in
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _loc__1_ = (_startpos__1_, _endpos__1_) in
              
# 1259 "parser_raw.mly"
  ( let loc = make_loc _loc__1_ in
    let me = Mod.ident ~loc _1 in
    Opn.mk ~loc me )
# 40751 "parser_raw.ml"
              
            in
            let _startpos_od_ = _startpos__100_ in
            let _endpos = _endpos__4_ in
            let _symbolstartpos = _startpos_od_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2099 "parser_raw.mly"
      ( (* TODO: review the location of Pexp_array *)
        Pexp_open(od, mkexp ~loc:_sloc (Pexp_array [])) )
# 40762 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__40_ in
          let _startpos__1_ = _startpos__1000_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 721 "parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 40773 "parser_raw.ml"
          
        in
        
# 2021 "parser_raw.mly"
      ( _1 )
# 40779 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _500;
          MenhirLib.EngineTypes.startp = _startpos__500_;
          MenhirLib.EngineTypes.endp = _endpos__500_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = es000;
            MenhirLib.EngineTypes.startp = _startpos_es000_;
            MenhirLib.EngineTypes.endp = _endpos_es000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _300;
              MenhirLib.EngineTypes.startp = _startpos__300_;
              MenhirLib.EngineTypes.endp = _endpos__300_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _200;
                MenhirLib.EngineTypes.startp = _startpos__200_;
                MenhirLib.EngineTypes.endp = _endpos__200_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _100;
                  MenhirLib.EngineTypes.startp = _startpos__100_;
                  MenhirLib.EngineTypes.endp = _endpos__100_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _500 : unit = Obj.magic _500 in
        let es000 : (Parsetree.expression list) = Obj.magic es000 in
        let _300 : unit = Obj.magic _300 in
        let _200 : unit = Obj.magic _200 in
        let _100 : (Longident.t) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__500_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__50_ = _endpos__500_ in
          let _startpos__50_ = _startpos__500_ in
          let _endpos__30_ = _endpos__300_ in
          let _startpos__30_ = _startpos__300_ in
          let _startpos__10_ = _startpos__100_ in
          let _50 = _500 in
          let es00 = es000 in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _endpos__5_ = _endpos__50_ in
            let _startpos__5_ = _startpos__50_ in
            let _endpos__3_ = _endpos__30_ in
            let _startpos__3_ = _startpos__30_ in
            let _5 = _50 in
            let es0 = es00 in
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            let _4 =
              let es = es0 in
              
# 2320 "parser_raw.mly"
    ( es )
# 40851 "parser_raw.ml"
              
            in
            let _loc__5_ = (_startpos__5_, _endpos__5_) in
            let _loc__3_ = (_startpos__3_, _endpos__3_) in
            
# 2103 "parser_raw.mly"
      ( unclosed "[|" _loc__3_ "|]" _loc__5_ )
# 40859 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__50_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 721 "parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 40870 "parser_raw.ml"
          
        in
        
# 2021 "parser_raw.mly"
      ( _1 )
# 40876 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _300;
          MenhirLib.EngineTypes.startp = _startpos__300_;
          MenhirLib.EngineTypes.endp = _endpos__300_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = es000;
            MenhirLib.EngineTypes.startp = _startpos_es000_;
            MenhirLib.EngineTypes.endp = _endpos_es000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _100;
              MenhirLib.EngineTypes.startp = _startpos__100_;
              MenhirLib.EngineTypes.endp = _endpos__100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _300 : unit = Obj.magic _300 in
        let es000 : (Parsetree.expression list) = Obj.magic es000 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__300_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__30_ = _endpos__300_ in
          let _startpos__30_ = _startpos__300_ in
          let _startpos__10_ = _startpos__100_ in
          let _30 = _300 in
          let es00 = es000 in
          let _10 = _100 in
          let _1 =
            let _endpos__3_ = _endpos__30_ in
            let _startpos__3_ = _startpos__30_ in
            let _3 = _30 in
            let es0 = es00 in
            let _1 = _10 in
            let _2 =
              let es = es0 in
              
# 2320 "parser_raw.mly"
    ( es )
# 40928 "parser_raw.ml"
              
            in
            let _loc__3_ = (_startpos__3_, _endpos__3_) in
            
# 2105 "parser_raw.mly"
      ( fst (mktailexp _loc__3_ _2) )
# 40935 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__30_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 721 "parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 40946 "parser_raw.ml"
          
        in
        
# 2021 "parser_raw.mly"
      ( _1 )
# 40952 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _300;
          MenhirLib.EngineTypes.startp = _startpos__300_;
          MenhirLib.EngineTypes.endp = _endpos__300_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = es000;
            MenhirLib.EngineTypes.startp = _startpos_es000_;
            MenhirLib.EngineTypes.endp = _endpos_es000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _100;
              MenhirLib.EngineTypes.startp = _startpos__100_;
              MenhirLib.EngineTypes.endp = _endpos__100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _300 : unit = Obj.magic _300 in
        let es000 : (Parsetree.expression list) = Obj.magic es000 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__300_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__30_ = _endpos__300_ in
          let _startpos__30_ = _startpos__300_ in
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _30 = _300 in
          let es00 = es000 in
          let _10 = _100 in
          let _1 =
            let _endpos__3_ = _endpos__30_ in
            let _startpos__3_ = _startpos__30_ in
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _3 = _30 in
            let es0 = es00 in
            let _1 = _10 in
            let _2 =
              let es = es0 in
              
# 2320 "parser_raw.mly"
    ( es )
# 41007 "parser_raw.ml"
              
            in
            let _loc__3_ = (_startpos__3_, _endpos__3_) in
            let _loc__1_ = (_startpos__1_, _endpos__1_) in
            
# 2107 "parser_raw.mly"
      ( unclosed "[" _loc__1_ "]" _loc__3_ )
# 41015 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__30_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 721 "parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 41026 "parser_raw.ml"
          
        in
        
# 2021 "parser_raw.mly"
      ( _1 )
# 41032 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _500;
          MenhirLib.EngineTypes.startp = _startpos__500_;
          MenhirLib.EngineTypes.endp = _endpos__500_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = es000;
            MenhirLib.EngineTypes.startp = _startpos_es000_;
            MenhirLib.EngineTypes.endp = _endpos_es000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _300;
              MenhirLib.EngineTypes.startp = _startpos__300_;
              MenhirLib.EngineTypes.endp = _endpos__300_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _200;
                MenhirLib.EngineTypes.startp = _startpos__200_;
                MenhirLib.EngineTypes.endp = _endpos__200_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _10000;
                  MenhirLib.EngineTypes.startp = _startpos__10000_;
                  MenhirLib.EngineTypes.endp = _endpos__10000_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _500 : unit = Obj.magic _500 in
        let es000 : (Parsetree.expression list) = Obj.magic es000 in
        let _300 : unit = Obj.magic _300 in
        let _200 : unit = Obj.magic _200 in
        let _10000 : (Longident.t) = Obj.magic _10000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10000_ in
        let _endpos = _endpos__500_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__50_ = _endpos__500_ in
          let _startpos__50_ = _startpos__500_ in
          let _endpos__1000_ = _endpos__10000_ in
          let _startpos__1000_ = _startpos__10000_ in
          let _50 = _500 in
          let es00 = es000 in
          let _30 = _300 in
          let _20 = _200 in
          let _1000 = _10000 in
          let _1 =
            let _endpos__5_ = _endpos__50_ in
            let _startpos__5_ = _startpos__50_ in
            let _endpos__100_ = _endpos__1000_ in
            let _startpos__100_ = _startpos__1000_ in
            let _5 = _50 in
            let es0 = es00 in
            let _3 = _30 in
            let _2 = _20 in
            let _100 = _1000 in
            let _4 =
              let es = es0 in
              
# 2320 "parser_raw.mly"
    ( es )
# 41103 "parser_raw.ml"
              
            in
            let od =
              let _endpos__10_ = _endpos__100_ in
              let _startpos__10_ = _startpos__100_ in
              let _10 = _100 in
              let _1 =
                let _endpos__1_ = _endpos__10_ in
                let _startpos__1_ = _startpos__10_ in
                let _1 = _10 in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 41120 "parser_raw.ml"
                
              in
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _loc__1_ = (_startpos__1_, _endpos__1_) in
              
# 1259 "parser_raw.mly"
  ( let loc = make_loc _loc__1_ in
    let me = Mod.ident ~loc _1 in
    Opn.mk ~loc me )
# 41131 "parser_raw.ml"
              
            in
            let _startpos_od_ = _startpos__100_ in
            let _endpos = _endpos__5_ in
            let _symbolstartpos = _startpos_od_ in
            let _loc__5_ = (_startpos__5_, _endpos__5_) in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2109 "parser_raw.mly"
      ( let list_exp =
          (* TODO: review the location of list_exp *)
          let tail_exp, _tail_loc = mktailexp _loc__5_ _4 in
          mkexp ~loc:_sloc tail_exp in
        Pexp_open(od, list_exp) )
# 41146 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__50_ in
          let _startpos__1_ = _startpos__1000_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 721 "parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 41157 "parser_raw.ml"
          
        in
        
# 2021 "parser_raw.mly"
      ( _1 )
# 41163 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _20000;
          MenhirLib.EngineTypes.startp = _startpos__20000_;
          MenhirLib.EngineTypes.endp = _endpos__20000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _10100;
            MenhirLib.EngineTypes.startp = _startpos__10100_;
            MenhirLib.EngineTypes.endp = _endpos__10100_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _200;
              MenhirLib.EngineTypes.startp = _startpos__200_;
              MenhirLib.EngineTypes.endp = _endpos__200_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _10000;
                MenhirLib.EngineTypes.startp = _startpos__10000_;
                MenhirLib.EngineTypes.endp = _endpos__10000_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _20000 : unit = Obj.magic _20000 in
        let _10100 : unit = Obj.magic _10100 in
        let _200 : unit = Obj.magic _200 in
        let _10000 : (Longident.t) = Obj.magic _10000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10000_ in
        let _endpos = _endpos__20000_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__2000_ = _endpos__20000_ in
          let _startpos__1010_ = _startpos__10100_ in
          let _endpos__1000_ = _endpos__10000_ in
          let _startpos__1000_ = _startpos__10000_ in
          let _2000 = _20000 in
          let _1010 = _10100 in
          let _20 = _200 in
          let _1000 = _10000 in
          let _1 =
            let _endpos__200_ = _endpos__2000_ in
            let _startpos__101_ = _startpos__1010_ in
            let _endpos__100_ = _endpos__1000_ in
            let _startpos__100_ = _startpos__1000_ in
            let _200 = _2000 in
            let _101 = _1010 in
            let _2 = _20 in
            let _100 = _1000 in
            let _3 =
              let _endpos__20_ = _endpos__200_ in
              let _startpos__10_ = _startpos__101_ in
              let _20 = _200 in
              let _10 = _101 in
              let _1 =
                let _2 = _20 in
                let _1 = _10 in
                
# 2114 "parser_raw.mly"
                                                        (Lident "[]")
# 41232 "parser_raw.ml"
                
              in
              let _endpos__1_ = _endpos__20_ in
              let _startpos__1_ = _startpos__10_ in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 41243 "parser_raw.ml"
              
            in
            let _endpos__3_ = _endpos__200_ in
            let od =
              let _endpos__10_ = _endpos__100_ in
              let _startpos__10_ = _startpos__100_ in
              let _10 = _100 in
              let _1 =
                let _endpos__1_ = _endpos__10_ in
                let _startpos__1_ = _startpos__10_ in
                let _1 = _10 in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 41261 "parser_raw.ml"
                
              in
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _loc__1_ = (_startpos__1_, _endpos__1_) in
              
# 1259 "parser_raw.mly"
  ( let loc = make_loc _loc__1_ in
    let me = Mod.ident ~loc _1 in
    Opn.mk ~loc me )
# 41272 "parser_raw.ml"
              
            in
            let _startpos_od_ = _startpos__100_ in
            let _endpos = _endpos__3_ in
            let _symbolstartpos = _startpos_od_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2115 "parser_raw.mly"
      ( (* TODO: review the location of Pexp_construct *)
        Pexp_open(od, mkexp ~loc:_sloc (Pexp_construct(_3, None))) )
# 41283 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__2000_ in
          let _startpos__1_ = _startpos__1000_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 721 "parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 41294 "parser_raw.ml"
          
        in
        
# 2021 "parser_raw.mly"
      ( _1 )
# 41300 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _500;
          MenhirLib.EngineTypes.startp = _startpos__500_;
          MenhirLib.EngineTypes.endp = _endpos__500_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = es000;
            MenhirLib.EngineTypes.startp = _startpos_es000_;
            MenhirLib.EngineTypes.endp = _endpos_es000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _300;
              MenhirLib.EngineTypes.startp = _startpos__300_;
              MenhirLib.EngineTypes.endp = _endpos__300_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _200;
                MenhirLib.EngineTypes.startp = _startpos__200_;
                MenhirLib.EngineTypes.endp = _endpos__200_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _100;
                  MenhirLib.EngineTypes.startp = _startpos__100_;
                  MenhirLib.EngineTypes.endp = _endpos__100_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _500 : unit = Obj.magic _500 in
        let es000 : (Parsetree.expression list) = Obj.magic es000 in
        let _300 : unit = Obj.magic _300 in
        let _200 : unit = Obj.magic _200 in
        let _100 : (Longident.t) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__500_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__50_ = _endpos__500_ in
          let _startpos__50_ = _startpos__500_ in
          let _endpos__30_ = _endpos__300_ in
          let _startpos__30_ = _startpos__300_ in
          let _startpos__10_ = _startpos__100_ in
          let _50 = _500 in
          let es00 = es000 in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _endpos__5_ = _endpos__50_ in
            let _startpos__5_ = _startpos__50_ in
            let _endpos__3_ = _endpos__30_ in
            let _startpos__3_ = _startpos__30_ in
            let _5 = _50 in
            let es0 = es00 in
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            let _4 =
              let es = es0 in
              
# 2320 "parser_raw.mly"
    ( es )
# 41372 "parser_raw.ml"
              
            in
            let _loc__5_ = (_startpos__5_, _endpos__5_) in
            let _loc__3_ = (_startpos__3_, _endpos__3_) in
            
# 2119 "parser_raw.mly"
      ( unclosed "[" _loc__3_ "]" _loc__5_ )
# 41380 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__50_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 721 "parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 41391 "parser_raw.ml"
          
        in
        
# 2021 "parser_raw.mly"
      ( _1 )
# 41397 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _900;
          MenhirLib.EngineTypes.startp = _startpos__900_;
          MenhirLib.EngineTypes.endp = _endpos__900_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _100000;
            MenhirLib.EngineTypes.startp = _startpos__100000_;
            MenhirLib.EngineTypes.endp = _endpos__100000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _700;
              MenhirLib.EngineTypes.startp = _startpos__700_;
              MenhirLib.EngineTypes.endp = _endpos__700_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _600;
                MenhirLib.EngineTypes.startp = _startpos__600_;
                MenhirLib.EngineTypes.endp = _endpos__600_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _10100;
                  MenhirLib.EngineTypes.startp = _startpos__10100_;
                  MenhirLib.EngineTypes.endp = _endpos__10100_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _1100;
                    MenhirLib.EngineTypes.startp = _startpos__1100_;
                    MenhirLib.EngineTypes.endp = _endpos__1100_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = _400;
                      MenhirLib.EngineTypes.startp = _startpos__400_;
                      MenhirLib.EngineTypes.endp = _endpos__400_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.semv = _300;
                        MenhirLib.EngineTypes.startp = _startpos__300_;
                        MenhirLib.EngineTypes.endp = _endpos__300_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.semv = _200;
                          MenhirLib.EngineTypes.startp = _startpos__200_;
                          MenhirLib.EngineTypes.endp = _endpos__200_;
                          MenhirLib.EngineTypes.next = {
                            MenhirLib.EngineTypes.state = _menhir_s;
                            MenhirLib.EngineTypes.semv = _10010;
                            MenhirLib.EngineTypes.startp = _startpos__10010_;
                            MenhirLib.EngineTypes.endp = _endpos__10010_;
                            MenhirLib.EngineTypes.next = _menhir_stack;
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _900 : unit = Obj.magic _900 in
        let _100000 : (Parsetree.module_type) = Obj.magic _100000 in
        let _700 : unit = Obj.magic _700 in
        let _600 : (Parsetree.module_expr) = Obj.magic _600 in
        let _10100 : (Parsetree.attributes) = Obj.magic _10100 in
        let _1100 : (string Location.loc option) = Obj.magic _1100 in
        let _400 : unit = Obj.magic _400 in
        let _300 : unit = Obj.magic _300 in
        let _200 : unit = Obj.magic _200 in
        let _10010 : (Longident.t) = Obj.magic _10010 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10010_ in
        let _endpos = _endpos__900_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__90_ = _endpos__900_ in
          let _endpos__1001_ = _endpos__10010_ in
          let _startpos__1001_ = _startpos__10010_ in
          let _endpos__10000_ = _endpos__100000_ in
          let _startpos__10000_ = _startpos__100000_ in
          let _90 = _900 in
          let _10000 = _100000 in
          let _70 = _700 in
          let _60 = _600 in
          let _1010 = _10100 in
          let _110 = _1100 in
          let _40 = _400 in
          let _30 = _300 in
          let _20 = _200 in
          let _1001 = _10010 in
          let _1 =
            let _endpos__9_ = _endpos__90_ in
            let _endpos__1000_ = _endpos__10000_ in
            let _startpos__1000_ = _startpos__10000_ in
            let _endpos__100_ = _endpos__1001_ in
            let _startpos__100_ = _startpos__1001_ in
            let _9 = _90 in
            let _1000 = _10000 in
            let _7 = _70 in
            let _6 = _60 in
            let _101 = _1010 in
            let _11 = _110 in
            let _4 = _40 in
            let _3 = _30 in
            let _2 = _20 in
            let _100 = _1001 in
            let _8 =
              let _endpos__100_ = _endpos__1000_ in
              let _startpos__100_ = _startpos__1000_ in
              let _100 = _1000 in
              let _1 =
                let _endpos__10_ = _endpos__100_ in
                let _startpos__10_ = _startpos__100_ in
                let _10 = _100 in
                let _1 =
                  let _1 = _10 in
                  
# 3003 "parser_raw.mly"
      ( Ptyp_package (package_type_of_module_type _1) )
# 41518 "parser_raw.ml"
                  
                in
                let _endpos__1_ = _endpos__10_ in
                let _startpos__1_ = _startpos__10_ in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 725 "parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 41529 "parser_raw.ml"
                
              in
              
# 3004 "parser_raw.mly"
      ( _1 )
# 41535 "parser_raw.ml"
              
            in
            let _5 =
              let _10 = _101 in
              let _1 = _11 in
              let _2 =
                let _1 = _10 in
                
# 3372 "parser_raw.mly"
    ( _1 )
# 41546 "parser_raw.ml"
                
              in
              
# 3383 "parser_raw.mly"
                 ( _1, _2 )
# 41552 "parser_raw.ml"
              
            in
            let od =
              let _endpos__10_ = _endpos__100_ in
              let _startpos__10_ = _startpos__100_ in
              let _10 = _100 in
              let _1 =
                let _endpos__1_ = _endpos__10_ in
                let _startpos__1_ = _startpos__10_ in
                let _1 = _10 in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 41569 "parser_raw.ml"
                
              in
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _loc__1_ = (_startpos__1_, _endpos__1_) in
              
# 1259 "parser_raw.mly"
  ( let loc = make_loc _loc__1_ in
    let me = Mod.ident ~loc _1 in
    Opn.mk ~loc me )
# 41580 "parser_raw.ml"
              
            in
            let _startpos_od_ = _startpos__100_ in
            let _endpos = _endpos__9_ in
            let _symbolstartpos = _startpos_od_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2122 "parser_raw.mly"
      ( (* TODO: review the location of Pexp_constraint *)
        let modexp =
          mkexp_attrs ~loc:_sloc
            (Pexp_constraint (ghexp ~loc:_sloc (Pexp_pack _6), _8)) _5 in
        Pexp_open(od, modexp) )
# 41594 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__90_ in
          let _startpos__1_ = _startpos__1001_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 721 "parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 41605 "parser_raw.ml"
          
        in
        
# 2021 "parser_raw.mly"
      ( _1 )
# 41611 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _800;
          MenhirLib.EngineTypes.startp = _startpos__800_;
          MenhirLib.EngineTypes.endp = _endpos__800_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _700;
            MenhirLib.EngineTypes.startp = _startpos__700_;
            MenhirLib.EngineTypes.endp = _endpos__700_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _600;
              MenhirLib.EngineTypes.startp = _startpos__600_;
              MenhirLib.EngineTypes.endp = _endpos__600_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _10000;
                MenhirLib.EngineTypes.startp = _startpos__10000_;
                MenhirLib.EngineTypes.endp = _endpos__10000_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _1100;
                  MenhirLib.EngineTypes.startp = _startpos__1100_;
                  MenhirLib.EngineTypes.endp = _endpos__1100_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _400;
                    MenhirLib.EngineTypes.startp = _startpos__400_;
                    MenhirLib.EngineTypes.endp = _endpos__400_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = _300;
                      MenhirLib.EngineTypes.startp = _startpos__300_;
                      MenhirLib.EngineTypes.endp = _endpos__300_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.semv = _200;
                        MenhirLib.EngineTypes.startp = _startpos__200_;
                        MenhirLib.EngineTypes.endp = _endpos__200_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _100;
                          MenhirLib.EngineTypes.startp = _startpos__100_;
                          MenhirLib.EngineTypes.endp = _endpos__100_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _800 : unit = Obj.magic _800 in
        let _700 : unit = Obj.magic _700 in
        let _600 : (Parsetree.module_expr) = Obj.magic _600 in
        let _10000 : (Parsetree.attributes) = Obj.magic _10000 in
        let _1100 : (string Location.loc option) = Obj.magic _1100 in
        let _400 : unit = Obj.magic _400 in
        let _300 : unit = Obj.magic _300 in
        let _200 : unit = Obj.magic _200 in
        let _100 : (Longident.t) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__800_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__80_ = _endpos__800_ in
          let _startpos__80_ = _startpos__800_ in
          let _endpos__30_ = _endpos__300_ in
          let _startpos__30_ = _startpos__300_ in
          let _startpos__10_ = _startpos__100_ in
          let _80 = _800 in
          let _70 = _700 in
          let _60 = _600 in
          let _1000 = _10000 in
          let _110 = _1100 in
          let _40 = _400 in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _endpos__8_ = _endpos__80_ in
            let _startpos__8_ = _startpos__80_ in
            let _endpos__3_ = _endpos__30_ in
            let _startpos__3_ = _startpos__30_ in
            let _8 = _80 in
            let _7 = _70 in
            let _6 = _60 in
            let _100 = _1000 in
            let _11 = _110 in
            let _4 = _40 in
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            let _5 =
              let _10 = _100 in
              let _1 = _11 in
              let _2 =
                let _1 = _10 in
                
# 3372 "parser_raw.mly"
    ( _1 )
# 41718 "parser_raw.ml"
                
              in
              
# 3383 "parser_raw.mly"
                 ( _1, _2 )
# 41724 "parser_raw.ml"
              
            in
            let _loc__8_ = (_startpos__8_, _endpos__8_) in
            let _loc__3_ = (_startpos__3_, _endpos__3_) in
            
# 2129 "parser_raw.mly"
      ( unclosed "(" _loc__3_ ")" _loc__8_ )
# 41732 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__80_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 721 "parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 41743 "parser_raw.ml"
          
        in
        
# 2021 "parser_raw.mly"
      ( _1 )
# 41749 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1000;
          MenhirLib.EngineTypes.startp = _startpos__1000_;
          MenhirLib.EngineTypes.endp = _endpos__1000_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1000 : (string) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos__1000_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _100 = _1000 in
          let _1 =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _10 = _100 in
            let _1 =
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _1 = _10 in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 41789 "parser_raw.ml"
              
            in
            
# 2391 "parser_raw.mly"
      ( Ppat_var (_1) )
# 41795 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__100_ in
          let _startpos__1_ = _startpos__100_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 723 "parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 41806 "parser_raw.ml"
          
        in
        
# 2392 "parser_raw.mly"
      ( _1 )
# 41812 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.pattern) = 
# 2393 "parser_raw.mly"
                             ( _1 )
# 41837 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.pattern) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.pattern) = let _endpos = _endpos__3_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2397 "parser_raw.mly"
      ( reloc_pat ~loc:_sloc _2 )
# 41877 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.pattern) = 
# 2399 "parser_raw.mly"
      ( _1 )
# 41902 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _10;
            MenhirLib.EngineTypes.startp = _startpos__10_;
            MenhirLib.EngineTypes.endp = _endpos__10_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _100;
              MenhirLib.EngineTypes.startp = _startpos__100_;
              MenhirLib.EngineTypes.endp = _endpos__100_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _11;
                MenhirLib.EngineTypes.startp = _startpos__11_;
                MenhirLib.EngineTypes.endp = _endpos__11_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _10 : (
# 610 "parser_raw.mly"
       (string)
# 41949 "parser_raw.ml"
        ) = Obj.magic _10 in
        let _100 : (Parsetree.attributes) = Obj.magic _100 in
        let _11 : (string Location.loc option) = Obj.magic _11 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.pattern) = let _4 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 41968 "parser_raw.ml"
          
        in
        let _3 =
          let _10 = _100 in
          let _1 = _11 in
          let _2 =
            let _1 = _10 in
            
# 3372 "parser_raw.mly"
    ( _1 )
# 41979 "parser_raw.ml"
            
          in
          
# 3383 "parser_raw.mly"
                 ( _1, _2 )
# 41985 "parser_raw.ml"
          
        in
        let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2401 "parser_raw.mly"
      ( mkpat_attrs ~loc:_sloc (Ppat_unpack _4) _3 )
# 41994 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _1000;
            MenhirLib.EngineTypes.startp = _startpos__1000_;
            MenhirLib.EngineTypes.endp = _endpos__1000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _10;
                MenhirLib.EngineTypes.startp = _startpos__10_;
                MenhirLib.EngineTypes.endp = _endpos__10_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _100;
                  MenhirLib.EngineTypes.startp = _startpos__100_;
                  MenhirLib.EngineTypes.endp = _endpos__100_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _11;
                    MenhirLib.EngineTypes.startp = _startpos__11_;
                    MenhirLib.EngineTypes.endp = _endpos__11_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _1;
                        MenhirLib.EngineTypes.startp = _startpos__1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : unit = Obj.magic _7 in
        let _1000 : (Parsetree.module_type) = Obj.magic _1000 in
        let _5 : unit = Obj.magic _5 in
        let _10 : (
# 610 "parser_raw.mly"
       (string)
# 42053 "parser_raw.ml"
        ) = Obj.magic _10 in
        let _100 : (Parsetree.attributes) = Obj.magic _100 in
        let _11 : (string Location.loc option) = Obj.magic _11 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.pattern) = let _6 =
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _100 = _1000 in
          let _1 =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _10 = _100 in
            let _1 =
              let _1 = _10 in
              
# 3003 "parser_raw.mly"
      ( Ptyp_package (package_type_of_module_type _1) )
# 42075 "parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 725 "parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 42086 "parser_raw.ml"
            
          in
          
# 3004 "parser_raw.mly"
      ( _1 )
# 42092 "parser_raw.ml"
          
        in
        let _4 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 42105 "parser_raw.ml"
          
        in
        let _3 =
          let _10 = _100 in
          let _1 = _11 in
          let _2 =
            let _1 = _10 in
            
# 3372 "parser_raw.mly"
    ( _1 )
# 42116 "parser_raw.ml"
            
          in
          
# 3383 "parser_raw.mly"
                 ( _1, _2 )
# 42122 "parser_raw.ml"
          
        in
        let _endpos = _endpos__7_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2403 "parser_raw.mly"
      ( mkpat_attrs ~loc:_sloc
          (Ppat_constraint(mkpat ~loc:_sloc (Ppat_unpack _4), _6))
          _3 )
# 42133 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__100_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 2411 "parser_raw.mly"
      ( Ppat_any )
# 42164 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 723 "parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 42175 "parser_raw.ml"
          
        in
        
# 2407 "parser_raw.mly"
      ( _1 )
# 42181 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _100 : (Parsetree.constant) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__100_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 2413 "parser_raw.mly"
      ( Ppat_constant _1 )
# 42212 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 723 "parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 42223 "parser_raw.ml"
          
        in
        
# 2407 "parser_raw.mly"
      ( _1 )
# 42229 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _300;
          MenhirLib.EngineTypes.startp = _startpos__300_;
          MenhirLib.EngineTypes.endp = _endpos__300_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _200;
            MenhirLib.EngineTypes.startp = _startpos__200_;
            MenhirLib.EngineTypes.endp = _endpos__200_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _100;
              MenhirLib.EngineTypes.startp = _startpos__100_;
              MenhirLib.EngineTypes.endp = _endpos__100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _300 : (Parsetree.constant) = Obj.magic _300 in
        let _200 : unit = Obj.magic _200 in
        let _100 : (Parsetree.constant) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__300_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__30_ = _endpos__300_ in
          let _startpos__10_ = _startpos__100_ in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            
# 2415 "parser_raw.mly"
      ( Ppat_interval (_1, _3) )
# 42276 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__30_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 723 "parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 42287 "parser_raw.ml"
          
        in
        
# 2407 "parser_raw.mly"
      ( _1 )
# 42293 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1000;
          MenhirLib.EngineTypes.startp = _startpos__1000_;
          MenhirLib.EngineTypes.endp = _endpos__1000_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1000 : (Longident.t) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos__1000_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _100 = _1000 in
          let _1 =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _10 = _100 in
            let _1 =
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _1 = _10 in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 42333 "parser_raw.ml"
              
            in
            
# 2417 "parser_raw.mly"
      ( Ppat_construct(_1, None) )
# 42339 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__100_ in
          let _startpos__1_ = _startpos__100_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 723 "parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 42350 "parser_raw.ml"
          
        in
        
# 2407 "parser_raw.mly"
      ( _1 )
# 42356 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _100 : (string) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__100_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 2419 "parser_raw.mly"
      ( Ppat_variant(_1, None) )
# 42387 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 723 "parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 42398 "parser_raw.ml"
          
        in
        
# 2407 "parser_raw.mly"
      ( _1 )
# 42404 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _1000;
          MenhirLib.EngineTypes.startp = _startpos__1000_;
          MenhirLib.EngineTypes.endp = _endpos__1000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _110;
            MenhirLib.EngineTypes.startp = _startpos__110_;
            MenhirLib.EngineTypes.endp = _endpos__110_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _1000 : (Longident.t) = Obj.magic _1000 in
        let _110 : unit = Obj.magic _110 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__110_ in
        let _endpos = _endpos__1000_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _startpos__11_ = _startpos__110_ in
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _100 = _1000 in
          let _11 = _110 in
          let _1 =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _10 = _100 in
            let _1 = _11 in
            let _2 =
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _1 = _10 in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 42453 "parser_raw.ml"
              
            in
            
# 2421 "parser_raw.mly"
      ( Ppat_type (_2) )
# 42459 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__100_ in
          let _startpos__1_ = _startpos__11_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 723 "parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 42470 "parser_raw.ml"
          
        in
        
# 2407 "parser_raw.mly"
      ( _1 )
# 42476 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _300;
          MenhirLib.EngineTypes.startp = _startpos__300_;
          MenhirLib.EngineTypes.endp = _endpos__300_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _200;
            MenhirLib.EngineTypes.startp = _startpos__200_;
            MenhirLib.EngineTypes.endp = _endpos__200_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1000;
              MenhirLib.EngineTypes.startp = _startpos__1000_;
              MenhirLib.EngineTypes.endp = _endpos__1000_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _300 : (Parsetree.pattern) = Obj.magic _300 in
        let _200 : unit = Obj.magic _200 in
        let _1000 : (Longident.t) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos__300_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__30_ = _endpos__300_ in
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _30 = _300 in
          let _20 = _200 in
          let _100 = _1000 in
          let _1 =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _3 = _30 in
            let _2 = _20 in
            let _10 = _100 in
            let _1 =
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _1 = _10 in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 42533 "parser_raw.ml"
              
            in
            
# 2423 "parser_raw.mly"
      ( Ppat_open(_1, _3) )
# 42539 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__30_ in
          let _startpos__1_ = _startpos__100_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 723 "parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 42550 "parser_raw.ml"
          
        in
        
# 2407 "parser_raw.mly"
      ( _1 )
# 42556 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _20000;
          MenhirLib.EngineTypes.startp = _startpos__20000_;
          MenhirLib.EngineTypes.endp = _endpos__20000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _10000;
            MenhirLib.EngineTypes.startp = _startpos__10000_;
            MenhirLib.EngineTypes.endp = _endpos__10000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _200;
              MenhirLib.EngineTypes.startp = _startpos__200_;
              MenhirLib.EngineTypes.endp = _endpos__200_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1010;
                MenhirLib.EngineTypes.startp = _startpos__1010_;
                MenhirLib.EngineTypes.endp = _endpos__1010_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _20000 : unit = Obj.magic _20000 in
        let _10000 : unit = Obj.magic _10000 in
        let _200 : unit = Obj.magic _200 in
        let _1010 : (Longident.t) = Obj.magic _1010 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1010_ in
        let _endpos = _endpos__20000_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__2000_ = _endpos__20000_ in
          let _endpos__101_ = _endpos__1010_ in
          let _startpos__101_ = _startpos__1010_ in
          let _startpos__1000_ = _startpos__10000_ in
          let _2000 = _20000 in
          let _1000 = _10000 in
          let _20 = _200 in
          let _101 = _1010 in
          let _1 =
            let _endpos__200_ = _endpos__2000_ in
            let _startpos__100_ = _startpos__1000_ in
            let _endpos__10_ = _endpos__101_ in
            let _startpos__10_ = _startpos__101_ in
            let _200 = _2000 in
            let _100 = _1000 in
            let _2 = _20 in
            let _10 = _101 in
            let _3 =
              let _endpos__20_ = _endpos__200_ in
              let _startpos__10_ = _startpos__100_ in
              let _20 = _200 in
              let _10 = _100 in
              let _1 =
                let _2 = _20 in
                let _1 = _10 in
                
# 2424 "parser_raw.mly"
                                                     (Lident "[]")
# 42625 "parser_raw.ml"
                
              in
              let _endpos__1_ = _endpos__20_ in
              let _startpos__1_ = _startpos__10_ in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 42636 "parser_raw.ml"
              
            in
            let _endpos__3_ = _endpos__200_ in
            let _1 =
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _1 = _10 in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 42650 "parser_raw.ml"
              
            in
            let _startpos__1_ = _startpos__10_ in
            let _endpos = _endpos__3_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2425 "parser_raw.mly"
    ( Ppat_open(_1, mkpat ~loc:_sloc (Ppat_construct(_3, None))) )
# 42660 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__2000_ in
          let _startpos__1_ = _startpos__101_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 723 "parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 42671 "parser_raw.ml"
          
        in
        
# 2407 "parser_raw.mly"
      ( _1 )
# 42677 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _20000;
          MenhirLib.EngineTypes.startp = _startpos__20000_;
          MenhirLib.EngineTypes.endp = _endpos__20000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _10000;
            MenhirLib.EngineTypes.startp = _startpos__10000_;
            MenhirLib.EngineTypes.endp = _endpos__10000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _200;
              MenhirLib.EngineTypes.startp = _startpos__200_;
              MenhirLib.EngineTypes.endp = _endpos__200_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1010;
                MenhirLib.EngineTypes.startp = _startpos__1010_;
                MenhirLib.EngineTypes.endp = _endpos__1010_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _20000 : unit = Obj.magic _20000 in
        let _10000 : unit = Obj.magic _10000 in
        let _200 : unit = Obj.magic _200 in
        let _1010 : (Longident.t) = Obj.magic _1010 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1010_ in
        let _endpos = _endpos__20000_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__2000_ = _endpos__20000_ in
          let _endpos__101_ = _endpos__1010_ in
          let _startpos__101_ = _startpos__1010_ in
          let _startpos__1000_ = _startpos__10000_ in
          let _2000 = _20000 in
          let _1000 = _10000 in
          let _20 = _200 in
          let _101 = _1010 in
          let _1 =
            let _endpos__200_ = _endpos__2000_ in
            let _startpos__100_ = _startpos__1000_ in
            let _endpos__10_ = _endpos__101_ in
            let _startpos__10_ = _startpos__101_ in
            let _200 = _2000 in
            let _100 = _1000 in
            let _2 = _20 in
            let _10 = _101 in
            let _3 =
              let _endpos__20_ = _endpos__200_ in
              let _startpos__10_ = _startpos__100_ in
              let _20 = _200 in
              let _10 = _100 in
              let _1 =
                let _2 = _20 in
                let _1 = _10 in
                
# 2426 "parser_raw.mly"
                                                 (Lident "()")
# 42746 "parser_raw.ml"
                
              in
              let _endpos__1_ = _endpos__20_ in
              let _startpos__1_ = _startpos__10_ in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 42757 "parser_raw.ml"
              
            in
            let _endpos__3_ = _endpos__200_ in
            let _1 =
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _1 = _10 in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 42771 "parser_raw.ml"
              
            in
            let _startpos__1_ = _startpos__10_ in
            let _endpos = _endpos__3_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2427 "parser_raw.mly"
    ( Ppat_open(_1, mkpat ~loc:_sloc (Ppat_construct(_3, None))) )
# 42781 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__2000_ in
          let _startpos__1_ = _startpos__101_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 723 "parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 42792 "parser_raw.ml"
          
        in
        
# 2407 "parser_raw.mly"
      ( _1 )
# 42798 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _500;
          MenhirLib.EngineTypes.startp = _startpos__500_;
          MenhirLib.EngineTypes.endp = _endpos__500_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _400;
            MenhirLib.EngineTypes.startp = _startpos__400_;
            MenhirLib.EngineTypes.endp = _endpos__400_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _300;
              MenhirLib.EngineTypes.startp = _startpos__300_;
              MenhirLib.EngineTypes.endp = _endpos__300_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _200;
                MenhirLib.EngineTypes.startp = _startpos__200_;
                MenhirLib.EngineTypes.endp = _endpos__200_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1000;
                  MenhirLib.EngineTypes.startp = _startpos__1000_;
                  MenhirLib.EngineTypes.endp = _endpos__1000_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _500 : unit = Obj.magic _500 in
        let _400 : (Parsetree.pattern) = Obj.magic _400 in
        let _300 : unit = Obj.magic _300 in
        let _200 : unit = Obj.magic _200 in
        let _1000 : (Longident.t) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos__500_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__50_ = _endpos__500_ in
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _50 = _500 in
          let _40 = _400 in
          let _30 = _300 in
          let _20 = _200 in
          let _100 = _1000 in
          let _1 =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _5 = _50 in
            let _4 = _40 in
            let _3 = _30 in
            let _2 = _20 in
            let _10 = _100 in
            let _1 =
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _1 = _10 in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 42871 "parser_raw.ml"
              
            in
            
# 2429 "parser_raw.mly"
      ( Ppat_open (_1, _4) )
# 42877 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__50_ in
          let _startpos__1_ = _startpos__100_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 723 "parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 42888 "parser_raw.ml"
          
        in
        
# 2407 "parser_raw.mly"
      ( _1 )
# 42894 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _500;
          MenhirLib.EngineTypes.startp = _startpos__500_;
          MenhirLib.EngineTypes.endp = _endpos__500_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _400;
            MenhirLib.EngineTypes.startp = _startpos__400_;
            MenhirLib.EngineTypes.endp = _endpos__400_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _300;
              MenhirLib.EngineTypes.startp = _startpos__300_;
              MenhirLib.EngineTypes.endp = _endpos__300_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _200;
                MenhirLib.EngineTypes.startp = _startpos__200_;
                MenhirLib.EngineTypes.endp = _endpos__200_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _100;
                  MenhirLib.EngineTypes.startp = _startpos__100_;
                  MenhirLib.EngineTypes.endp = _endpos__100_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _500 : unit = Obj.magic _500 in
        let _400 : (Parsetree.pattern) = Obj.magic _400 in
        let _300 : unit = Obj.magic _300 in
        let _200 : unit = Obj.magic _200 in
        let _100 : (Longident.t) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__500_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__50_ = _endpos__500_ in
          let _startpos__50_ = _startpos__500_ in
          let _endpos__30_ = _endpos__300_ in
          let _startpos__30_ = _startpos__300_ in
          let _startpos__10_ = _startpos__100_ in
          let _50 = _500 in
          let _40 = _400 in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _endpos__5_ = _endpos__50_ in
            let _startpos__5_ = _startpos__50_ in
            let _endpos__3_ = _endpos__30_ in
            let _startpos__3_ = _startpos__30_ in
            let _5 = _50 in
            let _4 = _40 in
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            let _loc__5_ = (_startpos__5_, _endpos__5_) in
            let _loc__3_ = (_startpos__3_, _endpos__3_) in
            
# 2431 "parser_raw.mly"
      ( unclosed "(" _loc__3_ ")" _loc__5_ )
# 42966 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__50_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 723 "parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 42977 "parser_raw.ml"
          
        in
        
# 2407 "parser_raw.mly"
      ( _1 )
# 42983 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _400;
          MenhirLib.EngineTypes.startp = _startpos__400_;
          MenhirLib.EngineTypes.endp = _endpos__400_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _300;
            MenhirLib.EngineTypes.startp = _startpos__300_;
            MenhirLib.EngineTypes.endp = _endpos__300_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _200;
              MenhirLib.EngineTypes.startp = _startpos__200_;
              MenhirLib.EngineTypes.endp = _endpos__200_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _100;
                MenhirLib.EngineTypes.startp = _startpos__100_;
                MenhirLib.EngineTypes.endp = _endpos__100_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _400 : unit = Obj.magic _400 in
        let _300 : unit = Obj.magic _300 in
        let _200 : unit = Obj.magic _200 in
        let _100 : (Longident.t) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__400_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__40_ = _endpos__400_ in
          let _startpos__40_ = _startpos__400_ in
          let _startpos__10_ = _startpos__100_ in
          let _40 = _400 in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _endpos__4_ = _endpos__40_ in
            let _startpos__4_ = _startpos__40_ in
            let _4 = _40 in
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            let _loc__4_ = (_startpos__4_, _endpos__4_) in
            
# 2433 "parser_raw.mly"
      ( expecting _loc__4_ "pattern" )
# 43042 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__40_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 723 "parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 43053 "parser_raw.ml"
          
        in
        
# 2407 "parser_raw.mly"
      ( _1 )
# 43059 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _300;
          MenhirLib.EngineTypes.startp = _startpos__300_;
          MenhirLib.EngineTypes.endp = _endpos__300_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _200;
            MenhirLib.EngineTypes.startp = _startpos__200_;
            MenhirLib.EngineTypes.endp = _endpos__200_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _100;
              MenhirLib.EngineTypes.startp = _startpos__100_;
              MenhirLib.EngineTypes.endp = _endpos__100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _300 : unit = Obj.magic _300 in
        let _200 : (Parsetree.pattern) = Obj.magic _200 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__300_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__30_ = _endpos__300_ in
          let _startpos__30_ = _startpos__300_ in
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _endpos__3_ = _endpos__30_ in
            let _startpos__3_ = _startpos__30_ in
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            let _loc__3_ = (_startpos__3_, _endpos__3_) in
            let _loc__1_ = (_startpos__1_, _endpos__1_) in
            
# 2435 "parser_raw.mly"
      ( unclosed "(" _loc__1_ ")" _loc__3_ )
# 43114 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__30_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 723 "parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 43125 "parser_raw.ml"
          
        in
        
# 2407 "parser_raw.mly"
      ( _1 )
# 43131 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _500;
          MenhirLib.EngineTypes.startp = _startpos__500_;
          MenhirLib.EngineTypes.endp = _endpos__500_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _400;
            MenhirLib.EngineTypes.startp = _startpos__400_;
            MenhirLib.EngineTypes.endp = _endpos__400_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _300;
              MenhirLib.EngineTypes.startp = _startpos__300_;
              MenhirLib.EngineTypes.endp = _endpos__300_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _200;
                MenhirLib.EngineTypes.startp = _startpos__200_;
                MenhirLib.EngineTypes.endp = _endpos__200_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _100;
                  MenhirLib.EngineTypes.startp = _startpos__100_;
                  MenhirLib.EngineTypes.endp = _endpos__100_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _500 : unit = Obj.magic _500 in
        let _400 : (Parsetree.core_type) = Obj.magic _400 in
        let _300 : unit = Obj.magic _300 in
        let _200 : (Parsetree.pattern) = Obj.magic _200 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__500_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__50_ = _endpos__500_ in
          let _startpos__10_ = _startpos__100_ in
          let _50 = _500 in
          let _40 = _400 in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _5 = _50 in
            let _4 = _40 in
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            
# 2437 "parser_raw.mly"
      ( Ppat_constraint(_2, _4) )
# 43194 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__50_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 723 "parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 43205 "parser_raw.ml"
          
        in
        
# 2407 "parser_raw.mly"
      ( _1 )
# 43211 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _500;
          MenhirLib.EngineTypes.startp = _startpos__500_;
          MenhirLib.EngineTypes.endp = _endpos__500_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _400;
            MenhirLib.EngineTypes.startp = _startpos__400_;
            MenhirLib.EngineTypes.endp = _endpos__400_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _300;
              MenhirLib.EngineTypes.startp = _startpos__300_;
              MenhirLib.EngineTypes.endp = _endpos__300_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _200;
                MenhirLib.EngineTypes.startp = _startpos__200_;
                MenhirLib.EngineTypes.endp = _endpos__200_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _100;
                  MenhirLib.EngineTypes.startp = _startpos__100_;
                  MenhirLib.EngineTypes.endp = _endpos__100_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _500 : unit = Obj.magic _500 in
        let _400 : (Parsetree.core_type) = Obj.magic _400 in
        let _300 : unit = Obj.magic _300 in
        let _200 : (Parsetree.pattern) = Obj.magic _200 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__500_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__50_ = _endpos__500_ in
          let _startpos__50_ = _startpos__500_ in
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _50 = _500 in
          let _40 = _400 in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _endpos__5_ = _endpos__50_ in
            let _startpos__5_ = _startpos__50_ in
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _5 = _50 in
            let _4 = _40 in
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            let _loc__5_ = (_startpos__5_, _endpos__5_) in
            let _loc__1_ = (_startpos__1_, _endpos__1_) in
            
# 2439 "parser_raw.mly"
      ( unclosed "(" _loc__1_ ")" _loc__5_ )
# 43282 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__50_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 723 "parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 43293 "parser_raw.ml"
          
        in
        
# 2407 "parser_raw.mly"
      ( _1 )
# 43299 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _400;
          MenhirLib.EngineTypes.startp = _startpos__400_;
          MenhirLib.EngineTypes.endp = _endpos__400_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _300;
            MenhirLib.EngineTypes.startp = _startpos__300_;
            MenhirLib.EngineTypes.endp = _endpos__300_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _200;
              MenhirLib.EngineTypes.startp = _startpos__200_;
              MenhirLib.EngineTypes.endp = _endpos__200_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _100;
                MenhirLib.EngineTypes.startp = _startpos__100_;
                MenhirLib.EngineTypes.endp = _endpos__100_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _400 : unit = Obj.magic _400 in
        let _300 : unit = Obj.magic _300 in
        let _200 : (Parsetree.pattern) = Obj.magic _200 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__400_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__40_ = _endpos__400_ in
          let _startpos__40_ = _startpos__400_ in
          let _startpos__10_ = _startpos__100_ in
          let _40 = _400 in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _endpos__4_ = _endpos__40_ in
            let _startpos__4_ = _startpos__40_ in
            let _4 = _40 in
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            let _loc__4_ = (_startpos__4_, _endpos__4_) in
            
# 2441 "parser_raw.mly"
      ( expecting _loc__4_ "type" )
# 43358 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__40_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 723 "parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 43369 "parser_raw.ml"
          
        in
        
# 2407 "parser_raw.mly"
      ( _1 )
# 43375 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _700;
          MenhirLib.EngineTypes.startp = _startpos__700_;
          MenhirLib.EngineTypes.endp = _endpos__700_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _100000;
            MenhirLib.EngineTypes.startp = _startpos__100000_;
            MenhirLib.EngineTypes.endp = _endpos__100000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _500;
              MenhirLib.EngineTypes.startp = _startpos__500_;
              MenhirLib.EngineTypes.endp = _endpos__500_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _400;
                MenhirLib.EngineTypes.startp = _startpos__400_;
                MenhirLib.EngineTypes.endp = _endpos__400_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _10010;
                  MenhirLib.EngineTypes.startp = _startpos__10010_;
                  MenhirLib.EngineTypes.endp = _endpos__10010_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _1100;
                    MenhirLib.EngineTypes.startp = _startpos__1100_;
                    MenhirLib.EngineTypes.endp = _endpos__1100_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = _200;
                      MenhirLib.EngineTypes.startp = _startpos__200_;
                      MenhirLib.EngineTypes.endp = _endpos__200_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _100;
                        MenhirLib.EngineTypes.startp = _startpos__100_;
                        MenhirLib.EngineTypes.endp = _endpos__100_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _700 : unit = Obj.magic _700 in
        let _100000 : (Parsetree.module_type) = Obj.magic _100000 in
        let _500 : unit = Obj.magic _500 in
        let _400 : (
# 610 "parser_raw.mly"
       (string)
# 43434 "parser_raw.ml"
        ) = Obj.magic _400 in
        let _10010 : (Parsetree.attributes) = Obj.magic _10010 in
        let _1100 : (string Location.loc option) = Obj.magic _1100 in
        let _200 : unit = Obj.magic _200 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__700_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__70_ = _endpos__700_ in
          let _startpos__70_ = _startpos__700_ in
          let _endpos__10000_ = _endpos__100000_ in
          let _startpos__10000_ = _startpos__100000_ in
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _70 = _700 in
          let _10000 = _100000 in
          let _50 = _500 in
          let _40 = _400 in
          let _1001 = _10010 in
          let _110 = _1100 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _endpos__7_ = _endpos__70_ in
            let _startpos__7_ = _startpos__70_ in
            let _endpos__1000_ = _endpos__10000_ in
            let _startpos__1000_ = _startpos__10000_ in
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _7 = _70 in
            let _1000 = _10000 in
            let _5 = _50 in
            let _4 = _40 in
            let _100 = _1001 in
            let _11 = _110 in
            let _2 = _20 in
            let _1 = _10 in
            let _6 =
              let _endpos__100_ = _endpos__1000_ in
              let _startpos__100_ = _startpos__1000_ in
              let _100 = _1000 in
              let _1 =
                let _endpos__10_ = _endpos__100_ in
                let _startpos__10_ = _startpos__100_ in
                let _10 = _100 in
                let _1 =
                  let _1 = _10 in
                  
# 3003 "parser_raw.mly"
      ( Ptyp_package (package_type_of_module_type _1) )
# 43486 "parser_raw.ml"
                  
                in
                let _endpos__1_ = _endpos__10_ in
                let _startpos__1_ = _startpos__10_ in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 725 "parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 43497 "parser_raw.ml"
                
              in
              
# 3004 "parser_raw.mly"
      ( _1 )
# 43503 "parser_raw.ml"
              
            in
            let _3 =
              let _10 = _100 in
              let _1 = _11 in
              let _2 =
                let _1 = _10 in
                
# 3372 "parser_raw.mly"
    ( _1 )
# 43514 "parser_raw.ml"
                
              in
              
# 3383 "parser_raw.mly"
                 ( _1, _2 )
# 43520 "parser_raw.ml"
              
            in
            let _loc__7_ = (_startpos__7_, _endpos__7_) in
            let _loc__1_ = (_startpos__1_, _endpos__1_) in
            
# 2444 "parser_raw.mly"
      ( unclosed "(" _loc__1_ ")" _loc__7_ )
# 43528 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__70_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 723 "parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 43539 "parser_raw.ml"
          
        in
        
# 2407 "parser_raw.mly"
      ( _1 )
# 43545 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _100 : (Parsetree.extension) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__100_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 2446 "parser_raw.mly"
      ( Ppat_extension _1 )
# 43576 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 723 "parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 43587 "parser_raw.ml"
          
        in
        
# 2407 "parser_raw.mly"
      ( _1 )
# 43593 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 564 "parser_raw.mly"
       (string)
# 43614 "parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3295 "parser_raw.mly"
           ( _1 )
# 43622 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 610 "parser_raw.mly"
       (string)
# 43643 "parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3296 "parser_raw.mly"
           ( _1 )
# 43651 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3297 "parser_raw.mly"
        ( "and" )
# 43676 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3298 "parser_raw.mly"
       ( "as" )
# 43701 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3299 "parser_raw.mly"
           ( "assert" )
# 43726 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3300 "parser_raw.mly"
          ( "begin" )
# 43751 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3301 "parser_raw.mly"
          ( "class" )
# 43776 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3302 "parser_raw.mly"
               ( "constraint" )
# 43801 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3303 "parser_raw.mly"
       ( "do" )
# 43826 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3304 "parser_raw.mly"
         ( "done" )
# 43851 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3305 "parser_raw.mly"
           ( "downto" )
# 43876 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3306 "parser_raw.mly"
         ( "else" )
# 43901 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3307 "parser_raw.mly"
        ( "end" )
# 43926 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3308 "parser_raw.mly"
              ( "exception" )
# 43951 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3309 "parser_raw.mly"
             ( "external" )
# 43976 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3310 "parser_raw.mly"
          ( "false" )
# 44001 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3311 "parser_raw.mly"
        ( "for" )
# 44026 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3312 "parser_raw.mly"
        ( "fun" )
# 44051 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3313 "parser_raw.mly"
             ( "function" )
# 44076 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3314 "parser_raw.mly"
            ( "functor" )
# 44101 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3315 "parser_raw.mly"
       ( "if" )
# 44126 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3316 "parser_raw.mly"
       ( "in" )
# 44151 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3317 "parser_raw.mly"
            ( "include" )
# 44176 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3318 "parser_raw.mly"
            ( "inherit" )
# 44201 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3319 "parser_raw.mly"
                ( "initializer" )
# 44226 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3320 "parser_raw.mly"
         ( "lazy" )
# 44251 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3321 "parser_raw.mly"
        ( "let" )
# 44276 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3322 "parser_raw.mly"
          ( "match" )
# 44301 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3323 "parser_raw.mly"
           ( "method" )
# 44326 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3324 "parser_raw.mly"
           ( "module" )
# 44351 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3325 "parser_raw.mly"
            ( "mutable" )
# 44376 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3326 "parser_raw.mly"
        ( "new" )
# 44401 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3327 "parser_raw.mly"
           ( "nonrec" )
# 44426 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3328 "parser_raw.mly"
           ( "object" )
# 44451 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3329 "parser_raw.mly"
       ( "of" )
# 44476 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3330 "parser_raw.mly"
         ( "open" )
# 44501 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3331 "parser_raw.mly"
       ( "or" )
# 44526 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3332 "parser_raw.mly"
            ( "private" )
# 44551 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3333 "parser_raw.mly"
        ( "rec" )
# 44576 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3334 "parser_raw.mly"
        ( "sig" )
# 44601 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3335 "parser_raw.mly"
           ( "struct" )
# 44626 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3336 "parser_raw.mly"
         ( "then" )
# 44651 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3337 "parser_raw.mly"
       ( "to" )
# 44676 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3338 "parser_raw.mly"
         ( "true" )
# 44701 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3339 "parser_raw.mly"
        ( "try" )
# 44726 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3340 "parser_raw.mly"
         ( "type" )
# 44751 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3341 "parser_raw.mly"
        ( "val" )
# 44776 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3342 "parser_raw.mly"
            ( "virtual" )
# 44801 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3343 "parser_raw.mly"
         ( "when" )
# 44826 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3344 "parser_raw.mly"
          ( "while" )
# 44851 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3345 "parser_raw.mly"
         ( "with" )
# 44876 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.type_exception * string Location.loc option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.type_exception * string Location.loc option) = 
# 2691 "parser_raw.mly"
    ( _1 )
# 44901 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _14;
          MenhirLib.EngineTypes.startp = _startpos__14_;
          MenhirLib.EngineTypes.endp = _endpos__14_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _13;
            MenhirLib.EngineTypes.startp = _startpos__13_;
            MenhirLib.EngineTypes.endp = _endpos__13_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _12;
              MenhirLib.EngineTypes.startp = _startpos__12_;
              MenhirLib.EngineTypes.endp = _endpos__12_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _5;
                MenhirLib.EngineTypes.startp = _startpos__5_;
                MenhirLib.EngineTypes.endp = _endpos__5_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _11;
                  MenhirLib.EngineTypes.startp = _startpos__11_;
                  MenhirLib.EngineTypes.endp = _endpos__11_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _10;
                    MenhirLib.EngineTypes.startp = _startpos__10_;
                    MenhirLib.EngineTypes.endp = _endpos__10_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = ext;
                      MenhirLib.EngineTypes.startp = _startpos_ext_;
                      MenhirLib.EngineTypes.endp = _endpos_ext_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _1;
                        MenhirLib.EngineTypes.startp = _startpos__1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _14 : (Parsetree.attributes) = Obj.magic _14 in
        let _13 : (Parsetree.attributes) = Obj.magic _13 in
        let _12 : (Longident.t) = Obj.magic _12 in
        let _5 : unit = Obj.magic _5 in
        let _11 : (string) = Obj.magic _11 in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__14_ in
        let _v : (Parsetree.type_exception * string Location.loc option) = let attrs =
          let _1 = _14 in
          
# 3368 "parser_raw.mly"
    ( _1 )
# 44970 "parser_raw.ml"
          
        in
        let _endpos_attrs_ = _endpos__14_ in
        let attrs2 =
          let _1 = _13 in
          
# 3372 "parser_raw.mly"
    ( _1 )
# 44979 "parser_raw.ml"
          
        in
        let lid =
          let _endpos__1_ = _endpos__12_ in
          let _startpos__1_ = _startpos__12_ in
          let _1 = _12 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 44992 "parser_raw.ml"
          
        in
        let id =
          let _endpos__1_ = _endpos__11_ in
          let _startpos__1_ = _startpos__11_ in
          let _1 = _11 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 45005 "parser_raw.ml"
          
        in
        let attrs1 =
          let _1 = _10 in
          
# 3372 "parser_raw.mly"
    ( _1 )
# 45013 "parser_raw.ml"
          
        in
        let _endpos = _endpos_attrs_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2700 "parser_raw.mly"
  ( let loc = make_loc _sloc in
    let docs = symbol_docs _sloc in
    Te.mk_exception ~attrs
      (Te.rebind id lid ~attrs:(attrs1 @ attrs2) ~loc ~docs)
    , ext )
# 45026 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.expression) = 
# 2244 "parser_raw.mly"
      ( _2 )
# 45057 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__2_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2246 "parser_raw.mly"
      ( let (l, o, p) = _1 in ghexp ~loc:_sloc (Pexp_fun(l, o, p, _2)) )
# 45091 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = xs0;
              MenhirLib.EngineTypes.startp = _startpos_xs0_;
              MenhirLib.EngineTypes.endp = _endpos_xs0_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let xs0 : (string Location.loc list) = Obj.magic xs0 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.expression) = let _3 =
          let xs = xs0 in
          
# 2147 "parser_raw.mly"
    ( xs )
# 45142 "parser_raw.ml"
          
        in
        let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2248 "parser_raw.mly"
      ( mk_newtypes ~loc:_sloc _3 _5 )
# 45151 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = xss000;
          MenhirLib.EngineTypes.startp = _startpos_xss000_;
          MenhirLib.EngineTypes.endp = _endpos_xss000_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let xss000 : (Parsetree.structure_item list list) = Obj.magic xss000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xss000_ in
        let _endpos = _endpos_xss000_ in
        let _v : (Parsetree.structure) = let _1 =
          let _endpos_xss00_ = _endpos_xss000_ in
          let _startpos_xss00_ = _startpos_xss000_ in
          let xss00 = xss000 in
          let _1 =
            let xss0 = xss00 in
            let ys =
              let xss = xss0 in
              
# 260 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( List.flatten xss )
# 45184 "parser_raw.ml"
              
            in
            let xs =
              let items =
                
# 751 "parser_raw.mly"
    ( [] )
# 45192 "parser_raw.ml"
                
              in
              
# 1079 "parser_raw.mly"
    ( items )
# 45198 "parser_raw.ml"
              
            in
            
# 267 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( xs @ ys )
# 45204 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_xss00_ in
          let _startpos__1_ = _startpos_xss00_ in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          
# 685 "parser_raw.mly"
                              ( extra_str _startpos _endpos _1 )
# 45214 "parser_raw.ml"
          
        in
        
# 1073 "parser_raw.mly"
  ( _1 )
# 45220 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xss000;
          MenhirLib.EngineTypes.startp = _startpos_xss000_;
          MenhirLib.EngineTypes.endp = _endpos_xss000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _100000000;
            MenhirLib.EngineTypes.startp = _startpos__100000000_;
            MenhirLib.EngineTypes.endp = _endpos__100000000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e0000000;
              MenhirLib.EngineTypes.startp = _startpos_e0000000_;
              MenhirLib.EngineTypes.endp = _endpos_e0000000_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let xss000 : (Parsetree.structure_item list list) = Obj.magic xss000 in
        let _100000000 : (Parsetree.attributes) = Obj.magic _100000000 in
        let e0000000 : (Parsetree.expression) = Obj.magic e0000000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e0000000_ in
        let _endpos = _endpos_xss000_ in
        let _v : (Parsetree.structure) = let _1 =
          let _endpos_xss00_ = _endpos_xss000_ in
          let _startpos_e000000_ = _startpos_e0000000_ in
          let _endpos__10000000_ = _endpos__100000000_ in
          let xss00 = xss000 in
          let _10000000 = _100000000 in
          let e000000 = e0000000 in
          let _1 =
            let _startpos_e00000_ = _startpos_e000000_ in
            let _endpos__1000000_ = _endpos__10000000_ in
            let xss0 = xss00 in
            let _1000000 = _10000000 in
            let e00000 = e000000 in
            let ys =
              let xss = xss0 in
              
# 260 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( List.flatten xss )
# 45272 "parser_raw.ml"
              
            in
            let xs =
              let _startpos_e0000_ = _startpos_e00000_ in
              let _endpos__100000_ = _endpos__1000000_ in
              let _100000 = _1000000 in
              let e0000 = e00000 in
              let items =
                let _startpos_e000_ = _startpos_e0000_ in
                let _endpos__10000_ = _endpos__100000_ in
                let _10000 = _100000 in
                let e000 = e0000 in
                let x =
                  let _startpos_e00_ = _startpos_e000_ in
                  let _endpos__1000_ = _endpos__10000_ in
                  let _1000 = _10000 in
                  let e00 = e000 in
                  let _1 =
                    let _startpos_e0_ = _startpos_e00_ in
                    let _100 = _1000 in
                    let e0 = e00 in
                    let _1 =
                      let _10 = _100 in
                      let e = e0 in
                      let attrs =
                        let _1 = _10 in
                        
# 3368 "parser_raw.mly"
    ( _1 )
# 45302 "parser_raw.ml"
                        
                      in
                      
# 1085 "parser_raw.mly"
    ( mkstrexp e attrs )
# 45308 "parser_raw.ml"
                      
                    in
                    let _startpos__1_ = _startpos_e0_ in
                    let _startpos = _startpos__1_ in
                    
# 696 "parser_raw.mly"
  ( text_str _startpos @ [_1] )
# 45316 "parser_raw.ml"
                    
                  in
                  let _endpos__1_ = _endpos__1000_ in
                  let _startpos__1_ = _startpos_e00_ in
                  let _endpos = _endpos__1_ in
                  let _startpos = _startpos__1_ in
                  
# 714 "parser_raw.mly"
  ( mark_rhs_docs _startpos _endpos;
    _1 )
# 45327 "parser_raw.ml"
                  
                in
                
# 753 "parser_raw.mly"
    ( x )
# 45333 "parser_raw.ml"
                
              in
              
# 1079 "parser_raw.mly"
    ( items )
# 45339 "parser_raw.ml"
              
            in
            
# 267 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( xs @ ys )
# 45345 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_xss00_ in
          let _startpos__1_ = _startpos_e000000_ in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          
# 685 "parser_raw.mly"
                              ( extra_str _startpos _endpos _1 )
# 45355 "parser_raw.ml"
          
        in
        
# 1073 "parser_raw.mly"
  ( _1 )
# 45361 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Ast_helper.let_bindings) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.structure_item) = let _endpos = _endpos__1_ in
        let _startpos = _startpos__1_ in
        let _loc = (_startpos, _endpos) in
        
# 3407 "parser_raw.mly"
    ( val_of_lwt_bindings ~loc:_loc _1 )
# 45389 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Ast_helper.let_bindings) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.structure_item) = let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1098 "parser_raw.mly"
      ( val_of_let_bindings ~loc:_sloc _1 )
# 45417 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _1000;
          MenhirLib.EngineTypes.startp = _startpos__1000_;
          MenhirLib.EngineTypes.endp = _endpos__1000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _110;
            MenhirLib.EngineTypes.startp = _startpos__110_;
            MenhirLib.EngineTypes.endp = _endpos__110_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _1000 : (Parsetree.attributes) = Obj.magic _1000 in
        let _110 : (Parsetree.extension) = Obj.magic _110 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__110_ in
        let _endpos = _endpos__1000_ in
        let _v : (Parsetree.structure_item) = let _1 =
          let _startpos__11_ = _startpos__110_ in
          let _endpos__100_ = _endpos__1000_ in
          let _100 = _1000 in
          let _11 = _110 in
          let _1 =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__1_ = _startpos__11_ in
            let _10 = _100 in
            let _1 = _11 in
            let _2 =
              let _1 = _10 in
              
# 3368 "parser_raw.mly"
    ( _1 )
# 45460 "parser_raw.ml"
              
            in
            let _endpos__2_ = _endpos__10_ in
            let _endpos = _endpos__2_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1101 "parser_raw.mly"
        ( let docs = symbol_docs _sloc in
          Pstr_extension (_1, add_docs_attrs docs _2) )
# 45471 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__100_ in
          let _startpos__1_ = _startpos__11_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 727 "parser_raw.mly"
    ( mkstr ~loc:_sloc _1 )
# 45482 "parser_raw.ml"
          
        in
        
# 1132 "parser_raw.mly"
    ( _1 )
# 45488 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _100 : (Parsetree.attribute) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__100_ in
        let _v : (Parsetree.structure_item) = let _1 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 1104 "parser_raw.mly"
        ( Pstr_attribute _1 )
# 45519 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 727 "parser_raw.mly"
    ( mkstr ~loc:_sloc _1 )
# 45530 "parser_raw.ml"
          
        in
        
# 1132 "parser_raw.mly"
    ( _1 )
# 45536 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _100 : (Parsetree.value_description * string Location.loc option) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__100_ in
        let _v : (Parsetree.structure_item) = let _1 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 1108 "parser_raw.mly"
        ( pstr_primitive _1 )
# 45567 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 743 "parser_raw.mly"
    ( wrap_mkstr_ext ~loc:_sloc _1 )
# 45578 "parser_raw.ml"
          
        in
        
# 1132 "parser_raw.mly"
    ( _1 )
# 45584 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _100 : (Parsetree.value_description * string Location.loc option) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__100_ in
        let _v : (Parsetree.structure_item) = let _1 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 1110 "parser_raw.mly"
        ( pstr_primitive _1 )
# 45615 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 743 "parser_raw.mly"
    ( wrap_mkstr_ext ~loc:_sloc _1 )
# 45626 "parser_raw.ml"
          
        in
        
# 1132 "parser_raw.mly"
    ( _1 )
# 45632 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = bs00000;
          MenhirLib.EngineTypes.startp = _startpos_bs00000_;
          MenhirLib.EngineTypes.endp = _endpos_bs00000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = a00000;
            MenhirLib.EngineTypes.startp = _startpos_a00000_;
            MenhirLib.EngineTypes.endp = _endpos_a00000_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let bs00000 : (Parsetree.type_declaration list) = Obj.magic bs00000 in
        let a00000 : ((Asttypes.rec_flag * string Location.loc option) *
  Parsetree.type_declaration) = Obj.magic a00000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_a00000_ in
        let _endpos = _endpos_bs00000_ in
        let _v : (Parsetree.structure_item) = let _1 =
          let _endpos_bs0000_ = _endpos_bs00000_ in
          let _startpos_a0000_ = _startpos_a00000_ in
          let bs0000 = bs00000 in
          let a0000 = a00000 in
          let _1 =
            let bs000 = bs0000 in
            let a000 = a0000 in
            let _1 =
              let bs00 = bs000 in
              let a00 = a000 in
              let _1 =
                let bs0 = bs00 in
                let a0 = a00 in
                let _1 =
                  let bs = bs0 in
                  let a = a0 in
                  
# 881 "parser_raw.mly"
    ( let (x, b) = a in x, b :: bs )
# 45681 "parser_raw.ml"
                  
                in
                
# 2552 "parser_raw.mly"
  ( _1 )
# 45687 "parser_raw.ml"
                
              in
              
# 2538 "parser_raw.mly"
    ( _1 )
# 45693 "parser_raw.ml"
              
            in
            
# 1112 "parser_raw.mly"
        ( pstr_type _1 )
# 45699 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_bs0000_ in
          let _startpos__1_ = _startpos_a0000_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 743 "parser_raw.mly"
    ( wrap_mkstr_ext ~loc:_sloc _1 )
# 45710 "parser_raw.ml"
          
        in
        
# 1132 "parser_raw.mly"
    ( _1 )
# 45716 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _120000;
          MenhirLib.EngineTypes.startp = _startpos__120000_;
          MenhirLib.EngineTypes.endp = _endpos__120000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = xs00000;
            MenhirLib.EngineTypes.startp = _startpos_xs00000_;
            MenhirLib.EngineTypes.endp = _endpos_xs00000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = priv0000;
              MenhirLib.EngineTypes.startp = _startpos_priv0000_;
              MenhirLib.EngineTypes.endp = _endpos_priv0000_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _70000;
                MenhirLib.EngineTypes.startp = _startpos__70000_;
                MenhirLib.EngineTypes.endp = _endpos__70000_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _110000;
                  MenhirLib.EngineTypes.startp = _startpos__110000_;
                  MenhirLib.EngineTypes.endp = _endpos__110000_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = params0000;
                    MenhirLib.EngineTypes.startp = _startpos_params0000_;
                    MenhirLib.EngineTypes.endp = _endpos_params0000_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = _100000;
                      MenhirLib.EngineTypes.startp = _startpos__100000_;
                      MenhirLib.EngineTypes.endp = _endpos__100000_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.semv = ext0000;
                        MenhirLib.EngineTypes.startp = _startpos_ext0000_;
                        MenhirLib.EngineTypes.endp = _endpos_ext0000_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _13000;
                          MenhirLib.EngineTypes.startp = _startpos__13000_;
                          MenhirLib.EngineTypes.endp = _endpos__13000_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _120000 : (Parsetree.attributes) = Obj.magic _120000 in
        let xs00000 : (Parsetree.extension_constructor list) = Obj.magic xs00000 in
        let priv0000 : (Asttypes.private_flag) = Obj.magic priv0000 in
        let _70000 : unit = Obj.magic _70000 in
        let _110000 : (Longident.t) = Obj.magic _110000 in
        let params0000 : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic params0000 in
        let _100000 : (Parsetree.attributes) = Obj.magic _100000 in
        let ext0000 : (string Location.loc option) = Obj.magic ext0000 in
        let _13000 : unit = Obj.magic _13000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__13000_ in
        let _endpos = _endpos__120000_ in
        let _v : (Parsetree.structure_item) = let _1 =
          let _startpos__1300_ = _startpos__13000_ in
          let _endpos__12000_ = _endpos__120000_ in
          let _endpos__11000_ = _endpos__110000_ in
          let _startpos__11000_ = _startpos__110000_ in
          let _12000 = _120000 in
          let xs0000 = xs00000 in
          let priv000 = priv0000 in
          let _7000 = _70000 in
          let _11000 = _110000 in
          let params000 = params0000 in
          let _10000 = _100000 in
          let ext000 = ext0000 in
          let _1300 = _13000 in
          let _1 =
            let _startpos__130_ = _startpos__1300_ in
            let _endpos__1200_ = _endpos__12000_ in
            let _endpos__1100_ = _endpos__11000_ in
            let _startpos__1100_ = _startpos__11000_ in
            let _1200 = _12000 in
            let xs000 = xs0000 in
            let priv00 = priv000 in
            let _700 = _7000 in
            let _1100 = _11000 in
            let params00 = params000 in
            let _1000 = _10000 in
            let ext00 = ext000 in
            let _130 = _1300 in
            let _1 =
              let _startpos__13_ = _startpos__130_ in
              let _endpos__120_ = _endpos__1200_ in
              let _endpos__110_ = _endpos__1100_ in
              let _startpos__110_ = _startpos__1100_ in
              let _120 = _1200 in
              let xs00 = xs000 in
              let priv0 = priv00 in
              let _70 = _700 in
              let _110 = _1100 in
              let params0 = params00 in
              let _100 = _1000 in
              let ext0 = ext00 in
              let _13 = _130 in
              let _1 =
                let _endpos__12_ = _endpos__120_ in
                let _endpos__11_ = _endpos__110_ in
                let _startpos__11_ = _startpos__110_ in
                let _startpos__1_ = _startpos__13_ in
                let _12 = _120 in
                let xs0 = xs00 in
                let priv = priv0 in
                let _7 = _70 in
                let _11 = _110 in
                let params = params0 in
                let _10 = _100 in
                let ext = ext0 in
                let _1 = _13 in
                let attrs2 =
                  let _1 = _12 in
                  
# 3368 "parser_raw.mly"
    ( _1 )
# 45847 "parser_raw.ml"
                  
                in
                let _endpos_attrs2_ = _endpos__12_ in
                let cs =
                  let xs = xs0 in
                  
# 875 "parser_raw.mly"
    ( List.rev xs )
# 45856 "parser_raw.ml"
                  
                in
                let tid =
                  let _endpos__1_ = _endpos__11_ in
                  let _startpos__1_ = _startpos__11_ in
                  let _1 = _11 in
                  let _endpos = _endpos__1_ in
                  let _symbolstartpos = _startpos__1_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 45869 "parser_raw.ml"
                  
                in
                let _4 =
                  
# 3221 "parser_raw.mly"
                ( Recursive )
# 45876 "parser_raw.ml"
                  
                in
                let attrs1 =
                  let _1 = _10 in
                  
# 3372 "parser_raw.mly"
    ( _1 )
# 45884 "parser_raw.ml"
                  
                in
                let _endpos = _endpos_attrs2_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 2779 "parser_raw.mly"
    ( let docs = symbol_docs _sloc in
      let attrs = attrs1 @ attrs2 in
      Te.mk tid cs ~params ~priv ~attrs ~docs,
      ext )
# 45896 "parser_raw.ml"
                
              in
              
# 2762 "parser_raw.mly"
    ( _1 )
# 45902 "parser_raw.ml"
              
            in
            
# 1114 "parser_raw.mly"
        ( pstr_typext _1 )
# 45908 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__12000_ in
          let _startpos__1_ = _startpos__1300_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 743 "parser_raw.mly"
    ( wrap_mkstr_ext ~loc:_sloc _1 )
# 45919 "parser_raw.ml"
          
        in
        
# 1132 "parser_raw.mly"
    ( _1 )
# 45925 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _130000;
          MenhirLib.EngineTypes.startp = _startpos__130000_;
          MenhirLib.EngineTypes.endp = _endpos__130000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = xs00000;
            MenhirLib.EngineTypes.startp = _startpos_xs00000_;
            MenhirLib.EngineTypes.endp = _endpos_xs00000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = priv0000;
              MenhirLib.EngineTypes.startp = _startpos_priv0000_;
              MenhirLib.EngineTypes.endp = _endpos_priv0000_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _70000;
                MenhirLib.EngineTypes.startp = _startpos__70000_;
                MenhirLib.EngineTypes.endp = _endpos__70000_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _120000;
                  MenhirLib.EngineTypes.startp = _startpos__120000_;
                  MenhirLib.EngineTypes.endp = _endpos__120000_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = params0000;
                    MenhirLib.EngineTypes.startp = _startpos_params0000_;
                    MenhirLib.EngineTypes.endp = _endpos_params0000_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = _110000;
                      MenhirLib.EngineTypes.startp = _startpos__110000_;
                      MenhirLib.EngineTypes.endp = _endpos__110000_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.semv = _100000;
                        MenhirLib.EngineTypes.startp = _startpos__100000_;
                        MenhirLib.EngineTypes.endp = _endpos__100000_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.semv = ext0000;
                          MenhirLib.EngineTypes.startp = _startpos_ext0000_;
                          MenhirLib.EngineTypes.endp = _endpos_ext0000_;
                          MenhirLib.EngineTypes.next = {
                            MenhirLib.EngineTypes.state = _menhir_s;
                            MenhirLib.EngineTypes.semv = _14000;
                            MenhirLib.EngineTypes.startp = _startpos__14000_;
                            MenhirLib.EngineTypes.endp = _endpos__14000_;
                            MenhirLib.EngineTypes.next = _menhir_stack;
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _130000 : (Parsetree.attributes) = Obj.magic _130000 in
        let xs00000 : (Parsetree.extension_constructor list) = Obj.magic xs00000 in
        let priv0000 : (Asttypes.private_flag) = Obj.magic priv0000 in
        let _70000 : unit = Obj.magic _70000 in
        let _120000 : (Longident.t) = Obj.magic _120000 in
        let params0000 : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic params0000 in
        let _110000 : unit = Obj.magic _110000 in
        let _100000 : (Parsetree.attributes) = Obj.magic _100000 in
        let ext0000 : (string Location.loc option) = Obj.magic ext0000 in
        let _14000 : unit = Obj.magic _14000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__14000_ in
        let _endpos = _endpos__130000_ in
        let _v : (Parsetree.structure_item) = let _1 =
          let _startpos__1400_ = _startpos__14000_ in
          let _endpos__13000_ = _endpos__130000_ in
          let _endpos__12000_ = _endpos__120000_ in
          let _startpos__12000_ = _startpos__120000_ in
          let _endpos__11000_ = _endpos__110000_ in
          let _startpos__11000_ = _startpos__110000_ in
          let _13000 = _130000 in
          let xs0000 = xs00000 in
          let priv000 = priv0000 in
          let _7000 = _70000 in
          let _12000 = _120000 in
          let params000 = params0000 in
          let _11000 = _110000 in
          let _10000 = _100000 in
          let ext000 = ext0000 in
          let _1400 = _14000 in
          let _1 =
            let _startpos__140_ = _startpos__1400_ in
            let _endpos__1300_ = _endpos__13000_ in
            let _endpos__1200_ = _endpos__12000_ in
            let _startpos__1200_ = _startpos__12000_ in
            let _endpos__1100_ = _endpos__11000_ in
            let _startpos__1100_ = _startpos__11000_ in
            let _1300 = _13000 in
            let xs000 = xs0000 in
            let priv00 = priv000 in
            let _700 = _7000 in
            let _1200 = _12000 in
            let params00 = params000 in
            let _1100 = _11000 in
            let _1000 = _10000 in
            let ext00 = ext000 in
            let _140 = _1400 in
            let _1 =
              let _startpos__14_ = _startpos__140_ in
              let _endpos__130_ = _endpos__1300_ in
              let _endpos__120_ = _endpos__1200_ in
              let _startpos__120_ = _startpos__1200_ in
              let _endpos__110_ = _endpos__1100_ in
              let _startpos__110_ = _startpos__1100_ in
              let _130 = _1300 in
              let xs00 = xs000 in
              let priv0 = priv00 in
              let _70 = _700 in
              let _120 = _1200 in
              let params0 = params00 in
              let _110 = _1100 in
              let _100 = _1000 in
              let ext0 = ext00 in
              let _14 = _140 in
              let _1 =
                let _endpos__13_ = _endpos__130_ in
                let _endpos__12_ = _endpos__120_ in
                let _startpos__12_ = _startpos__120_ in
                let _endpos__11_ = _endpos__110_ in
                let _startpos__11_ = _startpos__110_ in
                let _startpos__1_ = _startpos__14_ in
                let _13 = _130 in
                let xs0 = xs00 in
                let priv = priv0 in
                let _7 = _70 in
                let _12 = _120 in
                let params = params0 in
                let _11 = _110 in
                let _10 = _100 in
                let ext = ext0 in
                let _1 = _14 in
                let attrs2 =
                  let _1 = _13 in
                  
# 3368 "parser_raw.mly"
    ( _1 )
# 46074 "parser_raw.ml"
                  
                in
                let _endpos_attrs2_ = _endpos__13_ in
                let cs =
                  let xs = xs0 in
                  
# 875 "parser_raw.mly"
    ( List.rev xs )
# 46083 "parser_raw.ml"
                  
                in
                let tid =
                  let _endpos__1_ = _endpos__12_ in
                  let _startpos__1_ = _startpos__12_ in
                  let _1 = _12 in
                  let _endpos = _endpos__1_ in
                  let _symbolstartpos = _startpos__1_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 46096 "parser_raw.ml"
                  
                in
                let _4 =
                  let _endpos__1_ = _endpos__11_ in
                  let _startpos__1_ = _startpos__11_ in
                  let _1 = _11 in
                  let _endpos = _endpos__1_ in
                  let _startpos = _startpos__1_ in
                  let _loc = (_startpos, _endpos) in
                  
# 3222 "parser_raw.mly"
           ( not_expecting _loc "nonrec flag" )
# 46109 "parser_raw.ml"
                  
                in
                let attrs1 =
                  let _1 = _10 in
                  
# 3372 "parser_raw.mly"
    ( _1 )
# 46117 "parser_raw.ml"
                  
                in
                let _endpos = _endpos_attrs2_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 2779 "parser_raw.mly"
    ( let docs = symbol_docs _sloc in
      let attrs = attrs1 @ attrs2 in
      Te.mk tid cs ~params ~priv ~attrs ~docs,
      ext )
# 46129 "parser_raw.ml"
                
              in
              
# 2762 "parser_raw.mly"
    ( _1 )
# 46135 "parser_raw.ml"
              
            in
            
# 1114 "parser_raw.mly"
        ( pstr_typext _1 )
# 46141 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__13000_ in
          let _startpos__1_ = _startpos__1400_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 743 "parser_raw.mly"
    ( wrap_mkstr_ext ~loc:_sloc _1 )
# 46152 "parser_raw.ml"
          
        in
        
# 1132 "parser_raw.mly"
    ( _1 )
# 46158 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _100 : (Parsetree.type_exception * string Location.loc option) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__100_ in
        let _v : (Parsetree.structure_item) = let _1 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 1116 "parser_raw.mly"
        ( pstr_exception _1 )
# 46189 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 743 "parser_raw.mly"
    ( wrap_mkstr_ext ~loc:_sloc _1 )
# 46200 "parser_raw.ml"
          
        in
        
# 1132 "parser_raw.mly"
    ( _1 )
# 46206 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _12000;
          MenhirLib.EngineTypes.startp = _startpos__12000_;
          MenhirLib.EngineTypes.endp = _endpos__12000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = body000;
            MenhirLib.EngineTypes.startp = _startpos_body000_;
            MenhirLib.EngineTypes.endp = _endpos_body000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _11000;
              MenhirLib.EngineTypes.startp = _startpos__11000_;
              MenhirLib.EngineTypes.endp = _endpos__11000_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _10000;
                MenhirLib.EngineTypes.startp = _startpos__10000_;
                MenhirLib.EngineTypes.endp = _endpos__10000_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = ext000;
                  MenhirLib.EngineTypes.startp = _startpos_ext000_;
                  MenhirLib.EngineTypes.endp = _endpos_ext000_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1300;
                    MenhirLib.EngineTypes.startp = _startpos__1300_;
                    MenhirLib.EngineTypes.endp = _endpos__1300_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _12000 : (Parsetree.attributes) = Obj.magic _12000 in
        let body000 : (Parsetree.module_expr) = Obj.magic body000 in
        let _11000 : (
# 610 "parser_raw.mly"
       (string)
# 46254 "parser_raw.ml"
        ) = Obj.magic _11000 in
        let _10000 : (Parsetree.attributes) = Obj.magic _10000 in
        let ext000 : (string Location.loc option) = Obj.magic ext000 in
        let _1300 : unit = Obj.magic _1300 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1300_ in
        let _endpos = _endpos__12000_ in
        let _v : (Parsetree.structure_item) = let _1 =
          let _startpos__130_ = _startpos__1300_ in
          let _endpos__1200_ = _endpos__12000_ in
          let _endpos__1100_ = _endpos__11000_ in
          let _startpos__1100_ = _startpos__11000_ in
          let _1200 = _12000 in
          let body00 = body000 in
          let _1100 = _11000 in
          let _1000 = _10000 in
          let ext00 = ext000 in
          let _130 = _1300 in
          let _1 =
            let _startpos__13_ = _startpos__130_ in
            let _endpos__120_ = _endpos__1200_ in
            let _endpos__110_ = _endpos__1100_ in
            let _startpos__110_ = _startpos__1100_ in
            let _120 = _1200 in
            let body0 = body00 in
            let _110 = _1100 in
            let _100 = _1000 in
            let ext0 = ext00 in
            let _13 = _130 in
            let _1 =
              let _endpos__12_ = _endpos__120_ in
              let _endpos__11_ = _endpos__110_ in
              let _startpos__11_ = _startpos__110_ in
              let _startpos__1_ = _startpos__13_ in
              let _12 = _120 in
              let body = body0 in
              let _11 = _110 in
              let _10 = _100 in
              let ext = ext0 in
              let _1 = _13 in
              let attrs2 =
                let _1 = _12 in
                
# 3368 "parser_raw.mly"
    ( _1 )
# 46300 "parser_raw.ml"
                
              in
              let _endpos_attrs2_ = _endpos__12_ in
              let uid =
                let _endpos__1_ = _endpos__11_ in
                let _startpos__1_ = _startpos__11_ in
                let _1 = _11 in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 46314 "parser_raw.ml"
                
              in
              let attrs1 =
                let _1 = _10 in
                
# 3372 "parser_raw.mly"
    ( _1 )
# 46322 "parser_raw.ml"
                
              in
              let _endpos = _endpos_attrs2_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 1141 "parser_raw.mly"
    ( let docs = symbol_docs _sloc in
      let loc = make_loc _sloc in
      let attrs = attrs1 @ attrs2 in
      let body = Mb.mk uid body ~attrs ~loc ~docs in
      Pstr_module body, ext )
# 46335 "parser_raw.ml"
              
            in
            
# 1118 "parser_raw.mly"
        ( _1 )
# 46341 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__1200_ in
          let _startpos__1_ = _startpos__130_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 743 "parser_raw.mly"
    ( wrap_mkstr_ext ~loc:_sloc _1 )
# 46352 "parser_raw.ml"
          
        in
        
# 1132 "parser_raw.mly"
    ( _1 )
# 46358 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = bs0000;
          MenhirLib.EngineTypes.startp = _startpos_bs0000_;
          MenhirLib.EngineTypes.endp = _endpos_bs0000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _1200000;
            MenhirLib.EngineTypes.startp = _startpos__1200000_;
            MenhirLib.EngineTypes.endp = _endpos__1200000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = body00000;
              MenhirLib.EngineTypes.startp = _startpos_body00000_;
              MenhirLib.EngineTypes.endp = _endpos_body00000_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _1100000;
                MenhirLib.EngineTypes.startp = _startpos__1100000_;
                MenhirLib.EngineTypes.endp = _endpos__1100000_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _400000;
                  MenhirLib.EngineTypes.startp = _startpos__400000_;
                  MenhirLib.EngineTypes.endp = _endpos__400000_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _1000000;
                    MenhirLib.EngineTypes.startp = _startpos__1000000_;
                    MenhirLib.EngineTypes.endp = _endpos__1000000_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = ext00000;
                      MenhirLib.EngineTypes.startp = _startpos_ext00000_;
                      MenhirLib.EngineTypes.endp = _endpos_ext00000_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _130000;
                        MenhirLib.EngineTypes.startp = _startpos__130000_;
                        MenhirLib.EngineTypes.endp = _endpos__130000_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let bs0000 : (Parsetree.module_binding list) = Obj.magic bs0000 in
        let _1200000 : (Parsetree.attributes) = Obj.magic _1200000 in
        let body00000 : (Parsetree.module_expr) = Obj.magic body00000 in
        let _1100000 : (
# 610 "parser_raw.mly"
       (string)
# 46417 "parser_raw.ml"
        ) = Obj.magic _1100000 in
        let _400000 : unit = Obj.magic _400000 in
        let _1000000 : (Parsetree.attributes) = Obj.magic _1000000 in
        let ext00000 : (string Location.loc option) = Obj.magic ext00000 in
        let _130000 : unit = Obj.magic _130000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__130000_ in
        let _endpos = _endpos_bs0000_ in
        let _v : (Parsetree.structure_item) = let _1 =
          let _endpos_bs000_ = _endpos_bs0000_ in
          let _startpos__13000_ = _startpos__130000_ in
          let _endpos__120000_ = _endpos__1200000_ in
          let _endpos__110000_ = _endpos__1100000_ in
          let _startpos__110000_ = _startpos__1100000_ in
          let bs000 = bs0000 in
          let _120000 = _1200000 in
          let body0000 = body00000 in
          let _110000 = _1100000 in
          let _40000 = _400000 in
          let _100000 = _1000000 in
          let ext0000 = ext00000 in
          let _13000 = _130000 in
          let _1 =
            let _startpos__1300_ = _startpos__13000_ in
            let _endpos__12000_ = _endpos__120000_ in
            let _endpos__11000_ = _endpos__110000_ in
            let _startpos__11000_ = _startpos__110000_ in
            let bs00 = bs000 in
            let _12000 = _120000 in
            let body000 = body0000 in
            let _11000 = _110000 in
            let _4000 = _40000 in
            let _10000 = _100000 in
            let ext000 = ext0000 in
            let _1300 = _13000 in
            let _1 =
              let _startpos__130_ = _startpos__1300_ in
              let _endpos__1200_ = _endpos__12000_ in
              let _endpos__1100_ = _endpos__11000_ in
              let _startpos__1100_ = _startpos__11000_ in
              let bs0 = bs00 in
              let _1200 = _12000 in
              let body00 = body000 in
              let _1100 = _11000 in
              let _400 = _4000 in
              let _1000 = _10000 in
              let ext00 = ext000 in
              let _130 = _1300 in
              let _1 =
                let _startpos__13_ = _startpos__130_ in
                let _endpos__120_ = _endpos__1200_ in
                let _endpos__110_ = _endpos__1100_ in
                let _startpos__110_ = _startpos__1100_ in
                let bs = bs0 in
                let _120 = _1200 in
                let body0 = body00 in
                let _110 = _1100 in
                let _40 = _400 in
                let _100 = _1000 in
                let ext0 = ext00 in
                let _13 = _130 in
                let a =
                  let _endpos__12_ = _endpos__120_ in
                  let _endpos__11_ = _endpos__110_ in
                  let _startpos__11_ = _startpos__110_ in
                  let _startpos__1_ = _startpos__13_ in
                  let _12 = _120 in
                  let body = body0 in
                  let _11 = _110 in
                  let _4 = _40 in
                  let _10 = _100 in
                  let ext = ext0 in
                  let _1 = _13 in
                  let attrs2 =
                    let _1 = _12 in
                    
# 3368 "parser_raw.mly"
    ( _1 )
# 46496 "parser_raw.ml"
                    
                  in
                  let _endpos_attrs2_ = _endpos__12_ in
                  let uid =
                    let _endpos__1_ = _endpos__11_ in
                    let _startpos__1_ = _startpos__11_ in
                    let _1 = _11 in
                    let _endpos = _endpos__1_ in
                    let _symbolstartpos = _startpos__1_ in
                    let _sloc = (_symbolstartpos, _endpos) in
                    
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 46510 "parser_raw.ml"
                    
                  in
                  let attrs1 =
                    let _1 = _10 in
                    
# 3372 "parser_raw.mly"
    ( _1 )
# 46518 "parser_raw.ml"
                    
                  in
                  let _endpos = _endpos_attrs2_ in
                  let _symbolstartpos = _startpos__1_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  
# 1173 "parser_raw.mly"
  (
    let loc = make_loc _sloc in
    let attrs = attrs1 @ attrs2 in
    let docs = symbol_docs _sloc in
    ext,
    Mb.mk uid body ~attrs ~loc ~docs
  )
# 46533 "parser_raw.ml"
                  
                in
                
# 881 "parser_raw.mly"
    ( let (x, b) = a in x, b :: bs )
# 46539 "parser_raw.ml"
                
              in
              
# 1162 "parser_raw.mly"
    ( _1 )
# 46545 "parser_raw.ml"
              
            in
            
# 1120 "parser_raw.mly"
        ( pstr_recmodule _1 )
# 46551 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_bs000_ in
          let _startpos__1_ = _startpos__13000_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 743 "parser_raw.mly"
    ( wrap_mkstr_ext ~loc:_sloc _1 )
# 46562 "parser_raw.ml"
          
        in
        
# 1132 "parser_raw.mly"
    ( _1 )
# 46568 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _100 : (Parsetree.module_type_declaration * string Location.loc option) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__100_ in
        let _v : (Parsetree.structure_item) = let _1 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 1122 "parser_raw.mly"
        ( let (body, ext) = _1 in (Pstr_modtype body, ext) )
# 46599 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 743 "parser_raw.mly"
    ( wrap_mkstr_ext ~loc:_sloc _1 )
# 46610 "parser_raw.ml"
          
        in
        
# 1132 "parser_raw.mly"
    ( _1 )
# 46616 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _100 : (Parsetree.open_declaration * string Location.loc option) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__100_ in
        let _v : (Parsetree.structure_item) = let _1 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 1124 "parser_raw.mly"
        ( let (body, ext) = _1 in (Pstr_open body, ext) )
# 46647 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 743 "parser_raw.mly"
    ( wrap_mkstr_ext ~loc:_sloc _1 )
# 46658 "parser_raw.ml"
          
        in
        
# 1132 "parser_raw.mly"
    ( _1 )
# 46664 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = bs0000;
          MenhirLib.EngineTypes.startp = _startpos_bs0000_;
          MenhirLib.EngineTypes.endp = _endpos_bs0000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _1200000;
            MenhirLib.EngineTypes.startp = _startpos__1200000_;
            MenhirLib.EngineTypes.endp = _endpos__1200000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = body00000;
              MenhirLib.EngineTypes.startp = _startpos_body00000_;
              MenhirLib.EngineTypes.endp = _endpos_body00000_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _1100000;
                MenhirLib.EngineTypes.startp = _startpos__1100000_;
                MenhirLib.EngineTypes.endp = _endpos__1100000_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = params00000;
                  MenhirLib.EngineTypes.startp = _startpos_params00000_;
                  MenhirLib.EngineTypes.endp = _endpos_params00000_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = virt00000;
                    MenhirLib.EngineTypes.startp = _startpos_virt00000_;
                    MenhirLib.EngineTypes.endp = _endpos_virt00000_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = _1000000;
                      MenhirLib.EngineTypes.startp = _startpos__1000000_;
                      MenhirLib.EngineTypes.endp = _endpos__1000000_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.semv = ext00000;
                        MenhirLib.EngineTypes.startp = _startpos_ext00000_;
                        MenhirLib.EngineTypes.endp = _endpos_ext00000_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _130000;
                          MenhirLib.EngineTypes.startp = _startpos__130000_;
                          MenhirLib.EngineTypes.endp = _endpos__130000_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let bs0000 : (Parsetree.class_declaration list) = Obj.magic bs0000 in
        let _1200000 : (Parsetree.attributes) = Obj.magic _1200000 in
        let body00000 : (Parsetree.class_expr) = Obj.magic body00000 in
        let _1100000 : (
# 564 "parser_raw.mly"
       (string)
# 46728 "parser_raw.ml"
        ) = Obj.magic _1100000 in
        let params00000 : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic params00000 in
        let virt00000 : (Asttypes.virtual_flag) = Obj.magic virt00000 in
        let _1000000 : (Parsetree.attributes) = Obj.magic _1000000 in
        let ext00000 : (string Location.loc option) = Obj.magic ext00000 in
        let _130000 : unit = Obj.magic _130000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__130000_ in
        let _endpos = _endpos_bs0000_ in
        let _v : (Parsetree.structure_item) = let _1 =
          let _endpos_bs000_ = _endpos_bs0000_ in
          let _startpos__13000_ = _startpos__130000_ in
          let _endpos__120000_ = _endpos__1200000_ in
          let _endpos__110000_ = _endpos__1100000_ in
          let _startpos__110000_ = _startpos__1100000_ in
          let bs000 = bs0000 in
          let _120000 = _1200000 in
          let body0000 = body00000 in
          let _110000 = _1100000 in
          let params0000 = params00000 in
          let virt0000 = virt00000 in
          let _100000 = _1000000 in
          let ext0000 = ext00000 in
          let _13000 = _130000 in
          let _1 =
            let _startpos__1300_ = _startpos__13000_ in
            let _endpos__12000_ = _endpos__120000_ in
            let _endpos__11000_ = _endpos__110000_ in
            let _startpos__11000_ = _startpos__110000_ in
            let bs00 = bs000 in
            let _12000 = _120000 in
            let body000 = body0000 in
            let _11000 = _110000 in
            let params000 = params0000 in
            let virt000 = virt0000 in
            let _10000 = _100000 in
            let ext000 = ext0000 in
            let _1300 = _13000 in
            let _1 =
              let _startpos__130_ = _startpos__1300_ in
              let _endpos__1200_ = _endpos__12000_ in
              let _endpos__1100_ = _endpos__11000_ in
              let _startpos__1100_ = _startpos__11000_ in
              let bs0 = bs00 in
              let _1200 = _12000 in
              let body00 = body000 in
              let _1100 = _11000 in
              let params00 = params000 in
              let virt00 = virt000 in
              let _1000 = _10000 in
              let ext00 = ext000 in
              let _130 = _1300 in
              let _1 =
                let _startpos__13_ = _startpos__130_ in
                let _endpos__120_ = _endpos__1200_ in
                let _endpos__110_ = _endpos__1100_ in
                let _startpos__110_ = _startpos__1100_ in
                let bs = bs0 in
                let _120 = _1200 in
                let body0 = body00 in
                let _110 = _1100 in
                let params0 = params00 in
                let virt0 = virt00 in
                let _100 = _1000 in
                let ext0 = ext00 in
                let _13 = _130 in
                let a =
                  let _endpos__12_ = _endpos__120_ in
                  let _endpos__11_ = _endpos__110_ in
                  let _startpos__11_ = _startpos__110_ in
                  let _startpos__1_ = _startpos__13_ in
                  let _12 = _120 in
                  let body = body0 in
                  let _11 = _110 in
                  let params = params0 in
                  let virt = virt0 in
                  let _10 = _100 in
                  let ext = ext0 in
                  let _1 = _13 in
                  let attrs2 =
                    let _1 = _12 in
                    
# 3368 "parser_raw.mly"
    ( _1 )
# 46813 "parser_raw.ml"
                    
                  in
                  let _endpos_attrs2_ = _endpos__12_ in
                  let id =
                    let _endpos__1_ = _endpos__11_ in
                    let _startpos__1_ = _startpos__11_ in
                    let _1 = _11 in
                    let _endpos = _endpos__1_ in
                    let _symbolstartpos = _startpos__1_ in
                    let _sloc = (_symbolstartpos, _endpos) in
                    
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 46827 "parser_raw.ml"
                    
                  in
                  let attrs1 =
                    let _1 = _10 in
                    
# 3372 "parser_raw.mly"
    ( _1 )
# 46835 "parser_raw.ml"
                    
                  in
                  let _endpos = _endpos_attrs2_ in
                  let _symbolstartpos = _startpos__1_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  
# 1467 "parser_raw.mly"
  (
    let attrs = attrs1 @ attrs2 in
    let loc = make_loc _sloc in
    let docs = symbol_docs _sloc in
    ext,
    Ci.mk id body ~virt ~params ~attrs ~loc ~docs
  )
# 46850 "parser_raw.ml"
                  
                in
                
# 881 "parser_raw.mly"
    ( let (x, b) = a in x, b :: bs )
# 46856 "parser_raw.ml"
                
              in
              
# 1456 "parser_raw.mly"
    ( _1 )
# 46862 "parser_raw.ml"
              
            in
            
# 1126 "parser_raw.mly"
        ( let (ext, l) = _1 in (Pstr_class l, ext) )
# 46868 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_bs000_ in
          let _startpos__1_ = _startpos__13000_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 743 "parser_raw.mly"
    ( wrap_mkstr_ext ~loc:_sloc _1 )
# 46879 "parser_raw.ml"
          
        in
        
# 1132 "parser_raw.mly"
    ( _1 )
# 46885 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _100 : (string Location.loc option * Parsetree.class_type_declaration list) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__100_ in
        let _v : (Parsetree.structure_item) = let _1 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 1128 "parser_raw.mly"
        ( let (ext, l) = _1 in (Pstr_class_type l, ext) )
# 46916 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 743 "parser_raw.mly"
    ( wrap_mkstr_ext ~loc:_sloc _1 )
# 46927 "parser_raw.ml"
          
        in
        
# 1132 "parser_raw.mly"
    ( _1 )
# 46933 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _11000;
          MenhirLib.EngineTypes.startp = _startpos__11000_;
          MenhirLib.EngineTypes.endp = _endpos__11000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = thing000;
            MenhirLib.EngineTypes.startp = _startpos_thing000_;
            MenhirLib.EngineTypes.endp = _endpos_thing000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _10000;
              MenhirLib.EngineTypes.startp = _startpos__10000_;
              MenhirLib.EngineTypes.endp = _endpos__10000_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = ext000;
                MenhirLib.EngineTypes.startp = _startpos_ext000_;
                MenhirLib.EngineTypes.endp = _endpos_ext000_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1200;
                  MenhirLib.EngineTypes.startp = _startpos__1200_;
                  MenhirLib.EngineTypes.endp = _endpos__1200_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _11000 : (Parsetree.attributes) = Obj.magic _11000 in
        let thing000 : (Parsetree.module_expr) = Obj.magic thing000 in
        let _10000 : (Parsetree.attributes) = Obj.magic _10000 in
        let ext000 : (string Location.loc option) = Obj.magic ext000 in
        let _1200 : unit = Obj.magic _1200 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1200_ in
        let _endpos = _endpos__11000_ in
        let _v : (Parsetree.structure_item) = let _1 =
          let _startpos__120_ = _startpos__1200_ in
          let _endpos__1100_ = _endpos__11000_ in
          let _1100 = _11000 in
          let thing00 = thing000 in
          let _1000 = _10000 in
          let ext00 = ext000 in
          let _120 = _1200 in
          let _1 =
            let _startpos__12_ = _startpos__120_ in
            let _endpos__110_ = _endpos__1100_ in
            let _110 = _1100 in
            let thing0 = thing00 in
            let _100 = _1000 in
            let ext0 = ext00 in
            let _12 = _120 in
            let _1 =
              let _endpos__11_ = _endpos__110_ in
              let _startpos__1_ = _startpos__12_ in
              let _11 = _110 in
              let thing = thing0 in
              let _10 = _100 in
              let ext = ext0 in
              let _1 = _12 in
              let attrs2 =
                let _1 = _11 in
                
# 3368 "parser_raw.mly"
    ( _1 )
# 47008 "parser_raw.ml"
                
              in
              let _endpos_attrs2_ = _endpos__11_ in
              let attrs1 =
                let _1 = _10 in
                
# 3372 "parser_raw.mly"
    ( _1 )
# 47017 "parser_raw.ml"
                
              in
              let _endpos = _endpos_attrs2_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 1206 "parser_raw.mly"
  (
    let attrs = attrs1 @ attrs2 in
    let loc = make_loc _sloc in
    let docs = symbol_docs _sloc in
    Incl.mk thing ~attrs ~loc ~docs, ext
  )
# 47031 "parser_raw.ml"
              
            in
            
# 1130 "parser_raw.mly"
        ( pstr_include _1 )
# 47037 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__1100_ in
          let _startpos__1_ = _startpos__120_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 743 "parser_raw.mly"
    ( wrap_mkstr_ext ~loc:_sloc _1 )
# 47048 "parser_raw.ml"
          
        in
        
# 1132 "parser_raw.mly"
    ( _1 )
# 47054 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3283 "parser_raw.mly"
          ( "-" )
# 47079 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3284 "parser_raw.mly"
             ( "-." )
# 47104 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _11;
          MenhirLib.EngineTypes.startp = _startpos__11_;
          MenhirLib.EngineTypes.endp = _endpos__11_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = xs000;
            MenhirLib.EngineTypes.startp = _startpos_xs000_;
            MenhirLib.EngineTypes.endp = _endpos_xs000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _10;
                  MenhirLib.EngineTypes.startp = _startpos__10_;
                  MenhirLib.EngineTypes.endp = _endpos__10_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _11 : (Parsetree.attributes) = Obj.magic _11 in
        let xs000 : (Parsetree.core_type list) = Obj.magic xs000 in
        let _3 : (bool) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _10 : (string) = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__11_ in
        let _v : (Parsetree.row_field) = let _5 =
          let _1 = _11 in
          
# 3372 "parser_raw.mly"
    ( _1 )
# 47155 "parser_raw.ml"
          
        in
        let _endpos__5_ = _endpos__11_ in
        let _4 =
          let xs00 = xs000 in
          let _1 =
            let xs0 = xs00 in
            let xs =
              let xs = xs0 in
              
# 253 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( List.rev xs )
# 47168 "parser_raw.ml"
              
            in
            
# 801 "parser_raw.mly"
    ( xs )
# 47174 "parser_raw.ml"
            
          in
          
# 3032 "parser_raw.mly"
    ( _1 )
# 47180 "parser_raw.ml"
          
        in
        let _1 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 47193 "parser_raw.ml"
          
        in
        let _startpos__1_ = _startpos__10_ in
        let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3018 "parser_raw.mly"
      ( let info = symbol_info _endpos in
        let attrs = add_info_attrs info _5 in
        Rf.tag ~loc:(make_loc _sloc) ~attrs _1 _3 _4 )
# 47205 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _11;
          MenhirLib.EngineTypes.startp = _startpos__11_;
          MenhirLib.EngineTypes.endp = _endpos__11_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _10;
            MenhirLib.EngineTypes.startp = _startpos__10_;
            MenhirLib.EngineTypes.endp = _endpos__10_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _11 : (Parsetree.attributes) = Obj.magic _11 in
        let _10 : (string) = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__11_ in
        let _v : (Parsetree.row_field) = let _2 =
          let _1 = _11 in
          
# 3372 "parser_raw.mly"
    ( _1 )
# 47238 "parser_raw.ml"
          
        in
        let _endpos__2_ = _endpos__11_ in
        let _1 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 47252 "parser_raw.ml"
          
        in
        let _startpos__1_ = _startpos__10_ in
        let _endpos = _endpos__2_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3022 "parser_raw.mly"
      ( let info = symbol_info _endpos in
        let attrs = add_info_attrs info _2 in
        Rf.tag ~loc:(make_loc _sloc) ~attrs _1 true [] )
# 47264 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _10 : (string) = Obj.magic _10 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__10_ in
        let _v : (Parsetree.toplevel_phrase) = let arg =
          
# 124 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( None )
# 47296 "parser_raw.ml"
          
        in
        let _endpos_arg_ = _endpos__10_ in
        let dir =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 47310 "parser_raw.ml"
          
        in
        let _endpos = _endpos_arg_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3191 "parser_raw.mly"
    ( mk_directive ~loc:_sloc dir arg )
# 47319 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _1000;
          MenhirLib.EngineTypes.startp = _startpos__1000_;
          MenhirLib.EngineTypes.endp = _endpos__1000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _10;
            MenhirLib.EngineTypes.startp = _startpos__10_;
            MenhirLib.EngineTypes.endp = _endpos__10_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1000 : (
# 602 "parser_raw.mly"
       (string * string option)
# 47350 "parser_raw.ml"
        ) = Obj.magic _1000 in
        let _10 : (string) = Obj.magic _10 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1000_ in
        let _v : (Parsetree.toplevel_phrase) = let arg =
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _100 = _1000 in
          let x =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _10 = _100 in
            let _1 =
              let _1 = _10 in
              
# 3194 "parser_raw.mly"
           ( let (s, _) = _1 in Pdir_string s )
# 47370 "parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 747 "parser_raw.mly"
    ( mk_directive_arg ~loc:_sloc _1 )
# 47381 "parser_raw.ml"
            
          in
          
# 126 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( Some x )
# 47387 "parser_raw.ml"
          
        in
        let _endpos_arg_ = _endpos__1000_ in
        let dir =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 47401 "parser_raw.ml"
          
        in
        let _endpos = _endpos_arg_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3191 "parser_raw.mly"
    ( mk_directive ~loc:_sloc dir arg )
# 47410 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _1000;
          MenhirLib.EngineTypes.startp = _startpos__1000_;
          MenhirLib.EngineTypes.endp = _endpos__1000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _10;
            MenhirLib.EngineTypes.startp = _startpos__10_;
            MenhirLib.EngineTypes.endp = _endpos__10_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1000 : (
# 549 "parser_raw.mly"
       (string * char option)
# 47441 "parser_raw.ml"
        ) = Obj.magic _1000 in
        let _10 : (string) = Obj.magic _10 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1000_ in
        let _v : (Parsetree.toplevel_phrase) = let arg =
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _100 = _1000 in
          let x =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _10 = _100 in
            let _1 =
              let _1 = _10 in
              
# 3195 "parser_raw.mly"
        ( let (n, m) = _1 in Pdir_int (n ,m) )
# 47461 "parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 747 "parser_raw.mly"
    ( mk_directive_arg ~loc:_sloc _1 )
# 47472 "parser_raw.ml"
            
          in
          
# 126 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( Some x )
# 47478 "parser_raw.ml"
          
        in
        let _endpos_arg_ = _endpos__1000_ in
        let dir =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 47492 "parser_raw.ml"
          
        in
        let _endpos = _endpos_arg_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3191 "parser_raw.mly"
    ( mk_directive ~loc:_sloc dir arg )
# 47501 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _1000;
          MenhirLib.EngineTypes.startp = _startpos__1000_;
          MenhirLib.EngineTypes.endp = _endpos__1000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _10;
            MenhirLib.EngineTypes.startp = _startpos__10_;
            MenhirLib.EngineTypes.endp = _endpos__10_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1000 : (Longident.t) = Obj.magic _1000 in
        let _10 : (string) = Obj.magic _10 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1000_ in
        let _v : (Parsetree.toplevel_phrase) = let arg =
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _100 = _1000 in
          let x =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _10 = _100 in
            let _1 =
              let _1 = _10 in
              
# 3196 "parser_raw.mly"
                  ( Pdir_ident _1 )
# 47548 "parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 747 "parser_raw.mly"
    ( mk_directive_arg ~loc:_sloc _1 )
# 47559 "parser_raw.ml"
            
          in
          
# 126 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( Some x )
# 47565 "parser_raw.ml"
          
        in
        let _endpos_arg_ = _endpos__1000_ in
        let dir =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 47579 "parser_raw.ml"
          
        in
        let _endpos = _endpos_arg_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3191 "parser_raw.mly"
    ( mk_directive ~loc:_sloc dir arg )
# 47588 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _1000;
          MenhirLib.EngineTypes.startp = _startpos__1000_;
          MenhirLib.EngineTypes.endp = _endpos__1000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _10;
            MenhirLib.EngineTypes.startp = _startpos__10_;
            MenhirLib.EngineTypes.endp = _endpos__10_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1000 : (Longident.t) = Obj.magic _1000 in
        let _10 : (string) = Obj.magic _10 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1000_ in
        let _v : (Parsetree.toplevel_phrase) = let arg =
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _100 = _1000 in
          let x =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _10 = _100 in
            let _1 =
              let _1 = _10 in
              
# 3197 "parser_raw.mly"
                  ( Pdir_ident _1 )
# 47635 "parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 747 "parser_raw.mly"
    ( mk_directive_arg ~loc:_sloc _1 )
# 47646 "parser_raw.ml"
            
          in
          
# 126 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( Some x )
# 47652 "parser_raw.ml"
          
        in
        let _endpos_arg_ = _endpos__1000_ in
        let dir =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 47666 "parser_raw.ml"
          
        in
        let _endpos = _endpos_arg_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3191 "parser_raw.mly"
    ( mk_directive ~loc:_sloc dir arg )
# 47675 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _1000;
          MenhirLib.EngineTypes.startp = _startpos__1000_;
          MenhirLib.EngineTypes.endp = _endpos__1000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _10;
            MenhirLib.EngineTypes.startp = _startpos__10_;
            MenhirLib.EngineTypes.endp = _endpos__10_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1000 : unit = Obj.magic _1000 in
        let _10 : (string) = Obj.magic _10 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1000_ in
        let _v : (Parsetree.toplevel_phrase) = let arg =
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _100 = _1000 in
          let x =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _10 = _100 in
            let _1 =
              let _1 = _10 in
              
# 3198 "parser_raw.mly"
          ( Pdir_bool false )
# 47722 "parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 747 "parser_raw.mly"
    ( mk_directive_arg ~loc:_sloc _1 )
# 47733 "parser_raw.ml"
            
          in
          
# 126 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( Some x )
# 47739 "parser_raw.ml"
          
        in
        let _endpos_arg_ = _endpos__1000_ in
        let dir =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 47753 "parser_raw.ml"
          
        in
        let _endpos = _endpos_arg_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3191 "parser_raw.mly"
    ( mk_directive ~loc:_sloc dir arg )
# 47762 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _1000;
          MenhirLib.EngineTypes.startp = _startpos__1000_;
          MenhirLib.EngineTypes.endp = _endpos__1000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _10;
            MenhirLib.EngineTypes.startp = _startpos__10_;
            MenhirLib.EngineTypes.endp = _endpos__10_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1000 : unit = Obj.magic _1000 in
        let _10 : (string) = Obj.magic _10 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1000_ in
        let _v : (Parsetree.toplevel_phrase) = let arg =
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _100 = _1000 in
          let x =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _10 = _100 in
            let _1 =
              let _1 = _10 in
              
# 3199 "parser_raw.mly"
         ( Pdir_bool true )
# 47809 "parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 747 "parser_raw.mly"
    ( mk_directive_arg ~loc:_sloc _1 )
# 47820 "parser_raw.ml"
            
          in
          
# 126 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( Some x )
# 47826 "parser_raw.ml"
          
        in
        let _endpos_arg_ = _endpos__1000_ in
        let dir =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 47840 "parser_raw.ml"
          
        in
        let _endpos = _endpos_arg_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3191 "parser_raw.mly"
    ( mk_directive ~loc:_sloc dir arg )
# 47849 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _10000;
            MenhirLib.EngineTypes.startp = _startpos__10000_;
            MenhirLib.EngineTypes.endp = _endpos__10000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e000;
              MenhirLib.EngineTypes.startp = _startpos_e000_;
              MenhirLib.EngineTypes.endp = _endpos_e000_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _10000 : (Parsetree.attributes) = Obj.magic _10000 in
        let e000 : (Parsetree.expression) = Obj.magic e000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e000_ in
        let _endpos = _endpos__2_ in
        let _v : (
# 675 "parser_raw.mly"
      (Parsetree.toplevel_phrase)
# 47886 "parser_raw.ml"
        ) = let _1 =
          let _startpos_e00_ = _startpos_e000_ in
          let _endpos__1000_ = _endpos__10000_ in
          let _1000 = _10000 in
          let e00 = e000 in
          let _1 =
            let _startpos_e0_ = _startpos_e00_ in
            let _100 = _1000 in
            let e0 = e00 in
            let _1 =
              let _10 = _100 in
              let e = e0 in
              let attrs =
                let _1 = _10 in
                
# 3368 "parser_raw.mly"
    ( _1 )
# 47904 "parser_raw.ml"
                
              in
              
# 1085 "parser_raw.mly"
    ( mkstrexp e attrs )
# 47910 "parser_raw.ml"
              
            in
            let _startpos__1_ = _startpos_e0_ in
            let _startpos = _startpos__1_ in
            
# 696 "parser_raw.mly"
  ( text_str _startpos @ [_1] )
# 47918 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__1000_ in
          let _startpos__1_ = _startpos_e00_ in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          
# 685 "parser_raw.mly"
                              ( extra_str _startpos _endpos _1 )
# 47928 "parser_raw.ml"
          
        in
        
# 912 "parser_raw.mly"
    ( Ptop_def _1 )
# 47934 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = xss00;
            MenhirLib.EngineTypes.startp = _startpos_xss00_;
            MenhirLib.EngineTypes.endp = _endpos_xss00_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let xss00 : (Parsetree.structure_item list list) = Obj.magic xss00 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xss00_ in
        let _endpos = _endpos__2_ in
        let _v : (
# 675 "parser_raw.mly"
      (Parsetree.toplevel_phrase)
# 47965 "parser_raw.ml"
        ) = let _1 =
          let _endpos_xss0_ = _endpos_xss00_ in
          let _startpos_xss0_ = _startpos_xss00_ in
          let xss0 = xss00 in
          let _1 =
            let xss = xss0 in
            
# 260 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( List.flatten xss )
# 47975 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_xss0_ in
          let _startpos__1_ = _startpos_xss0_ in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          
# 685 "parser_raw.mly"
                              ( extra_str _startpos _endpos _1 )
# 47985 "parser_raw.ml"
          
        in
        
# 916 "parser_raw.mly"
    ( Ptop_def _1 )
# 47991 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.toplevel_phrase) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (
# 675 "parser_raw.mly"
      (Parsetree.toplevel_phrase)
# 48022 "parser_raw.ml"
        ) = 
# 920 "parser_raw.mly"
    ( _1 )
# 48026 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (
# 675 "parser_raw.mly"
      (Parsetree.toplevel_phrase)
# 48051 "parser_raw.ml"
        ) = 
# 923 "parser_raw.mly"
    ( raise End_of_file )
# 48055 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = ty;
          MenhirLib.EngineTypes.startp = _startpos_ty_;
          MenhirLib.EngineTypes.endp = _endpos_ty_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let ty : (Parsetree.core_type) = Obj.magic ty in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ty_ in
        let _endpos = _endpos_ty_ in
        let _v : (Parsetree.core_type) = 
# 2927 "parser_raw.mly"
      ( ty )
# 48080 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = xs0000;
          MenhirLib.EngineTypes.startp = _startpos_xs0000_;
          MenhirLib.EngineTypes.endp = _endpos_xs0000_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let xs0000 : (Parsetree.core_type list) = Obj.magic xs0000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs0000_ in
        let _endpos = _endpos_xs0000_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _endpos_xs000_ = _endpos_xs0000_ in
          let _startpos_xs000_ = _startpos_xs0000_ in
          let xs000 = xs0000 in
          let _1 =
            let xs00 = xs000 in
            let tys =
              let xs0 = xs00 in
              let xs =
                let xs = xs0 in
                
# 253 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( List.rev xs )
# 48115 "parser_raw.ml"
                
              in
              
# 824 "parser_raw.mly"
    ( xs )
# 48121 "parser_raw.ml"
              
            in
            
# 2930 "parser_raw.mly"
        ( Ptyp_tuple tys )
# 48127 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_xs000_ in
          let _startpos__1_ = _startpos_xs000_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 725 "parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 48138 "parser_raw.ml"
          
        in
        
# 2932 "parser_raw.mly"
    ( _1 )
# 48144 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.core_type) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.core_type option * Parsetree.core_type option) = 
# 2323 "parser_raw.mly"
                    ( (Some _2, None) )
# 48175 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (Parsetree.core_type) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.core_type) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.core_type option * Parsetree.core_type option) = 
# 2324 "parser_raw.mly"
                                           ( (Some _2, Some _4) )
# 48218 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.core_type) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.core_type option * Parsetree.core_type option) = 
# 2325 "parser_raw.mly"
                           ( (None, Some _2) )
# 48249 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.core_type option * Parsetree.core_type option) = 
# 2326 "parser_raw.mly"
                ( syntax_error() )
# 48280 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.core_type option * Parsetree.core_type option) = 
# 2327 "parser_raw.mly"
                       ( syntax_error() )
# 48311 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = 
# 2623 "parser_raw.mly"
      ( (Ptype_abstract, Public, None) )
# 48329 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = 
# 2625 "parser_raw.mly"
      ( _2 )
# 48360 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 564 "parser_raw.mly"
       (string)
# 48381 "parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 3161 "parser_raw.mly"
           ( Lident _1 )
# 48389 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (
# 564 "parser_raw.mly"
       (string)
# 48420 "parser_raw.ml"
        ) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Longident.t) = 
# 3162 "parser_raw.mly"
                                 ( Ldot(_1, _3) )
# 48430 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.core_type) = Obj.magic _2 in
        let _1 : (Asttypes.variance) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.core_type * Asttypes.variance) = 
# 2639 "parser_raw.mly"
                                ( _2, _1 )
# 48461 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : ((Parsetree.core_type * Asttypes.variance) list) = 
# 2632 "parser_raw.mly"
      ( [] )
# 48479 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = p;
          MenhirLib.EngineTypes.startp = _startpos_p_;
          MenhirLib.EngineTypes.endp = _endpos_p_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let p : (Parsetree.core_type * Asttypes.variance) = Obj.magic p in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_p_ in
        let _endpos = _endpos_p_ in
        let _v : ((Parsetree.core_type * Asttypes.variance) list) = 
# 2634 "parser_raw.mly"
      ( [p] )
# 48504 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = xs00;
            MenhirLib.EngineTypes.startp = _startpos_xs00_;
            MenhirLib.EngineTypes.endp = _endpos_xs00_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let xs00 : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic xs00 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : ((Parsetree.core_type * Asttypes.variance) list) = let ps =
          let xs0 = xs00 in
          let xs =
            let xs = xs0 in
            
# 253 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( List.rev xs )
# 48545 "parser_raw.ml"
            
          in
          
# 801 "parser_raw.mly"
    ( xs )
# 48551 "parser_raw.ml"
          
        in
        
# 2636 "parser_raw.mly"
      ( ps )
# 48557 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = tyvar00;
          MenhirLib.EngineTypes.startp = _startpos_tyvar00_;
          MenhirLib.EngineTypes.endp = _endpos_tyvar00_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _100;
            MenhirLib.EngineTypes.startp = _startpos__100_;
            MenhirLib.EngineTypes.endp = _endpos__100_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let tyvar00 : (string) = Obj.magic tyvar00 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos_tyvar00_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _endpos_tyvar0_ = _endpos_tyvar00_ in
          let _startpos__10_ = _startpos__100_ in
          let tyvar0 = tyvar00 in
          let _10 = _100 in
          let _1 =
            let tyvar = tyvar0 in
            let _1 = _10 in
            
# 2644 "parser_raw.mly"
      ( Ptyp_var tyvar )
# 48596 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_tyvar0_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 725 "parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 48607 "parser_raw.ml"
          
        in
        
# 2647 "parser_raw.mly"
    ( _1 )
# 48613 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__100_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 2646 "parser_raw.mly"
      ( Ptyp_any )
# 48644 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 725 "parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 48655 "parser_raw.ml"
          
        in
        
# 2647 "parser_raw.mly"
    ( _1 )
# 48661 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Asttypes.variance) = 
# 2650 "parser_raw.mly"
                                                ( Invariant )
# 48679 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.variance) = 
# 2651 "parser_raw.mly"
         ( Covariant )
# 48704 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.variance) = 
# 2652 "parser_raw.mly"
          ( Contravariant )
# 48729 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = xss000;
            MenhirLib.EngineTypes.startp = _startpos_xss000_;
            MenhirLib.EngineTypes.endp = _endpos_xss000_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let xss000 : (Parsetree.toplevel_phrase list list) = Obj.magic xss000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xss000_ in
        let _endpos = _endpos__2_ in
        let _v : (
# 677 "parser_raw.mly"
      (Parsetree.toplevel_phrase list)
# 48760 "parser_raw.ml"
        ) = let _1 =
          let _endpos_xss00_ = _endpos_xss000_ in
          let _startpos_xss00_ = _startpos_xss000_ in
          let xss00 = xss000 in
          let _1 =
            let xss0 = xss00 in
            let ys =
              let xss = xss0 in
              
# 260 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( List.flatten xss )
# 48772 "parser_raw.ml"
              
            in
            let xs =
              let _1 =
                
# 751 "parser_raw.mly"
    ( [] )
# 48780 "parser_raw.ml"
                
              in
              
# 941 "parser_raw.mly"
    ( _1 )
# 48786 "parser_raw.ml"
              
            in
            
# 267 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( xs @ ys )
# 48792 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_xss00_ in
          let _startpos__1_ = _startpos_xss00_ in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          
# 689 "parser_raw.mly"
                              ( extra_def _startpos _endpos _1 )
# 48802 "parser_raw.ml"
          
        in
        
# 935 "parser_raw.mly"
    ( _1 )
# 48808 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = xss000;
            MenhirLib.EngineTypes.startp = _startpos_xss000_;
            MenhirLib.EngineTypes.endp = _endpos_xss000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _100000000;
              MenhirLib.EngineTypes.startp = _startpos__100000000_;
              MenhirLib.EngineTypes.endp = _endpos__100000000_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = e0000000;
                MenhirLib.EngineTypes.startp = _startpos_e0000000_;
                MenhirLib.EngineTypes.endp = _endpos_e0000000_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let xss000 : (Parsetree.toplevel_phrase list list) = Obj.magic xss000 in
        let _100000000 : (Parsetree.attributes) = Obj.magic _100000000 in
        let e0000000 : (Parsetree.expression) = Obj.magic e0000000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e0000000_ in
        let _endpos = _endpos__2_ in
        let _v : (
# 677 "parser_raw.mly"
      (Parsetree.toplevel_phrase list)
# 48851 "parser_raw.ml"
        ) = let _1 =
          let _endpos_xss00_ = _endpos_xss000_ in
          let _startpos_e000000_ = _startpos_e0000000_ in
          let xss00 = xss000 in
          let _10000000 = _100000000 in
          let e000000 = e0000000 in
          let _1 =
            let _startpos_e00000_ = _startpos_e000000_ in
            let xss0 = xss00 in
            let _1000000 = _10000000 in
            let e00000 = e000000 in
            let ys =
              let xss = xss0 in
              
# 260 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( List.flatten xss )
# 48868 "parser_raw.ml"
              
            in
            let xs =
              let _startpos_e0000_ = _startpos_e00000_ in
              let _100000 = _1000000 in
              let e0000 = e00000 in
              let _1 =
                let _startpos_e000_ = _startpos_e0000_ in
                let _10000 = _100000 in
                let e000 = e0000 in
                let x =
                  let _startpos_e00_ = _startpos_e000_ in
                  let _1000 = _10000 in
                  let e00 = e000 in
                  let _1 =
                    let _100 = _1000 in
                    let e0 = e00 in
                    let _1 =
                      let _10 = _100 in
                      let e = e0 in
                      let attrs =
                        let _1 = _10 in
                        
# 3368 "parser_raw.mly"
    ( _1 )
# 48894 "parser_raw.ml"
                        
                      in
                      
# 1085 "parser_raw.mly"
    ( mkstrexp e attrs )
# 48900 "parser_raw.ml"
                      
                    in
                    
# 706 "parser_raw.mly"
  ( Ptop_def [_1] )
# 48906 "parser_raw.ml"
                    
                  in
                  let _startpos__1_ = _startpos_e00_ in
                  let _startpos = _startpos__1_ in
                  
# 704 "parser_raw.mly"
  ( text_def _startpos @ [_1] )
# 48914 "parser_raw.ml"
                  
                in
                
# 753 "parser_raw.mly"
    ( x )
# 48920 "parser_raw.ml"
                
              in
              
# 941 "parser_raw.mly"
    ( _1 )
# 48926 "parser_raw.ml"
              
            in
            
# 267 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( xs @ ys )
# 48932 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_xss00_ in
          let _startpos__1_ = _startpos_e000000_ in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          
# 689 "parser_raw.mly"
                              ( extra_def _startpos _endpos _1 )
# 48942 "parser_raw.ml"
          
        in
        
# 935 "parser_raw.mly"
    ( _1 )
# 48948 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 564 "parser_raw.mly"
       (string)
# 48969 "parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3093 "parser_raw.mly"
           ( _1 )
# 48977 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (string) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (string) = 
# 3094 "parser_raw.mly"
                           ( _2 )
# 49014 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (string) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (string) = let _loc__3_ = (_startpos__3_, _endpos__3_) in
        let _loc__1_ = (_startpos__1_, _endpos__1_) in
        
# 3095 "parser_raw.mly"
                          ( unclosed "(" _loc__1_ ")" _loc__3_ )
# 49053 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (string) = let _loc__2_ = (_startpos__2_, _endpos__2_) in
        
# 3096 "parser_raw.mly"
                 ( expecting _loc__2_ "operator" )
# 49085 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (string) = let _loc__3_ = (_startpos__3_, _endpos__3_) in
        
# 3097 "parser_raw.mly"
                        ( expecting _loc__3_ "module-expr" )
# 49123 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (string) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 3144 "parser_raw.mly"
              ( Lident _1 )
# 49148 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (string) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Longident.t) = 
# 3145 "parser_raw.mly"
                                ( Ldot(_1, _3) )
# 49185 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = ty;
          MenhirLib.EngineTypes.startp = _startpos_ty_;
          MenhirLib.EngineTypes.endp = _endpos_ty_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _100;
              MenhirLib.EngineTypes.startp = _startpos__100_;
              MenhirLib.EngineTypes.endp = _endpos__100_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = mutable_;
                MenhirLib.EngineTypes.startp = _startpos_mutable__;
                MenhirLib.EngineTypes.endp = _endpos_mutable__;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _10;
                  MenhirLib.EngineTypes.startp = _startpos__10_;
                  MenhirLib.EngineTypes.endp = _endpos__10_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let ty : (Parsetree.core_type) = Obj.magic ty in
        let _5 : unit = Obj.magic _5 in
        let _100 : (
# 564 "parser_raw.mly"
       (string)
# 49228 "parser_raw.ml"
        ) = Obj.magic _100 in
        let mutable_ : (Asttypes.mutable_flag) = Obj.magic mutable_ in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos_ty_ in
        let _v : ((string Location.loc * Asttypes.mutable_flag * Parsetree.class_field_kind) *
  Parsetree.attributes) = let label =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 3073 "parser_raw.mly"
           ( _1 )
# 49245 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 49256 "parser_raw.ml"
          
        in
        let attrs =
          let _1 = _10 in
          
# 3372 "parser_raw.mly"
    ( _1 )
# 49264 "parser_raw.ml"
          
        in
        let _1 =
          
# 3276 "parser_raw.mly"
                                                ( Fresh )
# 49271 "parser_raw.ml"
          
        in
        
# 1601 "parser_raw.mly"
      ( (label, mutable_, Cfk_virtual ty), attrs )
# 49277 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _100;
              MenhirLib.EngineTypes.startp = _startpos__100_;
              MenhirLib.EngineTypes.endp = _endpos__100_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _3;
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _10;
                  MenhirLib.EngineTypes.startp = _startpos__10_;
                  MenhirLib.EngineTypes.endp = _endpos__10_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : (Parsetree.expression) = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _100 : (
# 564 "parser_raw.mly"
       (string)
# 49320 "parser_raw.ml"
        ) = Obj.magic _100 in
        let _3 : (Asttypes.mutable_flag) = Obj.magic _3 in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__6_ in
        let _v : ((string Location.loc * Asttypes.mutable_flag * Parsetree.class_field_kind) *
  Parsetree.attributes) = let _4 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 3073 "parser_raw.mly"
           ( _1 )
# 49337 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 49348 "parser_raw.ml"
          
        in
        let _2 =
          let _1 = _10 in
          
# 3372 "parser_raw.mly"
    ( _1 )
# 49356 "parser_raw.ml"
          
        in
        let _1 =
          
# 3279 "parser_raw.mly"
                                                ( Fresh )
# 49363 "parser_raw.ml"
          
        in
        
# 1603 "parser_raw.mly"
      ( (_4, _3, Cfk_concrete (_1, _6)), _2 )
# 49369 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _100;
              MenhirLib.EngineTypes.startp = _startpos__100_;
              MenhirLib.EngineTypes.endp = _endpos__100_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _3;
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _11;
                  MenhirLib.EngineTypes.startp = _startpos__11_;
                  MenhirLib.EngineTypes.endp = _endpos__11_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _10;
                    MenhirLib.EngineTypes.startp = _startpos__10_;
                    MenhirLib.EngineTypes.endp = _endpos__10_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : (Parsetree.expression) = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _100 : (
# 564 "parser_raw.mly"
       (string)
# 49417 "parser_raw.ml"
        ) = Obj.magic _100 in
        let _3 : (Asttypes.mutable_flag) = Obj.magic _3 in
        let _11 : (Parsetree.attributes) = Obj.magic _11 in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__6_ in
        let _v : ((string Location.loc * Asttypes.mutable_flag * Parsetree.class_field_kind) *
  Parsetree.attributes) = let _4 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 3073 "parser_raw.mly"
           ( _1 )
# 49435 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 49446 "parser_raw.ml"
          
        in
        let _2 =
          let _1 = _11 in
          
# 3372 "parser_raw.mly"
    ( _1 )
# 49454 "parser_raw.ml"
          
        in
        let _1 =
          let _1 = _10 in
          
# 3280 "parser_raw.mly"
         ( Override )
# 49462 "parser_raw.ml"
          
        in
        
# 1603 "parser_raw.mly"
      ( (_4, _3, Cfk_concrete (_1, _6)), _2 )
# 49468 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _100;
                MenhirLib.EngineTypes.startp = _startpos__100_;
                MenhirLib.EngineTypes.endp = _endpos__100_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _10;
                    MenhirLib.EngineTypes.startp = _startpos__10_;
                    MenhirLib.EngineTypes.endp = _endpos__10_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _5 : (Parsetree.core_type option * Parsetree.core_type option) = Obj.magic _5 in
        let _100 : (
# 564 "parser_raw.mly"
       (string)
# 49517 "parser_raw.ml"
        ) = Obj.magic _100 in
        let _3 : (Asttypes.mutable_flag) = Obj.magic _3 in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__7_ in
        let _v : ((string Location.loc * Asttypes.mutable_flag * Parsetree.class_field_kind) *
  Parsetree.attributes) = let _4 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 3073 "parser_raw.mly"
           ( _1 )
# 49534 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 49545 "parser_raw.ml"
          
        in
        let _startpos__4_ = _startpos__100_ in
        let _2 =
          let _1 = _10 in
          
# 3372 "parser_raw.mly"
    ( _1 )
# 49554 "parser_raw.ml"
          
        in
        let _endpos__2_ = _endpos__10_ in
        let _startpos__2_ = _startpos__10_ in
        let _1 =
          
# 3279 "parser_raw.mly"
                                                ( Fresh )
# 49563 "parser_raw.ml"
          
        in
        let _endpos__1_ = _endpos__0_ in
        let _startpos__1_ = _endpos__0_ in
        let _endpos = _endpos__7_ in
        let _symbolstartpos = if _startpos__1_ != _endpos__1_ then
          _startpos__1_
        else
          if _startpos__2_ != _endpos__2_ then
            _startpos__2_
          else
            if _startpos__3_ != _endpos__3_ then
              _startpos__3_
            else
              _startpos__4_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1606 "parser_raw.mly"
      ( let e = mkexp_constraint ~loc:_sloc _7 _5 in
        (_4, _3, Cfk_concrete (_1, e)), _2
      )
# 49585 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _100;
                MenhirLib.EngineTypes.startp = _startpos__100_;
                MenhirLib.EngineTypes.endp = _endpos__100_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _11;
                    MenhirLib.EngineTypes.startp = _startpos__11_;
                    MenhirLib.EngineTypes.endp = _endpos__11_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _10;
                      MenhirLib.EngineTypes.startp = _startpos__10_;
                      MenhirLib.EngineTypes.endp = _endpos__10_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _5 : (Parsetree.core_type option * Parsetree.core_type option) = Obj.magic _5 in
        let _100 : (
# 564 "parser_raw.mly"
       (string)
# 49639 "parser_raw.ml"
        ) = Obj.magic _100 in
        let _3 : (Asttypes.mutable_flag) = Obj.magic _3 in
        let _11 : (Parsetree.attributes) = Obj.magic _11 in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__7_ in
        let _v : ((string Location.loc * Asttypes.mutable_flag * Parsetree.class_field_kind) *
  Parsetree.attributes) = let _4 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 3073 "parser_raw.mly"
           ( _1 )
# 49657 "parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 49668 "parser_raw.ml"
          
        in
        let _startpos__4_ = _startpos__100_ in
        let _2 =
          let _1 = _11 in
          
# 3372 "parser_raw.mly"
    ( _1 )
# 49677 "parser_raw.ml"
          
        in
        let _endpos__2_ = _endpos__11_ in
        let _startpos__2_ = _startpos__11_ in
        let _1 =
          let _1 = _10 in
          
# 3280 "parser_raw.mly"
         ( Override )
# 49687 "parser_raw.ml"
          
        in
        let _endpos__1_ = _endpos__10_ in
        let _startpos__1_ = _startpos__10_ in
        let _endpos = _endpos__7_ in
        let _symbolstartpos = if _startpos__1_ != _endpos__1_ then
          _startpos__1_
        else
          if _startpos__2_ != _endpos__2_ then
            _startpos__2_
          else
            if _startpos__3_ != _endpos__3_ then
              _startpos__3_
            else
              _startpos__4_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1606 "parser_raw.mly"
      ( let e = mkexp_constraint ~loc:_sloc _7 _5 in
        (_4, _3, Cfk_concrete (_1, e)), _2
      )
# 49709 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _12;
          MenhirLib.EngineTypes.startp = _startpos__12_;
          MenhirLib.EngineTypes.endp = _endpos__12_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ty;
            MenhirLib.EngineTypes.startp = _startpos_ty_;
            MenhirLib.EngineTypes.endp = _endpos_ty_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _11;
                MenhirLib.EngineTypes.startp = _startpos__11_;
                MenhirLib.EngineTypes.endp = _endpos__11_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _10;
                  MenhirLib.EngineTypes.startp = _startpos__10_;
                  MenhirLib.EngineTypes.endp = _endpos__10_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = ext;
                    MenhirLib.EngineTypes.startp = _startpos_ext_;
                    MenhirLib.EngineTypes.endp = _endpos_ext_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _12 : (Parsetree.attributes) = Obj.magic _12 in
        let ty : (Parsetree.core_type) = Obj.magic ty in
        let _5 : unit = Obj.magic _5 in
        let _11 : (string) = Obj.magic _11 in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__12_ in
        let _v : (Parsetree.value_description * string Location.loc option) = let attrs2 =
          let _1 = _12 in
          
# 3368 "parser_raw.mly"
    ( _1 )
# 49772 "parser_raw.ml"
          
        in
        let _endpos_attrs2_ = _endpos__12_ in
        let id =
          let _endpos__1_ = _endpos__11_ in
          let _startpos__1_ = _startpos__11_ in
          let _1 = _11 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 49786 "parser_raw.ml"
          
        in
        let attrs1 =
          let _1 = _10 in
          
# 3372 "parser_raw.mly"
    ( _1 )
# 49794 "parser_raw.ml"
          
        in
        let _endpos = _endpos_attrs2_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2506 "parser_raw.mly"
    ( let attrs = attrs1 @ attrs2 in
      let loc = make_loc _sloc in
      let docs = symbol_docs _sloc in
      Val.mk id ty ~attrs ~loc ~docs,
      ext )
# 49807 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Asttypes.virtual_flag) = 
# 3241 "parser_raw.mly"
                                                ( Concrete )
# 49825 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.virtual_flag) = 
# 3242 "parser_raw.mly"
            ( Virtual )
# 49850 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.mutable_flag) = 
# 3264 "parser_raw.mly"
            ( Immutable )
# 49875 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.mutable_flag) = 
# 3265 "parser_raw.mly"
                    ( Mutable )
# 49906 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.mutable_flag) = 
# 3266 "parser_raw.mly"
                    ( Mutable )
# 49937 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.private_flag) = 
# 3271 "parser_raw.mly"
            ( Public )
# 49962 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.private_flag) = 
# 3272 "parser_raw.mly"
                    ( Private )
# 49993 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.private_flag) = 
# 3273 "parser_raw.mly"
                    ( Private )
# 50024 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs000;
          MenhirLib.EngineTypes.startp = _startpos_xs000_;
          MenhirLib.EngineTypes.endp = _endpos_xs000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _11;
            MenhirLib.EngineTypes.startp = _startpos__11_;
            MenhirLib.EngineTypes.endp = _endpos__11_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _10;
                MenhirLib.EngineTypes.startp = _startpos__10_;
                MenhirLib.EngineTypes.endp = _endpos__10_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let xs000 : ((Parsetree.core_type * Parsetree.core_type * Warnings.loc) list) = Obj.magic xs000 in
        let _11 : (Parsetree.core_type) = Obj.magic _11 in
        let _4 : (Asttypes.private_flag) = Obj.magic _4 in
        let _10 : (Longident.t) = Obj.magic _10 in
        let _2 : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs000_ in
        let _v : (Parsetree.with_constraint) = let _6 =
          let xs00 = xs000 in
          let _1 =
            let xs0 = xs00 in
            let xs =
              let xs = xs0 in
              
# 253 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
    ( List.rev xs )
# 50085 "parser_raw.ml"
              
            in
            
# 761 "parser_raw.mly"
    ( xs )
# 50091 "parser_raw.ml"
            
          in
          
# 2595 "parser_raw.mly"
    ( _1 )
# 50097 "parser_raw.ml"
          
        in
        let _endpos__6_ = _endpos_xs000_ in
        let _5 =
          let _1 = _11 in
          
# 2877 "parser_raw.mly"
    ( _1 )
# 50106 "parser_raw.ml"
          
        in
        let _3 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 50119 "parser_raw.ml"
          
        in
        let _endpos = _endpos__6_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2809 "parser_raw.mly"
      ( let lident = loc_last _3 in
        Pwith_type
          (_3,
           (Type.mk lident
              ~params:_2
              ~cstrs:_6
              ~manifest:_5
              ~priv:_4
              ~loc:(make_loc _sloc))) )
# 50136 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _11;
          MenhirLib.EngineTypes.startp = _startpos__11_;
          MenhirLib.EngineTypes.endp = _endpos__11_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _10;
              MenhirLib.EngineTypes.startp = _startpos__10_;
              MenhirLib.EngineTypes.endp = _endpos__10_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _11 : (Parsetree.core_type) = Obj.magic _11 in
        let _4 : unit = Obj.magic _4 in
        let _10 : (Longident.t) = Obj.magic _10 in
        let _2 : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__11_ in
        let _v : (Parsetree.with_constraint) = let _5 =
          let _1 = _11 in
          
# 2877 "parser_raw.mly"
    ( _1 )
# 50187 "parser_raw.ml"
          
        in
        let _endpos__5_ = _endpos__11_ in
        let _3 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 50201 "parser_raw.ml"
          
        in
        let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2820 "parser_raw.mly"
      ( let lident = loc_last _3 in
        Pwith_typesubst
         (_3,
           (Type.mk lident
              ~params:_2
              ~manifest:_5
              ~loc:(make_loc _sloc))) )
# 50216 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _11;
          MenhirLib.EngineTypes.startp = _startpos__11_;
          MenhirLib.EngineTypes.endp = _endpos__11_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _10;
              MenhirLib.EngineTypes.startp = _startpos__10_;
              MenhirLib.EngineTypes.endp = _endpos__10_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _11 : (Longident.t) = Obj.magic _11 in
        let _3 : unit = Obj.magic _3 in
        let _10 : (Longident.t) = Obj.magic _10 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__11_ in
        let _v : (Parsetree.with_constraint) = let _4 =
          let _endpos__1_ = _endpos__11_ in
          let _startpos__1_ = _startpos__11_ in
          let _1 = _11 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 50266 "parser_raw.ml"
          
        in
        let _2 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 50279 "parser_raw.ml"
          
        in
        
# 2828 "parser_raw.mly"
      ( Pwith_module (_2, _4) )
# 50285 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _11;
          MenhirLib.EngineTypes.startp = _startpos__11_;
          MenhirLib.EngineTypes.endp = _endpos__11_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _10;
              MenhirLib.EngineTypes.startp = _startpos__10_;
              MenhirLib.EngineTypes.endp = _endpos__10_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _11 : (Longident.t) = Obj.magic _11 in
        let _3 : unit = Obj.magic _3 in
        let _10 : (Longident.t) = Obj.magic _10 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__11_ in
        let _v : (Parsetree.with_constraint) = let _4 =
          let _endpos__1_ = _endpos__11_ in
          let _startpos__1_ = _startpos__11_ in
          let _1 = _11 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 50335 "parser_raw.ml"
          
        in
        let _2 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 693 "parser_raw.mly"
    ( mkrhs _1 _sloc )
# 50348 "parser_raw.ml"
          
        in
        
# 2830 "parser_raw.mly"
      ( Pwith_modsubst (_2, _4) )
# 50354 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.private_flag) = 
# 2833 "parser_raw.mly"
          ( Public )
# 50379 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.private_flag) = 
# 2834 "parser_raw.mly"
                  ( Private )
# 50410 "parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
    |]
  
  and trace =
    None
  
end

module MenhirInterpreter = struct
  
  module ET = MenhirLib.TableInterpreter.MakeEngineTable (Tables)
  
  module TI = MenhirLib.Engine.Make (ET)
  
  include TI
  
  module Symbols = struct
    
    type _ terminal = 
      | T_error : unit terminal
      | T_WITH : unit terminal
      | T_WHILE_LWT : unit terminal
      | T_WHILE : unit terminal
      | T_WHEN : unit terminal
      | T_VIRTUAL : unit terminal
      | T_VAL : unit terminal
      | T_UNDERSCORE : unit terminal
      | T_UIDENT : (
# 610 "parser_raw.mly"
       (string)
# 50448 "parser_raw.ml"
    ) terminal
      | T_TYPE : unit terminal
      | T_TRY_LWT : unit terminal
      | T_TRY : unit terminal
      | T_TRUE : unit terminal
      | T_TO : unit terminal
      | T_TILDE : unit terminal
      | T_THEN : unit terminal
      | T_STRUCT : unit terminal
      | T_STRING : (
# 602 "parser_raw.mly"
       (string * string option)
# 50461 "parser_raw.ml"
    ) terminal
      | T_STAR : unit terminal
      | T_SIG : unit terminal
      | T_SEMISEMI : unit terminal
      | T_SEMI : unit terminal
      | T_RPAREN : unit terminal
      | T_REC : unit terminal
      | T_RBRACKET : unit terminal
      | T_RBRACE : unit terminal
      | T_QUOTE : unit terminal
      | T_QUESTIONQUESTION : unit terminal
      | T_QUESTION : unit terminal
      | T_PRIVATE : unit terminal
      | T_PREFIXOP : (
# 587 "parser_raw.mly"
       (string)
# 50478 "parser_raw.ml"
    ) terminal
      | T_PLUSEQ : unit terminal
      | T_PLUSDOT : unit terminal
      | T_PLUS : unit terminal
      | T_PERCENT : unit terminal
      | T_OR : unit terminal
      | T_OPTLABEL : (
# 581 "parser_raw.mly"
       (string)
# 50488 "parser_raw.ml"
    ) terminal
      | T_OPEN : unit terminal
      | T_OF : unit terminal
      | T_OBJECT : unit terminal
      | T_NONREC : unit terminal
      | T_NEW : unit terminal
      | T_MUTABLE : unit terminal
      | T_MODULE : unit terminal
      | T_MINUSGREATER : unit terminal
      | T_MINUSDOT : unit terminal
      | T_MINUS : unit terminal
      | T_METHOD : unit terminal
      | T_MATCH_LWT : unit terminal
      | T_MATCH : unit terminal
      | T_LPAREN : unit terminal
      | T_LIDENT : (
# 564 "parser_raw.mly"
       (string)
# 50507 "parser_raw.ml"
    ) terminal
      | T_LET_LWT : unit terminal
      | T_LETOP : (
# 545 "parser_raw.mly"
       (string)
# 50513 "parser_raw.ml"
    ) terminal
      | T_LET : unit terminal
      | T_LESSMINUS : unit terminal
      | T_LESS : unit terminal
      | T_LBRACKETPERCENTPERCENT : unit terminal
      | T_LBRACKETPERCENT : unit terminal
      | T_LBRACKETLESS : unit terminal
      | T_LBRACKETGREATER : unit terminal
      | T_LBRACKETBAR : unit terminal
      | T_LBRACKETATATAT : unit terminal
      | T_LBRACKETATAT : unit terminal
      | T_LBRACKETAT : unit terminal
      | T_LBRACKET : unit terminal
      | T_LBRACELESS : unit terminal
      | T_LBRACE : unit terminal
      | T_LAZY : unit terminal
      | T_LABEL : (
# 551 "parser_raw.mly"
       (string)
# 50533 "parser_raw.ml"
    ) terminal
      | T_INT : (
# 549 "parser_raw.mly"
       (string * char option)
# 50538 "parser_raw.ml"
    ) terminal
      | T_INITIALIZER : unit terminal
      | T_INHERIT : unit terminal
      | T_INFIXOP4 : (
# 543 "parser_raw.mly"
       (string)
# 50545 "parser_raw.ml"
    ) terminal
      | T_INFIXOP3 : (
# 542 "parser_raw.mly"
       (string)
# 50550 "parser_raw.ml"
    ) terminal
      | T_INFIXOP2 : (
# 541 "parser_raw.mly"
       (string)
# 50555 "parser_raw.ml"
    ) terminal
      | T_INFIXOP1 : (
# 540 "parser_raw.mly"
       (string)
# 50560 "parser_raw.ml"
    ) terminal
      | T_INFIXOP0 : (
# 539 "parser_raw.mly"
       (string)
# 50565 "parser_raw.ml"
    ) terminal
      | T_INCLUDE : unit terminal
      | T_IN : unit terminal
      | T_IF : unit terminal
      | T_HASHOP : (
# 599 "parser_raw.mly"
       (string)
# 50573 "parser_raw.ml"
    ) terminal
      | T_HASH : unit terminal
      | T_GREATERRBRACKET : unit terminal
      | T_GREATERRBRACE : unit terminal
      | T_GREATERDOT : unit terminal
      | T_GREATER : unit terminal
      | T_FUNCTOR : unit terminal
      | T_FUNCTION : unit terminal
      | T_FUN : unit terminal
      | T_FOR_LWT : unit terminal
      | T_FOR : unit terminal
      | T_FLOAT : (
# 527 "parser_raw.mly"
       (string * char option)
# 50588 "parser_raw.ml"
    ) terminal
      | T_FINALLY_LWT : unit terminal
      | T_FALSE : unit terminal
      | T_EXTERNAL : unit terminal
      | T_EXCEPTION : unit terminal
      | T_EQUAL : unit terminal
      | T_EOL : unit terminal
      | T_EOF : unit terminal
      | T_END : unit terminal
      | T_ELSE : unit terminal
      | T_DOWNTO : unit terminal
      | T_DOTTILDE : unit terminal
      | T_DOTOP : (
# 544 "parser_raw.mly"
       (string)
# 50604 "parser_raw.ml"
    ) terminal
      | T_DOTLESS : unit terminal
      | T_DOTDOT : unit terminal
      | T_DOT : unit terminal
      | T_DONE : unit terminal
      | T_DOCSTRING : (
# 618 "parser_raw.mly"
       (Docstrings.docstring)
# 50613 "parser_raw.ml"
    ) terminal
      | T_DO : unit terminal
      | T_CONSTRAINT : unit terminal
      | T_COMMENT : (
# 617 "parser_raw.mly"
       (string * Location.t)
# 50620 "parser_raw.ml"
    ) terminal
      | T_COMMA : unit terminal
      | T_COLONGREATER : unit terminal
      | T_COLONEQUAL : unit terminal
      | T_COLONCOLON : unit terminal
      | T_COLON : unit terminal
      | T_CLASS : unit terminal
      | T_CHAR : (
# 507 "parser_raw.mly"
       (char)
# 50631 "parser_raw.ml"
    ) terminal
      | T_BEGIN : unit terminal
      | T_BARRBRACKET : unit terminal
      | T_BARBAR : unit terminal
      | T_BAR : unit terminal
      | T_BANG : unit terminal
      | T_BACKQUOTE : unit terminal
      | T_ASSERT : unit terminal
      | T_AS : unit terminal
      | T_ANDOP : (
# 546 "parser_raw.mly"
       (string)
# 50644 "parser_raw.ml"
    ) terminal
      | T_AND : unit terminal
      | T_AMPERSAND : unit terminal
      | T_AMPERAMPER : unit terminal
    
    type _ nonterminal = 
      | N_with_type_binder : (Asttypes.private_flag) nonterminal
      | N_with_constraint : (Parsetree.with_constraint) nonterminal
      | N_virtual_with_private_flag : (Asttypes.private_flag) nonterminal
      | N_virtual_with_mutable_flag : (Asttypes.mutable_flag) nonterminal
      | N_virtual_flag : (Asttypes.virtual_flag) nonterminal
      | N_value_description : (Parsetree.value_description * string Location.loc option) nonterminal
      | N_value : ((string Location.loc * Asttypes.mutable_flag * Parsetree.class_field_kind) *
  Parsetree.attributes) nonterminal
      | N_val_longident : (Longident.t) nonterminal
      | N_val_ident : (string) nonterminal
      | N_use_file : (
# 677 "parser_raw.mly"
      (Parsetree.toplevel_phrase list)
# 50664 "parser_raw.ml"
    ) nonterminal
      | N_type_variance : (Asttypes.variance) nonterminal
      | N_type_variable : (Parsetree.core_type) nonterminal
      | N_type_parameters : ((Parsetree.core_type * Asttypes.variance) list) nonterminal
      | N_type_parameter : (Parsetree.core_type * Asttypes.variance) nonterminal
      | N_type_longident : (Longident.t) nonterminal
      | N_type_kind : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) nonterminal
      | N_type_constraint : (Parsetree.core_type option * Parsetree.core_type option) nonterminal
      | N_tuple_type : (Parsetree.core_type) nonterminal
      | N_toplevel_phrase : (
# 675 "parser_raw.mly"
      (Parsetree.toplevel_phrase)
# 50677 "parser_raw.ml"
    ) nonterminal
      | N_toplevel_directive : (Parsetree.toplevel_phrase) nonterminal
      | N_tag_field : (Parsetree.row_field) nonterminal
      | N_subtractive : (string) nonterminal
      | N_structure_item : (Parsetree.structure_item) nonterminal
      | N_structure : (Parsetree.structure) nonterminal
      | N_strict_binding : (Parsetree.expression) nonterminal
      | N_str_exception_declaration : (Parsetree.type_exception * string Location.loc option) nonterminal
      | N_single_attr_id : (string) nonterminal
      | N_simple_pattern_not_ident : (Parsetree.pattern) nonterminal
      | N_simple_pattern : (Parsetree.pattern) nonterminal
      | N_simple_expr : (Parsetree.expression) nonterminal
      | N_simple_delimited_pattern : (Parsetree.pattern) nonterminal
      | N_signed_constant : (Parsetree.constant) nonterminal
      | N_signature_item : (Parsetree.signature_item) nonterminal
      | N_signature : (Parsetree.signature) nonterminal
      | N_sig_exception_declaration : (Parsetree.type_exception * string Location.loc option) nonterminal
      | N_seq_expr : (Parsetree.expression) nonterminal
      | N_separated_or_terminated_nonempty_list_SEMI_record_expr_field_ : ((Longident.t Location.loc * Parsetree.expression) list) nonterminal
      | N_separated_or_terminated_nonempty_list_SEMI_pattern_ : (Parsetree.pattern list) nonterminal
      | N_separated_or_terminated_nonempty_list_SEMI_object_expr_field_ : ((string Location.loc * Parsetree.expression) list) nonterminal
      | N_separated_or_terminated_nonempty_list_SEMI_expr_ : (Parsetree.expression list) nonterminal
      | N_row_field : (Parsetree.row_field) nonterminal
      | N_reversed_separated_nontrivial_llist_STAR_atomic_type_ : (Parsetree.core_type list) nonterminal
      | N_reversed_separated_nontrivial_llist_COMMA_expr_ : (Parsetree.expression list) nonterminal
      | N_reversed_separated_nontrivial_llist_COMMA_core_type_ : (Parsetree.core_type list) nonterminal
      | N_reversed_separated_nonempty_llist_STAR_atomic_type_ : (Parsetree.core_type list) nonterminal
      | N_reversed_separated_nonempty_llist_COMMA_type_parameter_ : ((Parsetree.core_type * Asttypes.variance) list) nonterminal
      | N_reversed_separated_nonempty_llist_COMMA_core_type_ : (Parsetree.core_type list) nonterminal
      | N_reversed_separated_nonempty_llist_BAR_row_field_ : (Parsetree.row_field list) nonterminal
      | N_reversed_separated_nonempty_llist_AND_with_constraint_ : (Parsetree.with_constraint list) nonterminal
      | N_reversed_separated_nonempty_llist_AMPERSAND_core_type_no_attr_ : (Parsetree.core_type list) nonterminal
      | N_reversed_preceded_or_separated_nonempty_llist_BAR_match_case_ : (Parsetree.case list) nonterminal
      | N_reversed_nonempty_llist_typevar_ : (string Location.loc list) nonterminal
      | N_reversed_nonempty_llist_name_tag_ : (string list) nonterminal
      | N_reversed_nonempty_llist_labeled_simple_expr_ : ((Asttypes.arg_label * Parsetree.expression) list) nonterminal
      | N_reversed_nonempty_llist_functor_arg_ : ((string Location.loc * Parsetree.module_type option) list) nonterminal
      | N_reversed_llist_preceded_CONSTRAINT_constrain__ : ((Parsetree.core_type * Parsetree.core_type * Warnings.loc) list) nonterminal
      | N_reversed_bar_llist_extension_constructor_declaration_ : (Parsetree.extension_constructor list) nonterminal
      | N_reversed_bar_llist_extension_constructor_ : (Parsetree.extension_constructor list) nonterminal
      | N_reversed_bar_llist_constructor_declaration_ : (Parsetree.constructor_declaration list) nonterminal
      | N_record_expr_content : (Parsetree.expression option *
  (Longident.t Location.loc * Parsetree.expression) list) nonterminal
      | N_rec_flag : (Asttypes.rec_flag) nonterminal
      | N_private_virtual_flags : (Asttypes.private_flag * Asttypes.virtual_flag) nonterminal
      | N_private_flag : (Asttypes.private_flag) nonterminal
      | N_primitive_declaration : (Parsetree.value_description * string Location.loc option) nonterminal
      | N_post_item_attribute : (Parsetree.attribute) nonterminal
      | N_possibly_poly_core_type_no_attr_ : (Parsetree.core_type) nonterminal
      | N_possibly_poly_core_type_ : (Parsetree.core_type) nonterminal
      | N_payload : (Parsetree.payload) nonterminal
      | N_pattern_var : (Parsetree.pattern) nonterminal
      | N_pattern_no_exn : (Parsetree.pattern) nonterminal
      | N_pattern_gen : (Parsetree.pattern) nonterminal
      | N_pattern_comma_list_pattern_no_exn_ : (Parsetree.pattern list) nonterminal
      | N_pattern_comma_list_pattern_ : (Parsetree.pattern list) nonterminal
      | N_pattern : (Parsetree.pattern) nonterminal
      | N_parse_pattern : (
# 683 "parser_raw.mly"
      (Parsetree.pattern)
# 50738 "parser_raw.ml"
    ) nonterminal
      | N_parse_expression : (
# 681 "parser_raw.mly"
      (Parsetree.expression)
# 50743 "parser_raw.ml"
    ) nonterminal
      | N_parse_core_type : (
# 679 "parser_raw.mly"
      (Parsetree.core_type)
# 50748 "parser_raw.ml"
    ) nonterminal
      | N_paren_module_expr : (Parsetree.module_expr) nonterminal
      | N_optlabel : (string) nonterminal
      | N_option_type_constraint_ : ((Parsetree.core_type option * Parsetree.core_type option) option) nonterminal
      | N_option_preceded_EQUAL_seq_expr__ : (Parsetree.expression option) nonterminal
      | N_option_preceded_EQUAL_pattern__ : (Parsetree.pattern option) nonterminal
      | N_option_preceded_EQUAL_module_type__ : (Parsetree.module_type option) nonterminal
      | N_option_preceded_EQUAL_expr__ : (Parsetree.expression option) nonterminal
      | N_option_preceded_COLON_core_type__ : (Parsetree.core_type option) nonterminal
      | N_option_preceded_AS_mkrhs_LIDENT___ : (string Location.loc option) nonterminal
      | N_option_SEMI_ : (unit option) nonterminal
      | N_option_BAR_ : (unit option) nonterminal
      | N_opt_ampersand : (bool) nonterminal
      | N_operator : (string) nonterminal
      | N_open_description : (Parsetree.open_description * string Location.loc option) nonterminal
      | N_open_declaration : (Parsetree.open_declaration * string Location.loc option) nonterminal
      | N_nonempty_type_kind : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) nonterminal
      | N_nonempty_list_raw_string_ : (string list) nonterminal
      | N_nonempty_list_mkrhs_LIDENT__ : (string Location.loc list) nonterminal
      | N_name_tag : (string) nonterminal
      | N_mutable_virtual_flags : (Asttypes.mutable_flag * Asttypes.virtual_flag) nonterminal
      | N_mutable_flag : (Asttypes.mutable_flag) nonterminal
      | N_mty_longident : (Longident.t) nonterminal
      | N_module_type_declaration : (Parsetree.module_type_declaration * string Location.loc option) nonterminal
      | N_module_type : (Parsetree.module_type) nonterminal
      | N_module_subst : (Parsetree.module_substitution * string Location.loc option) nonterminal
      | N_module_expr : (Parsetree.module_expr) nonterminal
      | N_module_declaration_body : (Parsetree.module_type) nonterminal
      | N_module_binding_body : (Parsetree.module_expr) nonterminal
      | N_mod_longident : (Longident.t) nonterminal
      | N_mod_ext_longident : (Longident.t) nonterminal
      | N_method_ : ((string Location.loc * Asttypes.private_flag * Parsetree.class_field_kind) *
  Parsetree.attributes) nonterminal
      | N_meth_list : (Parsetree.object_field list * Asttypes.closed_flag) nonterminal
      | N_match_cases : (Parsetree.case list) nonterminal
      | N_match_case : (Parsetree.case) nonterminal
      | N_lwt_bindings : (Ast_helper.let_bindings) nonterminal
      | N_lwt_binding : (Ast_helper.let_bindings) nonterminal
      | N_listx_SEMI_record_pat_field_UNDERSCORE_ : ((Longident.t Location.loc * Parsetree.pattern) list * unit option) nonterminal
      | N_list_use_file_element_ : (Parsetree.toplevel_phrase list list) nonterminal
      | N_list_text_str_structure_item__ : (Parsetree.structure_item list list) nonterminal
      | N_list_text_cstr_class_field__ : (Parsetree.class_field list list) nonterminal
      | N_list_text_csig_class_sig_field__ : (Parsetree.class_type_field list list) nonterminal
      | N_list_structure_element_ : (Parsetree.structure_item list list) nonterminal
      | N_list_signature_element_ : (Parsetree.signature_item list list) nonterminal
      | N_list_post_item_attribute_ : (Parsetree.attributes) nonterminal
      | N_list_generic_and_type_declaration_type_subst_kind__ : (Parsetree.type_declaration list) nonterminal
      | N_list_generic_and_type_declaration_type_kind__ : (Parsetree.type_declaration list) nonterminal
      | N_list_attribute_ : (Parsetree.attributes) nonterminal
      | N_list_and_module_declaration_ : (Parsetree.module_declaration list) nonterminal
      | N_list_and_module_binding_ : (Parsetree.module_binding list) nonterminal
      | N_list_and_class_type_declaration_ : (Parsetree.class_type_declaration list) nonterminal
      | N_list_and_class_description_ : (Parsetree.class_description list) nonterminal
      | N_list_and_class_declaration_ : (Parsetree.class_declaration list) nonterminal
      | N_letop_bindings : (Parsetree.pattern * Parsetree.expression * Parsetree.binding_op list) nonterminal
      | N_letop_binding_body : (Parsetree.pattern * Parsetree.expression) nonterminal
      | N_let_pattern : (Parsetree.pattern) nonterminal
      | N_let_bindings_no_ext_ : (Ast_helper.let_bindings) nonterminal
      | N_let_bindings_ext_ : (Ast_helper.let_bindings) nonterminal
      | N_let_binding_body : (Parsetree.pattern * Parsetree.expression) nonterminal
      | N_labeled_simple_pattern : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) nonterminal
      | N_labeled_simple_expr : (Asttypes.arg_label * Parsetree.expression) nonterminal
      | N_label_longident : (Longident.t) nonterminal
      | N_label_let_pattern : (string * Parsetree.pattern) nonterminal
      | N_label_declarations : (Parsetree.label_declaration list) nonterminal
      | N_label_declaration_semi : (Parsetree.label_declaration) nonterminal
      | N_label_declaration : (Parsetree.label_declaration) nonterminal
      | N_item_extension : (Parsetree.extension) nonterminal
      | N_interface : (
# 673 "parser_raw.mly"
      (Parsetree.signature)
# 50820 "parser_raw.ml"
    ) nonterminal
      | N_implementation : (
# 671 "parser_raw.mly"
      (Parsetree.structure)
# 50825 "parser_raw.ml"
    ) nonterminal
      | N_ident : (string) nonterminal
      | N_generic_type_declaration_nonrec_flag_type_kind_ : ((Asttypes.rec_flag * string Location.loc option) *
  Parsetree.type_declaration) nonterminal
      | N_generic_type_declaration_no_nonrec_flag_type_subst_kind_ : ((Asttypes.rec_flag * string Location.loc option) *
  Parsetree.type_declaration) nonterminal
      | N_generic_constructor_declaration_epsilon_ : (Ast_helper.str * Parsetree.constructor_arguments *
  Parsetree.core_type option * Parsetree.attributes * Warnings.loc *
  Docstrings.info) nonterminal
      | N_generic_constructor_declaration_BAR_ : (Ast_helper.str * Parsetree.constructor_arguments *
  Parsetree.core_type option * Parsetree.attributes * Warnings.loc *
  Docstrings.info) nonterminal
      | N_generalized_constructor_arguments : (Parsetree.constructor_arguments * Parsetree.core_type option) nonterminal
      | N_functor_args : ((string Location.loc * Parsetree.module_type option) list) nonterminal
      | N_functor_arg_name : (string) nonterminal
      | N_functor_arg : (string Location.loc * Parsetree.module_type option) nonterminal
      | N_function_type : (Parsetree.core_type) nonterminal
      | N_fun_def : (Parsetree.expression) nonterminal
      | N_fun_binding : (Parsetree.expression) nonterminal
      | N_formal_class_parameters : ((Parsetree.core_type * Asttypes.variance) list) nonterminal
      | N_floating_attribute : (Parsetree.attribute) nonterminal
      | N_extension_constructor_rebind_epsilon_ : (Parsetree.extension_constructor) nonterminal
      | N_extension_constructor_rebind_BAR_ : (Parsetree.extension_constructor) nonterminal
      | N_extension : (Parsetree.extension) nonterminal
      | N_ext : (string Location.loc option) nonterminal
      | N_expr : (Parsetree.expression) nonterminal
      | N_direction_flag : (Asttypes.direction_flag) nonterminal
      | N_core_type : (Parsetree.core_type) nonterminal
      | N_constructor_declarations : (Parsetree.constructor_declaration list) nonterminal
      | N_constructor_arguments : (Parsetree.constructor_arguments) nonterminal
      | N_constrain_field : (Parsetree.core_type * Parsetree.core_type) nonterminal
      | N_constr_longident : (Longident.t) nonterminal
      | N_constr_ident : (string) nonterminal
      | N_constant : (Parsetree.constant) nonterminal
      | N_clty_longident : (Longident.t) nonterminal
      | N_class_type_declarations : (string Location.loc option * Parsetree.class_type_declaration list) nonterminal
      | N_class_type : (Parsetree.class_type) nonterminal
      | N_class_simple_expr : (Parsetree.class_expr) nonterminal
      | N_class_signature : (Parsetree.class_type) nonterminal
      | N_class_sig_field : (Parsetree.class_type_field) nonterminal
      | N_class_self_type : (Parsetree.core_type) nonterminal
      | N_class_self_pattern : (Parsetree.pattern) nonterminal
      | N_class_longident : (Longident.t) nonterminal
      | N_class_fun_def : (Parsetree.class_expr) nonterminal
      | N_class_fun_binding : (Parsetree.class_expr) nonterminal
      | N_class_field : (Parsetree.class_field) nonterminal
      | N_class_expr : (Parsetree.class_expr) nonterminal
      | N_attribute : (Parsetree.attribute) nonterminal
      | N_attr_id : (string Location.loc) nonterminal
      | N_atomic_type : (Parsetree.core_type) nonterminal
      | N_and_let_binding : (Ast_helper.let_binding) nonterminal
      | N_alias_type : (Parsetree.core_type) nonterminal
      | N_additive : (string) nonterminal
    
  end
  
  include Symbols
  
  include MenhirLib.InspectionTableInterpreter.Make (Tables) (struct
    
    include TI
    
    include Symbols
    
    include MenhirLib.InspectionTableInterpreter.Symbols (Symbols)
    
    let terminal =
      fun t ->
        match t with
        | 0 ->
            X (T T_error)
        | 1 ->
            X (T T_WITH)
        | 2 ->
            X (T T_WHILE_LWT)
        | 3 ->
            X (T T_WHILE)
        | 4 ->
            X (T T_WHEN)
        | 5 ->
            X (T T_VIRTUAL)
        | 6 ->
            X (T T_VAL)
        | 7 ->
            X (T T_UNDERSCORE)
        | 8 ->
            X (T T_UIDENT)
        | 9 ->
            X (T T_TYPE)
        | 10 ->
            X (T T_TRY_LWT)
        | 11 ->
            X (T T_TRY)
        | 12 ->
            X (T T_TRUE)
        | 13 ->
            X (T T_TO)
        | 14 ->
            X (T T_TILDE)
        | 15 ->
            X (T T_THEN)
        | 16 ->
            X (T T_STRUCT)
        | 17 ->
            X (T T_STRING)
        | 18 ->
            X (T T_STAR)
        | 19 ->
            X (T T_SIG)
        | 20 ->
            X (T T_SEMISEMI)
        | 21 ->
            X (T T_SEMI)
        | 22 ->
            X (T T_RPAREN)
        | 23 ->
            X (T T_REC)
        | 24 ->
            X (T T_RBRACKET)
        | 25 ->
            X (T T_RBRACE)
        | 26 ->
            X (T T_QUOTE)
        | 27 ->
            X (T T_QUESTIONQUESTION)
        | 28 ->
            X (T T_QUESTION)
        | 29 ->
            X (T T_PRIVATE)
        | 30 ->
            X (T T_PREFIXOP)
        | 31 ->
            X (T T_PLUSEQ)
        | 32 ->
            X (T T_PLUSDOT)
        | 33 ->
            X (T T_PLUS)
        | 34 ->
            X (T T_PERCENT)
        | 35 ->
            X (T T_OR)
        | 36 ->
            X (T T_OPTLABEL)
        | 37 ->
            X (T T_OPEN)
        | 38 ->
            X (T T_OF)
        | 39 ->
            X (T T_OBJECT)
        | 40 ->
            X (T T_NONREC)
        | 41 ->
            X (T T_NEW)
        | 42 ->
            X (T T_MUTABLE)
        | 43 ->
            X (T T_MODULE)
        | 44 ->
            X (T T_MINUSGREATER)
        | 45 ->
            X (T T_MINUSDOT)
        | 46 ->
            X (T T_MINUS)
        | 47 ->
            X (T T_METHOD)
        | 48 ->
            X (T T_MATCH_LWT)
        | 49 ->
            X (T T_MATCH)
        | 50 ->
            X (T T_LPAREN)
        | 51 ->
            X (T T_LIDENT)
        | 52 ->
            X (T T_LET_LWT)
        | 53 ->
            X (T T_LETOP)
        | 54 ->
            X (T T_LET)
        | 55 ->
            X (T T_LESSMINUS)
        | 56 ->
            X (T T_LESS)
        | 57 ->
            X (T T_LBRACKETPERCENTPERCENT)
        | 58 ->
            X (T T_LBRACKETPERCENT)
        | 59 ->
            X (T T_LBRACKETLESS)
        | 60 ->
            X (T T_LBRACKETGREATER)
        | 61 ->
            X (T T_LBRACKETBAR)
        | 62 ->
            X (T T_LBRACKETATATAT)
        | 63 ->
            X (T T_LBRACKETATAT)
        | 64 ->
            X (T T_LBRACKETAT)
        | 65 ->
            X (T T_LBRACKET)
        | 66 ->
            X (T T_LBRACELESS)
        | 67 ->
            X (T T_LBRACE)
        | 68 ->
            X (T T_LAZY)
        | 69 ->
            X (T T_LABEL)
        | 70 ->
            X (T T_INT)
        | 71 ->
            X (T T_INITIALIZER)
        | 72 ->
            X (T T_INHERIT)
        | 73 ->
            X (T T_INFIXOP4)
        | 74 ->
            X (T T_INFIXOP3)
        | 75 ->
            X (T T_INFIXOP2)
        | 76 ->
            X (T T_INFIXOP1)
        | 77 ->
            X (T T_INFIXOP0)
        | 78 ->
            X (T T_INCLUDE)
        | 79 ->
            X (T T_IN)
        | 80 ->
            X (T T_IF)
        | 81 ->
            X (T T_HASHOP)
        | 82 ->
            X (T T_HASH)
        | 83 ->
            X (T T_GREATERRBRACKET)
        | 84 ->
            X (T T_GREATERRBRACE)
        | 85 ->
            X (T T_GREATERDOT)
        | 86 ->
            X (T T_GREATER)
        | 87 ->
            X (T T_FUNCTOR)
        | 88 ->
            X (T T_FUNCTION)
        | 89 ->
            X (T T_FUN)
        | 90 ->
            X (T T_FOR_LWT)
        | 91 ->
            X (T T_FOR)
        | 92 ->
            X (T T_FLOAT)
        | 93 ->
            X (T T_FINALLY_LWT)
        | 94 ->
            X (T T_FALSE)
        | 95 ->
            X (T T_EXTERNAL)
        | 96 ->
            X (T T_EXCEPTION)
        | 97 ->
            X (T T_EQUAL)
        | 98 ->
            X (T T_EOL)
        | 99 ->
            X (T T_EOF)
        | 100 ->
            X (T T_END)
        | 101 ->
            X (T T_ELSE)
        | 102 ->
            X (T T_DOWNTO)
        | 103 ->
            X (T T_DOTTILDE)
        | 104 ->
            X (T T_DOTOP)
        | 105 ->
            X (T T_DOTLESS)
        | 106 ->
            X (T T_DOTDOT)
        | 107 ->
            X (T T_DOT)
        | 108 ->
            X (T T_DONE)
        | 109 ->
            X (T T_DOCSTRING)
        | 110 ->
            X (T T_DO)
        | 111 ->
            X (T T_CONSTRAINT)
        | 112 ->
            X (T T_COMMENT)
        | 113 ->
            X (T T_COMMA)
        | 114 ->
            X (T T_COLONGREATER)
        | 115 ->
            X (T T_COLONEQUAL)
        | 116 ->
            X (T T_COLONCOLON)
        | 117 ->
            X (T T_COLON)
        | 118 ->
            X (T T_CLASS)
        | 119 ->
            X (T T_CHAR)
        | 120 ->
            X (T T_BEGIN)
        | 121 ->
            X (T T_BARRBRACKET)
        | 122 ->
            X (T T_BARBAR)
        | 123 ->
            X (T T_BAR)
        | 124 ->
            X (T T_BANG)
        | 125 ->
            X (T T_BACKQUOTE)
        | 126 ->
            X (T T_ASSERT)
        | 127 ->
            X (T T_AS)
        | 128 ->
            X (T T_ANDOP)
        | 129 ->
            X (T T_AND)
        | 130 ->
            X (T T_AMPERSAND)
        | 131 ->
            X (T T_AMPERAMPER)
        | _ ->
            assert false
    
    and nonterminal =
      fun nt ->
        match nt with
        | 197 ->
            X (N N_additive)
        | 196 ->
            X (N N_alias_type)
        | 195 ->
            X (N N_and_let_binding)
        | 194 ->
            X (N N_atomic_type)
        | 193 ->
            X (N N_attr_id)
        | 192 ->
            X (N N_attribute)
        | 191 ->
            X (N N_class_expr)
        | 190 ->
            X (N N_class_field)
        | 189 ->
            X (N N_class_fun_binding)
        | 188 ->
            X (N N_class_fun_def)
        | 187 ->
            X (N N_class_longident)
        | 186 ->
            X (N N_class_self_pattern)
        | 185 ->
            X (N N_class_self_type)
        | 184 ->
            X (N N_class_sig_field)
        | 183 ->
            X (N N_class_signature)
        | 182 ->
            X (N N_class_simple_expr)
        | 181 ->
            X (N N_class_type)
        | 180 ->
            X (N N_class_type_declarations)
        | 179 ->
            X (N N_clty_longident)
        | 178 ->
            X (N N_constant)
        | 177 ->
            X (N N_constr_ident)
        | 176 ->
            X (N N_constr_longident)
        | 175 ->
            X (N N_constrain_field)
        | 174 ->
            X (N N_constructor_arguments)
        | 173 ->
            X (N N_constructor_declarations)
        | 172 ->
            X (N N_core_type)
        | 171 ->
            X (N N_direction_flag)
        | 170 ->
            X (N N_expr)
        | 169 ->
            X (N N_ext)
        | 168 ->
            X (N N_extension)
        | 167 ->
            X (N N_extension_constructor_rebind_BAR_)
        | 166 ->
            X (N N_extension_constructor_rebind_epsilon_)
        | 165 ->
            X (N N_floating_attribute)
        | 164 ->
            X (N N_formal_class_parameters)
        | 163 ->
            X (N N_fun_binding)
        | 162 ->
            X (N N_fun_def)
        | 161 ->
            X (N N_function_type)
        | 160 ->
            X (N N_functor_arg)
        | 159 ->
            X (N N_functor_arg_name)
        | 158 ->
            X (N N_functor_args)
        | 157 ->
            X (N N_generalized_constructor_arguments)
        | 156 ->
            X (N N_generic_constructor_declaration_BAR_)
        | 155 ->
            X (N N_generic_constructor_declaration_epsilon_)
        | 154 ->
            X (N N_generic_type_declaration_no_nonrec_flag_type_subst_kind_)
        | 153 ->
            X (N N_generic_type_declaration_nonrec_flag_type_kind_)
        | 152 ->
            X (N N_ident)
        | 151 ->
            X (N N_implementation)
        | 150 ->
            X (N N_interface)
        | 149 ->
            X (N N_item_extension)
        | 148 ->
            X (N N_label_declaration)
        | 147 ->
            X (N N_label_declaration_semi)
        | 146 ->
            X (N N_label_declarations)
        | 145 ->
            X (N N_label_let_pattern)
        | 144 ->
            X (N N_label_longident)
        | 143 ->
            X (N N_labeled_simple_expr)
        | 142 ->
            X (N N_labeled_simple_pattern)
        | 141 ->
            X (N N_let_binding_body)
        | 140 ->
            X (N N_let_bindings_ext_)
        | 139 ->
            X (N N_let_bindings_no_ext_)
        | 138 ->
            X (N N_let_pattern)
        | 137 ->
            X (N N_letop_binding_body)
        | 136 ->
            X (N N_letop_bindings)
        | 135 ->
            X (N N_list_and_class_declaration_)
        | 134 ->
            X (N N_list_and_class_description_)
        | 133 ->
            X (N N_list_and_class_type_declaration_)
        | 132 ->
            X (N N_list_and_module_binding_)
        | 131 ->
            X (N N_list_and_module_declaration_)
        | 130 ->
            X (N N_list_attribute_)
        | 129 ->
            X (N N_list_generic_and_type_declaration_type_kind__)
        | 128 ->
            X (N N_list_generic_and_type_declaration_type_subst_kind__)
        | 127 ->
            X (N N_list_post_item_attribute_)
        | 126 ->
            X (N N_list_signature_element_)
        | 125 ->
            X (N N_list_structure_element_)
        | 124 ->
            X (N N_list_text_csig_class_sig_field__)
        | 123 ->
            X (N N_list_text_cstr_class_field__)
        | 122 ->
            X (N N_list_text_str_structure_item__)
        | 121 ->
            X (N N_list_use_file_element_)
        | 120 ->
            X (N N_listx_SEMI_record_pat_field_UNDERSCORE_)
        | 119 ->
            X (N N_lwt_binding)
        | 118 ->
            X (N N_lwt_bindings)
        | 117 ->
            X (N N_match_case)
        | 116 ->
            X (N N_match_cases)
        | 115 ->
            X (N N_meth_list)
        | 114 ->
            X (N N_method_)
        | 113 ->
            X (N N_mod_ext_longident)
        | 112 ->
            X (N N_mod_longident)
        | 111 ->
            X (N N_module_binding_body)
        | 110 ->
            X (N N_module_declaration_body)
        | 109 ->
            X (N N_module_expr)
        | 108 ->
            X (N N_module_subst)
        | 107 ->
            X (N N_module_type)
        | 106 ->
            X (N N_module_type_declaration)
        | 105 ->
            X (N N_mty_longident)
        | 104 ->
            X (N N_mutable_flag)
        | 103 ->
            X (N N_mutable_virtual_flags)
        | 102 ->
            X (N N_name_tag)
        | 101 ->
            X (N N_nonempty_list_mkrhs_LIDENT__)
        | 100 ->
            X (N N_nonempty_list_raw_string_)
        | 99 ->
            X (N N_nonempty_type_kind)
        | 98 ->
            X (N N_open_declaration)
        | 97 ->
            X (N N_open_description)
        | 96 ->
            X (N N_operator)
        | 95 ->
            X (N N_opt_ampersand)
        | 94 ->
            X (N N_option_BAR_)
        | 93 ->
            X (N N_option_SEMI_)
        | 92 ->
            X (N N_option_preceded_AS_mkrhs_LIDENT___)
        | 91 ->
            X (N N_option_preceded_COLON_core_type__)
        | 90 ->
            X (N N_option_preceded_EQUAL_expr__)
        | 89 ->
            X (N N_option_preceded_EQUAL_module_type__)
        | 88 ->
            X (N N_option_preceded_EQUAL_pattern__)
        | 87 ->
            X (N N_option_preceded_EQUAL_seq_expr__)
        | 86 ->
            X (N N_option_type_constraint_)
        | 85 ->
            X (N N_optlabel)
        | 84 ->
            X (N N_paren_module_expr)
        | 83 ->
            X (N N_parse_core_type)
        | 82 ->
            X (N N_parse_expression)
        | 81 ->
            X (N N_parse_pattern)
        | 80 ->
            X (N N_pattern)
        | 79 ->
            X (N N_pattern_comma_list_pattern_)
        | 78 ->
            X (N N_pattern_comma_list_pattern_no_exn_)
        | 77 ->
            X (N N_pattern_gen)
        | 76 ->
            X (N N_pattern_no_exn)
        | 75 ->
            X (N N_pattern_var)
        | 74 ->
            X (N N_payload)
        | 73 ->
            X (N N_possibly_poly_core_type_)
        | 72 ->
            X (N N_possibly_poly_core_type_no_attr_)
        | 71 ->
            X (N N_post_item_attribute)
        | 70 ->
            X (N N_primitive_declaration)
        | 69 ->
            X (N N_private_flag)
        | 68 ->
            X (N N_private_virtual_flags)
        | 67 ->
            X (N N_rec_flag)
        | 66 ->
            X (N N_record_expr_content)
        | 65 ->
            X (N N_reversed_bar_llist_constructor_declaration_)
        | 64 ->
            X (N N_reversed_bar_llist_extension_constructor_)
        | 63 ->
            X (N N_reversed_bar_llist_extension_constructor_declaration_)
        | 62 ->
            X (N N_reversed_llist_preceded_CONSTRAINT_constrain__)
        | 61 ->
            X (N N_reversed_nonempty_llist_functor_arg_)
        | 60 ->
            X (N N_reversed_nonempty_llist_labeled_simple_expr_)
        | 59 ->
            X (N N_reversed_nonempty_llist_name_tag_)
        | 58 ->
            X (N N_reversed_nonempty_llist_typevar_)
        | 57 ->
            X (N N_reversed_preceded_or_separated_nonempty_llist_BAR_match_case_)
        | 56 ->
            X (N N_reversed_separated_nonempty_llist_AMPERSAND_core_type_no_attr_)
        | 55 ->
            X (N N_reversed_separated_nonempty_llist_AND_with_constraint_)
        | 54 ->
            X (N N_reversed_separated_nonempty_llist_BAR_row_field_)
        | 53 ->
            X (N N_reversed_separated_nonempty_llist_COMMA_core_type_)
        | 52 ->
            X (N N_reversed_separated_nonempty_llist_COMMA_type_parameter_)
        | 51 ->
            X (N N_reversed_separated_nonempty_llist_STAR_atomic_type_)
        | 50 ->
            X (N N_reversed_separated_nontrivial_llist_COMMA_core_type_)
        | 49 ->
            X (N N_reversed_separated_nontrivial_llist_COMMA_expr_)
        | 48 ->
            X (N N_reversed_separated_nontrivial_llist_STAR_atomic_type_)
        | 47 ->
            X (N N_row_field)
        | 46 ->
            X (N N_separated_or_terminated_nonempty_list_SEMI_expr_)
        | 45 ->
            X (N N_separated_or_terminated_nonempty_list_SEMI_object_expr_field_)
        | 44 ->
            X (N N_separated_or_terminated_nonempty_list_SEMI_pattern_)
        | 43 ->
            X (N N_separated_or_terminated_nonempty_list_SEMI_record_expr_field_)
        | 42 ->
            X (N N_seq_expr)
        | 41 ->
            X (N N_sig_exception_declaration)
        | 40 ->
            X (N N_signature)
        | 39 ->
            X (N N_signature_item)
        | 38 ->
            X (N N_signed_constant)
        | 37 ->
            X (N N_simple_delimited_pattern)
        | 36 ->
            X (N N_simple_expr)
        | 35 ->
            X (N N_simple_pattern)
        | 34 ->
            X (N N_simple_pattern_not_ident)
        | 33 ->
            X (N N_single_attr_id)
        | 32 ->
            X (N N_str_exception_declaration)
        | 31 ->
            X (N N_strict_binding)
        | 30 ->
            X (N N_structure)
        | 29 ->
            X (N N_structure_item)
        | 28 ->
            X (N N_subtractive)
        | 27 ->
            X (N N_tag_field)
        | 26 ->
            X (N N_toplevel_directive)
        | 25 ->
            X (N N_toplevel_phrase)
        | 24 ->
            X (N N_tuple_type)
        | 23 ->
            X (N N_type_constraint)
        | 22 ->
            X (N N_type_kind)
        | 21 ->
            X (N N_type_longident)
        | 20 ->
            X (N N_type_parameter)
        | 19 ->
            X (N N_type_parameters)
        | 18 ->
            X (N N_type_variable)
        | 17 ->
            X (N N_type_variance)
        | 16 ->
            X (N N_use_file)
        | 15 ->
            X (N N_val_ident)
        | 14 ->
            X (N N_val_longident)
        | 13 ->
            X (N N_value)
        | 12 ->
            X (N N_value_description)
        | 11 ->
            X (N N_virtual_flag)
        | 10 ->
            X (N N_virtual_with_mutable_flag)
        | 9 ->
            X (N N_virtual_with_private_flag)
        | 8 ->
            X (N N_with_constraint)
        | 7 ->
            X (N N_with_type_binder)
        | _ ->
            assert false
    
    and lr0_incoming =
      (16, "\000\000\000\006\000F\000\004\000\b\000\n\000\012\000\014\000\018\000\020\000\024\000\026\000\028\000 \000\"\000(\0000\000<\000H\000L\000N\000P\000R\000T\000V\000X\000`\000d\000h\000n\000\138\000\144\000\146\000\158\000\160\000\162\000\176\000\178\000\180\000\184\000\190\000\192\000\194\000\202\000\204\000\206\000\218\000\222\000\224\000\238\000\242\000\254\001\000\001\004\000C\000\216\001\131\001\131\001S\000\130\001\131\000\b\001S\001\005\000\016\000\018\000\022\001S\001\005\000\024\001S\001\005\000\026\000$\000>\000T\001S\001\005\000h\000\225\000\216\000\018\000h\001w\001\129\001\005\000f\000\002\000&\000.\000>\000h\000v\001\131\000\014\001S\001\005\000f\000>\000@\000B\000D\000F\000H\000X\000\002\000\\\000^\000l\000r\000\148\000\150\000\152\000\154\000\156\000\164\000\174\000\196\000\210\000f\000.\000p\000\132\0002\000p\000\136\0004\000p\000\232\000\246\000\250\001\002\001\006\001\b\000\193\000\002\000.\000\031\000\236\000\016\000\018\0006\000\018\000h\0011\000:\000h\000\236\000J\000f\000X\001S\001\005\000\018\000(\001\005\000\020\001S\001\005\000D\000R\000^\000f\000#\000\016\0006\0011\000%\000)\000i\000.\000\228\000)\000'\000h\000\196\000\018\000\026\000<\000f\000.\000h\000\236\000h\000r\000h\000\236\0006\0011\000x\000\248\000\189\000z\0002\000\189\000\132\000\166\001w\000\248\000\252\0011\000+\0001\000Z\000a\000&\000\227\000f\000\002\000\227\000.\000\216\000\018\000\216\000h\001Q\001\133\000\166\001w\000+\000\171\0001\000Z\001C\001\133\000&\001\133\001C\0007\000_\000m\0002\000\248\000_\000\205\000N\001\006\000\191\000q\001\006\001C\001\137\001\000\0006\0011\001\005\001\137\001\005\001Y\001\129\001\137\0007\0002\000_\000\248\000m\0002\000m\0002\000m\0002\000\174\000w\0002\000\205\000\205\000u\0006\0011\000\216\001\137\000\145\001\005\000,\001\005\000\214\000\231\001\133\000,\000\231\001\137\000\174\000\231\000\174\0001\000Z\001C\000\234\000.\000e\000.\000\166\001w\000+\000\228\001Y\001Y\000.\000\228\001Y\000\132\0002\000\136\000V\000\209\000h\000\236\000\145\001\005\000,\001\005\001%\0004\001'\001%\001)\000\190\000\214\000\248\000\018\000f\000\132\001c\000N\000\136\001%\0004\000g\000&\001\133\001]\001\133\000\236\001]\000Z\001\133\001\133\001;\001\005\000\131\000\248\0019\0017\0019\001Y\001[\001c\001;\001\005\000\136\001%\0004\000\214\000\199\001Y\000\196\000<\000\136\001%\0004\000\214\001[\000\136\001%\0004\000\214\001[\001[\000\232\000\199\000}\000\128\001\131\000\020\001S\001\005\000R\000'\000h\000-\000}\000\224\001Y\000\196\001Y\000\143\000\255\000\255\000+\000@\000<\000\139\000\248\001c\000\196\000f\000\234\000.\000\132\0002\000\190\000\225\000\216\000f\000\234\000.\001a\001\005\000\129\000\255\0019\001O\0017\0019\001M\001O\001c\000\196\001a\001\005\000)\000'\000h\000-\000}\000\255\000+\000@\000\139\000\129\000\255\000*\000B\000D\000L\000\250\001S\001\005\000\"\001\005\000P\001S\001\005\000f\000\016\000D\000\142\000\186\000^\000\142\000\186\000f\000D\000X\001S\001\005\000\018\000.\000\236\000X\000\020\000N\001\005\000f\000\014\001\005\000\\\000^\000b\001S\001\005\000d\001S\001\005\000h\000p\000j\001S\001\005\0000\000\135\000|\000\132\000\136\000h\000\225\000\216\000h\000\241\000\002\0004\001!\000\236\001Y\000\183\000\196\000\138\001S\001\005\000\142\000\166\000+\000\186\000\240\000\031\000E\000G\000K\000M\000\214\000M\001e\000\205\000\225\000\216\000f\000\002\000.\000\194\001S\001\005\000G\000\155\000\159\000\228\000\161\000\228\000\002\000\161\000\234\000\002\000\161\000\248\000\002\000\161\001\000\000\002\000\031\001\129\000\205\000\161\001Q\001a\000\161\000\161\000\161\000\002\000.\000\132\0002\000Y\000\002\0002\000\161\000,\000Y\000K\001a\000\161\000\177\000,\000\016\000,\000\187\000\241\000\244\000Y\000\002\000\244\000\031\000\030\000f\000h\000\236\001Y\001#\000.\000h\000:\000f\001#\000\196\000l\000\031\000J\000\016\000f\000\161\000\236\001Y\001\021\000\175\000.\000h\000\151\000f\000\020\000h\000\203\000\203\000.\000\140\000G\000\196\000n\000L\000\250\001S\001\005\000\176\001\005\000f\000\016\000\018\000.\001?\000\236\000f\000\176\001\005\000{\001A\001=\000Z\000\211\000\215\000\004\000\020\000'\001!\000\196\000<\000\232\001\137\000\015\001\137\000}\000X\000\225\000\196\000\227\000\216\000\232\000\227\000\017\000o\001\004\000\017\000Z\000\215\001\129\000\227\000\216\000\018\0011\0011\001Q\001A\000\215\000\002\000.\000\215\000.\001=\000Z\000\169\000\219\000f\000.\000\219\000\002\000.\000\236\000\215\000\002\000.\000\169\001\129\000\225\001Q\000\219\000\160\000|\000\132\000\134\000h\000\196\000\136\000h\000\208\000\212\000\138\001S\001\005\000\242\001S\001\005\000\162\001S\001\005\000\178\001S\001\005\000\248\000\161\000\n\000\180\001S\001\005\000f\000\020\000\203\000.\000Z\000\182\001S\001\005\000\161\000\160\000\184\001S\001\005\000\161\000\196\000\250\000\029\000\031\000I\000\164\000I\000\166\000h\000\210\000f\000\254\001S\001\005\000I\000\216\000f\0009\000I\000\030\000h\000:\000h\000J\000I\000\205\000\225\000\216\000f\000.\000B\000D\000X\001S\001\005\000\219\000\236\000\002\000\215\000.\000\\\000^\000l\000G\000\236\001Y\000\196\000U\000c\000\228\000\205\000I\001Q\001a\001e\000\237\000\160\000U\000\239\001\025\000\160\000U\001U\000&\001U\000@\001U\000B\001U\000D\001U\000F\001U\000H\001U\000\\\001U\000^\001U\000r\001U\000\148\001U\000\150\001U\000\152\001U\000\154\001U\000\156\001U\000\174\001U\000\196\001U\000\228\001U\000\232\001U\000\234\001U\000\246\001U\001\006\001U\001\b\001U\001\129\001a\000I\001\139\001U\000,\000F\001\131\000U\000U\001\004\001\005\000E\000\236\001Y\000\196\000U\000\153\000\196\000U\000\228\000\002\000\161\000\234\000\002\000\161\000\248\000\002\000\161\001\000\000\002\000\031\001\129\000\155\000\157\000\228\000\161\001\027\000\255\001\135\001\135\001U\000\153\000\196\000U\001\017\000\160\000U\001\002\001\027\001\019\000\250\000U\000\002\000.\000|\000\244\000]\000\002\000\244\001U\000,\000]\000\132\0002\000]\000\002\0002\000\134\000[\000\002\000\170\000\136\000I\000\004\000W\001!\000\230\000\002\001Y\000\236\000\002\001Y\000\230\001Y\000/\000\173\000\181\000,\000W\000W\000\133\000\002\0004\000\225\000\216\000h\000\031\000\140\000I\000\210\000f\001U\000\002\000.\000p\001U\000\132\001U\000\002\0002\000p\001U\000\136\001U\000\002\0004\000p\001U\000\216\000f\000U\000\002\000.\000p\001U\000\132\000U\000\002\0002\000p\001U\000\136\001U\000\002\0004\000p\001U\000\225\000\210\000f\001U\000\002\000.\000p\001U\000\132\001U\000\002\0002\000p\001U\000\136\001U\000\002\0004\000p\001U\001!\000p\001U\000I\000y\001\031\001\031\001U\000U\000.\000\132\000U\0002\000\136\001U\0004\000\225\000\210\000f\001U\000.\000\132\001U\0002\000\136\001U\0004\001!\001U\000.\000\132\001U\0002\000\136\001U\0004\000U\000\028\000\206\001W\000U\000\222\000U\000\218\000U\000\222\000U\000\218\000\196\000U\001W\000U\000\222\000U\000\218\000U\000f\000\020\000\203\000.\000\236\001\133\000Z\000U\000G\001\029\001E\001E\000^\000\161\000\002\000.\000\236\000\002\001Y\000\002\000.\001E\001\029\001E\000U\000Z\000U\000Z\000\216\000U\000\235\000s\000\248\000\235\000\233\000\235\000U\000 \001U\000\204\001U\000\202\000U\000\002\000\202\000I\001U\000\172\000I\000\133\000\002\0004\001U\000\181\000,\000[\000\170\000[\000\002\000\170\000]\000\002\0002\000\244\000]\000\002\000\244\000U\001S\001\005\000\219\000\160\000U\000X\001S\001\005\000\018\000\196\000\219\000\236\000\215\000\196\000\219\000\223\000\160\000U\001A\000\223\000\194\001S\001\005\001c\001;\001\005\000\160\000U\001S\001\005\000\135\001\027\000\255\000U\000/\000\196\000U\000?\001\029\001G\001G\000?\000U\000\175\000.\000h\000\236\000\020\000\203\000\216\001Y\000\196\000U\000u\000\216\001Y\000\196\000U\000/\000\196\000U\000?\001\027\000\255\001U\000U\000\004\000\233\000U\000\004\000\233\001U\000\002\000.\000\230\000\002\000\215\000.\000\236\000\002\000\215\000.\000\230\000\215\000.\000\219\000\215\000\002\000.\000\161\000.\000\236\001Y\000.\001u\000\014\000\250\001\005\000\209\000h\000\196\000U\000/\000\196\000U\000\027\000\255\001\005\000\012\000V\000V\000\012\000\021\000h\000\236\001Y\000\209\000h\000\196\000U\000/\000\196\000U\000`\000\250\001\005\000\139\000h\000\236\000\020\000\203\000\216\001Y\000\196\000U\000u\000\216\001Y\000\147\000\196\000U\001Y\000?\000\229\000\255\001\005\000\012\000<\000<\000\012\000\019\000h\000\236\000\147\000\139\000h\000\236\000\020\000\203\000\216\001Y\000\196\000U\000\147\000\196\000U\000?\000t\001\131\000:\000\161\000\n\000U\000X\000\020\001S\001\005\0011\000\196\000\215\000\179\000\255\001S\001\005\000\018\000\223\000\255\0000\000\018\000\223\000\255\001\004\001\005\000\018\000\223\000\255\001\t\001\t\000~\001\131\000\158\001S\001\005\000\219\000\255\000\192\001S\001\005\000\031\000\236\001Y\000\196\000$\000\201\000\201\000\255\000\194\001S\001\005\001c\000\196\001a\001\005\000\255\001;\001\005\000\255\000\236\000*\000L\000\250\001S\001\005\000\227\000\255\001S\001\005\000\227\000\255\000X\001S\001\005\000\018\000\196\000\225\000\255\000\232\000\002\000\227\000\255\000\236\000\215\000\221\000\255\001A\000\221\0000\000\018\000\236\000\215\000\255\001\004\001\005\000\018\000\236\000\215\000\255\001\007\001\007\000\158\001S\001\005\000\215\000\255\000\194\001S\001\005\001c\000\238\000\020\001S\001\005\000\012\000\023\000\132\000i\0002\001I\000h\000\196\000P\001\005\000f\001Y\000.\001s\000\014\001\005\000\012\000V\000V\000\012\000\207\000h\000\236\001Y\000\255\000`\001\005\000\012\000<\000<\000\012\000\137\000h\000\236\000\147\000\255\000\146\001\005\000h\000n\000L\000\250\001\005\000\225\000\160\000\132\000k\0002\000\227\000\216\000h\001g\000\228\001Y\001Y\001Q\001g\001o\001\129\001\005\000\225\000\160\001o\001o\000\255\000\224\001\005\001Y\000\196\001Y\001_\000\255\000\249\000\002\000\202\001+\000\255\001K\001q\000\249\001o\000\255\001\004\001\005\000\023\001I\000h\000\196\001o\000\255\001\011\001\011\001S\001\005\000\023\001I\000h\000\236\000h\000\236\0001\000Z\000\132\001Y\0001\000Z\000\171\0001\000Z\000\227\000\216\000h\001Q\001k\001o\001k\001k\001k\000\255\001\004\001\005\000\023\001I\000h\000\236\001k\000\255\001\r\001\r\000\025\000O\000S\000\141\000\195\000\213\000\217\000\253\001+\000\255\0013\001\004\001\005\000'\000h\000-\000}\000\255\001\003\001\003\0015\001\004\001\005\000'\000h\000\232\000\199\000}\000\255\001\001\001\001\001K\001i\000\253\000Q\000\253\001Y\000\238\001S\001\005\000\023\001I\000h\000\196\000P\001\005\001u\000\144\001\005\000U\000\255\000\146\000\250\001\005\000f\000n\000F\001\131\001\005\000\135\001\027\000\255\000L\000\250\001\005\000\225\000\160\000\132\000k\0002\001w\000\180\001\005\001\029\000Z\001\023\000\160\001Q\001m\000y\001w\001\127\001\129\001\135\001\127\001y\001y\001\127\001\005\000\225\000\160\001\127\001\005\000\135\001\027\000\255\001\127\000\002\000.\000\236\001k\000\002\000.\001\127\001\000\000h\000\185\000\255\001\005\001\127\000\185\000\255\000\224\001\005\001_\000\255\000\247\000\002\000\202\001+\000\255\001K\001}\000\247\001\127\000\236\001k\000\196\001\127\001\029\001{\001{\000\255\001\004\001\005\000\023\001I\000h\001{\000\255\001\015\001\015\000\025\000;\000n\000A\000S\000\141\000\197\000\213\000\237\000\251\001\025\001+\000\255\0013\001\003\001K\001i\000=\000U\000\255\000\251\000\149\0002\000\237\000\251\001\025\000\149\0002\000\247\000\002\000\202\000=\000\002\000\202\000\219\000\255\001S\001\005\000\219\000\255\000U\000\255\000\251\000\251\000\149\0002\000\255\000+\000@\000\139\000\127\000\255\0019\0017\0019\000'\000h\000\232\000\199\000}
    
    and rhs =
      ((16, "\001/\001-\000\167\000\165\000\163\0003\000!\000D\000B\001C\001\137\001\000\0006\0011\001\004\001\005\001\027\000\255\000f\001Y\000.\000f\000X\001S\001\005\000\215\000.\0006\0011\000\016\000+\001\133\000+\000f\000e\000.\000+\000r\000\231\000\174\000r\000\174\000\166\001w\001\133\000\166\001w\000f\000e\000.\000\166\001w\000\132\0007\0002\000\132\000\248\000m\0002\000\132\000_\000\248\000m\0002\000z\000\189\000m\0002\000z\0002\000x\000\189\000m\0002\000x\000\189\000m\000\174\000w\0002\001Q\000C\000C\000\216\001\131\000\130\001\131\000\149\0002\001m\000\180\001\005\001y\001\023\000\160\001\127\000n\000L\001\005\000\225\000\160\001\127\000n\000L\000\250\001\005\000\225\000\160\001\127\001\127\001\129\001m\000y\001Q\000\146\001\005\001\127\000\185\000\255\000\146\000\250\001\005\001\127\000\185\000\255\000\014\000\027\000\255\000`\000\229\000\255\000\224\001\005\001_\000\255\000\144\001\005\000U\000\255\001+\000\255\001K\000\196\001\127\000\236\001k\000\196\001\127\001\029\001{\001\029\000Z\001\127\001\029\001y\000h\000\225\000\216\000h\000f\000\161\000.\000f\000\161\000\236\001Y\000.\000f\001Y\000.\000\146\001\005\001o\000\255\000\014\001\005\000\207\000h\000\236\001Y\000\255\000`\001\005\000\137\000h\000\236\000\147\000\255\000\224\001\005\001_\000\255\001+\000\255\001K\001g\000\132\000k\0002\001g\001Q\000P\001\005\001s\000\249\000\202\000P\001\005\001s\000\249\000\002\001o\001\129\000n\000L\001\005\000\225\000\160\001o\000n\000L\000\250\001\005\000\225\000\160\001o\000f\001\127\000.\000f\001\127\000\002\001w\000\132\000k\0002\001w\000P\001\005\001u\000\247\000\002\000f\001\127\000\236\001k\000.\000f\001\127\000\236\001k\000\002\000P\001\005\001u\000\247\000\202\001o\000\171\0001\000Z\001k\000h\000\236\0001\000Z\001k\0001\000Z\001k\000\238\000\020\001S\001\005\000\023\001I\000h\000\196\001o\000\255\001\011\000h\000\227\000\216\000h\000\142\000\240\000$\000\186\000\018\000\132\0002\000f\000.\000f\000\234\000.\000\190\000\026\000\225\000\225\000\216\000f\000\234\000.\000\132\0002\000f\000.\000f\000\234\000.\000\190\000\026\001Y\000\196\001Y\001\133\000g\000&\001\133\000\136\001%\0004\000\248\000\131\001\137\001Y\001\129\000\028\000\206\000\237\000\160\000U\000b\001S\001\005\000U\000\004\000\233\000\022\001S\001\005\000U\000\022\001S\001\005\000U\000\004\000\233\000\022\001S\001\005\000U\000\188\000U\000\022\001S\001\005\000U\000\004\000\233\000\188\000U\000\006\001S\001\005\000U\000\222\000U\000\218\000\182\001S\001\005\000\161\000\196\000U\001W\000U\000\222\000U\000\218\000\182\001S\001\005\000\161\000\160\000U\000\222\000U\000\218\000I\000n\000X\001S\001\005\000\018\000\223\000\160\000U\000n\000\194\001S\001\005\001c\001;\001\005\000\160\000U\000n\000L\001S\001\005\000\219\000\160\000U\000n\000L\000\250\001S\001\005\000\219\000\160\000U\000\178\001S\001\005\000\233\000\180\001S\001\005\001\029\001E\000\180\001S\001\005\000f\000\020\000\203\000.\001E\000d\001S\001\005\000U\000\004\000\233\000\024\001S\001\005\000U\000\004\000\233\000\024\001S\001\005\000U\000\004\000\002\000\162\001S\001\005\000U\000 \001U\000\204\001U\000\162\001S\001\005\000U\000 \001U\000\b\001S\001\005\000U\000\222\000U\000\218\000\184\001S\001\005\000\161\000\196\000U\001W\000U\000\222\000U\000\218\000\254\001S\001\005\000I\000\138\001S\001\005\000I\000P\001S\001\005\001u\000\247\000\202\000P\001S\001\005\001u\000\247\000\002\000I\000y\000c\001a\000I\000\205\000I\001U\000\156\001U\001U\000\154\001U\001U\000\152\001U\001U\000\150\001U\001U\000\148\001U\001U\000D\001U\001U\000B\001U\001U\000@\001U\001U\000^\001U\001U\000\\\001U\001U\000&\001U\001U\000F\001U\001U\000\196\001U\001U\000r\001U\001U\000\174\001U\001U\000H\001U\001U\000\246\001U\001U\001\006\001U\001U\001\b\001U\001U\000\232\001U\0009\001U\001\139\001U\001\025\000\160\000U\000l\001\017\000\160\000U\001U\000\234\001U\000h\000p\001U\000I\000\216\001!\000p\001U\000I\000\216\000f\000U\000.\000p\001U\000I\000\216\000\132\000U\0002\000p\001U\000I\000\216\000\136\001U\0004\000p\001U\000I\000\210\000\132\001U\0002\000p\001U\000I\000\210\000f\001U\000.\000p\001U\000I\000\210\000\136\001U\0004\000p\001U\000I\000\216\000\225\000\210\000\132\001U\0002\000p\001U\000I\000\216\000\225\000\210\000f\001U\000.\000p\001U\000I\000\216\000\225\000\210\000\136\001U\0004\000p\001U\001U\001\129\000\016\000F\001\131\000v\001\131\000\149\0002\000\248\001c\000\196\001a\001\005\001c\000\196\001a\001\005\000~\001\131\000\149\0002\000\132\000i\0002\000?\000/\000\196\000U\000Z\000U\000\236\001\133\000Z\000U\001\029\001E\000f\000\020\000\203\000.\001E\0001\000\171\0001\000Z\001C\000h\000\236\0001\000Z\001C\0001\000Z\001C\000f\000.\000f\001?\000\236\000\215\000.\000\018\000\016\000{\000N\001]\000\236\001]\000Z\001\133\000\236\001\133\000\248\001c\001;\001\005\001c\001;\001\005\000\020\001S\001\005\000'\000h\000\232\000\199\000}\000\255\000\020\001S\001\005\000R\000'\000h\000\232\000\199\000}\000\255\000\020\001S\001\005\000'\000h\000-\000}\000\255\000\020\001S\001\005\000R\000'\000h\000-\000}\000\255\000\018\000h\000=\000\200\000Q\000\200\000t\001\131\000\149\0002\000\209\000h\000\236\000\145\001\005\000\209\000h\000\236\000\145\001\005\000,\001\005\001)\001'\001'\001%\000h\000h\000\236\001Y\000h\000\225\000\216\000h\000I\000\140\000I\000\030\000h\000:\000h\000J\000I\000:\000f\001#\000\175\000.\000:\000h\000J\000f\001\021\000\175\000.\000J\000\151\000\030\000f\001#\000.\000\030\000h\000\140\000G\000G\000\031\000?\000\031\000/\000\196\000U\000\031\000\236\000u\000\216\001Y\000\196\000U\000\031\000\236\000\020\000\203\000\216\001Y\000\196\000U\000\153\000\196\000U\000E\000\236\001Y\000\196\000U\000n\001S\001\005\000\135\001\027\000\255\001\025\001\135\000n\001\005\000\135\001\027\000\255\000n\000F\001\131\001\005\000\135\001\027\000\255\001\023\001\135\000\161\000\161\000\236\001Y\000\031\000?\000G\000\236\001Y\000\196\000U\000\153\000\196\000U\001\019\001\017\001\002\001\027\001\004\001\005\000\023\001I\000h\001{\000\255\001\015\001\004\001\005\000\023\001I\000h\000\236\001k\000\255\001\r\001\004\001\005\000\023\001I\000h\000\196\001o\000\255\001\011\001\004\001\005\000\018\000\223\000\255\001\t\001\004\001\005\000\018\000\236\000\215\000\255\001\007\001\129\001\005\001\004\001\005\000'\000h\000-\000}\000\255\001\003\001\004\001\005\000'\000h\000\232\000\199\000}\000\255\001\001\000\143\000\255\000*\000\253\000O\000\253\000*\000\251\000*\000U\000\255\000\251\000;\000\251\001q\000\249\001}\000\247\000;\000\245\000*\000\243\000*\000U\000\255\000\243\000;\000\243\0005\000\243\001!\000\183\000\177\001!\000\183\000\177\000,\001!\000\183\000\177\000,\000\016\000\187\001!\000\183\000\177\000,\000\241\000j\001S\001\005\000\135\001\027\000\255\000\239\000\237\001\135\000\161\000Z\000U\000\161\000\n\000U\000Z\000U\000\161\000Z\000\216\000s\000h\000\236\000\145\001\005\000,\001\005\000\231\001\133\000,\000\231\000h\000\236\000\145\001\005\000,\001\005\001\133\000,\000h\000\236\000\145\001\005\001\133\000\214\001\005\000\019\000h\000\236\000\147\001\005\000\139\000h\000?\000\250\001\005\000\139\000h\000?\001\005\000\139\000h\000\236\000\147\000\196\000U\000\250\001\005\000\139\000h\000\236\000\147\000\196\000U\001\005\000\139\000h\000\236\000\020\000\203\000\216\001Y\000\196\000U\000\250\001\005\000\139\000h\000\236\000\020\000\203\000\216\001Y\000\196\000U\000\018\000\227\000\216\000\018\000\227\000f\000\227\000.\000\227\000f\000\002\000\018\000\225\000\216\000\018\000\196\000\219\000\236\000\215\000\196\000\219\001A\000\223\000\236\000\215\001A\000\221\000\"\001\005\000=\000\202\000\"\001\005\000=\000\002\000\176\001\005\001=\000Z\000\219\000\169\000\219\001\129\000\225\000\219\000\169\000\219\000f\000.\001Q\000X\001S\001\005\000\018\000\232\000\227\000\255\000X\001S\001\005\000\018\000\232\000\002\000(\001\005\000Q\000\202\000(\001\005\000Q\000\002\000\176\001\005\001=\000Z\000\215\000X\000\020\000N\001\005\000\219\000f\000\215\000.\000f\000\215\000\002\000\215\001\129\000\211\000\215\000Z\000\215\000\215\000\004\000o\001Q\000X\000\020\001S\001\005\0011\000\179\000\255\0011\000\227\000\216\0011\000V\000V\000\012\000V\000\012\000\012\000V\000\252\0011\000h\000h\000\203\000$\000$\000\201\001Y\000<\001Y\001[\000<\001[\001Y\000\196\001[\001Y\000\196\000<\001[\000\214\000<\000\214\001Y\000\196\000\214\001Y\000\196\000<\000\214\000\136\001%\0004\000<\000\136\001%\0004\001Y\000\196\000\136\001%\0004\001Y\000\196\000<\000\136\001%\0004\000L\001S\001\005\000\219\000\255\000L\000\250\001S\001\005\000\219\000\255\000L\001S\001\005\000\227\000\255\000L\000\250\001S\001\005\000\227\000\255\000>\000l\001\002\000\210\000f\000.\000\210\000f\000.\000p\000\210\000\132\0002\000\210\000\132\0002\000p\000\210\000\136\0004\000\210\000\136\0004\000p\000\164\000\250\000\156\000\154\000\152\000\150\000\148\000D\000B\000@\000^\000\\\000&\000F\000\196\000r\000\174\000H\000\246\001\006\001\b\000\232\001\006\000\248\000,\001\000\000h\000\236\001Y\000\196\001U\000\196\000\215\000\196\000\161\000\196\000U\000/\000J\000:\000h\000\236\000f\000\219\000\236\000\215\000.\000f\000\219\000\236\000\215\000\002\000f\000\219\000.\000f\000\219\000\002\000f\000\014\001\005\001U\000.\000f\000\014\001\005\001U\000\236\000\215\000.\000f\000\014\001\005\001U\000\236\000\215\000\230\000\215\000.\000f\000\014\001\005\001U\000\230\000\215\000.\000f\000\014\001\005\001U\000\236\000\002\000f\000\014\001\005\001U\000\230\000\002\000f\000\014\001\005\001U\000\002\001Y\000\200\000U\000\200\000\161\000\200\000\161\000\234\000\161\000\161\001\129\000\155\000\161\001\000\000\031\000\161\001\000\000\002\000\159\000\161\000\234\000\002\000\161\000\248\000\161\000\161\000\248\000\002\000\194\001S\001\005\000\161\000\159\000\228\000\161\000\161\000\228\000\161\000\161\000\228\000\002\000\157\000\228\000\161\000\153\000\228\000\161\000\153\000\228\000\002\000G\001a\000\161\000\205\000\161\000\138\001S\001\005\000G\000\153\000\234\000\161\000\153\001\129\000\155\000\153\001\000\000\031\000\153\001\000\000\002\000\157\000\153\000\234\000\002\000\153\000\248\000\161\000\153\000\248\000\002\000h\000\016\000=\000\236\000Q\000\236\001Y\000:\000\161\000:\000\161\000\n\000U\001Y\000u\000\216\001Y\001\137\000u\000\216\001\137\000\128\001\131\000\149\0002\000\192\001S\001\005\000\031\000\236\001Y\000\196\000\201\000\255\000<\000<\000\012\000<\000\012\000\012\000<\0000\000W\000I\000\004\000W\0017\0019\000\131\0019\0017\001M\0019\001O\000\129\0019\000\129\001O\0017\0019\000\127\0019\000}\000\224\001Y\000\196\001Y\001A\000{\001A\001\031\000y\001\031\000\205\000w\000\205\0006\0011\000u\0006\0011\000\235\000\248\000\235\000s\000\248\000\235\001\137\000q\001\006\001\137\000\017\000o\001\004\000\017\000_\000m\000\248\000_\001Y\000k\000\228\001Y\000)\000i\000\228\000)\001\133\000g\000&\001\133\000e\000\228\001Y\001Y\000\228\001Y\000c\000\228\001U\001U\000\228\001U\000a\000&\001\133\001\133\000&\001\133\0007\001Y\001U\001U\000,\001U\000,\000]\000h\000\181\000h\000\181\000,\000h\000\181\000,\000[\000\161\000\161\000,\000\161\000,\000Y\001!\000\173\000\181\001!\000\173\000\181\000,\001!\000\173\000\181\000,\000W\001U\001U\000,\001U\000,\000U\001U\000,\000F\001\131\000U\000\194\001S\001\005\001c\001;\001\005\000\255\000\253\001+\000\255\001K\000\025\000\141\0013\001\003\0015\001\001\000\020\001S\001\005\000'\000+\000@\000\139\000\127\000\255\000\020\001S\001\005\000R\000'\000+\000@\000\139\000\127\000\255\000S\000X\001S\001\005\000\018\000\221\000\255\000X\001S\001\005\000\018\000\196\000\225\000\255\000\217\000X\001S\001\005\0000\000\018\000\236\000\215\000\255\001\007\000\213\000\195\000\158\001S\001\005\000\215\000\255\000\238\001S\001\005\000\023\001I\000h\000\236\001k\000\255\001\r\001i\001e\000^\000\142\000^\000\186\000D\000\142\000D\000\186\000\136\000\241\0004\000\136\000\241\000\002\000\132\000Y\0002\000\132\000Y\000\002\000|\000Y\000\244\000|\000\244\000|\000Y\000\002\000\212\001U\000\172\000\208\000I\000f\000U\000.\000f\000U\000\002\000f\000U\000/\000.\000I\000\216\000f\000U\000.\000I\000\216\000f\000U\000\002\000I\000\216\000\132\000U\0002\000I\000\216\000\132\000U\000\002\000I\000\210\000\132\001U\0002\000I\000\210\000\132\001U\000\002\000I\000\210\000f\001U\000.\000I\000\210\000f\001U\000\002\000I\000\210\000\136\001U\0004\000I\000\210\000\136\001U\000\002\000I\000\216\000\225\000\210\000\132\001U\0002\000I\000\216\000\225\000\210\000\132\001U\000\002\000I\000\216\000\225\000\210\000f\001U\000.\000I\000\216\000\225\000\210\000f\001U\000\002\000I\000\216\000\225\000\210\000\136\001U\0004\000I\000\216\000\225\000\210\000\136\001U\000\002\000I\000\216\000\136\001U\0004\000I\000\216\000\136\001U\000\002\000\242\001S\001\005\000U\000\202\000\242\001S\001\005\000\202\000\242\001S\001\005\000U\000\002\000T\001S\001\005\001w\000f\000X\001S\001\005\000\219\000.\000f\000X\001S\001\005\000\219\000\236\000\215\000.\000f\000X\001S\001\005\000\219\000\236\000\002\000\029\001e\001a\000\205\000>\000I\000\250\000I\000\134\000[\000\170\000\134\000[\000\002\000\134\000\170\000I\000\216\001!\000\225\000\216\000f\000U\000.\000\225\000\216\000\134\000[\000\170\000\225\000\216\000\134\000[\000\002\000I\000\166\000h\000I\000\164\000I\001Q\000\225\000\216\000f\000.\000\225\000\216\000f\000U\000\002\000\136\000\133\0004\000\136\000\133\000\002\000\225\000\216\000\136\000\133\0004\000\225\000\216\000\136\000\133\000\002\000|\000]\000\244\000|\000]\000\002\000|\000\244\000\225\000\216\000|\000]\000\244\000\225\000\216\000|\000\244\000\225\000\216\000|\000]\000\002\000\132\000]\0002\000\132\000]\000\002\000\225\000\216\000\132\000]\0002\000\225\000\216\000\132\0002\000\225\000\216\000\132\000]\000\002\000\225\000\216\000f\000X\001S\001\005\000\219\000\236\000\215\000.\000\225\000\216\000f\000X\001S\001\005\000\219\000\236\000\002\000\031\000E\000f\000\161\000.\000K\000f\000X\001S\001\005\000\018\000.\000f\000X\001S\001\005\000\018\000\236\000\215\000.\000\016\000M\000M\000\214\000M\001a\000\205\000\166\000+\000\225\000\216\000K\000\225\000\216\000\132\0002\000\225\000\216\000f\000.\000\225\000\216\000f\000\161\000.\000\225\000\216\000f\000\161\000\002\000\225\000\216\000f\000\002\000f\000\161\000\002\000f\000\161\000\236\001Y\000.\000f\000\161\000\236\001Y\000\002\000f\000\161\000\236\000\002\000f\000X\001S\001\005\000\018\000\236\000\215\000\002\001Q\000h\000\018\001\004\001\000\000\254\000\242\000\238\000\224\000\222\000\218\000\206\000\204\000\202\000\194\000\192\000\190\000\184\000\180\000\178\000\176\000\162\000\160\000\158\000\146\000\144\000\138\000n\000d\000`\000X\000V\000T\000R\000P\000N\000L\000H\000<\0000\000(\000\"\000 \000\028\000\026\000\024\000\020\000\014\000\012\000\n\000\b\000\004\000S\000\194\001S\001\005\001c\000\196\001a\001\005\000\255\000\196\000U\001\029\001G\000f\000\020\000\203\000.\001G\000\251\000U\000\255\000\251\000\237\001\025\001+\000\255\001K\000\141\000\025\0013\001\003\000\020\001S\001\005\000'\000+\000@\000\139\000\129\000\255\000\020\001S\001\005\000R\000'\000+\000@\000\139\000\129\000\255\000A\000X\001S\001\005\000\018\000\223\000\255\000X\001S\001\005\0000\000\018\000\223\000\255\001\t\000\213\000\197\000\238\001S\001\005\000\023\001I\000h\001{\000\255\001\015\001i\000\158\001S\001\005\000\219\000\255\000^\000\\\000\205\000N\000\191\000q\001\005\000\205\001\005\000\166\0011\000\166\0011\000$\000\166\0011\000\142\000\166\0011\000\029\000\166\0011\000\225\000\166\0011\000\190\000\166\0011\000\026\000U\000\255\000*\000\245\000*\0005\000*\000\200\001\133\000a\000\236\001Y\000\236\001Y\000\230\001Y\000\230\001Y\000\236\000\002\000\230\000\002\000\196\000\199\000h\000\227\000\216\000h\000#\000%\000)\000f\000i\000.\0006\0011\000\016\000D\000^\000\243\000\200\000U\000\255\000\243\000\200\000h\000f\000\193\000.\000f\000\193\000\002\000f\000\002\000f\000X\000\002\000\031\000\225\000\216\000\031\001\005\000\021\000h\000\236\001Y\001\005\000\209\000h\000\196\000U\000\250\001\005\000\209\000h\000\196\000U\001\005\000\209\000h\000/\000\196\000U\000\250\001\005\000\209\000h\000/\000\196\000U\000\014\001S\001\005\000\031\000\236\001Y\000\255\000\012\000\012\000V\000\012\000\012\000V\000\012\000<\000\012\000\012\000<\000\020\000'\001!\000\015\001\137\000}\000\020\000'\001!\000\232\001\137\000X\000\225\000\196\000\227\000X\000\225\000\232\000\227\000\196\000\196\000<"), (16, "\000\000\000\001\000\002\000\003\000\004\000\005\000\006\000\007\000\b\000\t\000\n\000\014\000\018\000\021\000\027\000\029\000\030\000\031\000!\000%\000(\000*\000,\000/\0004\0007\000;\000@\000D\000F\000J\000P\000Q\000R\000U\000Y\000Z\000]\000`\000f\000m\000o\000q\000r\000w\000}\000\128\000\131\000\135\000\139\000\141\000\142\000\144\000\148\000\150\000\153\000\155\000\156\000\159\000\162\000\167\000\167\000\170\000\170\000\174\000\181\000\188\000\192\000\194\000\195\000\196\000\200\000\201\000\206\000\211\000\213\000\219\000\226\000\229\000\232\000\233\000\237\000\242\000\247\000\252\001\001\001\002\001\006\001\011\001\014\001\025\001\026\001\029\001\030\001\031\001 \001!\001\"\001$\001&\001)\001*\001+\001,\0011\0013\0015\0018\0019\001:\001=\001>\001A\001D\001E\001F\001G\001I\001J\001K\001N\001T\001X\001^\001d\001l\001s\001~\001\135\001\136\001\144\001\153\001\160\001\168\001\172\001\177\001\185\001\191\001\197\001\203\001\211\001\217\001\224\001\235\001\239\001\243\001\249\001\255\002\001\002\002\002\004\002\006\002\t\002\012\002\015\002\018\002\021\002\024\002\027\002\030\002!\002$\002'\002*\002-\0020\0023\0026\0029\002<\002?\002B\002D\002F\002I\002M\002P\002S\002X\002_\002f\002m\002t\002{\002\130\002\139\002\148\002\157\002\159\002\160\002\160\002\162\002\166\002\171\002\175\002\179\002\179\002\182\002\183\002\186\002\188\002\192\002\194\002\199\002\200\002\204\002\209\002\212\002\214\002\219\002\220\002\221\002\222\002\222\002\224\002\228\002\230\002\234\002\237\002\246\003\000\003\b\003\017\003\018\003\019\003\021\003\023\003\027\003 \003'\003(\003)\003+\003,\003/\0030\0033\0034\0036\0038\003:\003<\003A\003C\003H\003J\003N\003P\003R\003S\003U\003Y\003`\003h\003k\003p\003v\003x\003}\003\132\003\134\003\135\003\138\003\140\003\145\003\148\003\149\003\152\003\152\003\160\003\160\003\169\003\169\003\178\003\178\003\184\003\184\003\191\003\191\003\193\003\193\003\201\003\201\003\210\003\210\003\212\003\212\003\214\003\216\003\216\003\218\003\222\003\224\003\224\003\226\003\226\003\228\003\228\003\230\003\230\003\232\003\236\003\238\003\240\003\243\003\247\003\253\004\002\004\b\004\t\004\011\004\014\004\019\004\022\004\023\004\030\004!\004'\004)\004-\004.\004/\0044\0048\004=\004D\004L\004V\004a\004b\004e\004i\004l\004m\004p\004r\004v\004x\004z\004|\004\128\004\132\004\137\004\138\004\140\004\141\004\143\004\146\004\147\004\154\004\160\004\164\004\168\004\173\004\178\004\181\004\184\004\186\004\187\004\190\004\193\004\194\004\201\004\202\004\205\004\205\004\206\004\206\004\207\004\208\004\210\004\212\004\214\004\215\004\217\004\218\004\220\004\221\004\223\004\224\004\226\004\229\004\233\004\234\004\236\004\239\004\243\004\246\004\250\004\255\005\005\005\n\005\016\005\021\005\027\005\028\005\029\005\030\005!\005%\005(\005,\005/\0053\0054\0055\0056\0057\0058\0059\005:\005;\005<\005=\005>\005?\005@\005A\005B\005C\005D\005E\005F\005G\005H\005I\005J\005J\005J\005K\005K\005L\005L\005N\005N\005P\005P\005R\005R\005T\005T\005V\005V\005X\005X\005Y\005Z\005]\005b\005g\005j\005m\005r\005y\005\130\005\137\005\143\005\149\005\154\005\156\005\158\005\160\005\163\005\165\005\166\005\169\005\172\005\173\005\176\005\179\005\182\005\186\005\189\005\192\005\195\005\198\005\201\005\204\005\205\005\207\005\209\005\213\005\216\005\218\005\219\005\222\005\225\005\226\005\229\005\232\005\235\005\236\005\237\005\238\005\240\005\242\005\244\005\248\005\249\005\252\005\253\006\000\006\004\006\r\006\r\006\014\006\014\006\015\006\016\006\018\006\020\006\020\006\021\006\022\006\025\006\026\006\027\006\029\006\030\006\031\006 \006!\006#\006%\006&\006'\006)\006)\006.\006/\0061\0062\0064\0065\0067\0069\006<\006=\006?\006B\006C\006F\006G\006J\006K\006N\006O\006R\006S\006V\006W\006Z\006]\006`\006c\006f\006i\006l\006m\006n\006o\006q\006t\006v\006y\006}\006~\006\128\006\131\006\134\006\138\006\143\006\144\006\146\006\149\006\154\006\161\006\162\006\164\006\165\006\166\006\167\006\169\006\171\006\180\006\190\006\191\006\197\006\204\006\205\006\214\006\215\006\216\006\221\006\231\006\232\006\233\006\235\006\237\006\239\006\241\006\244\006\247\006\250\006\253\007\000\007\002\007\005\007\b\007\n\007\r\007\016\007\020\007\025\007\030\007#\007(\007-\0072\0077\007<\007A\007F\007M\007T\007[\007b\007i\007p\007u\007z\007\127\007\131\007\136\007\140\007\146\007\154\007\161\007\162\007\163\007\164\007\165\007\167\007\169\007\172\007\175\007\177\007\180\007\185\007\190\007\195\007\198\007\201\007\202\007\206\007\211\007\214\007\217\007\222\007\227\007\230\007\233\007\235\007\240\007\244\007\249\007\252\007\255\b\004\b\b\b\r\b\023\b \b!\b\"\b%\b&\b,\b4\b5\b6\b9\b:\b;\b=\b@\bD\bH\bM\bR\bV\bY\b^\bc\bg\bo\bp\bq\br\bs\bt\bu\bv\bw\bx\by\bz\b{\b|\b}\b~\b\127\b\128\b\129\b\130\b\131\b\132\b\133\b\134\b\135\b\136\b\137\b\138\b\139\b\140\b\141\b\142\b\143\b\144\b\145\b\146\b\147\b\148\b\149\b\150\b\151\b\152\b\153\b\154\b\155\b\156\b\157\b\158\b\159\b\160\b\161\b\162\b\163\b\164\b\172\b\174\b\176\b\181\b\182\b\185\b\186\b\187\b\189\b\190\b\191\b\192\b\194\b\203\b\213\b\214\b\220\b\228\b\229\b\230\b\239\b\240\b\245\b\246\b\247\b\252\b\254\t\000\t\003\t\006\t\t\t\012\t\015\t\018\t\021\t\023\t\025\t\026\t\027\t\028\t\030\t\"\t$\t&\t(\t(\t*\t+\t.\t0\t0\t1\t4\t6\t7\t7\t8\t9\t;\t?\t@\tC\tF\tH\tK\tL\tO\tT\tY\t_\te\tl\ts\ts\tt\tu\tw\ty\tz\t|\t~\t\132\t\137\t\141\t\145\t\146\t\148"))
    
    and lr0_core =
      (16, "\000\000\000\001\000\002\000\003\000\004\000\005\000\006\000\007\000\b\000\t\000\n\000\011\000\012\000\rb\000\t\000\n\000\011\000\012\000\r\000\014\000\015\000\016\000\017\000\018\000\019\000\020\000\021\000\022\000\023\000\024\000\025\000\026\000\027\000\028\000\029\000\030\000\031\000 \000!\000\"\000#\000$\000%\000&\000'\000(\000)\000*\000+\000,\000-\000.\000/\0000\0001\0002\0003\0004\0005\0006\0007\0008\0009\001\185\000;\000<\000^\000_\000`\000a\000X\000b\000c\000d\000e\000f\000g\000h\000i\000j\000k\000l\000m\000n\000o\000p\000q\000r\000s\000t\000u\000v\000w\000x\000y\000z\000{\000|\000}\000~\000\127\000\128\000\129\000\130\000\131\000\132\000\133\000\134\000\135\000\136\000[\000\137\000\138\000\139\000\140\000\141\000\142\000\143\000\144\000\145\000\146\000\147\000\148\000\149\000\150\000\151\000\152\000\153\000\154\000\155\000^\000_\000`\000\137\000\138\000\139\000\141\000\142\000\143\000\144\000\149\000\150\000\151\000\152\001\203\001\204\001\205\001\206\001\182\001\183\000=\000>\000?\001\210\001\211\001\212\001\213\001\214\001\215\001\216\001\217\001\218\001\219\001\220\001\221\001\222\001\223\001\224\001\188\001\189\001\190\001\191\001\192\001\193\001\194\001\195\001\188\000A\000H\000I\000Y\001\196\001\190\001\191\001\197\001\198\001\199\001\200\001\201\001\202\000\153\000\154\000\155\000\156\000\157\000\158\000\159\000\160\000\161\000\162\000\163\000\164\000\165\000\166\000\167\000\168\000\169\000\170\000\171\000\172\000\173\000\174\000\175\000\176\000\177\000\178\000\179\000\180\000\181\000\182\000\183\000\184\000\185\000\186\000\187\000\188\000\\\000]\001u\001v\001w\001x\001y\001zb\001\t\001\031\001 \001!\001\"\001#\001$\001%\001&\001'\001(\001)\001*\001+\001,\001-\001.\001/\0010\0011\0012\001\n\001\011\001\012\001\r\001\014\0013\0014\0015\0016\001\024\0017\0018\0019\001:\001;\001<\001=\001>\001?\001@\001A\001B\001C\001D\001E\001F\001G\001H\001I\001J\001K\001L\001M\001N\001O\001P\001Q\001R\001S\001T\001U\001V\001W\001X\001Y\001Z\001[\001\\\001]\001^\001_\001`\001a\001b\001c\001d\001e\001f\001g\001h\001i\001j\001k\001l\001m\001n\001o\001{\001|\001s\001t\001\175\001\178\001\179\001\180\001\181\001\207\001\208\001\209\000@\000B\000C\000D\000E\000F\000G\002F\001\225\001\189\001\192\001\193\001\194\001\195\000W\000Y\001\197\000i\001\198\001\199\001\200\001\201\001\202\001\203\001\204\001\205\001\206\001\182\001\183\001u\001v\001w\001x\001y\001z\001{\001|\001s\001t\005\001\001\226\001\143\000[\000\\\000]\005\005\005\006\005\007\005\b\005\t\005\n\002i\002i\002j\002k\002c\002d\002e\002f\002g\002h\002j\002k\002l\002m\002n\002o\002p\002q\002r\002s\002t\001\228\001\229\001\230\001\231\002u\002v\002w\002x\002y\002z\002{\002|\001}\001~\001\127\001\128\001\164\002}\002~\002\127\002\128\002\129\002\130\002\131\002\132\002\133\002\134\002\135\002\136\002\137\002\138\002\139\002\140\002\141\002\142\002\143\002\144\002\145\002\149\002\150\002n\002o\002p\002q\002r\002s\002t\002u\002x\000\181\000\182\001\028\001\029\000\184\001\025\001\019\001\026\001\027\001\021\001\022\001\023\000\189\000\191\001\003\001\004\001\005\001\006\001\007\000\192\000\193\000\194\001\001\001\002\000\195\000\198\000\230\000\231\000\251\000\252\000\253\000\254\000\255\001\000\000\196\000N\000O\000P\000R\000\197\000\201\000\202\000\203\000\204\000\205\000\183\000\206\000\213\000\214\000\215\000\216\000\217\000\218\000\219\000\220\000\221\000\222\000\223\000\224\000\225\000\226\000\227\001\030\000\240\002y\000\242\000\243\000\244\002z\002{\002|\001}\001~\001\127\001\128\000\249\000\250\002}\002~\002\127\000\140\002\128\000\207\000\208\000\209\000\210\000\211\000\212\002\130\002\131\002\132\002\133\002\134\002\135\002\136\002\137\002\138\002\139\002\140\002\141\002\142\002\143\002\144\002\146\002\147\002\148\002\146\002\147\002\148\005\011\005\012\001\129\001\130\005\r\005\014\005\015\005\016\004a\002a\002b\002\151\002\152\002\153\002\154\002\155\002\156\001\207\001\208\001\209\000J\000K\000L\000M\000S\000V\000Z\002\170\001\184\001\185\001\186\001\187\001\227\001\228\001\229\001\230\001\231\001\232\001\233\001\234\001\235\001\236\001\237\001\238\001\239\001\225\001\226\001\143\001\227\001\232\001\233\001\234\001\240\001\241\001\242\001\243\001\244\001\245\001\246\001\144\001\247\000\199\000\200\001\248\001\249\001\250\001\251\001\252\001\253\001\254\001\255\002\000\002\001\002\002\000Q\002\003\002\004\002\005\002\006\002\007\002\b\002\t\002\n\002\011\002\012\002\r\002\017\002\018\002\019\002\026\002\027\002\028\002\029\002\030\002\031\002 \001\148\001\149\002!\002\"\002#\002\014\002\015\002\016\002\020\002\021\002\022\002\023\002\024\000a\000h\000\134\000\135\000\136\002\025\002$\002%\002&\002'\002(\002)\002*\002+\002,\002-\0025\0026\0027\0028\002.\002/\0020\0021\0022\0023\0024\001\240\001\241\001\242\001\243\001\244\001\245\001\246\001\144\001\247\001\248\001\249\001\250\001\251\001\252\001\253\001\254\001\255\002\000\002\001\002\002\002\003\002\004\002\005\001\148\001\149\002!\002\"\002#\002$\002%\002&\002'\002(\002,\002\029\002-\002\006\002\007\002\b\002\t\002\n\002\011\002\012\002\r\002\017\002\018\002\019\002\026\002\027\002\028\002\030\002\031\002 \004\177\004\178\002\014\002\015\002\016\004\179\004\180\004\181\002\020\002\021\002\022\002\023\002\024\002\025\004\182\004\183\004\184\004\185\004\186\004\187\004\188\001\212\001\213\001\214\002\\\002]\002^\002_\002`\002\168\002\169\002\170\001\215\001\216\001\217\002\171\001\218\001\219\002F\002G\002:\002;\002<\002=\002>\002?\002@\002A\002B\002C\002D\002E\002\172\002\173\002\174\002\\\002]\002^\002_\002`b\004\t\004\n\004\011\003\003\003\004\003\005\003\006\003\007\003\b\003\t\003\n\003\011\003\012\003\r\003\014\003\015\003\016\003\017\003\018\003\019\003$\003%\003>\003?\003@\003A\003B\003C\003D\003E\003F\003G\003\020\003\021\003\026\003\027\003&\003'\003\022\003\023\003\024\003\025\003\028\003\029\003\030\003\031\003 \003!\003\"\003#\003(\003)\003*\003+\0036\0037\003,\003-\003.\003/\0030\0031\0038\0039\003:\003;\003<\003=\0032\0033\0034\0035\003H\003I\0029\002S\002T\002W\002X\002Y\002Z\002[\004y\003\139\003\140\003\141\003\142\003\143\003\144\003\145\003\146\004z\004{\004|\004}\004\028\004~\004\127\004\128\004 \001\140\001\141\004!\004\"\004#\004$\004%\004&\004'\004(\004\134\004\135\004\136\004\137\004\138\004\139\004\140\004\141\004\142\004\143\004\144\004\145\004\146\004\147\004\148\004\149\003J\003K\003L\003M\003N\003O\003P\003Q\003R\003S\003T\003U\003V\003W\003X\003Y\003Z\003[\003\\\003]\003^\003_\003`\003a\003b\003c\003d\003e\003f\003g\004\012\004\r\004\001\004\002\004\014\004\015\004\016\004\017\004\018\002\207\002\208\002\209\002\210\002\211\004\000\004\003\004\004\004\005\004\006\004\007\002\182\002\183\002\184\004=\002\212\002\213\002\214\002\215\002\236\002\237\002\238\002\239\002\240\002\243\002\244\002\245\002\246\002\247\002\248\002\249\002\250\003q\003\007\003\b\003\t\002\222\002\223\002\224\002\225\002\216\002\217\002\220\002\221\002\228\002\229\002\230\002\231\002\232\002\233\002\234\002\235\002\218\002\219\002\226\002\227\003\228\003\184\003\229\003\003\003\004\003\005\003\006\003\n\003\011\003\012\003\014\003\015\003\016\003\017\003\018\003\019\003$\003%\003>\003?\003@\003A\003B\003C\003D\003E\003F\003G\003\020\003\021\003\026\003\027\003&\003'\003\022\003\023\003\024\003\025\003\028\003\029\003\030\003\031\003 \003!\003\"\003#\003(\003)\003*\003+\0036\0037\003,\003-\003.\003/\0030\0031\0038\0039\003:\003;\003<\003=\0032\0033\0034\0035\003gr\003s\003t\003u\003v\003w\003x\003y\003z\003{\003|\003}\003~\003\127\003\128\003\129\003\130\003\131\003\132\003\133\003\134\003\135\003\136\003\137\003\138\003\139\003\140\003\141\003\142\003\143\003\144\003\145\003\146\003\147\003\148\003\149\003\150\003\151\003\152\003\153\003\154\003\155\003\156\003\157\003\158\003u\003v\003w\003x\003y\003}\003~\003\127\003\128\003\129\003\130\003\131\003\132\003\133\003\134\003\153\003\154\003\155\003\159\003\159\004>\004?\004@\004\019\004\020\004\021\004\022\004\023\004\024\004\025\004\026\004\027\004\029\004\030\004\031\004)\004*\004+\004.\004/\0040\0041\0042\0043\0044\0045\0046\0047\003\228\003\184\003\229\003\230\003\231\003\190\003\232\003\233\003\234\003\196\003\235\003\236\003\237\003\238\003\239\003\204\003\240\003\241\003\242\003\210\003\243\003\244\003\245\003\216\003\246\003\247\003\160\003\161\003\162\003\163\003\164\003\165\003\166\003\167\003\168\003\169\003\170\003\171\003\172\003\173\003\174\003\175\003\176\003\177\003\178\003\179\003\180\003\181\003\182\003\183\003\185\003\186\003\187\003\188\003\189\003\191\003\192\003\193\003\194\003\195\003\197\003\198\003\199\003\200\003\201\003\202\003\203\003\205\003\206\003\207\003\208\003\209\003\211\003\212\003\213\003\214\003\215\003\217\003\218\003\219\003\220\003\221\003\222\003\223\003\224\003\225\003\226\003\227\0048\0049\004:\004;\004<\003\248\003\249\003\250\003\251\003\252\003\253\003\254\003\255\003\002\003h\003i\003j\003k\003l\003m\003n\003o\003p\003r\003s\003t\004\000\004\003\004\004\004\005\004\006\004\007\004\b\004\t\004\n\004\011\004\012\004\r\004\014\004\015\004\016\004\017\004\018\004\019\004\020\004\021\004\022\004\023\004\024\004\025\004\026\004\027\004\029\004\030\004\031\004)\004*\004+\004,\004-\004.\004/\0040\0041\0042\0043\0044\0045\0046\0047\0048\0049\004:\004;\004<\004B\004C\004D\004A\004=\004>\004?\004@\004A\004B\004C\004D\004E\004F\004G\004E\004F\004G\004P\004Q\004R\004W\004X\004Y\004Z\004[\004\\\004]\004^\004_\004`\004c\004d\004e\004f\004g\004h\004i\004j\004k\004l\004m\004n\004o\004p\004q\004r\004s\004t\004u\004v\004w\004x\004H\004I\004J\004K\004L\004M\004N\004O\004\130\004\131\004\132\004\133\004\129\004\152\004P\004Q\004R\004\153\004\154\004\155\004S\004T\004U\004V\004W\004X\004Y\004Z\004[\004\\\004]\004^\004_\004`\004g\004h\004i\004l\004m\004n\004o\004p\004q\004r\004s\004\156\004\157\004\158\004\189\004\190\004\191\004\192\004\193\001\129\001\130\004\194\004\195\004\196\004\197\004\198\004\199\004\200\004\201\004\202\004\203\004\204\004\205\004\206\004\207\004\208\004\209\004\210\004\211\004\212\004\213\001\134\004\214\004\215\002S\002T\002W\002X\002[\004y\004z\004{\004|\004}\004~p\001q\001r\006\175\006\176\006\177\006\178\006\179\006\180\006\181\006\182\006\183\006\184\006\185\006\186\006\187\006\188\006\189\001\167\001\168\001\169\006\190\006\191\006\192\006\193\006\194\005<\005=\005>\005?\005@\005A\005B\005C\005D\005E\005F\005G\005H\005I\005J\005K\005L\005M\005N\005O\005P\005Q\005R\005S\005T\005U\005V\005W\005X\005Y\005Z\005[\005\\\005]\005^\005_\005`\005a\005b\005c\005d\005e\005f\005g\005h\005i\005j\005k\005l\005m\005n\005o\005p\005q\005r\005s\005t\005u\005v\005w\005x\005y\005z\005{\005|\005}\005~\005\127\005\128\005\129\005\130\005\131\005\132\005\133\005\134\005\135\005\136\005\137\005\138\005\139\005\140\005\141\005\142\005\143\005\144\005\145\005\146\005\147\005\148\005\149\005\030\005\031\006\024\006\025\006\026\006\027\006\028\006\029\006\030\006\031\006 \006!\006\"\006#\006$\006%\006&\006'\006(\006\031\006 \006!\006c\006d\005\181\005\182\005\183\006e\006f\006g\006h\006i\006j\006k\006l\006m\006n\000T\000U\006)\006*\006+\006,\006-\006.\006/\0060\0061\0062\0063\0064\0065\0066\0067\0068\0069\005\166\005\167\005\168\006:\006;\006<\006=\006>\006?\006@\006A\006B\006C\006D\006E\006F\006G\006H\006I\006J\006K\006L\006M\006N\006O\006P\006Q\006R\006S\006T\006U\006V\005z\005{\005\127\005\150\005\151\005\152\005\153\005\154\005\155\005\156\005\157\005\158\005\159\005\160\005\161\005\162\005\163\005\164\005\165\005\169\005\170\005\171\005\172\005\173\005\174\005\175\005\176\005\177\005\178\005\179\005\180\005\184\005\185\005\186\005\187\005\188\005\189\005\190\005\191\005\192\005\193\005\212\005\213\005\214\005\215\005\216\005\217\005\218\005\219\005\220\005\221\005\222\005\223\005\224\005\225\005\226\005\227\005\228\005\229\005\230\006W\006X\006Y\006Z\006[\006\\\006]\006^\006_\006`\006a\006b\006g\006h\006i\006)\006S\006T\006U\006V\006W\006X\006Y\006*\0061\0062\0063\0064\0065\0066\0067\0068\0069\006:\006;\006<\006=\006>\006?\006@\006A\006B\006C\006D\006E\006G\006H\006I\006J\006K\006L\006M\006N\006o\006p\005\212\005\213\005\214\005\215\005\153\005\154\005\155\005\156\005\157\005\158\005\152\005\159\005\160\005\161\005\162\005\163\005\164\005\165\005\169\005\170\005\171\005\172\005\173\005\174\005\175\005\176\005\216\005\218\005\219\005\220\005\221\005\222\005\223\005\224\005\225\005\226\005\227\005\228\005\229\005\230\006q\006r\006s\006t\006u\006v\006w\006x\006y\006z\006{\006|\006}\006~\006\127\006\128\006\129\006\130\006\131\006\132\006\133\006\134\006\135\006\136\006\137\006\138\006\139\006\140\006\141\006\142\005\254\005\255\006\000\006\001\006\002\006\003\006\004\006\005\006\143\006\144\006\145\006\146\006\147\006\148\006\149\006\150\006\151\006\152\006\153\006\154\005\186\005\187\005\188\005\194\005\195\005\196\005\197\005\198\005\199\005\200\005\201\005\202\005\203\005\204\005\205\005\206\005\207\005\208\005\209\005\210\005\211\005\231\005\232\005\233\005\234\005\235\005\236\005\237\005\238\005\239\005\240\005\241\005\242\005\243\005\244\005\245\005\246\005\247\005\248\005\249\005\250\005\251\005\252\005\253\006\006\006\007\006\b\006\t\006\n\006\011\006\012\006\r\006\014\006\015\006\016\006\017\006\018\006\019\006\020\006\021\006\022\006\023\006\150\006\151\006\155\006\156\006\155\006\156\006\157\006\158\006\159\004S\004T\004U\004V\006\204\006\205\006\206\006\207\006\208\006\209\006\210\006\211\006\212\006\213\001\140\001\141\006\214\006\215\006\216\006\217\006\218\004\159\004\160\004\161\004\162\004\163\004\164\004\165\004\166\004\167\004\168\004\169\004\170\004\171\004\172\002a\002b\002\151\002\152\002\153\002\154\002\155\002\156\002\157\002\158\002\159\002\160\002\161\002\162\002\163\002\164\002\165\002\166\002\129\002\167\002\157\002\158\002\159\002\160\002\161\002\162\002\163\004b\005\017\005\018\005\019\005\020\005\021\005\022\005\023\005\024\005\025\005\026\005\027\005\028\005\029\006\202\006\203\005\002\005\003\005\004\006\173\006\174\001\131\001\132\001\133\001\135\001?\001@\001\031\001 \001A\001-\001<\001\136\001\137\001C\001D\001E\001F\001G\001H\001I\001J\001K\001\138\001\139\001\142\001\145\001\146\001\147\001\150\001\151\001L\001M\001N\001O\001P\001Q\001R\001\152\001\153\001\154\001\155\001\156\001\157\001\158\001\159\001\160\001\161\001\162\001\163\001[\001\\\001\165\001\166\001\167\001\168\001\169\001\170\001\171\001\172\001\173\001\174\001\175\001\178\001\179\001\180\001\181\006\163\006\164\006\165\006\166\006\167\006\168\005\005\005\006\005\007\005\b\005\t\005\n\005\011\005\012\005\r\005\014\005\015\005\016\004a\004b\004c\004d\004e\004f\005\017\005\018\004j\004k\005\019\005\020\005\021\005\022\005\023\005\024\005\025\005\026\005\027\005\028\005\029\001\220\001\221\001\222\001\224\0029\004\134\004\135\004\136\004\137\004\138\004\139\004\140\004\141\004\142\004\143\004\144\004\145\004\146\004\147\004\148\004\149\003J\003K\003L\003M\003N\003O\003P\003Q\004\150\004\151\002\\\004t\004u\004v\004w\004x\005 \005!\005\"\005#\005$\005%\005&\005'\005(\005)\005*\005+\005,\005-\005.\005/\0050\0051\0052\0053\0054\0055\0056\0057\0058\0059\005:\006\024\005o\005p\005q\005s\005w\005x\005y\005\194\005\195\005\196\005\197\005\198\005\199\005\200\005\201\005\202\005\203\005\204\005\205\006\025\006\026\006\027\006\028\006\029\006\030\006o\006p\006q\006r\006s\006t\006u\006v\006w\006x\006y\006z\006{\006|\006}\006~\006\127\006\128\006\129\006\130\006\131\006\132\006\133\006\134\006\135\006\136\006\137\003H\003I\003c\003d\003f\003\r\006\138\006\139\003e\006\140\006\141\006\142\005\254\005\255\006\000\006\001\006\002\006\003\006\004\006\005\006\143\006\144\006\145\006\169\006\170\006\171\006\152\006\172\006\154\006\160\006\161\006\162\006\147\006\148\006\149\006\153\004\173\004\174\004\175\004\176\004!\004\"\004#\004$\004%\004&\004'\004(\0025\0026\0027\0028\003k\003l\003m`\001a\001b\001c\001d\001e\001f\001g\001h\001i\001j\001k\001l\001m\001n\001o\001p\001q\001r\006\175\006\176\006\177\006\178\006\179\006\180\006\181\006\182\006\183\006\184\006\185\006\186\006\187\006\188\006\189\006\190\006\191\006\192\006\193\006\194\005<\005=\005>\005?\005@\005A\005B\005C\005D\005E\005F\005G\005H\005I\005J\005K\005L\005M\005N\005O\005P\005Q\005R\005S\005T\005U\005V\005W\005X\005Y\005Z\005[\005\\\005]\005^\005_\005`\005a\005b\005c\005d\005e\005f\005g\005h\005i\005j\005k\005l\005m\005n\005\206\005\207\005\208\005\209\005\210\005\211\005\231\005\232\005\233\005\234\005\235\005\236\005\237\005\238\005\239\005\240\005\241\005\242\005\243\005\244\005\245\005\246\005\247\005\248\005\249\005\250\005\251\005\252\005\253\006\006\006\007\006\b\006\t\006\n\006\011\006\012\006\rb\007\t\007\n\007\011\007\012\007\r\007\014\007\015\007\016\007\017\007\018\007\019\007\020\007\021\007\022\007\023\007\024\007\025\007\026\007\027\007\028\007\029\007\030\007\031\007 \007!\007\"\007#\007$\007%\007&\007'\007(\007)")
    
    and lr0_items =
      ((32, "\000\000\000\000\000\000>\129\000\000_\001\000\001u\001\000\001t\129\000\001t\001\000\001s\129\000\001s\001\000\001\\\129\000\001r\129\000\001r\001\000\001q\129\000\001q\001\000\001p\129\000\001p\001\000\001o\129\000\001o\001\000\001n\129\000\001n\001\000\001m\129\000\001m\001\000\001l\129\000\001l\001\000\001k\129\000\001k\001\000\001j\129\000\001j\001\000\001i\129\000\001\\\001\000\001i\001\000\001h\129\000\001h\001\000\001g\129\000\001g\001\000\001f\129\000\001f\001\000\001e\129\000\001e\001\000\001d\129\000\001d\001\000\001c\129\000\001c\001\000\001b\129\000\001b\001\000\001a\129\000\001a\001\000\001`\129\000\001`o\001\000\000o\129\000\000\007\002\000\000\223\001\000\000\223\002\000\000\223\003\000\000\222\129\000\000\011\129\000\000\t\001\000\000\006\129\000\000\006\001\000\000\006\130\000\000\006\131\000\000\006\132\000\000\164\001\000\000o\001\000\000\175\129\000\000\175\001\000\000\175\130\000\000\175\002\000\001$\001\000\001#\129\000\000n\129\000\000n\001\000\000m\129\000\000m\001\000\001$\002\000\001#\130\000\000n\130\000\000n\002\000\000m\130\000\000m\002\000\001$\003\000\001#\131\000\000n\131\000\000n\003\000\000m\131\000\000m\003\000\001\146\001\000\001$\004\000\000n\132\000\000m\132\000\001\146\129\000\001\144\001\000\001\142\129\000\001\145\001\000\001\144\129\000\001\144\130\000\001\142\130\000\001\017\129\000\001\144\002\000\001\018\001\000\001\144\003\000\001\018\002\000\001\018\003\000\001$\005\000\000n\133\000\000m\133\000\001\141\129\000\000n\134\000\000m\134\000\001\141\001\000\000\164\001\000\0000\001\000\0002\129\000\000\193\129\000\000\191\129\000\000\189\129\000\000\188\129\000\0001\129\000\0001\001\000\000\011\129\000\000\t\001\000\000\006\129\000\000\006\001\000\0001\002\000\001\141\129\000\000f\129\000\000f\130\000\001\141\129\000\000\n\001\000\000\t\129\000\001\141\129\000\000\159\001\000\000\158\001\000\000\157\001\000\000\159\002\000\000\158\002\000\000\157\002\000\001\011\001\000\000\007\001\000\001\011\002\000\000\007\002\000\000\015\001\000\000\014\129\000\000\214\001\000\000\015\002\000\000\014\130\000\000\014\001\000\000\r\129\000\000\014\002\000\000\r\130\000\000\r\001\000\000\012\129\000\000\012\001\000\000\n\129\000\000\n\130\000\000\012\130\000\000\185\129\000\000\185\130\000\000\b\001\000\000g\001\000\000e\129\000\000g\002\000\001\137\129\000\001\021\129\000\001\021\130\000\001\142\001\000\000\165\129\000\000\165\001\000\000\164\129\000\000\165\130\000\000\165\002\000\000\165\131\000\000\165\129\000\000\165\003\000\000\165\001\000\000\164\129\000\000\165\004\000\000\164\130\000\000\164\131\000\001\142\002\000\000\164\130\000\001\142\003\000\000\015\129\000\001\021\131\000\000\011\001\000\000\b\129\000\000\011\002\000\000\011\003\000\000\b\130\000\000f\001\000\000f\002\000\000f\003\000\000f\004\000\001\137\001\000\001\022\001\000\000\011\001\000\000\b\129\000\001\022\002\000\001\022\003\000\000\011\001\000\000\b\129\000\000g\003\000\001\022\129\000\001\015\129\000\001\016\001\000\000\012\131\000\000\012\132\000\001\016\002\000\001\016\003\000\001\131\001\000\001\130\129\000\001\130\130\000\000\212\129\000\001\130\131\000\001\130\132\000\001\014\001\000\001\014\002\000\000\004\129\000\001\014\003\000\000\005\001\000\000\005\002\000\000\005\003\000\000\005\004\000\001\130\133\000\001\r\129\000\000\005\001\000\001\131\002\000\001\023\001\000\000:\001\000\000:\002\000\0009\129\000\000\005\001\000\001\022\129\000\000\012\002\000\000\012\003\000\000\r\002\000\000\r\003\000\001\016\001\000\000\r\004\000\000\r\005\000\001\016\001\000\000\r\131\000\000\r\132\000\001\016\001\000\000\015\003\000\000\014\131\000\000\014\132\000\000\015\004\000\001\n\129\000\000\015\005\000\000\015\006\000\001\n\130\000\001\n\001\000\001\011\129\000\000\250\001\000\001\011\130\000\001\011\131\000\000\250\002\000\000\250\003\000\000\005\001\000\000\159\003\000\000\158\003\000\000\157\003\000\000\159\004\000\000\158\004\000\000\157\004\000\000\158\005\000\000\157\005\000\000\158\006\000\000\157\006\000\000\160\001\000\000\157\007\000\000\159\129\000\000\158\129\000\000\157\129\000\000\011\001\000\000\b\129\000\000\158\130\000\000\157\130\000\000\157\131\000\000\249\129\000\000\005\001\000\000\n\002\000\000\t\130\000\000\t\131\000\000f\131\000\000f\132\000\000f\133\000\0001\130\000\0001\131\000\001\019\129\000\000\011\130\000\000\t\002\000\000\011\131\000\000\t\003\000\000\011\132\000\000\011\133\000\000\t\004\000\001\019\130\000\001\019\131\000\000:\001\000\001\020\001\000\000:\001\000\000\006\002\000\000\006\003\000\001\020\002\000\001\020\003\000\000:\001\000\0000\129\000\000\r\001\000\000\012\129\000\000\012\001\000\0000\130\000\000\193\130\000\000\182\129\000\000r\001\000\000q\129\000\000r\002\000\000q\130\000\000r\003\000\000q\131\000\000r\004\000\000q\132\000\000r\005\000\000q\133\000\000r\006\000\000r\007\000\000\193\131\000\000\193\132\000\000s\129\000\000s\001\000\000s\130\000\000r\129\000\0002\001\000\000\191\130\000\000l\001\000\0008\129\000\0000\001\000\0001\129\000\0001\001\000\0000\129\000\000l\002\000\000j\129\000\0008\001\000\0008\002\000\0008\003\000\001\019\001\000\0007\129\000\001\019\002\000\0007\130\000\001\019\003\000\0007\131\000\000\011\001\000\000\b\129\000\000j\130\000\001\018\129\000\0007\001\000\000\011\001\000\000\b\129\000\000k\129\000\000k\001\000\000k\002\000\000k\003\000\000k\004\000\000\011\001\000\000\b\129\000\001\018\129\000\000k\130\000\0007\001\000\000\011\001\000\000\b\129\000\000l\003\000\000l\004\000\001\002\001\000\0009\001\000\000l\001\000\001\002\002\000\001\001\001\000\001\001\129\000\000\188\130\000\000:\001\000\000\189\130\000\000l\129\000\000l\130\000\000lm\135\000\000m\136\000\001\007\129\000\000m\137\000\000\250\129\000\000\250\130\000\001}\001\000\001|\129\000\000n\129\000\000n\001\000\001}\002\000\001|\130\000\000n\130\000\000n\002\000\001}\003\000\001|\131\000\000n\131\000\000n\003\000\001}\004\000\000n\132\000\001}\005\000\000n\133\000\001\141\129\000\000n\134\000\000n\135\000\001\007\129\000\000n\136\000\001\007\130\000\001\007\131\000\000:\001\000\001\007\132\000\001\007\133\000\000:\001\000\000\142\001\000\000\142\002\000\000n\137\000\001}\006\000\001}\007\000\000\252\001\000\001}\b\000\000l\001\000\000`\001\000\000l\002\000\000`\002\000\000`\003\000\0005\001\000\0004\129\000\0005\002\000\0005\003\000\0004\001\000\0004\002\000\0005\129\000\000\166\129\000\0003\129\000\0003\001\000\000\166\130\000\0003\130\000\0003\131\000\0003\132\000\0003\133\000\000`\004\000\000`\005\000\001}\t\000\001\005\001\000\001\004\129\000\001}\n\000\001\004\130\000\001\005\002\000\001\002\129\000\001\003\129\000\001\003\001\000\001\004\001\000\000l\129\000\000`\129\000\000`\130\000\000`\131\000\000`\132\000\001\143\129\000\001|\132\000\000n\004\000\001\141\129\000\000n\005\000\000n\006\000\001\007\129\000\000n\007\000\000n\b\000\001|\133\000\001|\134\000\001|\135\000\001|\136\000\001\005\001\000\001\004\129\000\001|u\001\000\000\166\129\000\000u\129\000\000\166\130\000\000u\130\000\000u~\001\000\000}\129\000\000}\001\000\000|\129\000\000{\001\000\000z\129\000\000z\130\000\000t\129\000\000t\001\000\000t\130\000\000t\131\000\000:\001\000\000z\131\000\000z\132\000\000{\002\000\000y\001\000\000x\129\000\000x\130\000\000x\131\000\000\221\001\000\000W\001\000\001P\001\000\000\131\001\000\000z\001\000\000y\129\000\000\245\129\000\000y\130\000\000\236\129\000\000\236\001\000\000\234\129\000\000\234\001\000\000\233\129\000\000\232\129\000\000\232\001\000\000\231\001\000\000\230\129\000\000\130\129\000\000\130\001\000\000\130\130\000\000\130\131\000\000:\001\000\000y\131\000\000y\132\000\000y\133\000\000\245\001\000\000z\002\000\001\150\001\000\001\149\129\000\001\149\001\000\001\148\129\000\001w\129\000\001[\001\000\001Z\129\000\001Z\001\000\001Y\129\000\001Y\001\000\001R\129\000\001R\001\000\001Q\001\000\0005\001\000\0004\129\000\001w\130\000\000\186\129\000\000\186\001\000\000\186\130\000\001w\131\000\001w\132\000\000{\129\000\000{\130\000\001v\129\000\000\127\129\000\000B\001\000\000A\129\000\000A\001\000\000@\129\000\000B\002\000\000A\130\000\000B\003\000\000B\004\000\000B\005\000\000\170\129\000\000\170\130\000\000h\001\000\000g\129\000\000i\001\000\000h\129\000\000g\130\000\000h\002\000\000h\003\000\000\177\129\000\000\177\001\000\000\176\001\000\000\176\002\000\001\b\129\000\000i\129\000\001\bo\001\000\000\181\131\000\000\181\001\000\000\180\001\000\001\b\001\000\000\179\129\000\000\179\001\000\000\178\001\000\000\177\130\000\000\177\002\000\000\177\131\000\000\177\003\000\000\179\129\000\000\179\001\000\000\178\001\000\000h\004\000\000hu\001\000\0010\001\000\001/\129\000\000H\001\000\000H\002\000\000H\003\000\001<\001\000\001;\129\000\001;\001\000\001<\002\000\001;\130\000\001;\002\000\001<\003\000\001;\131\000\001;\003\000\000F\001\000\000E\129\000\000F\002\000\000E\130\000\000F\003\000\000E\131\000\000B\129\000\000B\130\000\000B\131\000\001\012\129\000\000\236\129\000\000\236\001\000\000\234\129\000\000\234\001\000\000\233\129\000\000\232\129\000\000\232\001\000\000\231\001\000\000\230\129\000\000\156\001\000\000\155\129\000\000\155\001\000\000\155\130\000\000C\129\000\000C\001\000\000C\130\000\000C\002\000\000C\131\000\000C\003\000\001\150\001\000\001\149\129\000\001\149\001\000\001\148\129\000\001[\001\000\001Z\129\000\001Z\001\000\001Y\129\000\001Y\001\000\001R\129\000\001R\001\000\001Q\001\000\000C\132\000\0005\001\000\0004\129\000\000C\133\000\000C\134\000\000C\135\000\000c\129\000\000?\129\000\000?\001\000\000?\130\000\000?\002\000\000?\131\000\000?\003\000\000\236\129\000\000\236\001\000\000\234\129\000\000\234\001\000\000\233\129\000\000\232\129\000\000\232\001\000\000\231\001\000\000\230\129\000\000?\132\000\000?\004\000\000?\133\000\000G\001\000\000G\002\000\000G\003\000\000\236\129\000\000\236\001\000\000\234\129\000\000\234\001\000\000\233\129\000\000\232\129\000\000\232\001\000\000\231\001\000\000\230\129\000\000G\004\000\000G\005\000\001A\001\000\001>\129\000\001\150\129\000\001E\129\000\001E\001\000\001C\001\000\001A\002\000\001:\129\000\001:\001\000\0019\129\000\0019\001\000\0018\129\000\0018\001\000\0017\129\000\0017\001\000\0016\129\000\0016\001\000\0015\129\000\0015\001\000\0014\129\000\0014\001\000\0013\129\000\0013\001\000\0012\129\000\0012\001\000\001E\130\000\001E\131\000\001E\129\000\001E\001\000\001C\001\000\001:\129\000\001:\001\000\0019\129\000\0019\001\000\0018\129\000\0018\001\000\0017\129\000\0017\001\000\0016\129\000\0016\001\000\0015\129\000\0015\001\000\0014\129\000\0014\001\000\0013\129\000\0013\001\000\0012\129\000\0012\001\000\001E\002\000\001E\003\000\0016\130\000\0016\002\000\0015\130\000\0015\002\000\0014\130\000\0014\002\000\0015\131\000\0015\003\000\000G\129\000\000G\130\000\000G\131\000\001E\129\000\001E\001\000\001C\001\000\001:\129\000\001:\001\000\0019\129\000\0019\001\000\0018\129\000\0018\001\000\0017\129\000\0017\001\000\0016\129\000\0016\001\000\0015\129\000\0015\001\000\0014\129\000\0014\001\000\0013\129\000\0013\001\000\0012\129\000\0012\001\000\000G\132\000\001C\002\000\001:\130\000\001:\002\000\0019\130\000\0019\002\000\0018\130\000\0018\002\000\0017\130\000\0017\002\000\0013\130\000\0013\002\000\0012\130\000\0012\002\000\0012\131\000\0012\003\000\000U\129\000\001E\129\000\001E\001\000\001C\001\000\001:\129\000\001:\001\000\0019\129\000\0019\001\000\0018\129\000\0018\001\000\0017\129\000\0017\001\000\0016\129\000\0016\001\000\0015\129\000\0015\001\000\0014\129\000\0014\001\000\0013\129\000\0013\001\000\0012\129\000\0012\001\000\000]\001\000\000\\\129\000\000\\\001\000\000[\129\000\000[\001\000\000Z\129\000\000Z\001\000\000Y\129\000\000Y\001\000\000X\129\000\000I\129\000\000@\001\000\000w\001\000\000w\002\000\000w\129\000\000w\130\000\000x\001\000\001E\129\000\001E\001\000\001C\001\000\001:\129\000\001:\001\000\0019\129\000\0019\001\000\0018\129\000\0018\001\000\0017\129\000\0017\001\000\0016\129\000\0016\001\000\0015\129\000\0015\001\000\0014\129\000\0014\001\000\0013\129\000\0013\001\000\0012\129\000\0012\001\000\000xb\000\001O\137\000\001O\t\000\000\179\129\000\000\179\001\000\000\178\001\000\001O\n~\129\000\000~\130\000\000~u\129\000\0003\129\000\0003\001\000\001\151\002\000\001O\130\000\001O\002\000\001N\130\000\001N\002\000\001M\130\000\001L\002\000\001K\130\000\001K\002\000\001I\002\000\001H\130\000\001G\002\000\001F\130\000\001D\130\000\001D\002\000\001C\130\000\000\166\130\000\000u\130\000\0003\130\000\001\148\001\000\000u\131\000\001\151\003\000\000v\129\000\001E\129\000\001E\001\000\001C\001\000\001:\129\000\001:\001\000\0019\129\000\0019\001\000\0018\129\000\0018\001\000\0017\129\000\0017\001\000\0016\129\000\0016\001\000\0015\129\000\0015\001\000\0014\129\000\0014\001\000\0013\129\000\0013\001\000\0012\129\000\0012\001\000\000vub\000\001\021\001\000\000]\129\000\000\\\tb\000\001\021\001\000\000]\129\000\000]\tv\001\000\001\t\129\000\000I\130\000\001\t\130\000\001\tu\129\000\0019\132\000\0019\004\000\0018\132\000\0018\004\000\0017\132\000\0017\004\000\0018\133\000\0018\005\000\0018\134\000\0018\006\000\001\021\001\000\000]\129\000\000W\129\000\000U\001\000\000T\129\000\000T\001\000\000S\129\000\000S\001\000\000R\129\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\0018\007\000\0017\133\000\0017\005\000\0017\134\000\0017\006\000\001\021\001\000\000]\129\000\000W\129\000\000U\001\000\000T\129\000\000T\001\000\000S\129\000\000S\001\000\000R\129\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\0017\007\000\0019\133\000\0019\005\000\0019\134\000\0019\006\000\001\021\001\000\000]\129\000\000W\129\000\000U\001\000\000T\129\000\000T\001\000\000S\129\000\000S\001\000\000R\129\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\0019\007\000\001C\003\000\0015\132\000\0015\004\000\001\021\001\000\000]\129\000\000W\129\000\000U\001\000\000T\129\000\000T\001\000\000S\129\000\000S\001\000\000R\129\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\0015\005\000\0014\131\000\0014\003\000\0014\132\000\0014\004\000\001\021\001\000\000]\129\000\000W\129\000\000U\001\000\000T\129\000\000T\001\000\000S\129\000\000S\001\000\000R\129\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\0014\005\000\0016\131\000\0016\003\000\0016\132\000\0016\004\000\001\021\001\000\000]\129\000\000W\129\000\000U\001\000\000T\129\000\000T\001\000\000S\129\000\000S\001\000\000R\129\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\0016\005\000\000G\006\000\000:\129\000\000;\001\000\000G\007\000\000G\b\000\000G\t\000\000G\n\000\000G\011\000\000?\134\000\000?\135\000\000?\136\000\000?\137\000\000?\005\000\000?\006\000\000?\007\000\000?\b\000\000?\t\000\000?\n\000\000?\011\000\000c\130\000\001\150\001\000\001\149\129\000\001\149\001\000\001\148\129\000\001[\001\000\001Z\129\000\001Z\001\000\001Y\129\000\001Y\001\000\001R\129\000\001R\001\000\001Q\001\000\000e\001\000\0005\001\000\0004\129\000\000e\002\000\000e\003\000\000e\004\000\000d\001\000\000d\002\000\000\011\001\000\000\b\129\000\000d\003\000\000d\004\000\000|\001\000\000d\129\000\000d\130\000\000er\001\000\000\156\129\000\001\r\002\000\001\r\003\000\000B\132\000\001\012\001\000\000F\004\000\000E\132\000\000F\005\000\000E\133\000\001\021\001\000\000]\129\000\000W\129\000\000U\001\000\000T\129\000\000T\001\000\000S\129\000\000S\001\000\000R\129\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\000F\006\000\000E\134\000\000E\135\000\001\021\001\000\000]\129\000\000W\129\000\000U\001\000\000T\129\000\000T\001\000\000S\129\000\000S\001\000\000R\129\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\000E\136\000\001;\132\000\001<\004\000\001;\004\000\001<\005\000\001;\005\000\001E\129\000\001E\001\000\001C\001\000\001:\129\000\001:\001\000\0019\129\000\0019\001\000\0018\129\000\0018\001\000\0017\129\000\0017\001\000\0016\129\000\0016\001\000\0015\129\000\0015\001\000\0014\129\000\0014\001\000\0013\129\000\0013\001\000\0012\129\000\0012\001\000\000H\004\000\001/\130\000\001\021\001\000\000]\129\000\000W\129\000\000U\001\000\000T\129\000\000T\001\000\000S\129\000\000S\001\000\000R\129\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\001/\131\000\001E\129\000\001E\001\000\001C\001\000\001:\129\000\001:\001\000\0019\129\000\0019\001\000\0018\129\000\0018\001\000\0017\129\000\0017\001\000\0016\129\000\0016\001\000\0015\129\000\0015\001\000\0014\129\000\0014\001\000\0013\129\000\0013\001\000\0012\129\000\0012\001\000\0010\002\000\001H\002\000\001G\130\000\001H\003\000\001G\131\000\001\021\001\000\000\218\002\000\000]\129\000\000W\129\000\000U\001\000\000T\129\000\000T\001\000\000S\129\000\000S\001\000\000R\129\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\001\026\002\000\001\025\130\000\001\025\002\000\001\026\003\000\001\025\131\000\001\026\004\000\001B\130\000\001B\002\000\001A\130\000\001B\003\000\001A\131\000\001M\002\000\001L\130\000\001M\003\000\001L\131\000\001J\130\000\001J\002\000\001I\130\000\001J\003\000\001I\131\000\000B\b\000\000A\131\000\000A\132\000\000\173\001\000\000\172\129\000\000\171\129\000\000A\133\000\000A\134\000\000A\135\000\000@\130\000\000@\131\000\000@\132\000\000@\133\000\000\167\001\000\000\173\001\000\000\172\129\000\000\171\129\000\000\167\002\000\000\167\129\000\000\179\129\000\000\179\001\000\000\178\001\000\000\167\130\000\000\167\131\000\000\173\001\000\000\172\129\000\000\171\129\000\000\167\132\000\000@\134\000\000@\135\000\000@\136\000\000\168\001\000\000\168\002\000\000A\002\000\000A\003\000\000A\004\000\000A\005\000\000A\006\000\000A\007\000\000A\b\000\000A\t\000\000\127\130\000\000\127\131\000\000\127\132\000\000\127\133\000\000\127\134\000\001v\130\000\000c\001\000\000c\002\000\000c\003\000\000b\129\000\001w\001\000\001w\002\000\001w\133\000\000\131\002\000\000\221\002\000\000x\132\000\000x\133\000\000y\002\000\001\139\129\000\001\138\129\000\001\138\001\000\000~\002\000\000}\130\000\000~\003\000\000~\004\000\000~\005\000\000~\006\000\000:\001\000\000~\007\000\000~\b\000\001\011\129\000\000}\131\000\000}\132\000\000}\133\000\000:\001\000\000}\134\000\000}\135\000\000}\002\000\000}\003\000\000}\004\000\000|bb\000\000:\001\000\000\163\t\000\000\163\n\000\000\162\005\000\000\162\006\000\000\162\007\000\000\161\004\000\000q\001\000\000q\002\000\000\248\001\000\000\247\129\000\000\248\002\000\000\247\130\000\000\236\129\000\000\236\001\000\000\234\129\000\000\234\001\000\000\233\129\000\000\232\129\000\000\232\001\000\000\231\001\000\000\230\129\000\000\248\003\000\000\248\004\000\001~\129\000\001~\001\000\000\180\129\000\000\180\130\000\000\180\131\000\000\180\132\000\000\180\133\000\000\219\001\000\000\219\002\000\000\179\129\000\000\179\001\000\000\178\001\000\000\180\134\000\000\180\135\000\001~\130\000\001~\002\000\001~\131\000\001~\003\000\001~\004\000\001~\005\000\001~\006\000\001~\132\000\001~\133\000\001~\134\000\001~\135\000\000\137\001\000\000\137\002\000\000\137\003\000\000\137\004\000\000\137\005\000\000\137\006\000\001~\136\000\000a\001\000\000a\002\000\001\129\001\000\001\129\002\000\001\129\003\000\001\129\004\000\000\173\001\000\000\172\129\000\000\171\129\000\001\129\005\000\000\251\001\000\000\251\002\000\000\251\003\000\000\251\004\000\000\251\005\000\000\251\006\000\000:\001\000\000\251\007\000\000\187\129\000\000\187\001\000\000\187\130\000\000\251\b\000\000\251\t\000\001v\001\000\001\031\129\000\001v\002\000\001\031\130\000\001v\003\000\001\031\131\000\001v\004\000\001\031\132\000\001v\005\000\001v\006\000\001v\007\000\001v\bb\001\000\001\018\001\000\000b\002\000\000bb\000\000\136\t\000\000,\139\000\001(\130\000\001(\131\000\001(\132\000\001(\133\000\001(\134\000\001(\135\000\001\141\129\000\000-\001\000\000+\129\000\000+\130\000\000+\131\000\000+\132\000\000#\001\000\000\r\001\000\000\012\129\000\000\012\001\000\001\023\001\000\001\016\129\000\000:\001\000\000,\001\000\000,\002\000\000+\001\000\000+\002\000\000+\003\000\001\142\001\000\000\165\129\000\000\165\001\000\000\164\129\000\000-\129\000\001\142\002\000\000\164\130\000\000-\130\000\001\142\003\000\000-\131\000\000#\129\000\000\015\129\000\000+\004\000\000*\129\000\000%\001\000\000,\003\000\000+\133\000\001(\136\000\001(\137\000\000\135\001\000\000\135\002\000\000\135\003\000\000\135\004\000\000\135\005\000\000\135\006\000\000\135\007\000\000\135\b\000\000\135\t\000\001(\138\000\001!\129\000\000\143\129\000\001$\129\000\001\"\001\000\001'\129\000\001'\001\000\001&\001\000\000\143\130\000\001 \129\000\001 \130\000\001\"\129\000\000\140\001\000\000\140\002\000\000\140\003\000\000\140\004\000\000\140\005\000\001\007\129\000\000\140\006\000\000\140\007\000\000\140\b\000\001\"\130\000\001#\001\000\000\141\001\000\000\141\002\000\000\141\003\000\000\141\004\000\000\141\005\000\000\141\006\000\001\007\129\000\000\141\007\000\000\141\b\000\000\141\tt\129\000\000\020\130\000\000'\129\000\000\020\001\000\000\018\131\000\000\020\002\000\000\129\130\000\000\027\003\000\000\020\001\000\000\027\130\000\000\018\003\000\000\020\001\000\000\019\135\000\000\019\003\000\000\166\129\000\000\019\004\000\000\019\005\000\000\020\001\000\000\019\006\000\000\128\130\000\000\128\131\000\000\128\132\000\000\128\133\000\000)\130\000\000)\002\000\000'\002\000\000&\130\000\000\020\001\000\000'\003\000\000&\131\000\000)\131\000\000)\003\000\000)\132\000\000)\004\000\000)\133\000\000)\005\000\000\022\004\000\000\020\001\000\000\216\001\000\000\216\002\000\000\022\005\000\000\022\006\000\000\021\130\000\000\021\131\000\000\020\001\000\000\021\132\000\000\021\133\000\000\023\129\000\000\023\130\000\000\023\131\000\000\023\132\000\000*\004\000\000(\132\000\000(\133\000\000*\005\000\000\024\129\000\000\024\130\000\000\025\001\000\000\147\129\000\000\147\130\000\000\025\130\000\000\020\001\000\000\026\001\000\000\026\002\000\000\026\003\000\000\026\004\000\000\020\001\000\000\026\129\000\000\026\130\000\001\128\007\000\001\128\b\000\000\134\001\000\000\134\002\000\000\134\003\000\000\134\004\000\000\134\005\000\000\134\006\000\000\134\007\000\000\134\b\000\001\128\t\000\001{\129\000\000\145\129\000\000\127\129\000\001}\129\000\001u\129\000\001{\001\000\001\127\129\000\001\127\001\000\001y\001\000\000\154\129\000\000\145\130\000\001y\129\000\000\128\001\000\001z\001\000\001z\002\000\001|\001\000\001|\002\000\001z\129\000\001\128\129\000\000\246\001\000\001x\129\000\001x\130\000\001x\131\000\000a\003\000\000a\004\000\001y\001\000\000\154\129\000\000;\129\000\001x\001\000\001y\129\000\000\128\001\000\000V\129\000\000q\003\000\000q\004\000\000I\005\000\000H\133\000\000I\006\000\000H\134\000\000\170\003\000\000\169\131\000\000\170\004\000\000\169\132\000\000\195\133\000\000\173\001\000\000\172\129\000\000\171\129\000\000\195\134\000\000\195\002\000\000\195\003\000\000\195\004\000\000\173\001\000\000\172\129\000\000\171\129\000\000\195\005\000\000\145\002\000\000\145\003\000\000\145\004\000\000\144\130\000\000\250\131\000\000\250\132\000\000m\138\000\001$\006\000\001$\007\000\001$\b\000\001$\t\000\001\006\129\000\001$\n\000\001\006\130\000\001\005\129\000\001\006\001\000\001#\132\000\000n\004\000\000m\004\000\001\141\129\000\000n\005\000\000m\005\000\000m\006\000\000m\007\000\001\007\129\000\000m\b\000\000m\t\000\001#\133\000\001#\134\000\001#\135\000\001#\136\000\001\006\129\000\001#\137\000\000\175\131\000\000\175\003\000\000\175\132\000\000\175\004\000\000\179\129\000\000\179\001\000\000\178\001\000\000\006\133\000\000\006\134\000\001\154\006\000\000:\001\000\001\154\007\000\000_\131\000\000_\132\000\001E\129\000\001E\001\000\001C\001\000\001@\130\000\001:\129\000\001:\001\000\0019\129\000\0019\001\000\0018\129\000\0018\001\000\0017\129\000\0017\001\000\0016\129\000\0016\001\000\0015\129\000\0015\001\000\0014\129\000\0014\001\000\0013\129\000\0013\001\000\0012\129\000\0012\001\000\001\150\002\000\001>\002\000\001=\130\000\001=\002\000\001>\003\000\001=\131\000\001=\003\000\001>\004\000\001=\132\000\001=\004\000\001>\005\000\001=\133\000\001=\005\000\000\173\001\000\000\172\129\000\000\171\129\000\001=\006\000\001>\006\000\001=\134\000\001>\007\000\001=\135\000\000\179\129\000\000\179\001\000\000\178\001\000\001=\136\000\0011\130\000\0011\002\000\0010\130\000\0011\003\000\0010\131\000\0011\131\000\0011\132\000\000E\004\000\000D\132\000\000E\005\000\000D\133\000\000E\006\000\000D\134\000\000>\004\000\000=\132\000\000=\004\000\000<\132\000\000>\005\000\000=\005\000\000>\006\000\000=\006\000\000>\007\000\000>\b\000\000=\133\000\000=\134\000\000F\132\000\000F\133\000\000F\134\000\000F\135\000\000\017\003\000\000\017\004\000\000>\131\000\000>\132\000\000>\133\000\000>\134\000\000>\135\000\000p\001\000\000p\002\000\000\000\001\000\000\000\128\000\000p\129\000\000pb\000\t\000\n\000\011\000\012\000\r\000\014\000\015\000\016\000\017\000\018\000\019\000\020\000\021\000\022\000\023\000\024\000\025\000\026\000\027\000\028\000\029\000\030\000\031\000 \000!\000\"\000#\000$\000%\000&\000'\000(\000)\000*\000+\000,\000-\000.\000/\0000\0001\0002\0003\0004\0005\0006\0008\0009\000:\000;\000<\000=\000>\000?\000@\000A\000B\000C\000G\000K\000O\000Q\000S\000U\000V\000W\000X\000Y\000Z\000[\000\\\000^\000`\000a\000b\000c\000d\000e\000q\000r\000s\000t\000v\000w\000x\000y\000z\000{\000|b\001\n\001\014\001\017\001\019\001\021\001\023\001\024\001\026\001\028\001\029\001\030\001!\001\"\001#\001$\001%\001&\001'\001)\001*\001,\001-\0011\0013\0014\0018\0019\001:\001;\001=\001>\001?\001B\001C\001D\001E\001F\001G\001H\001I\001M\001N\001Q\001R\001S\001T\001V\001W\001X\001Y\001[\001\\\001]\001^\001`\001a\001b\001d\001e\001f\001g\001h\001j\001k\001m\001n\001p\001r\001s\001t\001u\001w\001x\001z\001{\001~b\002\t\002\n\002\011\002\012\002\r\002\014\002\022\002\028\002\031\002 \002!\002\"\002#\002$\002%\002&\002'\002(\002)\002*\002+\002,\002.\002/\0020\0024\0028\002<\002>\002@\002B\002C\002E\002F\002H\002I\002K\002L\002M\002N\002O\002P\002Q\002R\002T\002V\002W\002Y\002Z\002[\002\\\002]\002^\002a\002c\002d\002e\002f\002g\002h\002k\002l\002m\002n\002o\002p\002q\002r\002t\002u\002v\002w\002x\002z\002|\002}t\003\n\003\012\003\016\003\017\003\018\003\019\003\020\003\021\003\022\003\023\003\024\003\025\003\026\003\027\003\028\003\029\003\031\003 \003!\003\"\003#\003,\0034\0039\003:\003;\003<\003=\003>\003?\003@\003B\003C\003M\003O\003P\003Z\003\\\003]\003g\003i\003j\003t\003v\003w\003x\003y\003{\003\133\003\134\003\136\003\146\003\156\003\167\003\168\003\169\003\172\003\173\003\175\003\176\003\177\003\189\003\191\003\192\003\193\003\194\003\204\003\208\003\211\003\212\003\213\003\214\003\215\003\216\003\218\003\219\003\220\003\225\003\227\003\228\003\230\003\231\003\233\003\234\003\235\003\236\003\238\003\239\003\240\003\241\003\242\003\244\003\246\003\247\003\248\004\003\004\004\004\006\004\007\004\b\004\t\004\n\004\011\004\026\004\027\004\029\004\030\004\031\004 \004!\004\"\004#\004(\004*\004+\004,\004-\004.\004/\0041\0042\0043\0044\0045\0046\0048\0049\004:\004<\004=\004>\004?\004@\004D\004E\004G\004I\004K\004M\004N\004O\004Q\004R\004T\004V\004X\004[\004\\\004`\004a\004b\004f\004g\004i\004j\004k\004l\004p\004q\004u\004w\004y\004z\004{\004|\004}\004\130\004\131\004\132\004\136\004\137\004\138\004\139\004\140\004\144\004\156\004\157\004\164\004\165\004\166\004\168\004\173\004\174\004\175\004\176\004\177\004\179\004\180\004\184\004\185\004\188\004\191\004\194\004\197\004\198\004\200\004\202\004\203\004\204\004\205\004\206\004\207\004\210\004\213\004\216\004\218\004\220\004\222\004\223\004\224\004\225\004\226\004\238\004\239\004\241\004\243\004\245\005\004\005\005\005\006\005\007\005\b\005\n\005\012\005\014\005\025\005\026\005\027\005\028\005\029\005'\005(\005)\005*\005+\005A\005B\005X\005Y\005Z\005`\005b\005c\005d\005e\005{\005\136\005\138\005\139\005\172\005\173\005\174\005\175\005\176\005\177\005\199\005\200\005\219\005\237\005\247\005\248\005\250\005\252\005\255\006\001\006\003\006\b\006\n\006\011\006\015\006\016\006\018\006\020\006\022\006\024\006\025\006\027\006\028\006\029\006\031\006 \006\"\0068\0069\006:\006;\006=\006>\006?\006@\006B\006C\006D\006_\006`\006x\006y\006\145\006\146\006\170\006\171\006\195\006\196\006\220\006\221\006\245\006\246\007\014\007\015\007'\007(\007@\007A\007Y\007Z\007r\007s\007\139\007\140\007\164\007\165\007\189\007\190\007\214\007\215\007\239\007\240\b\b\b\t\b!\b\"\b:\b;\bS\bT\bl\bm\b\133\b\134\b\136\b\158\b\159\b\183\b\186\b\187\b\188\b\189\b\190\b\191\b\192\b\194\b\195\b\197\b\198\b\199\b\209\b\210\b\211\b\213\b\214\b\224\b\226\b\227\b\237\b\239\b\240\b\250\b\252\b\253\b\254\b\255\t\000\t\002\t\003\t\r\t\014\t\015\t\016\t\017\t)\t3\t4\t5\t7\t8\t9\t:\t;\t<\t>\t@\tA\tB\tE\tF\tH\tI\tJ\td\tf\tg\tj\tk\tm\tn\to\tq\ts\tt\tu\tw\t\141\t\142\t\143\t\146\t\148\t\149\t\151\t\154\t\155\t\158\t\159\t\161\t\162\t\165\t\168\t\170\t\171\t\172\t\174\t\175\t\176\t\196\t\215\t\217\t\218\t\219\t\241\t\250\t\253\n\023\n\024\n\026\n\027\n3\n6\nP\nQ\nS\nT\nl\no\n\137\n\138\n\140\n\141\n\165\n\185\n\188\n\191\n\192\n\194\n\195\n\219\n\222\n\225\n\226\n\228\n\229\n\253\011\000\011\026\011\027\011\029\011\030\0116\011A\011J\011M\011g\011h\011j\011k\011\131\011\134\011\160\011\161\011\163\011\164\011\188\011\191\011\217\011\218\011\220\011\221\011\245\011\247\011\248\012\016\012&\012(\012)\012*\012B\012D\012E\012G\012I\012J\012L\012e\012f\012n\012t\012v\012\143\012\144\012\146\012\171\012\172\012\174\012\199\012\200\012\201\012\226\012\227\012\229\012\254\012\255\r\001\r\026\r\027\r\028\r\029\r\030\r\031\r \r!\r\"\r#\r$\r%\r&\r'\r(\r)\r*\r+\r,\r-\r.\r/\r>\r?\r@\rA\rB\rE\rF\rG\rH\rI\rJ\rK\rN\r\\\r]\r^\ra\rb\re\rf\rg\rh\ri\rj\rk\rl\rm\ro\rp\rq\rr\rt\ru\rv\rw\rx\rz\r|\r\149\r\150\r\174\r\175\r\177\r\178\r\179\r\201\r\225\r\226\r\248\r\250\r\251\r\252\014\020\014\023\014\025\014\026\014\027\014\029\014\030\014\031\014!\014\"\014#\014$\014&\014'\014(\014)\014*\014+\014/\0140\0141\0142\0143\0144\0145\0146\014:\014;\014?\014@\014D\014E\014F\014G\014H\014I\014J\014K\014L\014M\014N\014O\014P\014Q\014R\014S\014T\014U\014V\014W\014X\014Y\014Z\014[\014\\\014]\014^\014_\014`\014a\014b\014c\014h\014i\014j\014k\014m\014n\014o\014q\014r\014t\014u\014v\014w\014x\014y\014z\014{\014|\014\148\014\149\014\150\014\151\014\152\014\153\014\154\014\184\014\185\014\186\014\188\014\189\014\193\014\194\014\197\014\198\014\203\014\204\014\205\014\209\014\210\014\214\014\219\014\220\014\221\014\232\014\233\014\234\014\236\014\237\014\239\014\240\014\242\014\244\014\246\014\248\014\249\014\250\014\251\014\252\014\253\014\254\014\255\015\002\015\004\015\005\015\007\015\b\015\t\015\n\015\011\015\r\015\015\015\017\015\018\015\019\015\020\015\021\015\022\015\023\015\026\015\029\015 \015#\015%\015&\015'\015(\015*\015+\015,\015.\015/\0151\0152\0153\0154\0156\0157\0158\0159\015=\015?\015@\015B\015C\015D\015E\015F\015G\015J\015M\015O\015P\015Q\015R\015T\015U\015V\015W\015X\015Y\015Z\015[\015\\\015^\015i\015j\015k\015n\015o\015p\015q\015r\015s\015w\015x\015y\015{\015}\015~b\016\t\016\n\016\011\016\012\016\r\016\015\016\016\016\017\016\018\016\019\016\020\016\021\016\023\016\024\016\025\016\026\016\027\016\029\016\031\016 \016\"\016#\016%\016&\016'\016)\016*\016,\016-\016.\016/\0160\0162\0163\0164\0165\0167\0168\016:\016;\016<\016=\016>\016?\016@\016A\016B\016C\016E\016G\016H\016I\016K\016L\016M\016O\016P\016T\016V\016W\016X\016Y\016[\016]\016^\016_\016a\016b\016c\016e\016f\016h\016j\016k\016l\016m\016o\016p\016r\016s\016t\016v\016w\016x\016y\016z\016{\016|\016}\016\127\016\128\016\129\016\130\016\131\016\132\016\133\016\134\016\136\016\137\016\138\016\139\016\140\016\141\016\142\016\143\016\144\016\145\016\148\016\149\016\150\016\151\016\155\016\158\016\159\016\160\016\161\016\162\016\163\016\168\016\171\016\173\016\175\016\176\016\178\016\179\016\180\016\181\016\182\016\183\016\184\016\185\016\186\016\187\016\188\016\189\016\190\016\191\016\192\016\193\016\194\016\195\016\196\016\197\016\198\016\199\016\200\016\201\016\202\016\203\016\204\016\205\016\206\016\207\016\208\016\210\016\211\016\212\016\213\016\214\016\215\016\216\016\217\016\218\016\219\016\220\016\222\016\223\016\224\016\225\016\226\016\227\016\228\016\229\016\230\016\232\016\234\016\235\016\236\016\237\016\238\016\239\016\240\016\242\016\244\016\246\016\247\016\248\016\249\016\250\016\252\016\253\016\254\017\002\017\006\017\007\017\b\017\t\017\n\017\011\017\012\017\014\017\015\017\016\017\018\017\019\017\020\017\022\017\023\017\024\017\025\017\026\017\028\017\029\017\031\017 \017!\017#\017%\017&\017(\017)\017*\017,\017-\017.\0170\0171\0173\0174\0176\0177\0178\0179\017:\017?\017@\017A\017C\017E\017F\017G\017I\017J\017K\017L\017M\017N\017P\017Q\017R\017S\017T\017U\017V\017X\017Y\017Z\017[\017\\\017]\017^\017_\017a\017b\017c\017d\017f\017g\017h\017i\017j\017k\017l\017m\017n\017o\017p\017q\017r\017s\017t\017u\017v\017w\017x\017y\017z\017{\017}\017~n\018\011\018\012\018\r\018\014\018\016\018\018\018\019\018\020\018\024\018\026\018\028\018\029\018\030\018\031\018 \018!\018\"\018#\018$\018%\018&\018'\018(\018)\018*\018+\018,\018-\018.\018/\0180\0181\0182\0183\0184\0186\0187\0188\0189\018:\018;\018<\018F\018G\018H\018I\018P\018W\018X\018Y\018Z\018[\018\\\018_\018a\018b\018c\018d\018e\018f\018g\018h\018i\018j\018k\018l\018m\018o\018p\018q\018r\018s\018t\018u\018v\018w\018x\018y\018z\018{\018|\018}\018~"))
    
    and nullable =
      "\000\016R\002\000\128\000\002\028 \003\255\001\128\000\127\255\000\000\004\b@\000`\000"
    
    and first =
      (132, "3\248H\002\197V\254fz\002\160\251\145@\003\142\003?\132\128,Uo\230g\160*\015\185\020\0008\224\001\136@\000@\0020$Z\000 \n\128\000\001\004\003\027\132\000,\020o\226G\160\b\015\160\020\000\024\224\001\128\000(\b\0000\184@\000 \000\000\000\000\000\000$\000\128\000A\000\004 \000 \000\025\000\000 \0003\248H\002\197V\254fz\002\128\251\145@\003\142\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000@\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000@\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\002\001\000\b\000\000\000\000\000\000\000\128\000\128\000\000\000\0000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\000\000\0003\248H\002\197V\254fz\002\160\251\145@\003\142\000\000\000\000\004\000 \000\000\000\000\000\000\000\000\000\000\001\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\002\004\000\"\000\000\000\000\000\000\000\000\000\000\001\000\000 @\002\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002@\000\001\128\000 \000\0000\184@\000 \000\000\000\000\000\003?\132\128,Uo\230g\160*\015\185\020\0008\224\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000$\000\000\000A\000\164 \000 \000\024\000\000 \0003\248H\002\197V\254fz\002\128\251\129@\003\142\000\024\164\000\132\128#\002E`\002\000\164\000\000\016@\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\005\237\217\016A\127\021 \000\1528\0298\224\176(4\001\136@\000@\002 $R\000 \n\000\000\001\004\000\024\132\000\004\000#\002E \002\000\160\000\000\016@\000\136@\002\000@0$r\000\000\n\001@\001\140\000\000\000\000\000\000\000\000E\000\000\000\000\000\000\000\000\000\000@\000@\002\000\000\002\000\000\b\000\000\001\000\000$\000\000\000A\000\004 \000 \000\024\000\000 \000\002@\b\000\004\016\000B\000\002\000\001\128\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\0001\184@\002\193F\254$z\000\128\250\001@\001\142\000\b\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\001\136@\000@\0020$Z\000 \n\128\000\001\004\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\0001\184@\002\193F\254$z\000\128\250\001@\001\142\000\024\000\002\128\128\003\011\132\000\002\000\000\000\000\000@\001\128\000 \000\0000\184@\000 \000\000\000\000\000\003\027\132\000,\020o\226G\160\b\015\160\020\000\024\224\001\128\000(\b\0000\184@\000 \000\000\000\000\000\000\024\000\002\000\000\003\011\132\000\002\000\000\000\000\000\000\001\000\000 @\002\000\000\000\000\000\000\000\000\000\000\000\024\000\002\128\128\003\011\132\000\002\000\000\000\000\000\000\001\128\000(\b\0000\184@\000 \000\000\000\000\004\000\004\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\128\000(\b\0000\184@\000 \000\000\000\000\000\000\024\132\000\004\000#\002E\160\002\000\168\000\000\017@\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\138@\n\b@0$v\000\000\n\001@\001\140\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\b\128\000\000\000\002\000\004\000\000\000 \000\000\001\000\000\136\000\000\000\000 \000@\000\000\002\000\000\000\016\000\b\128\000\000\000\002\000\004\000\000\000 \000\000\001\000\000\136@\002\000@0$r\000\000\n\001@\001\140\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\001\128\000(\b\0000\184@\000 \000\000\000\000\000\000\024\000\002\128\128\003\011\132\000\002\000\000\000\000\000\0003\248H\n\197V\254fz\002\128\251\129@\007\142\000\016\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\001\136@\000@\0020$Z\000 \n\000\000\001\004\000\024\132\000\004\000#\002E\160\002\000\160\000\000\016@\001\136@\000@\0020$Z\000 \n\000\000\001\004\000\024\132\000\004\000#\002E\160\002\000\168\000\000\016@\001\136@\000@\0020$Z\000 \n\128\000\001\004\000\024\132\000\004\000#\002E\160\002\000\168\000\000\016@1\184@\002\193F\254$z|b\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\b\001\000\000\001\003\002\000\000\000\016\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\b\b\000\000\000\002\002\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\002\000\000\000\000\000\004\000\000@\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\004\000\000\016\000\128\000\000\000\000\000\000\b\000\024\000\002\000\000\003\011\132\000\002\000\000\002\000\000\000\001\136@\000@\0020$Z\000 \n\128\000\001\020\000\024\132\000\004\000#\002E\160\002\000\168\000\000\016@\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000$\000\128\000A\000\164 \000\"\000\024\000\000 \000\002@\000\000\004\016\nB\000\002\000\001\128\000\002\000\000 \000\000\000\000\016\004 \024\000\000\000\000\016\000\000\002\000\000\000\000\001\000B\000\128\000\000\000\001\000\000\000$\000\128\000A\000\164 \000 \000\024\000\000 \000\002@\bn\000\000\001\004\000\024\132\000\004\000#\002E\160\002\000\160\000\000\016@\001\136@\000@\0020$Z\000 \n\128\000\001\004\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\024\132\000\004\000#\002E\160\002\000\160\000\000\016@\001\138@\bH\0020$V\000 \n\000\000\001\004\000\b\164\000\160\132\003\002G`\000\000\160\020\000\024\192\000\128\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\002@\b\000\004\016\000B\000\002\000\001\144\000\002\000\003?\132\128,Uo\230g\160(\015\185\020\0008\224\000\128\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\128\000\000\000\002\000\004\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000 \000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\024\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\024\000\002\128\128\003\011\132\000\002\000\000\000\000\000\000\001\138@\bH\n0$V\000 \n\000\000\005\004\000\024\164\000\132\128#\002E`\002\000\164\000\002P@\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\136\000\000\000\000 \000@\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\0001\184@\002\193F\254$z\000\128\250\001@\001\142\000\000@\000\000\000\000\000\000\000\000\000\000 \000\000\000\001\128\000(\b\0000\184@\000 \000\000\000\000\000\000\b\128\000\000\000\002\000\004\000\000\000 \000\000\001\000\001\128\000 \000\0000\184P\000 \000\000\000\000\000\000\024\000\002\128\128\003\011\132\000\002\000\000\000\000\000\000\000\136\000\000\000\000 \000@\000\000\002\000\000\000\000\000\b\128\000\000\000\002\000\004\000\000\000 \000\000\000\000\000\000@\000\000\000\000\000\002\000\000\b\000\000\001\000\000\b\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\024\000\002\128\144\003+\132\000\002\000\000\000\000\000\000\000\128\000\000\001\0000\000@\000\000\000\000\000\000\000\000\b\000\000\000\016\001\"\004\000\000\000\000\000\000\000\000\002\000\000\000\000\001\000B\000\128\000\000\000\001\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\001\138@\bH\0020$V\000 \n\000\000\001\004\000\024\164\000\132\128#\002E`\002\000\164\000\000P@\002\000\000\000\000\001\000B\001\128\000\000\000\001\000\000\000\b\000\000\000\016\003\"\004\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\005\237\217\016A\127\021 \000\1528\0298\224\176(4\001\128\000 \000\0000\184@\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\001\128\000(\b\0000\184@\000 \000\000\000\000\000\000\000\000\000\012\000\000\000\000\000\000\000\000\000\000\000\000")
    
  end) (ET) (TI)
  
end

let use_file =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry 3194 lexer lexbuf) : (
# 677 "parser_raw.mly"
      (Parsetree.toplevel_phrase list)
# 51577 "parser_raw.ml"
    ))

and toplevel_phrase =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry 3173 lexer lexbuf) : (
# 675 "parser_raw.mly"
      (Parsetree.toplevel_phrase)
# 51585 "parser_raw.ml"
    ))

and parse_pattern =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry 3169 lexer lexbuf) : (
# 683 "parser_raw.mly"
      (Parsetree.pattern)
# 51593 "parser_raw.ml"
    ))

and parse_expression =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry 3165 lexer lexbuf) : (
# 681 "parser_raw.mly"
      (Parsetree.expression)
# 51601 "parser_raw.ml"
    ))

and parse_core_type =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry 3161 lexer lexbuf) : (
# 679 "parser_raw.mly"
      (Parsetree.core_type)
# 51609 "parser_raw.ml"
    ))

and interface =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry 3157 lexer lexbuf) : (
# 673 "parser_raw.mly"
      (Parsetree.signature)
# 51617 "parser_raw.ml"
    ))

and implementation =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry 0 lexer lexbuf) : (
# 671 "parser_raw.mly"
      (Parsetree.structure)
# 51625 "parser_raw.ml"
    ))

module Incremental = struct
  
  let use_file =
    fun initial_position ->
      (Obj.magic (MenhirInterpreter.start 3194 initial_position) : (
# 677 "parser_raw.mly"
      (Parsetree.toplevel_phrase list)
# 51635 "parser_raw.ml"
      ) MenhirInterpreter.checkpoint)
  
  and toplevel_phrase =
    fun initial_position ->
      (Obj.magic (MenhirInterpreter.start 3173 initial_position) : (
# 675 "parser_raw.mly"
      (Parsetree.toplevel_phrase)
# 51643 "parser_raw.ml"
      ) MenhirInterpreter.checkpoint)
  
  and parse_pattern =
    fun initial_position ->
      (Obj.magic (MenhirInterpreter.start 3169 initial_position) : (
# 683 "parser_raw.mly"
      (Parsetree.pattern)
# 51651 "parser_raw.ml"
      ) MenhirInterpreter.checkpoint)
  
  and parse_expression =
    fun initial_position ->
      (Obj.magic (MenhirInterpreter.start 3165 initial_position) : (
# 681 "parser_raw.mly"
      (Parsetree.expression)
# 51659 "parser_raw.ml"
      ) MenhirInterpreter.checkpoint)
  
  and parse_core_type =
    fun initial_position ->
      (Obj.magic (MenhirInterpreter.start 3161 initial_position) : (
# 679 "parser_raw.mly"
      (Parsetree.core_type)
# 51667 "parser_raw.ml"
      ) MenhirInterpreter.checkpoint)
  
  and interface =
    fun initial_position ->
      (Obj.magic (MenhirInterpreter.start 3157 initial_position) : (
# 673 "parser_raw.mly"
      (Parsetree.signature)
# 51675 "parser_raw.ml"
      ) MenhirInterpreter.checkpoint)
  
  and implementation =
    fun initial_position ->
      (Obj.magic (MenhirInterpreter.start 0 initial_position) : (
# 671 "parser_raw.mly"
      (Parsetree.structure)
# 51683 "parser_raw.ml"
      ) MenhirInterpreter.checkpoint)
  
end

# 3448 "parser_raw.mly"
  

# 51691 "parser_raw.ml"

# 269 "/usr/local/home/trefis/opam2/ocaml-variants.4.08.0+beta1/lib/menhir/standard.mly"
  

# 51696 "parser_raw.ml"
